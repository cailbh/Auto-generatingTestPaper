[
    {
        "sortId": 0,
        "id": "1701115978840051712",
        "title": "C01-04输入一个矩形的长和宽，求出周长及面积，并将结果小数点后保留2位输出。(20分)",
        "content": "输入一个矩形的长和宽，求出周长及面积，并将结果小数点后保留2位输出。\n\n### 输入格式:\n\n在用scanf函数输入数据之前，要输出如下提示性语句：\n\n```\n请依次输入长和宽:\n```\n\n### 输出格式:\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1.25 2.25\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n请依次输入长和宽:\nlength=7.00,area=2.81\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习使用scanf函数进行输入，printf函数进行输出'}, {'name': '变量定义和赋值', 'description': '学习如何定义变量和给变量赋值'}, {'name': '数据类型', 'description': '学习不同的数据类型，如浮点型、整型等'}, {'name': '运算符', 'description': '学习如何使用运算符进行数学运算'}, {'name': '格式化输出', 'description': '学习如何使用printf函数进行格式化输出'}, {'name': '小数点保留', 'description': '学习如何保留小数点后指定位数的方法'}]"
    },
    {
        "sortId": 1,
        "id": "1697260400746143744",
        "title": "计算4个整数的平均值",
        "content": "从键盘读入4个整数，输出平均值。\n\n小贴士：所有符号是中文状态，Average中A是大写 ，除号不要写反了，/和\\\\是不一样的。\n\n### 输入格式:\n\n10  20  30  25\n\n### 输出格式:\n\nAverage为(10+20+30+25)/4=21.25\n\n小数点保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10  20  30  25\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nAverage为(10+20+30+25)/4=21.25\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用scanf函数从键盘读入数据，并使用printf函数输出结果。'}, {'name':'变量和运算符','description':'学习如何定义变量来存储数据，并使用算术运算符进行计算。'}, {'name':'数据类型','description':'学习不同的数据类型，如整型和浮点型，以及如何进行类型转换。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'格式化输出','description':'学习如何使用格式化字符串来控制输出的格式，如保留小数点后两位。'}]"
    },
    {
        "sortId": 2,
        "id": "1696164001639981056",
        "title": "打三次招呼",
        "content": "请输出三行“Hello, World!”，请注意World的前面有一个空格。\n\n**有趣的尝试：**\n\n1. 你能用两种方法来实现题目要求吗？\n\n2. 试试World的前面不打空格，看提交结果是什么。\n\n```in\n```\n\n### 输出样例:\n\n```out\nHello, World!\nHello, World!\nHello, World!\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'使用printf函数输出指定的字符串'}]"
    },
    {
        "sortId": 3,
        "id": "1674342761770119168",
        "title": "加油??",
        "content": "本题目要求输出加油五行。\n\n### 输入格式:\n\n无\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n加油\n加油\n加油\n加油\n加油\n```\n\n```in   \n1 1   \n```   \n```out   \n2   \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。在本题中，可以使用循环结构来重复输出“加油”五行。'}]"
    },
    {
        "sortId": 4,
        "id": "1665207293866393600",
        "title": "双精度实数 double 类型的字长",
        "content": "双精度实数 double 类型的变量占用 ▁▁▁▁▁ 字节内存空间。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'double类型变量的内存空间', 'description':'double类型的变量在内存中占用的字节空间'}]"
    },
    {
        "sortId": 5,
        "id": "1665206977095790592",
        "title": "单精度实数 float 类型的字长",
        "content": "单精度实数 float 类型的变量占用 ▁▁▁▁▁ 字节内存空间。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括整型、浮点型、字符型等，其中单精度实数类型float占用4个字节的内存空间。'}]"
    },
    {
        "sortId": 6,
        "id": "1665205580887474176",
        "title": "字符 char 类型的字长",
        "content": "字符 char 类型的变量占用 ▁▁▁▁▁ 字节内存空间。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{\"name\": \"字符类型变量的内存空间\", \"description\": \"字符 char 类型的变量占用 1 字节内存空间。\"}]"
    },
    {
        "sortId": 7,
        "id": "1665201601189240832",
        "title": "特长整数 long long int 类型的字长",
        "content": "特长短整数 long long int 类型的变量占用 ▁▁▁▁▁ 字节内存空间。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型变量占用内存空间', 'description':'字符 char 类型的变量占用 1 字节内存空间。'}, {'name':'单精度实数类型变量占用内存空间', 'description':'单精度实数 float 类型的变量占用 4 字节内存空间。'}, {'name':'双精度实数类型变量占用内存空间', 'description':'双精度实数 double 类型的变量占用 8 字节内存空间。'}, {'name':'特长短整数类型变量占用内存空间', 'description':'特长短整数 long long int 类型的变量占用 8 字节内存空间。'}]"
    },
    {
        "sortId": 8,
        "id": "1665200925881122816",
        "title": "长整数 long int 类型的字长",
        "content": "长整数 long int 类型的变量占用 ▁▁▁▁▁ 字节内存空间。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{\"name\": \"长整数类型\", \"description\": \"长整数类型long int在C语言中用于表示较大范围的整数，占用的字节内存空间取决于具体的编译器和操作系统。通常情况下，long int类型占用4个字节内存空间，即32位。但在某些编译器和操作系统中，long int类型可能占用8个字节内存空间，即64位。使用long int类型可以存储更大范围的整数值，但需要注意不同平台上的兼容性问题。\"}]"
    },
    {
        "sortId": 9,
        "id": "1654672277193261056",
        "title": "找出输入序列中的最大数及其输入顺序号",
        "content": "下面的程序是从键盘输入n个整数找出其中最大数及其输入顺序号（输入顺序的起始编号从0开始）。请将程序中缺失的表达式或者语句填上。\n\n```c++\n#include <stdio.h>\nint main()\n{\n    int i,j,n,a,max;\n    scanf(\"%d\",&n);//输入整数的个数\n    scanf(\"%d\",&a);\n    ;//确定首次遇到的最大数；\n    j=;//确定首次遇到的最大数的序号；\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d\",&a);\n        if()//判断当前数是否大于最大数\n        {\n           ;//将当前数设为最大数\n\n           ;//记录最大数的输入序号\n        }\n    }\n    printf(\"Max=%d j=%d\\n\",max,j);//输出最大数及其序号\n    return 0;\n}\n```",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数的使用'，'description':'scanf函数用于从标准输入读取数据，可以根据指定的格式将输入的数据赋值给变量。在这个程序中，使用scanf函数读取整数的个数和每个整数的值。'}, {'name':'变量的声明和赋值'，'description':'在程序中，使用int类型的变量i、j、n、a和max来存储数据。通过赋值语句将输入的值赋给相应的变量。'}, {'name':'for循环的使用'，'description':'for循环用于重复执行一段代码，这里用于读取n个整数并找出最大数及其序号。循环变量i从1开始，每次循环读取一个整数并与当前最大数进行比较。'}, {'name':'条件判断语句的使用'，'description':'在循环中使用if语句判断当前读取的整数是否大于最大数，如果是，则更新最大数和序号。'}, {'name':'printf函数的使用'，'description':'printf函数用于将结果输出到标准输出。在这个程序中，使用printf函数输出最大数及其序号。'}]"
    },
    {
        "sortId": 10,
        "id": "1652935463545757696",
        "title": "欢迎加入程序设计协会",
        "content": "贵州工程应用技术学院创建于1938年，历经贵州省立毕节师范学校、毕节半耕半读师范学校、毕节师范专科学校等时期。1993年，教育部定名为毕节师范高等专科学校。2005年3月，毕节师范高等专科学校与毕节教育学院合并组建毕节学院，成为全日制普通本科高等学校。2014年5月，经教育部批准，毕节学院更名为贵州工程应用技术学院。 贵州工程应用技术学院秉承“艰苦创业、不断进取”的办学精神，坚持以兴学育人为根本，以培养服务工业化、城镇化建设等需要的一线工程师和服务基础教育需要的一线教师为目标，立足毕节、服务贵州、面向全国，不断深化产教融合、校企合作，深化教学改革、提升教学质量和办学水平，努力建设特色鲜明的高水平应用技术大学，为实现贵州与全国同步全面建成小康社会作出更大贡献。\n\n计算机科学与技术专业业在贵州省本科高校本科专业评估中获得第三名的好成绩，随着每年新生的到来，为了活跃计算机竞技氛围，以及用程序设计解决实际问题，特此举办本次竞赛。此次竞赛面向全校在校大学生，旨在提升我校的程序设计能力，培养学生思维能力、创新能力、实践能力，增强我校学科竞赛氛围。 为促进四能型人才“能编程、能设计、能沟通、能创新”而举办这个程序设计竞赛。\n\n此次比赛由贵州工程应用技术学院大学生程序设计协会（简称CPA协会， 成立于2019年6月。我们的理念是给每一位爱好编程者提供平台;对外:我们将外面的资源引入校园，给每一位爱好者提供丰富的资源。对内:创建我校的程序设计文化，让程序的符文撒满校园，给每一位爱好者增加信心，坚信代码可以使未来更加美好。欢迎加入CPA协会，协会QQ群号：910364116）举办这次程序设计迎新赛校赛，希望大家玩的开心！\n\n### 输入格式:\n\n无\n\n### 输出格式:\n\n看样例\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例：\n\n```out\n感谢党和国家，感谢爸爸妈妈，让我们能安心学习！\n欢迎加入CPA协会！大家一起为了“梦想”而加油！\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '程序设计竞赛', 'description': '本题目是贵州工程应用技术学院举办的程序设计竞赛的介绍，旨在提升学生的程序设计能力，培养学生的思维能力、创新能力和实践能力，增强学校的学科竞赛氛围。'}, {'name': '贵州工程应用技术学院', 'description': '本题目是对贵州工程应用技术学院的介绍，包括学院的历史背景、办学理念和目标，以及计算机科学与技术专业在本科专业评估中的成绩。'}, {'name': 'CPA协会', 'description': '本题目是对贵州工程应用技术学院大学生程序设计协会的介绍，包括协会的成立时间、理念和宗旨，以及欢迎加入协会的邀请。'}]"
    },
    {
        "sortId": 11,
        "id": "1645702524940447744",
        "title": "什么是机器学习",
        "content": "![ml.jpg](~/8baadf44-967e-43ca-8dfc-0d83bab4a3d4.jpg)\n\n什么是机器学习？上图展示了一段面试官与“机器学习程序”的对话：\n```\n面试官：9 + 10 等于多少？\n答：3\n面试官：差远了，是19。\n答：16\n面试官：错了，是19。\n答：18\n面试官：不，是19。\n答：19\n```\n本题就请你模仿这个“机器学习程序”的行为。\n### 输入格式：\n输入在一行中给出两个整数，绝对值都不超过 100，中间用一个空格分开，分别表示面试官给出的两个数字 A 和 B。\n### 输出格式：\n要求你输出 4 行，每行一个数字。第 1 行比正确结果少 16，第 2 行少 3，第 3 行少 1，最后一行才输出 A+B 的正确结果。\n### 输入样例：\n```in\n9 10\n```\n### 输出样例：\n```out\n3\n16\n18\n19\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本运算','description':'学习基本的加法运算和输出结果的方法。'}, {'name':'变量赋值','description':'学习如何将输入的值赋给变量。'}, {'name':'输出结果','description':'学习如何输出结果，并掌握格式化输出的方法。'}, {'name':'逻辑判断','description':'学习如何根据条件进行逻辑判断，并执行相应的操作。'}]"
    },{
        "sortId": 12,
        "id": "1645701396311953408",
        "title": "最好的文档",
        "content": "有一位软件工程师说过一句很有道理的话：“Good code is its own best documentation.”（好代码本身就是最好的文档）。本题就请你直接在屏幕上输出这句话。\n### 输入格式：\n本题没有输入。\n### 输出格式：\n在一行中输出 `Good code is its own best documentation.`。\n### 输入样例：\n```in\n无\n```\n### 输出样例：\n```out\nGood code is its own best documentation.\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'使用printf函数在屏幕上输出指定的字符串。'}]"
    },

    {
        "sortId": 13,
        "id": "1642755917625843712",
        "title": "输人“123<空格>456<空格>789<回车>”, 程序的输出结果是 ____ 。",
        "content": "下列程序运行时输人“123<空格>456<空格>789<回车>”, 则输出结果是()。\\\nint main(void)\\\n{ \n\nchar s\\[100\\]; \n\nint c, i;\\\nscanf(\"% c \", &c); \n\nscanf(\"%d \" ,&i);\n\nscanf(\"%s \", s);\\\nprintf(\"%c ,%d,%s\\\\n\" ,c, i, s);\\\nreturn 0;\n\n }",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出函数', 'description': '教学内容包括scanf和printf函数的使用，以及格式化字符串的控制'}, {'name': '变量声明和赋值', 'description': '教学内容包括变量的声明和赋值操作'}, {'name': '字符类型', 'description': '教学内容包括字符类型的定义和使用'}, {'name': '整数类型', 'description': '教学内容包括整数类型的定义和使用'}, {'name': '字符串类型', 'description': '教学内容包括字符串类型的定义和使用'}]"
    },
    {
        "sortId": 14,
        "id": "1639545267047006208",
        "title": "先乘除，后加减",
        "content": "小学生小明在学习“先乘除，后加减”的时候走神了，于是看到`A+B×C`的时候就会错误地计算`(A+B)×C`。请编程对比错误结果和正确结果，以便纠正小明的错误认识。\n\n### 输入格式:\n\n读入3个整数A、B、C，绝对值不超过1000。\n\n### 输出格式:\n\n对每一组输入，在一行中先输出`(A+B)×C`，再输出`A+B×C`。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 2 3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n9 7\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级决定了表达式中各个运算符的计算顺序。在C语言中，乘法和除法的优先级高于加法和减法，因此在计算表达式时会先进行乘法和除法运算。'}, {'name': '算术运算符', 'description': '算术运算符用于进行数值计算，包括加法、减法、乘法和除法等。在本题中，需要使用加法、乘法和括号运算符来计算表达式。'}, {'name': '变量', 'description': '变量是存储数据的一种方式，可以在程序中使用变量来存储和操作数据。在本题中，需要使用变量来存储输入的整数值。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在本题中，需要使用输入函数和输出函数来读取输入数据和输出结果。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断小明的错误结果和正确结果是否相等。'}]"
    },
    {
        "sortId": 15,
        "id": "1639463194797969408",
        "title": "把PI保留3位小数输出的语句中错误的是",
        "content": "有语句如下：\n\nconst double PI=3.1415926;\n\n则把PI保留3位小数输出的语句错误的是（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'常量的定义和使用'，'description':'常量是指在程序运行过程中其值不会发生改变的量，可以使用const关键字来定义常量。常量的值在定义时就确定了，不能再改变。'}]"
    },
    {
        "sortId": 16,
        "id": "1639460214027743232",
        "title": "n为四位数，取其百位的表达式正确的是",
        "content": "n为四位数，取其百位的表达式正确的是（   ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'包括C语言的基本语法、数据类型、运算符、控制语句等基础知识点。'}, {'name':'数学运算','description':'涉及到四则运算、逻辑运算、位运算等数学运算知识点。'}, {'name':'条件语句','description':'涉及到if语句、switch语句等条件语句的使用和掌握。'}, {'name':'循环语句','description':'涉及到for循环、while循环、do-while循环等循环语句的使用和掌握。'}, {'name':'函数','description':'涉及到函数的定义、调用、参数传递、返回值等函数相关的知识点。'}, {'name':'数组','description':'涉及到数组的定义、初始化、访问、多维数组等数组相关的知识点。'}, {'name':'指针','description':'涉及到指针的定义、指针运算、指针与数组的关系等指针相关的知识点。'}, {'name':'字符串','description':'涉及到字符串的定义、字符串操作函数、字符串与字符数组的关系等字符串相关的知识点。'}, {'name':'结构体','description':'涉及到结构体的定义、结构体成员的访问、结构体数组等结构体相关的知识点。'}, {'name':'文件操作','description':'涉及到文件的打开、读写、关闭等文件操作相关的知识点。'}]"
    },
    {
        "sortId": 17,
        "id": "1639459528829464576",
        "title": "已知'a'的ASCII码为97，则判断字符变量ch为小写字母的条件正确是",
        "content": "已知'a'的ASCII码为97，则判断字符变量ch为小写字母的条件正确是（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'ASCII码','description':'ASCII码是一种用于表示字符的标准编码系统，其中'a'的ASCII码为97。在C语言中，可以通过ASCII码来判断字符变量是否为小写字母。'}]"
    },
    {
        "sortId": 18,
        "id": "1639457735848398848",
        "title": "关于变量的值，以下说法错误的是",
        "content": "关于变量的值，以下说法错误的是（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量的值', 'description': '在C语言中，变量是用来存储数据的，它们可以保存不同类型的值，如整数、浮点数、字符等。变量的值可以通过赋值操作来改变，可以使用赋值运算符将一个值赋给一个变量。在C语言中，变量的值可以被读取和修改，但是在某些情况下，变量的值可能会发生错误，例如使用未初始化的变量、访问越界的数组元素等。'}]"
    },
    {
        "sortId": 19,
        "id": "1637335707214102529",
        "title": "若有定义“int a=7;float x=2.5,y=4.7;”，则表达式x+a%3*(int)(x+y)%2/4的值是：。",
        "content": "若有定义“int a=7;float x=2.5,y=4.7;”，则表达式x+a%3*(int)(x+y)%2/4的值是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念，用于定义变量的类型和范围。在C语言中，常见的数据类型包括整型、浮点型、字符型等。在本题中，涉及到了整型和浮点型的变量。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号。在本题中，涉及到了算术运算符（+、-、*、/、%）、赋值运算符（=）和类型转换运算符（int）。'}, {'name': '运算顺序', 'description': '运算顺序是指在表达式中各个运算符的执行顺序。在本题中，涉及到了运算符的优先级和结合性，需要根据运算符的优先级和结合性来确定表达式的值。'}, {'name': '类型转换', 'description': '类型转换是指将一个数据类型转换为另一个数据类型的过程。在本题中，涉及到了将浮点型转换为整型的类型转换操作。'}]"
    },
    {
        "sortId": 20,
        "id": "1637335707214102528",
        "title": "已有程序段和输入数据的形式如下，程序中输入语句的正确形式应当为：。",
        "content": "已有程序段和输入数据的形式如下，程序中输入语句的正确形式应当为：。\nmain()\n{int a;float f;\nprintf(\"\\nInput number:\");\n输入语句\nprintf(\"\\nf=%f,a=%d\\n\",f,a);}\nInput number：4.5   2<CR>",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出语句'，'description':'输入输出语句是C语言中常用的语句，用于从键盘获取输入数据并将结果输出到屏幕上。在程序中，可以使用printf函数进行输出，使用scanf函数进行输入。在本题中，需要使用scanf函数获取输入数据。'}，{'name':'变量声明和赋值'，'description':'变量声明和赋值是C语言中常用的操作，用于定义变量并给变量赋值。在本题中，需要声明int类型的变量a和float类型的变量f，并通过输入语句给变量赋值。'}]"
    },
    {
        "sortId": 21,
        "id": "1637335707209908224",
        "title": "有输入语句“scanf(a=%d,b=%d,c=%d\",&a,&b,&c;”，那么，为使变量a的值为1、b为3、c为2，则从键盘",
        "content": "有输入语句“scanf(a=%d,b=%d,c=%d\",&a,&b,&c;”，那么，为使变量a的值为1、b为3、c为2，则从键盘输入数据的正确形式应当是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出函数','description':'输入输出函数是C语言中用于从键盘读取输入和向屏幕输出的函数。其中，scanf函数用于从键盘读取输入，printf函数用于向屏幕输出。在本题中，要正确输入数据，需要使用scanf函数，并按照指定的格式输入数据。'}]"
    },
    {
        "sortId": 22,
        "id": "1637308200767139840",
        "title": "若希望当A的值为奇数时，表达式的值为“真”，A的值为偶数表达式的值为“假”，则以下不能满足要求的表达式是：。",
        "content": "若希望当A的值为奇数时，表达式的值为“真”，A的值为偶数表达式的值为“假”，则以下不能满足要求的表达式是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是if (条件) {代码块}，其中条件是一个表达式，如果条件为真，则执行代码块中的代码，否则跳过代码块。在本题中，需要根据A的值的奇偶性来确定表达式的值，可以使用if语句来实现。'}]"
    },
    {
        "sortId": 23,
        "id": "1637308200762945540",
        "title": "设x、y和z是int型变量，且x=3、y=4、z=5，则下面表达式中值为0的是：。",
        "content": "设x、y和z是int型变量，且x=3、y=4、z=5，则下面表达式中值为0的是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种数学和逻辑运算的符号。在表达式中使用运算符可以对变量和常量进行各种操作，包括算术运算、关系运算、逻辑运算等。本题中涉及到的知识点是关系运算符。'}, {'name':'关系运算符','description':'关系运算符用于比较两个值的大小关系，返回一个布尔值（true或false）。在C语言中常用的关系运算符有等于（==）、不等于（!=）、大于（>）、小于（<）、大于等于（>=）和小于等于（<=）。本题中涉及到的知识点是关系运算符的使用。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，返回一个布尔值（true或false）。在C语言中常用的逻辑运算符有与（&&）、或（||）和非（!）。本题中涉及到的知识点是逻辑运算符的使用。'}]"
    },
    {
        "sortId": 24,
        "id": "1637308200762945539",
        "title": "设有赋值语句“int a=1,b=2,c=3,d=4,m=2,n=2”,则执行(m=a>b)&&(n=c>d)后，n的值为：。",
        "content": "设有赋值语句“int a=1,b=2,c=3,d=4,m=2,n=2”,则执行(m=a>b)&&(n=c>d)后，n的值为：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值语句','description':'赋值语句用于将一个值赋给变量，可以使用等号（=）进行赋值操作。在这道题中，赋值语句“int a=1,b=2,c=3,d=4,m=2,n=2”将给变量a赋值为1，b赋值为2，c赋值为3，d赋值为4，m赋值为2，n赋值为2。'},\n{'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，常见的逻辑运算符有与（&&）、或（||）和非（!）。在这道题中，逻辑运算符“&&”用于判断条件(m=a>b)和(n=c>d)是否同时成立，只有当两个条件都成立时，整个表达式的值才为真。'},\n{'name':'条件判断','description':'条件判断用于根据条件的真假来执行不同的代码块。在这道题中，条件判断(m=a>b)&&(n=c>d)用于判断变量a是否大于变量b，并将结果赋给变量m；判断变量c是否大于变量d，并将结果赋给变量n。'},\n{'name':'布尔类型','description':'布尔类型是一种逻辑类型，只有两个取值：真（true）和假（false）。在这道题中，条件判断(m=a>b)&&(n=c>d)的结果将是一个布尔类型的值，即真或假。'},\n{'name':'变量','description':'变量是用于存储数据的内存位置，可以通过变量名来访问和操作存储在内存中的数据。在这道题中，变量a、b、c、d、m和n分别用于存储整数类型的数据。'},\n{'name':'比较运算符','description':'比较运算符用于比较两个值的大小关系，常见的比较运算符有大于（>）、小于（<）、等于（==）、大于等于（>=）、小于等于（<=）和不等于（!=）。在这道题中，比较运算符“>”用于判断变量a是否大于变量b，“>”运算符的结果将是一个布尔类型的值，即真或假。'},\n{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，赋值运算符“=”的优先级较低，逻辑运算符“&&”的优先级较高，所以先执行条件判断(m=a>b)&&(n=c>d)，再将结果赋给变量n。'}]"
    },
    {
        "sortId": 25,
        "id": "1637308200762945538",
        "title": "判断char型变量ch是否为大写字母的正确表达式是：。",
        "content": "判断char型变量ch是否为大写字母的正确表达式是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'char型变量的判断','description':'判断char型变量是否为大写字母的表达式'}]"
    },
    {
        "sortId": 26,
        "id": "1637308200762945537",
        "title": "下列运算符中优先级最高的是：。",
        "content": "下列运算符中优先级最高的是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，运算符优先级最高的是括号运算符()，它可以改变表达式中的运算顺序。括号内的表达式会先被计算，然后再进行其他运算。'}]"
    },
    {
        "sortId": 27,
        "id": "1637308200762945536",
        "title": "以下能正确地定义整型变量a、b和c，并为其赋初值5的语句是：。",
        "content": "以下能正确地定义整型变量a、b和c，并为其赋初值5的语句是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和赋值'，'description':'变量定义和赋值是C语言程序设计中的基础知识点。在C语言中，可以使用关键字int来定义整型变量，并使用赋值运算符=为变量赋初值。'}]"
    },
    {
        "sortId": 28,
        "id": "1637308200758751236",
        "title": "若x、i、j和k都是int型变量，则执行表达式x=(i=4,j=16,k=32)后，x的值为：。",
        "content": "若x、i、j和k都是int型变量，则执行表达式x=(i=4,j=16,k=32)后，x的值为：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符使用等号（=）表示。执行表达式x=(i=4,j=16,k=32)后，变量i被赋值为4，变量j被赋值为16，变量k被赋值为32，最后将k的值赋给x，因此x的值为32。'}]"
    },
    {
        "sortId": 29,
        "id": "1637308200758751235",
        "title": "假设所有变量均为整数，则表达式(a=2,b=5,b++,a+b)的值是：。",
        "content": "假设所有变量均为整数，则表达式(a=2,b=5,b++,a+b)的值是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量赋值', 'description': '变量赋值是C语言中最基本的操作之一，通过赋值语句可以将一个值赋给一个变量。在表达式(a=2,b=5,b++,a+b)中，a被赋值为2，b被赋值为5，然后b自增1，最后计算a+b的值。'}, {'name': '运算符优先级', 'description': 'C语言中的运算符有不同的优先级，优先级高的运算符先于优先级低的运算符进行计算。在表达式(a=2,b=5,b++,a+b)中，先进行赋值操作，然后是自增操作，最后是加法操作。'}, {'name': '表达式求值', 'description': 'C语言中的表达式由运算符和操作数组成，通过运算符的组合和操作数的计算得到一个结果。在表达式(a=2,b=5,b++,a+b)中，先计算a=2和b=5的赋值操作，然后计算b++的自增操作，最后计算a+b的加法操作。'}]"
    },
    {
        "sortId": 30,
        "id": "1637308200758751234",
        "title": "设以下变量均为int类型，则值不等于7的表达式是：。",
        "content": "设以下变量均为int类型，则值不等于7的表达式是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种数学和逻辑运算的符号，包括算术运算符、关系运算符、逻辑运算符等。在本题中，需要了解算术运算符和关系运算符的使用，以及如何通过运算符来比较变量的值。'}, {'name':'条件语句','description':'条件语句是C语言中用于根据条件判断来执行不同代码块的结构。在本题中，需要了解如何使用条件语句来判断变量的值是否等于7，并执行相应的代码块。'}, {'name':'逻辑运算符','description':'逻辑运算符是C语言中用于进行逻辑运算的符号，包括与运算、或运算、非运算等。在本题中，需要了解如何使用逻辑运算符来组合多个条件判断，以得到不等于7的表达式。'}]"
    },
    {
        "sortId": 31,
        "id": "1637308200758751233",
        "title": "以下表达式值为3的是：。",
        "content": "以下表达式值为3的是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级'，'description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，学生需要了解各个运算符的优先级，以确定哪个表达式的值为3。'}]"
    },
    {
        "sortId": 32,
        "id": "1637308200758751232",
        "title": "下面不正确的字符串常量是：。",
        "content": "下面不正确的字符串常量是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符串常量', 'description': '字符串常量是由双引号括起来的字符序列，可以包含任意字符，包括转义字符。正确的字符串常量应该是由双引号括起来的字符序列，而不是单引号或没有引号。'}]"
    },
    {
        "sortId": 33,
        "id": "1637308200750362624",
        "title": "下面正确的字符常量是：。",
        "content": "下面正确的字符常量是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符常量', 'description': '字符常量是由单引号括起来的一个字符，可以是字母、数字、特殊字符等。在C语言中，字符常量必须用单引号括起来，例如\\'a\\'、\\'1\\'、\\'$\\'等。'}]"
    },
    {
        "sortId": 34,
        "id": "1637307786839666688",
        "title": "判断char型变量c1是否为小写字母的正确表达式是：。",
        "content": "判断char型变量c1是否为小写字母的正确表达式是：。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'char型变量的判断','description':'判断char型变量是否为小写字母的表达式'}]"
    },
    {
        "sortId": 35,
        "id": "1637290482995249152",
        "title": "以下选项中合法的用户标识符是：",
        "content": "以下选项中合法的用户标识符是：",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'合法的用户标识符','description':'用户标识符是用来命名变量、函数等的名称，合法的用户标识符必须满足以下规则：1. 以字母或下划线开头；2. 只能包含字母、数字和下划线；3. 区分大小写。'}]"
    },
    {
        "sortId": 36,
        "id": "1637288901662945280",
        "title": "下列不合法的用户标识符是：",
        "content": "下列不合法的用户标识符是：",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符命名规则'，'description':'标识符是用来给变量、函数、数组等命名的，它必须遵循一定的命名规则。在C语言中，标识符必须以字母或下划线开头，后面可以是字母、数字或下划线。不合法的用户标识符可能包括以数字开头的标识符、包含特殊字符的标识符等。'}]"
    },
    {
        "sortId": 37,
        "id": "1633780442971332608",
        "title": "球的体积",
        "content": "一个半径为 $r$ 的球的体积是 $V = \\dfrac{4}{3} \\pi r^3$。\n\n输入一个非负整数表示球的半径 $r$，编程计算该球的体积 $V$，其中 $\\pi$ 取 $3.14159$。\n\n### 输入格式:\n\n一个非负整数 $r$ ($r \\le 100$)。\n\n### 输出格式:\n\n球的体积，结果保留小数点后两位。\n\n### 输入样例:\n\n```in\n10\n```\n\n### 输出样例:\n\n```out\n4188.79\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是计算机内存中的一块存储空间，用于存储数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用scanf函数从标准输入读取数据，使用printf函数将结果输出到标准输出。'}, {'name': '运算符', 'description': '运算符是用于进行数学和逻辑运算的符号。在C语言中，常见的运算符有算术运算符（如加减乘除）、赋值运算符、比较运算符和逻辑运算符等。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，用于指定变量可以存储的数据的类型和范围。在C语言中，常见的数据类型有整型、浮点型、字符型和指针型等。'}, {'name': '控制结构', 'description': '控制结构用于控制程序的执行流程，包括顺序结构、选择结构和循环结构。在C语言中，可以使用if语句和switch语句进行条件判断，使用for循环和while循环进行循环操作。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以重复使用。在C语言中，可以使用函数来封装一段代码，提高代码的复用性和可读性。'}, {'name': '数学库函数', 'description': '数学库函数是C语言提供的一些用于数学计算的函数，如求平方根、求绝对值、求三角函数等。在C语言中，可以使用#include <math.h>来引入数学库函数。'}, {'name': '常量', 'description': '常量是程序中固定不变的值，可以直接使用。在C语言中，常见的常量有整型常量、浮点型常量和字符常量等。'}, {'name': '运算表达式', 'description': '运算表达式是由运算符和操作数组成的表达式，用于进行数学和逻辑运算。在C语言中，可以使用运算表达式来进行各种计算操作。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的数据结构。在C语言中，可以使用数组来存储一组数据，通过下标访问数组中的元素。'}, {'name': '循环结构', 'description': '循环结构用于重复执行一段代码，直到满足某个条件为止。在C语言中，常见的循环结构有for循环、while循环和do-while循环。'}, {'name': '条件判断', 'description': '条件判断用于根据条件的真假来执行不同的代码。在C语言中，可以使用if语句和switch语句进行条件判断。'}, {'name': '浮点数运算', 'description': '浮点数运算是指对浮点数进行数学运算的过程。在C语言中，可以使用浮点数运算符进行浮点数的加减乘除等运算。'}, {'name': '输出格式控制', 'description': '输出格式控制用于控制输出结果的格式，包括输出的精度、宽度和对齐方式等。在C语言中，可以使用printf函数的格式控制符来控制输出结果的格式。'}, {'name': '输入格式控制', 'description': '输入格式控制用于控制输入数据的格式，包括输入的精度、宽度和数据类型等。在C语言中，可以使用scanf函数的格式控制符来控制输入数据的格式。'}, {'name': '运算优先级', 'description': '运算优先级用于确定运算表达式中各个运算符的执行顺序。在C语言中，可以使用括号来改变运算符的优先级。'}, {'name': '逻辑运算', 'description': '逻辑运算是指对逻辑值进行运算的过程。在C语言中，可以使用逻辑运算符进行逻辑与、逻辑或和逻辑非等运算。'}, {'name': '条件运算符', 'description': '条件运算符是一种特殊的运算符，用于根据条件的真假来选择不同的值。在C语言中，条件运算符的格式为：表达式1 ? 表达式2 : 表达式3。'}, {'name': '类型转换', 'description': '类型转换是指将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符来进行类型转换。'}, {'name': '循环控制', 'description': '循环控制用于控制循环的执行流程，包括跳出循环和继续循环等操作。在C语言中，可以使用break语句和continue语句来控制循环的执行。'}, {'name': '常用库函数', 'description': '常用库函数是C语言提供的一些常用函数，如字符串处理函数、文件操作函数等。在C语言中，可以使用#include <string.h>来引入常用库函数。'}, {'name': '字符处理', 'description': '字符处理是指对字符进行操作和处理的过程。在C语言中，可以使用字符处理函数来进行字符的输入、输出和处理。'}, {'name': '指针', 'description': '指针是存储内存地址的变量，用于访问和操作内存中的数据。在C语言中，可以使用指针来进行动态内存分配和数据传递等操作。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行操作和处理的过程。在C语言中，可以使用字符串处理函数来进行字符串的输入、输出和处理。'}, {'name': '文件操作', 'description': '文件操作是指对文件进行读写和管理的过程。在C语言中，可以使用文件操作函数来打开、关闭、读取和写入文件。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，用于存储多个不同类型的数据。在C语言中，可以使用结构体来组织和管理复杂的数据。'}, {'name': '指针运算', 'description': '指针运算是指对指针进行数学和逻辑运算的过程。在C语言中，可以使用指针运算符进行指针的加减和比较等运算。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行过程中根据需要分配和释放内存的过程。在C语言中，可以使用malloc函数和free函数来进行动态内存分配和释放。'}, {'name': '递归', 'description': '递归是指一个函数调用自身的过程。在C语言中，可以使用递归来解决一些需要重复执行的问题。'}, {'name': '文件读写', 'description': '文件读写是指对文件进行读取和写入操作的过程。在C语言中，可以使用文件操作函数来读取和写入文件中的数据。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏和进行条件编译等操作。'}, {'name': '位运算', 'description': '位运算是指对二进制位进行操作的运算。在C语言中，可以使用位运算符进行位与、位或和位异或等运算。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素是指针。在C语言中，可以使用指针数组来存储一组指针，通过下标访问指针数组中的元素。'}, {'name': '多维数组', 'description': '多维数组是一种数组，其中的元素也是数组。在C语言中，可以使用多维数组来存储多维数据，通过多个下标访问多维数组中的元素。'}, {'name': '字符串数组', 'description': '字符串数组是一种数组，其中的元素是字符串。在C语言中，可以使用字符串数组来存储一组字符串，通过下标访问字符串数组中的元素。'}, {'name': '结构体数组', 'description': '结构体数组是一种数组，其中的元素是结构体。在C语言中，可以使用结构体数组来存储一组结构体，通过下标访问结构体数组中的元素。'}, {'name': '指针函数', 'description': '指针函数是一种函数，其返回值是指针。在C语言中，可以使用指针函数来返回指针类型的数据。'}, {'name': '函数指针', 'description': '函数指针是一种指针，指向函数的地址。在C语言中，可以使用函数指针来调用函数和传递函数作为参数。'}, {'name': '递归函数', 'description': '递归函数是一个调用自身的函数。在C语言中，可以使用递归函数来解决一些需要重复执行的问题。'}, {'name': '指针参数', 'description': '指针参数是指函数的参数是指针类型的数据。在C语言中，可以使用指针参数来传递指针类型的数据。'}, {'name': '结构体指针', 'description': '结构体指针是指指向结构体的指针。在C语言中，可以使用结构体指针来访问和操作结构体中的成员。'}, {'name': '链表', 'description': '链表是一种动态数据结构，用于存储和管理数据。在C语言中，可以使用链表来实现各种数据结构和算法。'}, {'name': '文件指针', 'description': '文件指针是指指向文件的指针。在C语言中，可以使用文件指针来进行文件的读写和管理操作。'}, {'name': '文件打开', 'description': '文件打开是指打开一个文件以进行读写操作的过程。在C语言中，可以使用fopen函数来打开一个文件。'}, {'name': '文件关闭', 'description': '文件关闭是指关闭一个已打开的文件的过程。在C语言中，可以使用fclose函数来关闭一个文件。'}, {'name': '文件读取', 'description': '文件读取是指从文件中读取数据的过程。在C语言中，可以使用fread函数和fgets函数来从文件中读取数据。'}, {'name': '文件写入', 'description': '文件写入是指向文件中写入数据的过程。在C语言中，可以使用fwrite函数和fputs函数来向文件中写入数据。'}, {'name': '文件定位', 'description': '文件定位是指在文件中定位到指定位置的过程。在C语言中，可以使用fseek函数和ftell函数来进行文件的定位操作。'}, {'name': '文件删除', 'description': '文件删除是指删除一个已存在的文件的过程。在C语言中，可以使用remove函数来删除一个文件。'}, {'name': '文件重命名', 'description': '文件重命名是指将一个已存在的文件重命名为另一个名称的过程。在C语言中，可以使用rename函数来重命名一个文件。'}, {'name': '文件复制', 'description': '文件复制是指将一个文件的内容复制到另一个文件的过程。在C语言中，可以使用fread函数和fwrite函数来进行文件的复制操作。'}, {'name': '文件目录', 'description': '文件目录是指存储文件的文件夹或目录。在C语言中，可以使用opendir函数和readdir函数来访问文件目录。'}, {'name': '文件属性', 'description': '文件属性是指文件的一些属性信息，如文件大小、创建时间和修改时间等。在C语言中，可以使用stat函数和lstat函数来获取文件的属性信息。'}, {'name': '文件权限', 'description': '文件权限是指文件的访问权限，包括读权限、写权限和执行权限等。在C语言中，可以使用chmod函数来设置文件的权限。'}, {'name': '文件链接', 'description': '文件链接是指将一个文件链接到另一个文件的过程。在C语言中，可以使用link函数和unlink函数来进行文件的链接和取消链接操作。'}, {'name': '文件管道', 'description': '文件管道是一种用于进程间通信的机制，可以通过文件进行数据的传输。在C语言中，可以使用pipe函数来创建文件管道。'}, {'name': '文件信号', 'description': '文件信号是一种用于进程间通信的机制，可以通过文件进行信号的传递。在C语言中，可以使用kill函数和signal函数来进行文件信号的发送和接收。'}, {'name': '文件锁定', 'description': '文件锁定是指对文件进行加锁以防止其他进程对文件的访问和修改。在C语言中，可以使用flock函数和fcntl函数来进行文件的锁定和解锁操作。'}, {'name': '文件共享', 'description': '文件共享是指多个进程共享同一个文件的内容。在C语言中，可以使用mmap函数和munmap函数来进行文件的共享和取消共享操作。'}, {'name': '文件映射', 'description': '文件映射是指将文件映射到内存中的过程。在C语言中，可以使用mmap函数和munmap函数来进行文件的映射和取消映射操作。'}, {'name': '文件流', 'description': '文件流是指对文件进行读写操作的流。在C语言中，可以使用FILE结构体和fopen函数来创建和操作文件流。'}, {'name': '文件缓冲', 'description': '文件缓冲是指对文件进行读写操作时使用的缓冲区。在C语言中，可以使用setbuf函数和setvbuf函数来设置文件的缓冲区。'}, {'name': '文件格式', 'description': '文件格式是指文件中数据的组织方式和存储格式。'}]"
    },
    {
        "sortId": 38,
        "id": "1631779753378275328",
        "title": "实数类型 - 2. 观察误差",
        "content": "请编写程序，输入实数 $$a$$、$$b$$ 和 $$c$$，计算 $$d = a + b - c$$，输出 $$d$$。\n\n#### 输入格式\n\n> $$a$$ $$b$$ $$c$$\n\n#### 输出格式\n\n> $$d$$\n\n要求：输出 20 位小数。\n\n#### 输入样例1\n\n```in\n2.1 1.6 3.7\n\n```\n\n#### 输出样例1\n\n```out\n0.00000000000000000000\n\n```\n\n#### 输入样例2\n\n```in\n0.2 0.1 0.3\n\n```\n\n#### 输出样例2\n\n```out\n0.00000000000000005551\n\n```\n\n#### 输入样例3\n\n```in\n2.9 2.3 5.2\n\n```\n\n#### 输出样例3\n\n```out\n-0.00000000000000088818\n\n```\n\n(1) 打开工程项目\n\n双击“Project.dev”打开工程项目。\n\n![示意图2.jpg](~/b929670c-8ae5-414d-bbf9-85c519970b06.jpg)\n\n(2) 修改主函数，对以上函数进行测试。\n\n将窗口左侧的项目视图切换到“项目管理”卡片(若看不到项目视图，则可点菜单“视图”，勾选“项目管理”)，然后点项目名称“Project”左侧的加号展开项目中的全部文件。\n\n![示意图3.jpg](~/df0b1e0d-850a-45d9-a361-9fc7a2898181.jpg)\n\n在项目视图中点击打开“main.c”文件，修改主函数，对以上函数进行测试。\n\n*main.c*\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    /* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n按 F12 键对整个项目所有源程序文件进行编译并连接。按 F10 键运行程序，查看运行结果是否正确。\n\n(3) 关闭工程项目，退出Dev-C++。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何使用C语言进行输入和输出操作，包括读取输入数据和输出结果。'}, {'name': '变量和数据类型', 'description': '学习C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '学习C语言中的运算符，包括算术运算符、赋值运算符、比较运算符等。'}, {'name': '表达式和语句', 'description': '学习C语言中的表达式和语句，包括赋值语句、条件语句、循环语句等。'}, {'name': '函数', 'description': '学习C语言中的函数，包括函数的定义、函数的调用、函数的参数传递等。'}, {'name': '数组', 'description': '学习C语言中的数组，包括数组的定义、数组的初始化、数组的访问等。'}, {'name': '指针', 'description': '学习C语言中的指针，包括指针的定义、指针的运算、指针的应用等。'}, {'name': '条件语句', 'description': '学习C语言中的条件语句，包括if语句、switch语句等。'}, {'name': '循环语句', 'description': '学习C语言中的循环语句，包括for循环、while循环、do-while循环等。'}, {'name': '浮点数运算', 'description': '学习C语言中的浮点数运算，包括浮点数的加减乘除、浮点数的精度等。'}, {'name': '格式化输出', 'description': '学习C语言中的格式化输出，包括printf函数的使用、格式控制符的应用等。'}, {'name': '编译和运行', 'description': '学习如何编译和运行C语言程序，包括使用编译器进行编译、使用解释器进行运行等。'}, {'name': '调试', 'description': '学习如何调试C语言程序，包括使用调试器进行单步调试、设置断点进行调试等。'}, {'name': '错误处理', 'description': '学习如何处理C语言程序中的错误，包括错误的检测、错误的处理等。'}, {'name': '程序设计', 'description': '学习C语言程序设计的基本思路和方法，包括问题分析、算法设计、程序实现等。'}, {'name': '编程规范', 'description': '学习C语言程序设计的编程规范，包括命名规则、缩进规则、注释规则等。'}, {'name': '调用库函数', 'description': '学习如何调用C语言库函数，包括数学库函数、字符串库函数、文件库函数等。'}, {'name': '文件操作', 'description': '学习C语言中的文件操作，包括文件的打开、文件的读写、文件的关闭等。'}, {'name': '指针和数组', 'description': '学习C语言中的指针和数组的关系，包括指针数组、数组指针等。'}, {'name': '字符串操作', 'description': '学习C语言中的字符串操作，包括字符串的输入输出、字符串的比较、字符串的拼接等。'}, {'name': '结构体', 'description': '学习C语言中的结构体，包括结构体的定义、结构体的访问、结构体的操作等。'}, {'name': '递归', 'description': '学习C语言中的递归，包括递归的定义、递归的实现、递归的应用等。'}, {'name': '指针和函数', 'description': '学习C语言中的指针和函数的关系，包括指针作为函数参数、指针作为函数返回值等。'}, {'name': '动态内存分配', 'description': '学习C语言中的动态内存分配，包括malloc函数、free函数等。'}, {'name': '文件读写', 'description': '学习C语言中的文件读写操作，包括文件的打开、文件的读取、文件的写入等。'}, {'name': '预处理指令', 'description': '学习C语言中的预处理指令，包括宏定义、条件编译等。'}, {'name': '位运算', 'description': '学习C语言中的位运算，包括按位与、按位或、按位异或等。'}, {'name': '枚举类型', 'description': '学习C语言中的枚举类型，包括枚举的定义、枚举的使用等。'}, {'name': '指针和字符串', 'description': '学习C语言中的指针和字符串的关系，包括指针数组、指针字符串等。'}, {'name': '指针和结构体', 'description': '学习C语言中的指针和结构体的关系，包括指针结构体、结构体指针等。'}, {'name': '多文件编程', 'description': '学习C语言中的多文件编程，包括头文件的引用、函数的声明等。'}, {'name': '指针和动态内存分配', 'description': '学习C语言中的指针和动态内存分配的关系，包括指针数组、指针指针等。'}, {'name': '指针和函数指针', 'description': '学习C语言中的指针和函数指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组', 'description': '学习C语言中的指针和多维数组的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针', 'description': '学习C语言中的指针和字符串指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针', 'description': '学习C语言中的指针和结构体指针的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针数组', 'description': '学习C语言中的指针和函数指针数组的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针', 'description': '学习C语言中的指针和多维数组指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针数组', 'description': '学习C语言中的指针和字符串指针数组的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针数组', 'description': '学习C语言中的指针和结构体指针数组的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针指针', 'description': '学习C语言中的指针和函数指针指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针指针', 'description': '学习C语言中的指针和多维数组指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针指针', 'description': '学习C语言中的指针和字符串指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针指针', 'description': '学习C语言中的指针和结构体指针指针的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针数组指针', 'description': '学习C语言中的指针和函数指针数组指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针指针指针', 'description': '学习C语言中的指针和多维数组指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针指针指针', 'description': '学习C语言中的指针和字符串指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针指针指针', 'description': '学习C语言中的指针和结构体指针指针指针的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针数组指针指针', 'description': '学习C语言中的指针和函数指针数组指针指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针指针指针指针', 'description': '学习C语言中的指针和多维数组指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针指针指针指针', 'description': '学习C语言中的指针和字符串指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针指针指针指针', 'description': '学习C语言中的指针和结构体指针指针指针指针的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针数组指针指针指针', 'description': '学习C语言中的指针和函数指针数组指针指针指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针指针指针指针指针', 'description': '学习C语言中的指针和多维数组指针指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针指针指针指针指针', 'description': '学习C语言中的指针和字符串指针指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针指针指针指针指针', 'description': '学习C语言中的指针和结构体指针指针指针指针指针的关系，包括指针结构体、结构体指针等。'}, {'name': '指针和函数指针数组指针指针指针指针', 'description': '学习C语言中的指针和函数指针数组指针指针指针指针的关系，包括指针函数、函数指针数组等。'}, {'name': '指针和多维数组指针指针指针指针指针指针', 'description': '学习C语言中的指针和多维数组指针指针指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和字符串指针指针指针指针指针指针', 'description': '学习C语言中的指针和字符串指针指针指针指针指针指针的关系，包括指针数组、指针指针等。'}, {'name': '指针和结构体指针指针指针指针指针指针', 'description': '学习C语言中的指针和结构体指针指针指针指针指针指针的关系，包括指针结构体、结构体指针等。'}]"
    },
    {
        "sortId": 39,
        "id": "1629321853812699136",
        "title": "学须静",
        "content": "请编写程序，在屏幕上输出下面的文字：\n\n```out\n夫学须静也，\n才须学也。\n非学无以广才，\n非志无以成学。\n\n```\n\n---\n\n提示：标点符号为中文全角符号。\n\n```in\n\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '输出语句是C语言中常用的语句之一，用于将程序中的数据或文本输出到屏幕上。在本题中，需要使用输出语句将指定的文字输出到屏幕上。'}]"
    },
    {
        "sortId": 40,
        "id": "1629320742632501248",
        "title": "一年之计在于春",
        "content": "请编写程序，在屏幕上输出下面两行文字：\n\n```out\n一年之计在于春，\n一日之计在于晨。\n\n```\n\n---\n\n提示：标点符号为中文全角符号。\n\n```in\n\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '输出语句是C语言中常用的语句之一，用于将数据或文本输出到屏幕上。在本题中，需要使用输出语句将指定的文字输出到屏幕上。'}]"
    },
    {
        "sortId": 41,
        "id": "1627952973718564864",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\n\n![6 (2).png](~/78f524eb-0830-49c5-8fb8-c26e7f56abe7.png)\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'数据类型是C语言中的基本概念之一，它定义了变量的存储空间和表示范围。C语言中常见的数据类型有整型、浮点型、字符型等。在本题中，需要了解整型数据类型的表示范围和溢出的概念。'},\n{'name':'运算符'，'description':'运算符是C语言中用于进行各种运算操作的符号。C语言中常见的运算符有算术运算符、关系运算符、逻辑运算符等。在本题中，需要了解算术运算符的优先级和结合性，以及整型数据类型的运算规则。'},\n{'name':'表达式'，'description':'表达式是由运算符和操作数组成的式子，用于进行各种运算操作。C语言中的表达式可以包含常量、变量、函数调用等。在本题中，需要了解表达式的求值过程和优先级规则。'},\n{'name':'类型转换'，'description':'类型转换是将一个数据类型转换为另一个数据类型的过程。C语言中的类型转换可以通过强制类型转换或隐式类型转换来实现。在本题中，需要了解整型数据类型之间的隐式类型转换规则。'},\n{'name':'输出格式'，'description':'输出格式是指将数据以特定的格式输出到屏幕或文件中。C语言中的输出格式可以通过printf函数来实现。在本题中，需要了解printf函数的使用方法和格式控制符。'}]"
    },
    {
        "sortId": 42,
        "id": "1627952411216269312",
        "title": "设int x=1,y=1;表达式(!x||y--)的值是",
        "content": "设int x=1,y=3;表达式(!x||y--)的值是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对表达式进行逻辑运算，包括与（&&）、或（||）和非（！）运算。在表达式(!x||y--)中，!x表示对x进行非运算，即将x的值取反，因为x的值为1，所以!x的值为0。而y--表示先使用y的值，然后再将y的值减1，因为y的值为3，所以y--的值为3。所以整个表达式的值为0 || 3，根据逻辑或运算的规则，只要有一个操作数为真（非零），则结果为真，所以表达式的值为真（非零）。'}]"
    },
    {
        "sortId": 43,
        "id": "1627951109807624192",
        "title": "设a、b、c、d、m、n均为int型变量，且a=5、b=6、c=7、d=8、m=2、n=2，则逻辑表达式(m=a>b)&&(n=",
        "content": "设a、b、c、d、m、n均为int型变量，且a=15、b=6、c=7、d=8、m=2、n=12，则逻辑表达式(m=a>b)||(n=c>d)运算后，n的值为\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑表达式','description':'逻辑表达式是由逻辑运算符连接的多个条件表达式组成的表达式，用于判断条件的真假。逻辑运算符包括与（&&）、或（||）、非（!）等。逻辑表达式的运算结果为真（非零）或假（零）。'}]"
    },
    {
        "sortId": 44,
        "id": "1627950837576314880",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\n\n![6.png](~/1495e35e-b2ff-4cf2-81ca-c9b093ab9a1b.png)\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'数据类型是C语言中的基本概念之一，它定义了变量的存储方式和操作方式。在C语言中，常见的数据类型包括整型、浮点型、字符型等。在本题中，需要了解不同数据类型的取值范围和输出方式，以正确预测程序的输出结果。'},\n{'name':'运算符'，'description':'运算符是C语言中用于进行各种运算操作的符号。在本题中，需要了解逻辑运算符的优先级和结合性，以正确理解程序中的逻辑运算操作。'},\n{'name':'条件语句'，'description':'条件语句是C语言中用于根据条件执行不同代码块的结构。在本题中，需要了解条件语句的语法和执行流程，以正确理解程序中的条件判断和分支执行。'},\n{'name':'循环语句'，'description':'循环语句是C语言中用于重复执行某段代码的结构。在本题中，需要了解循环语句的语法和执行流程，以正确理解程序中的循环执行和输出结果的变化。'},\n{'name':'数组'，'description':'数组是C语言中用于存储多个相同类型数据的结构。在本题中，需要了解数组的定义和访问方式，以正确理解程序中对数组元素的操作和输出结果的变化。'}]"
    },
    {
        "sortId": 45,
        "id": "1627945279469219840",
        "title": "有以下程序,以下叙述中正确的是",
        "content": "有以下程序,以下叙述中正确的是\n\n![3.png](~/31f77591-cff0-4e6c-8e4c-7da6a62c23be.png)\n\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量的声明和定义'，'description':'变量的声明和定义是C语言程序中的基础知识点，用于告诉编译器在程序中要使用的变量的类型和名称。在给定的程序中，int a;是对变量a的声明和定义。'}]"
    },
    {
        "sortId": 46,
        "id": "1627944783639572480",
        "title": "当c的值不为0时，在下列选项中能正确将c的值赋给变量a、b的是",
        "content": "当c的值不为0时，在下列选项中能正确将c的值赋给变量a、b的是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值操作符'，'description':'赋值操作符用于将一个值赋给变量，可以将一个变量的值赋给另一个变量。在C语言中，赋值操作符为=。'}]"
    },
    {
        "sortId": 47,
        "id": "1627940359110217728",
        "title": "输入与输出",
        "content": "```\n#include<stdio.h>\nvoid swap(int a,int b)\n{\n\tint temp;\n\ttemp=a;\n\ta=b;\n\tb=temp;\n\treturn ;\n}\nint  main()\n{  \n     int a,b,c;\n\t scanf(\"a=%d,b=%d,c=%d\",&a,&b,&c);\n\t if (a > b)\n\t \tswap(a,b);\n\t else if (b > c)\n\t \tswap(b,c);\n\t printf(\"a=%d,b=%d,c=%d\",a,b,c);\n\t return 0;\n}\n```\n运行以上程序时，如果输入a的值为1，b的值为3，c的值为2，\n从键盘输入数据的正确形式应当是（）\n运行结果：（ ）\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'通过使用临时变量，交换两个变量的值。'}]"
    },
    {
        "sortId": 48,
        "id": "1626595964234575872",
        "title": "超级大力士",
        "content": "\n一只常见的小黑蚂蚁的体重在0.005g左右，但它们能举起超过自身体重400倍的物体，如果为难一下小蚂蚁，让它们把一头大象举起来，这些大力士能做到吗？\n请编写程序计算需要多少只蚂蚁可以举起大象。本题假定蚂蚁的体重正好为0.005g，能举起来的重量恰好是400倍体重。\n\n### 输入格式：\n输入一行给出一个正数W（≤4000）代表大象体重数（公斤Kg）。\n\n### 输出格式：\n在一行中输出一个整数，表示蚂蚁的数量。\n\n### 输入样例:\n```in\n3000\n```\n\n### 输出样例:\n\n```out\n1500000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'算术运算符'，'description':'C语言中的算术运算符，包括加法、减法、乘法、除法等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句、else语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句，包括for循环、while循环等。'}, {'name':'输入输出'，'description':'C语言中的输入输出，包括scanf函数、printf函数等。'}]"
    },
    {
        "sortId": 49,
        "id": "1620067749009649664",
        "title": "生肖确定",
        "content": "2023年是兔年，1年后（2024年）是龙年，1年前（2022年）是虎年。那么对于给定的一个整数$n$，请确定2023年之前（$n$为负数）或之后（$n$为正数）$$\\left |n\\right|$$年的结果年份及其对应的生肖（以英文单词表示，详见最后的提示）。\n\n### 输入格式:\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试输入1个整数$n \\ (-2023 < n \\le 10000，n \\ne0)$。\n\n### 输出格式:\n对于每组测试，在一行上输出结果年份及其对应的生肖，之间以一个空格间隔。\n\n### 输入样例:\n```in\n3\n-1\n1\n2\n```\n\n### 输出样例:\n```out\n2022 tiger\n2024 dragon\n2025 snake\n```\n\n### 提示:\n鼠、牛、虎、兔、龙、蛇、马、羊、猴、鸡、狗、猪等十二生肖相应的英文单词如下：\nrat、ox、tiger、rabbit、dragon、snake、horse、goat、monkey、rooster、dog、pig\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法','description':'包括变量、数据类型、运算符、控制语句等基本语法知识点。'}, {'name':'条件语句','description':'包括if语句、switch语句等条件语句的使用。'}, {'name':'循环语句','description':'包括for循环、while循环等循环语句的使用。'}, {'name':'函数','description':'包括函数的定义、函数的调用、函数的参数传递等函数相关知识点。'}, {'name':'数组','description':'包括数组的定义、数组的访问、数组的操作等数组相关知识点。'}, {'name':'指针','description':'包括指针的定义、指针的使用、指针的运算等指针相关知识点。'}, {'name':'结构体','description':'包括结构体的定义、结构体的访问、结构体的操作等结构体相关知识点。'}, {'name':'文件操作','description':'包括文件的打开、文件的读写、文件的关闭等文件操作相关知识点。'}, {'name':'动态内存分配','description':'包括动态内存分配的使用、动态内存的释放等动态内存分配相关知识点。'}, {'name':'字符串处理','description':'包括字符串的定义、字符串的操作、字符串的比较等字符串处理相关知识点。'}, {'name':'预处理指令','description':'包括宏定义、条件编译等预处理指令相关知识点。'}]"
    },
    {
        "sortId": 50,
        "id": "1617862358154694656",
        "title": "写出判断英文字母的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n`ch`是英文字母：\n\n \n\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。'}]"
    },
    {
        "sortId": 51,
        "id": "1617861765851865088",
        "title": "写出判断数字字符的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `ch`是数字字符：\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。'}]"
    },
    {
        "sortId": 52,
        "id": "1617860959127818240",
        "title": "写出判断非小写英文字母的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `ch`不是小写英文字母：\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。字符类型的取值范围是-128到127，可以表示ASCII码中的所有字符。在本题中，需要判断一个字符是否为小写英文字母，可以使用字符类型进行比较。'}]"
    },
    {
        "sortId": 53,
        "id": "1617860053455941632",
        "title": "写出判断大写英文字母的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `ch`是大写英文字母：\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。字符类型的取值范围是-128到127，可以表示ASCII码中的所有字符。在本题中，需要使用字符类型来表示变量ch。'}]"
    },
    {
        "sortId": 54,
        "id": "1617858645923033088",
        "title": "写出判断区间范围的逻辑表达式[5]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n -1＜`x` ≤ 1：\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是：if (条件) { 代码块 }，其中条件是一个表达式，如果条件为真，则执行代码块中的代码，否则跳过代码块。在这个题目中，我们可以使用条件语句来判断变量x是否满足-1＜x ≤ 1的条件，如果满足则执行相应的代码。'}]"
    },
    {
        "sortId": 55,
        "id": "1617858019679883264",
        "title": "写出判断区间范围的逻辑表达式[4]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n`x` ≤ -1或者`x` ≥ 1：\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是：if (条件) { 代码块 }，其中条件是一个表达式，如果条件为真，则执行代码块中的代码，否则跳过代码块。在本题中，可以使用条件语句来判断x的值是否满足条件，如果满足则执行相应的代码块。'}]"
    },
    {
        "sortId": 56,
        "id": "1617857060782305280",
        "title": "写出判断区间范围的逻辑表达式[3]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n -1＜`x`＜1：\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'关系运算符'，'description':'关系运算符用于比较两个值的大小关系，常用的关系运算符有大于（>）、小于（<）、大于等于（>=）、小于等于（<=）、等于（==）和不等于（!=）。在本题中，需要使用小于（<）和大于（>）运算符来判断变量x的取值范围是否满足-1＜x＜1的条件。'}]"
    },
    {
        "sortId": 57,
        "id": "1617855466045005824",
        "title": "写出判断区间范围的逻辑表达式[2]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n`x`＜-1或者`x`＞1：\n\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据给定的条件来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的语法如下：\\n\\nif (condition) {\\n    // code to be executed if condition is true\\n} else {\\n    // code to be executed if condition is false\\n}'}]"
    },
    {
        "sortId": 58,
        "id": "1617854657106358272",
        "title": "写出判断区间范围的逻辑表达式[1]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `-1` ≤ `x` ≤ `1`： ",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据给定的条件来执行不同的代码块。在这个题目中，我们需要根据给定的条件 `-1` ≤ `x` ≤ `1` 来编写相应的表达式。'}]"
    },
    {
        "sortId": 58,
        "id": "1617854657106358272",
        "title": "写出判断区间范围的逻辑表达式[1]",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `-1` ≤ `x` ≤ `1`： ",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据给定的条件来执行不同的代码块。在这个题目中，我们需要根据给定的条件 `-1` ≤ `x` ≤ `1` 来编写相应的表达式。'}]"
    },
    {
        "sortId": 59,
        "id": "1617851330876497920",
        "title": "写出判断闰年的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n`year` 是闰年，即 `year` 能被 4 整除但不能被 100 整除，或 `year` 能被 400 整除：\n\n\n\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'闰年判断'，'description':'在C语言中，判断一个年份是否为闰年可以使用逻辑运算符和条件语句。根据题目给出的条件，我们可以使用逻辑运算符&&和||来判断年份是否满足闰年的条件。具体的判断条件可以使用if语句来实现。'}]"
    },
    {
        "sortId": 60,
        "id": "1617849303056343040",
        "title": "写出判断偶数的关系表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n `number`是偶数：\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在这个题目中，可以使用条件语句来判断`number`是否为偶数。'}]"
    },
    {
        "sortId": 61,
        "id": "1617847337592909824",
        "title": "写出判断ch是空格或者回车的逻辑表达式",
        "content": "假设变量已正确定义并赋值，写出满足下列条件的C语言表达式。\n\n`ch `是空格或者回车：\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型的变量可以用来存储任意一个字符，包括空格和回车。'}]"
    },
    {
        "sortId": 62,
        "id": "1617817441063759872",
        "title": "输出以减号间隔的一批字符",
        "content": "输入一个正整数`n`，再输入`n`个字符，将这些字符输出，输出时在字符之间加一个减号，最后一个字符的后面没有空格。\n\n```c++\n# include <stdio.h>\n\nint main()\n{    \n    char ch;\n    int first = 1, k, n; \n\n    scanf(\"%d\\n\", &n);\n    for(k = 1; k <= n; k++){\n       ch = getchar();\n       if ( first ==  ){ \n             putchar(ch); \n            ;\n        }else{ \n             ;\n             putchar(ch);\n        }\n    }\n\n    return 0;\n}\n```",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何使用scanf和printf函数进行输入输出操作。'}, {'name': '循环控制', 'description': '教学如何使用for循环进行重复操作。'}, {'name': '条件判断', 'description': '教学如何使用if语句进行条件判断。'}, {'name': '字符处理', 'description': '教学如何处理字符类型的数据。'}]"
    },
    {
        "sortId": 63,
        "id": "1617067232859869184",
        "title": "兔年大吉",
        "content": "2023年1月22日，兔年初一。虎去兔来，祝各位安康顺意，兔年大吉。作为中国人，生肖大家都不陌生。对于给定的一个年份，请输出该年份对应的生肖（以英文单词表示，详见最后的提示）。\n\n### 输入格式:\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试输入1个年份year（1000<=year<10000）。\n\n### 输出格式:\n对于每组测试，在一行上输出年份year对应的生肖。\n\n### 输入样例:\n```in\n3\n2022\n2023\n2024\n```\n\n### 输出样例:\n```out\ntiger\nrabbit\ndragon\n```\n\n### 提示:\n鼠、牛、虎、兔、龙、蛇、马、羊、猴、鸡、狗、猪等十二生肖相应的英文单词如下：\nrat、ox、tiger、rabbit、dragon、snake、horse、goat、monkey、rooster、dog、pig\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件语句', 'description': '条件语句用于根据不同的条件执行不同的代码块。在这个题目中，可以使用条件语句来判断给定的年份对应的生肖。'}, {'name': '循环语句', 'description': '循环语句用于重复执行一段代码块。在这个题目中，可以使用循环语句来处理多组测试数据。'}, {'name': '变量', 'description': '变量用于存储数据。在这个题目中，可以使用变量来存储输入的年份和对应的生肖。'}, {'name': '输入输出', 'description': '输入输出用于与用户进行交互。在这个题目中，可以使用输入输出来获取测试数据和输出结果。'}]"
    },
    {
        "sortId": 64,
        "id": "1608088732862005248",
        "title": "尾数a*b",
        "content": "输入两个整数，计算两个整数个位数字的乘积。\n\n### 输入格式:\n\n输入两个整数。\n\n### 输出格式:\n\n输出这两个整数个位数字的乘积。\n\n### 输入样例:\n\n```in\n11 12\n```\n\n### 输出样例:\n\n```out\n2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数类型','description':'整数类型是C语言中的基本数据类型之一，用于表示整数值。在本题中，需要输入两个整数作为计算的操作数。'}, {'name':'输入输出','description':'输入输出是C语言程序中常用的操作之一。在本题中，需要使用输入操作获取用户输入的两个整数，使用输出操作将计算结果输出。'}, {'name':'运算符','description':'运算符是C语言中用于进行各种运算的符号。在本题中，需要使用乘法运算符对两个整数的个位数字进行相乘。'}, {'name':'变量','description':'变量是C语言中用于存储数据的容器。在本题中，需要使用变量来存储用户输入的两个整数和计算结果。'}, {'name':'控制流','description':'控制流是C语言中用于控制程序执行顺序的语句。在本题中，需要使用控制流语句来实现输入、计算和输出的顺序。'}]"
    },
    {
        "sortId": 65,
        "id": "1608086576536743936",
        "title": "尾数a-b",
        "content": "输入两个整数，计算两个整数个位数字之差。\n\n### 输入格式:\n\n输入两个整数。\n\n### 输出格式:\n\n输出这两个整数个位数字的差。\n\n### 输入样例:\n\n```in\n111 12\n```\n\n### 输出样例:\n\n```out\n-1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数运算'，'description':'教学内容包括整数的输入和输出，以及整数的加减乘除运算。'}, {'name':'变量'，'description':'教学内容包括变量的定义和赋值，以及变量的使用。'}, {'name':'算术运算符'，'description':'教学内容包括算术运算符的使用，如加法、减法、乘法和除法。'}, {'name':'输入输出'，'description':'教学内容包括输入函数和输出函数的使用，如scanf和printf。'}, {'name':'条件语句'，'description':'教学内容包括条件语句的使用，如if语句和switch语句。'}, {'name':'循环语句'，'description':'教学内容包括循环语句的使用，如for循环和while循环。'}, {'name':'数据类型'，'description':'教学内容包括数据类型的定义和使用，如整型、浮点型和字符型。'}, {'name':'运算符优先级'，'description':'教学内容包括运算符优先级的概念和规则，如加法优先级高于乘法。'}, {'name':'格式化输出'，'description':'教学内容包括格式化输出的使用，如控制输出的宽度和精度。'}, {'name':'函数'，'description':'教学内容包括函数的定义和调用，以及函数的参数和返回值。'}]"
    },
    {
        "sortId": 66,
        "id": "1608083472483352576",
        "title": "尾数a+b",
        "content": "输入两个整数，计算两个整数个位数字之和\n\n### 输入格式:\n\n输入两个整数。\n\n### 输出格式:\n\n输出这两个整数个位数字的和。\n\n### 输入样例:\n\n```in\n11 12\n```\n\n### 输出样例:\n\n```out\n3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数运算'，'description':'教学如何进行整数运算，包括加法、减法、乘法和除法等操作。'}]"
    },
    {
        "sortId": 67,
        "id": "1600647415185797120",
        "title": "有以下程序，程序运行后的输出结果是",
        "content": "有以下程序，程序运行后的输出结果是\n\n![11.png](~/0cd7e0bf-176d-446e-abc6-8da825efc2ee.png)\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括基本数据类型和派生数据类型。基本数据类型包括整型、浮点型、字符型和布尔型。派生数据类型包括数组、指针、结构体和联合体。在这道题中，需要了解整型数据类型的取值范围和输出格式。'}, {'name':'运算符','description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符、位运算符等。在这道题中，需要了解算术运算符的优先级和结合性，以及整型数据类型的溢出问题。'}, {'name':'控制语句','description':'C语言中的控制语句包括顺序结构、选择结构和循环结构。在这道题中，需要了解选择结构（if语句）的语法和执行流程。'}, {'name':'数组','description':'C语言中的数组是一种存储相同类型数据的集合。在这道题中，需要了解数组的定义、初始化和访问方式。'}, {'name':'函数','description':'C语言中的函数是一段完成特定任务的代码块。在这道题中，需要了解函数的定义、调用和返回值的使用。'}, {'name':'指针','description':'C语言中的指针是一种特殊的变量，存储的是内存地址。在这道题中，需要了解指针的定义、初始化和使用方式。'}, {'name':'字符串','description':'C语言中的字符串是由字符组成的字符数组。在这道题中，需要了解字符串的定义、初始化和输出方式。'}, {'name':'文件操作','description':'C语言中的文件操作包括文件的打开、读写和关闭。在这道题中，需要了解文件的打开方式和读写操作的语法。'}]"
    },
    {
        "sortId": 68,
        "id": "1600647121135747072",
        "title": "若有定义：int b=7; float a=3.5,c=3.7;则表达式a+(b/2*(int)(a+c)/2)%3的值是",
        "content": "若有定义：int b=7; float a=3.5,c=3.7;则表达式a+(b/2*(int)(a+c)/2)%3的值是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，数据类型转换可以通过强制类型转换来实现。强制类型转换可以改变变量的数据类型，使其能够参与不同类型的运算。在本题中，(int)(a+c)将浮点数a和c转换为整型，以便进行整数运算。'}]"
    },
    {
        "sortId": 69,
        "id": "1600646890759405568",
        "title": "有以下程序，程序运行后的输出结果是",
        "content": "有以下程序，程序运行后的输出结果是\n\n![9.png](~/385307dd-53f1-46e0-a337-2df6b8ca9816.png)\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'C语言中的数据类型包括基本数据类型和派生数据类型。基本数据类型包括整型、浮点型、字符型和布尔型。派生数据类型包括数组、指针、结构体和联合体。在本题中，需要了解整型数据类型的取值范围和浮点型数据类型的精度。'}，{'name':'运算符'，'description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符、位运算符等。在本题中，需要了解算术运算符的优先级和结合性，以及关系运算符的返回值类型。'}，{'name':'控制语句'，'description':'C语言中的控制语句包括条件语句、循环语句和跳转语句。在本题中，需要了解条件语句中的if-else语句的执行流程和循环语句中的for循环的执行流程。'}]"
    },
    {
        "sortId": 70,
        "id": "1600646432061911040",
        "title": "设变量x为float型且已赋值，则以下语句中能将x中的数值保留到小数点后两位，并将第三位四舍五入的是",
        "content": "设变量x为float型且已赋值，则以下语句中能将x中的数值保留到小数点后两位，并将第三位四舍五入的是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数格式化'，'description':'浮点数格式化是指将浮点数按照指定的格式输出，包括保留小数点后几位、四舍五入等操作。在C语言中，可以使用printf函数的格式化输出来实现浮点数的格式化。'}]"
    },
    {
        "sortId": 71,
        "id": "1600645425122758656",
        "title": "设int a=6，则执行完语句a+=a-=a*a后，a的值是",
        "content": "设int a=6，则执行完语句a+=a-=a*a后，a的值是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，a+=a-=a*a的执行顺序为先执行a*a，然后执行a-=a*a，最后执行a+=a-=a*a。'}]"
    },
    {
        "sortId": 72,
        "id": "1600645089234518016",
        "title": "以下选项中，不能作为合法常量的是",
        "content": "以下选项中，不能作为合法常量的是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'常量', 'description':'常量是指在程序运行过程中其值不会发生改变的数据。常量可以是整数、浮点数、字符、字符串等。'}, {'name':'合法常量', 'description':'合法常量是指符合C语言规定的常量格式和取值范围的常量。合法常量必须符合C语言的语法规则，例如整数常量不能以0开头，浮点数常量必须包含小数点等。'}, {'name':'选项', 'description':'选项是指在多项选择题中提供的供选择的答案。选项可以是合法常量，也可以是非法常量。'}, {'name':'多项选择题', 'description':'多项选择题是一种常见的考察学生对知识点掌握程度的题型。在多项选择题中，学生需要从给定的选项中选择一个或多个正确答案。'}]"
    },
    {
        "sortId": 73,
        "id": "1600644706785312768",
        "title": "若有定义：int a=2;，则正确的赋值表达式是",
        "content": "若有定义：int a=2;，则正确的赋值表达式是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值表达式','description':'赋值表达式用于将一个值赋给变量。在C语言中，赋值表达式使用等号（=）进行赋值操作。正确的赋值表达式应该是a = 2;，将值2赋给变量a。'}]"
    },
    {
        "sortId": 74,
        "id": "1600644337409716224",
        "title": "有以下程序，程序运行后的输出结果是",
        "content": "有以下程序，程序运行后的输出结果是\n\n\n![2.png](~/8a9de863-d0a1-452a-94f7-063821bd2a14.png)\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念之一，它定义了变量的存储空间和表示范围。在这道题中，需要了解int和float两种数据类型的区别和使用方法。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号。在这道题中，需要了解加法运算符和赋值运算符的使用方法。'}, {'name': '输出语句', 'description': '输出语句是C语言中用于将结果显示在屏幕上的语句。在这道题中，需要了解printf函数的使用方法和格式化输出的概念。'}, {'name': '程序执行顺序', 'description': '程序执行顺序是指程序中各个语句的执行顺序。在这道题中，需要了解程序从头到尾的执行顺序，以及语句的执行顺序对程序结果的影响。'}]"
    },
    {
        "sortId": 75,
        "id": "1600643827898249216",
        "title": "有以下程序，程序运行后的输出结果是",
        "content": "有以下程序，程序运行后的输出结果是\n\n![1.png](~/6dbd5590-ac0b-4257-911c-f96062510e85.png)\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括基本数据类型和派生数据类型。基本数据类型包括整型、浮点型、字符型和布尔型。派生数据类型包括数组、指针、结构体和联合体。在这道题中，需要了解整型数据类型的取值范围和输出格式。'},\n{'name':'运算符','description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符、位运算符等。在这道题中，需要了解算术运算符的优先级和结合性，以及整型数据类型的溢出问题。'},\n{'name':'控制语句','description':'C语言中的控制语句包括顺序结构、选择结构和循环结构。在这道题中，需要了解选择结构（if语句）的语法和执行流程。'},\n{'name':'数组','description':'C语言中的数组是一种存储相同类型数据的集合。在这道题中，需要了解数组的定义、初始化和访问方式。'},\n{'name':'指针','description':'C语言中的指针是一种特殊的变量，存储的是内存地址。在这道题中，需要了解指针的定义、初始化和访问方式，以及指针和数组的关系。'},\n{'name':'函数','description':'C语言中的函数是一段完成特定任务的代码块。在这道题中，需要了解函数的定义、调用和返回值的使用。'},\n{'name':'输入输出','description':'C语言中的输入输出函数包括scanf和printf。在这道题中，需要了解printf函数的格式控制符和转义字符的使用。'}]"
    },
    {
        "sortId": 76,
        "id": "1599669246593069056",
        "title": "若有定义double x=1，y；则执行",
        "content": "若有定义double x=1，y；则执行\n```\ny=x+3/2; printf(\"%.1f\",y);\n```\n结果是\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'在C语言中，当不同类型的数据进行运算时，会发生数据类型转换。在这道题中，x是double类型，3/2是整数类型，因此会发生整数除法，结果为1。然后将1转换为double类型与x相加，最后结果为2.0。'}]"
    },
    {
        "sortId": 77,
        "id": "1599668315247869952",
        "title": "设int a=12; 则表达式a/=a+a的值是",
        "content": "设int a=12; 则表达式a/=a+a的值是\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行各种数学和逻辑运算的符号，包括算术运算符、赋值运算符、关系运算符、逻辑运算符等。本题涉及到的运算符是除法运算符和赋值运算符。'}]"
    },
    {
        "sortId": 78,
        "id": "1599666986530099200",
        "title": "定义 int x=10,y,z;执行y=z=x;x=y==z后,变量x的值为",
        "content": "定义  int x=10,y,z;执行y=z=x;x=y==z后,变量x的值为\n\n\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量赋值操作符','description':'变量赋值操作符用于将一个值赋给一个变量。在C语言中，赋值操作符为=。执行y=z=x后，变量x的值为10。'}, {'name':'比较操作符','description':'比较操作符用于比较两个值的大小关系。在C语言中，比较操作符有==、!=、>、<、>=、<=。执行y==z后，变量x的值为1，表示y和z的值相等。'}]"
    },
    {
        "sortId": 79,
        "id": "1599648844957368320",
        "title": "若x=2,y=3则x||y的结果是 ____",
        "content": "若x=2,y=3则x||y的结果是( )\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）和非（！）。在本题中，x||y表示x和y进行逻辑或运算，即只要x和y中有一个为真，结果就为真。'}]"
    },
    {
        "sortId": 80,
        "id": "1599647471050162176",
        "title": "以下程序的输出结果是 ____",
        "content": "以下程序的输出结果是()\n```\nint main()\n{\n\tfloat x=3.6;\n\tint i;\n\ti=(int)x;\n\tprintf(\"x=%f,i=%d\\n\",x,i);\n\treturn 0;\n}\n\n\n```\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'类型转换'，'description':'类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符来进行类型转换。在上述程序中，将浮点数x强制转换为整数类型，即将小数部分截断，得到整数i的值。'}]"
    },
    {
        "sortId": 81,
        "id": "1599646806571761664",
        "title": "下列正确的标识符是 ____",
        "content": "下列正确的标识符是（）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符', 'description':'标识符是用来标识变量、函数、数组等程序实体的名称，它由字母、数字和下划线组成，且必须以字母或下划线开头。'}, {'name':'正确的标识符', 'description':'正确的标识符必须符合标识符的命名规则，即由字母、数字和下划线组成，且必须以字母或下划线开头。'}]"
    },
    {
        "sortId": 82,
        "id": "1599354871172820992",
        "title": "程序阅读题",
        "content": "\n以下为一段伪代码，请写出其运行结果。\n\n$$x=29$$\n$$y=5$$\n$$output$$ $$x$$/=($$y$$%=3) \n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '赋值运算符', 'description': '赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符使用等号（=）表示。赋值运算符的优先级较低，因此在表达式中，赋值运算符通常是最后执行的。在本题中，$$x$$/=($$y$$%=3)表示先计算$$y$$%=3，然后将结果赋给$$y$$，再将$$x$$除以$$y$$的结果赋给$$x$$。'}, {'name': '求余运算符', 'description': '求余运算符用于计算两个数相除后的余数。在C语言中，求余运算符使用百分号（%）表示。在本题中，$$y$$%=3表示将$$y$$除以3的余数赋给$$y$$。'}, {'name': '除法运算符', 'description': '除法运算符用于计算两个数相除的结果。在C语言中，除法运算符使用斜杠（/）表示。在本题中，$$x$$/=($$y$$%=3)表示将$$x$$除以$$y$$的结果赋给$$x$$。'}]"
    },
    {
        "sortId": 83,
        "id": "1599353369997856768",
        "title": "程序阅读题",
        "content": "以下为一段伪代码，请写出其运行结果。\n\n\t$$x\\gets0X25$$\n\t$$y\\gets$$$$x+5$$\n\tprintf(\"%d,%d\",x,y);\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量赋值', 'description': '变量赋值是将一个值赋给一个变量的过程。在C语言中，可以使用赋值运算符（=）将一个值赋给一个变量。'}, {'name': '格式化输出', 'description': '格式化输出是指按照一定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数进行格式化输出。'}]"
    },
    {
        "sortId": 84,
        "id": "1599351781413613568",
        "title": "程序阅读填空",
        "content": "以下为一段伪代码，请写出其运行结果。\nc1$$\\gets$$'D'\nc2$$\\gets$$'z'\nprintf(\"%d,%d\",c1,c2);\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符变量', 'description': '字符变量是用来存储单个字符的变量，可以使用单引号来表示字符。在C语言中，字符变量实际上是以ASCII码的形式存储的。'}, {'name': 'printf函数', 'description': 'printf函数是C语言中用来输出信息的函数，可以输出各种类型的数据，包括字符、整数、浮点数等。在输出字符变量时，可以使用%c格式控制符。'}]"
    },
    {
        "sortId": 85,
        "id": "1599349022576603136",
        "title": "程序阅读填空",
        "content": "\n以下为一段伪代码，请写出其运行结果：\n\nx$$\\gets$$105;\ny$$\\gets$$015; \nprintf(\"%d,%d\",x,y); \t\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量赋值', 'description': '变量赋值是将一个值赋给一个变量的过程。在C语言中，可以使用赋值运算符将一个值赋给一个变量。在这个题目中，x被赋值为105，y被赋值为015。'}, {'name': '格式化输出', 'description': '格式化输出是指按照一定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数进行格式化输出。在这个题目中，使用printf函数按照\"%d,%d\"的格式输出x和y的值。'}]"
    },
    {
        "sortId": 86,
        "id": "1599307979567132672",
        "title": "真善美以面对人生。",
        "content": "爱因斯坦曾说“有些理想曾为我们引过道路,并不断给我新的勇气以欣然面对人生那些理想就是一真、善、美。”\n\n请编写程序，输出这句名言的原文“The ideals which have lighted my way, and time after time have given me new courage to face life cheerfully have been kindness, beauty and truth.”\n\n\n### 输入格式:\n无\n```in\n```\n\n\n\n### 输出格式:\n原样输出\n```out\nThe ideals which have lighted my way, and time after time have given me new courage to face life cheerfully have been kindness, beauty and truth.\n```\n\n\n\n\n\n\n\n\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符串处理'，'description':'字符串处理是C语言中常见的操作之一，通过使用字符串处理函数，可以对字符串进行各种操作，如拼接、复制、比较等。在本题中，需要使用字符串处理函数将原文中的中文翻译成英文。'}]"
    },
    {
        "sortId": 87,
        "id": "1599294295344140288",
        "title": "表达式 (ch=getchar ____ )!='\\n'与不加括号是否 相同。",
        "content": "如果变量已经正确定义，表达式ch=getchar()!='\\n' 和 (ch=getchar() )!='\\n' 相同。\n\n",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，赋值运算符的优先级较低，而逻辑运算符的优先级较高。在给变量赋值时，应注意运算符的优先级，以免出现意想不到的结果。'}]"
    },
    {
        "sortId": 88,
        "id": "1598917794526392320",
        "title": "求两个整数的和",
        "content": "本题目要求读入2个整数a和b，然后输出它们的和。\n\n### 输入格式:\n\n输入在一行中给出2个整数a和b。输入保证在32位整型的取值范围之内。\n\n### 输出格式:\n\n按示例所示，输出两个整数及它们的和。注意每个数和符号之间有一个空格。\n\n### 输入样例1:\n```in\n18 9\n```\n\n### 输出样例1:\n```out\n18 + 9 = 27\n```\n\n### 输入样例2:\n```in\n3 12\n```\n### 输出样例2:\n```out\n3 + 12 = 15\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'本知识点主要介绍了C语言中的变量和数据类型的概念，以及如何声明和使用变量。在本题中，需要读入两个整数a和b，这就涉及到了整型数据类型的使用。'}，{'name':'输入和输出'，'description':'本知识点主要介绍了C语言中的输入和输出操作。在本题中，需要从输入中读取两个整数a和b，并将它们的和输出。'}，{'name':'运算符'，'description':'本知识点主要介绍了C语言中的运算符的使用。在本题中，需要使用加法运算符将两个整数a和b相加。'}]"
    },
    {
        "sortId": 89,
        "id": "1597482555430141952",
        "title": "大写字母转换为小写字母",
        "content": "从键盘输入一个小写英文字母，将其转换为大写英文字母，将转换后的大写英文字母及其十进制的ASCII码值显示到屏幕上。\n\n### 输入格式:\n\n从键盘输入一个小写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的大写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nb\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nB,66\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 50,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入一个小写英文字母，并将转换后的大写英文字母及其十进制的ASCII码值显示到屏幕上。'}, {'name': '数据类型转换', 'description': '学习如何将小写英文字母转换为大写英文字母。'}, {'name': 'ASCII码', 'description': '学习如何获取字符的ASCII码值。'}]"
    },
    {
        "sortId": 90,
        "id": "1597429660915585024",
        "title": "逆序的两位数",
        "content": "\n从键盘输入一个正的两位数，然后输出按位逆序的数字。注意：当输入的数字含有结尾的0时，输出不应带有前导的0。比如：输入50，输出应该是5。\n\n\n### 输入格式:\n\n输入任意的一个两位正整数。\n\n\n### 输出格式:\n\n输出按位逆序的数。\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n12\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n21\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整数、字符等，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数学运算和逻辑运算。'}, {'name': '条件语句', 'description': '学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句来重复执行一段代码块。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，包括输入、输出和常见的字符串操作。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name': '数组', 'description': '学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name': '指针', 'description': '学习如何声明和使用指针来操作内存中的数据。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件指针的使用。'}]"
    },
    {
        "sortId": 91,
        "id": "1595750421539504128",
        "title": "计算变量类型所占内存的字节数",
        "content": "从键盘依次输入一个double型、int型、char型数据类型变量的值。在每一行先输出变量的值，再输出该数据类型变量所占内存的字节数。\n\n### 输入格式:\n\n在一行内分别输入一个实数、整数、字符，数据间以逗号分隔。\n\n### 输出格式:\n\n第一行：输出实型变量的值和该变量所占内存的字节数，中间以逗号分隔。\n第二行：输出整型变量的值和该变量所占内存的字节数，中间以逗号分隔。\n第三行：输出字符变量的值和该变量所占内存的字节数，中间以逗号分隔。\n参考下面输出样例。\n\n### 输入样例:\n\n```in\n36.88,17,M\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n36.880000,8\n17,4\nM,1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 35,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括实数型、整数型和字符型，分别用double、int和char表示。'}, {'name':'输入输出','description':'C语言中可以使用scanf函数从键盘输入数据，使用printf函数输出数据。'}, {'name':'变量','description':'C语言中使用变量来存储数据，变量需要先声明后使用，可以通过变量名来访问和修改变量的值。'}, {'name':'内存字节数','description':'C语言中不同的数据类型所占用的内存字节数不同，可以使用sizeof运算符来获取变量所占用的内存字节数。'}]"
    },
    {
        "sortId": 92,
        "id": "1595736921270177792",
        "title": "小写字母转换为大写字母",
        "content": "这是一个编程题模板。\n\n编程从键盘输入一个小写英文字母，将其转换为大写英文字母，将转换后的大写英文字母及其十进制的ASCII码值显示到屏幕上。\n\n### 输入格式:\n\n从键盘输入一个小写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的大写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n### 输入样例:\n\n```in\nb\n```\n\n### 输出样例:\n\n```out\nB,66\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '数据类型转换', 'description': '学习如何将小写字母转换为大写字母，并将其ASCII码值显示出来。'}, {'name': 'ASCII码', 'description': '学习ASCII码的概念和使用方法。'}]"
    },
    {
        "sortId": 93,
        "id": "1595668377002094592",
        "title": "我心我想输出（1）",
        "content": "按照十进制、八进制、十六进制、字符的形式输出十进制数65\n### 输入格式:\n\n\n\n### 输出格式:\n\n按照十进制、八进制、十六进制、字符的形式输出十进制数65\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n65       101       41        A\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'进制转换','description':'学习如何将十进制数转换为二进制、八进制、十六进制以及字符形式的输出。'}]"
    },
    {
        "sortId": 94,
        "id": "1594898001611501568",
        "title": "奖项计算",
        "content": "中国大学生程序设计竞赛（CCPC）女生专场即将举办，本次比赛设置金、银、铜奖，各奖项数分别为有效参赛队伍数的 $10\\%、20\\%、30\\%$并向上取整。其中，有效参赛队伍是指至少成功解出1道题的正式参赛队伍。若有效参赛队伍数为$A$，则：\n\n* 金奖项数=$\\lceil J \\rceil$，$J = A*10\\%$\n* 银奖项数=$\\lceil Y \\rceil$，$Y = A*30\\%-\\lceil J \\rceil$\n* 铜奖项数=$\\lceil T \\rceil$，$T = A*60\\%-\\lceil J \\rceil-\\lceil Y \\rceil$\n\n其中，$\\lceil x \\rceil$表示向上取整，即取不小于 $x$ 的最小整数。\n\n### 输入格式:\n\n首先输入一个整数T，表示测试数据的组数。对于每组测试数据，输入一个整数$A$，表示有效参赛队伍数。\n\n### 输出格式:\n\n对于每组测试数据，输出金、银、铜奖的奖项数及奖项总数。每两个数据之间留一个空格。\n\n### 输入样例:\n\n```in\n2\n277\n268\n```\n\n### 输出样例:\n\n```out\n28 56 83 167\n27 54 80 161\n```\n\n### 提示：\n\nmath.h头文件中的ceil函数可用于向上取整。例如：\n\nint x=(int)ceil(2.1);\n\n则x的值为3",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '向上取整', 'description': '向上取整是指取不小于某个数的最小整数。在C语言中，可以使用math.h头文件中的ceil函数来实现向上取整。例如，int x=(int)ceil(2.1); 则x的值为3。'}]"
    },
    {
        "sortId": 95,
        "id": "1594243116926885888",
        "title": "有以下程序",
        "content": "有以下程序\nmain()\n{char p[]={'a','b','c'},q[]=\"abc\";\nprintf(\"%d%d\\n\",sizeof(p),sizeof(q));\n};\n程序运行后和输出结果是\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数组的定义和初始化'，'description':'数组是一种存储多个相同类型数据的容器，可以通过下标访问数组中的元素。在C语言中，可以使用字符数组和字符串数组来存储字符类型的数据。数组的大小可以通过sizeof运算符来获取。'}，{'name':'字符串的定义和初始化'，'description':'字符串是由字符组成的字符数组，以空字符\\0结尾。在C语言中，可以使用字符数组和字符串数组来存储字符串类型的数据。字符串的大小可以通过sizeof运算符来获取。'}]"
    },
    {
        "sortId": 96,
        "id": "1593519164298481664",
        "title": "以下程序不用第三个变量，实现将两个数进行对调的操作，请填空 ____ 。",
        "content": "以下程序不用第三个变量，实现将两个数进行对调的操作，请填空（        ）。\n#include<stdio.h>\nmain( )\n{\n    int a,b;\n\t\tscanf(\"%d%d\",&a,&b);\n\t\tprintf(\"a=%d  b=%d\",a,b);\n\t\ta=a+b;b=a-b;a=(              );\n\t\tprintf(\"a=%d b=%d\\n\",a,b);\n\t\treturn 0;\n}",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量交换', 'description': '变量交换是指将两个变量的值互相交换的操作。在C语言中，可以通过使用第三个变量来实现变量交换，也可以通过不使用第三个变量来实现变量交换。本题要求不使用第三个变量来实现变量交换。'}]"
    },
    {
        "sortId": 97,
        "id": "1593517289373298688",
        "title": "有如下程序，输入数据25,12,14之后，正确的输出结果是 ____ 。",
        "content": "有如下程序，输入数据25,12,14之后，正确的输出结果是（       ）。\n#include <stdio.h>\nint main( )\n{\n   int x,y,z;\n\t scanf(\"%d%d%d\",&x,&y,&z);\n\t printf(\"x+y+z=%d/n\",x+y+z);\n\t return 0;\n}",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何使用scanf和printf函数进行输入输出操作。'}, {'name': '变量定义和赋值', 'description': '教学如何定义变量和给变量赋值。'}, {'name': '运算符', 'description': '教学如何使用加法运算符进行变量相加。'}, {'name': '格式化输出', 'description': '教学如何使用printf函数进行格式化输出。'}]"
    },
    {
        "sortId": 98,
        "id": "1593502935823278080",
        "title": "已知字符‘A’的ASCII码值是65，字符变量c1的值是‘A’,c2的值是‘D’。执行语句printf(\"%d,%d\",c1,c",
        "content": "已知字符‘A’的ASCII码值是65，字符变量c1的值是‘A’,c2的值是‘D’。执行语句printf(\"%d,%c\",c1,c2-2);后，输出结果是：（         ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'ASCII码','description':'ASCII码是一种用于表示字符的标准编码系统，每个字符都对应一个唯一的ASCII码值。在C语言中，可以使用%c格式符输出字符对应的ASCII码值。'}, {'name':'字符变量','description':'字符变量是一种用于存储字符数据的变量类型，在C语言中使用char关键字声明字符变量。字符变量可以存储单个字符，可以通过赋值操作将字符赋给字符变量。'}, {'name':'printf函数','description':'printf函数是C语言中用于输出格式化字符串的函数，可以使用不同的格式符来输出不同类型的数据。在题目中，使用%d格式符输出整数值，%c格式符输出字符值。'}, {'name':'运算符','description':'运算符是C语言中用于进行各种运算操作的符号。在题目中，使用-运算符对字符变量c2进行减法运算。'}]"
    },
    {
        "sortId": 99,
        "id": "1593497070357569536",
        "title": "若有定义：int a = 7;float x= 2.5,y = 4.7;则表达式x+a%3*(int)(x+y)%2/4的值是 ",
        "content": "若有定义：int a = 7;float x= 2.5,y = 4.7;则表达式x+a%3*(int)(x+y)%2/4的值是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，需要了解%运算符的优先级高于+和*运算符，以及强制类型转换的优先级高于%和*运算符。'}]"
    },
    {
        "sortId": 100,
        "id": "1593470986714992640",
        "title": "以下均是C语言的合法常量的选项是 ____ 。",
        "content": "以下均是C语言的合法常量的选项是（           ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言常量','description':'C语言中的常量是指在程序运行过程中其值不会发生改变的量。常量可以是整数、浮点数、字符、字符串等。在C语言中，常量的表示方式有多种，包括十进制、八进制、十六进制等。'}]"
    },
    {
        "sortId": 101,
        "id": "1592506772986908672",
        "title": "学会在合适的地方加一个逗号，当然也可能是多个",
        "content": "一般来说，对于一个金融上的数字，我们每三个数加一个千分位分隔符，分别对应1,000(千)，100,000（十万），100,000,000（千万）等等，在此，给定一个整型数字，要求输出在合适的地方加上千分位分隔符。\n\n### 输入格式:\n\n一个行，包含一个不超过int类型的正整数。\n\n### 输出格式:\n\n按照每隔三个数字添加一个逗号的原则进行输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10000\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n10,000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'千分位分隔符','description':'对于一个金融上的数字，每三个数加一个千分位分隔符，分别对应1,000(千)，100,000（十万），100,000,000（千万）等等。给定一个整型数字，要求输出在合适的地方加上千分位分隔符。'}]"
    },
    {
        "sortId": 102,
        "id": "1592467346151825408",
        "title": "第一题糊弄你给你点分的",
        "content": "这是一个糊弄你的题，希望给你送5分\n\n### 输入格式:\n\n无输入\n\n### 输出格式:\n\n输出一行zhe shi hu nong ni de !\n\n### 输入样例:\n\n无输入\n\n```in\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nzhe shi hu nong ni de !\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法'，'description':'学习C语言的基本语法，包括变量、数据类型、运算符、控制语句等。'}, {'name':'函数'，'description':'学习C语言中函数的定义、调用、参数传递等。'}, {'name':'数组'，'description':'学习C语言中数组的定义、访问、操作等。'}, {'name':'指针'，'description':'学习C语言中指针的概念、用法、指针与数组的关系等。'}, {'name':'结构体'，'description':'学习C语言中结构体的定义、访问、操作等。'}, {'name':'文件操作'，'description':'学习C语言中文件的打开、读写、关闭等操作。'}, {'name':'动态内存分配'，'description':'学习C语言中动态内存分配的概念、用法、内存泄漏的问题等。'}, {'name':'递归'，'description':'学习C语言中递归的概念、递归函数的编写、递归与循环的比较等。'}, {'name':'字符串'，'description':'学习C语言中字符串的定义、操作、字符串与字符数组的关系等。'}, {'name':'预处理器'，'description':'学习C语言中预处理器的概念、宏定义、条件编译等。'}, {'name':'位运算'，'description':'学习C语言中位运算的概念、位运算符的使用、位操作的应用等。'}]"
    },
    {
        "sortId": 103,
        "id": "1591794010656731136",
        "title": "大写字母转换为小写字母",
        "content": "\n编程从键盘输入一个大写英文字母，将其转换为小写英文字母，将转换后的小写英文字母及其十进制的ASCII码值显示到屏幕上。\n\n\n### 输入格式:\n\n从键盘输入一个大写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的小写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n\n### 输入样例:\n\n```in\nA\n```\n\n### 输出样例:\n\n```out\na,97\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 35,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入和向屏幕输出数据。'}, {'name': '数据类型转换', 'description': '学习如何将大写字母转换为小写字母，并将字符转换为ASCII码值。'}]"
    },
    {
        "sortId": 104,
        "id": "1591785931999408128",
        "title": "求圆的周长和面积（const）",
        "content": "使用const常量定义π的值（定义为3.14159），编程计算并输出圆的周长和面积。半径、周长和面积均定义为floatl型，半径值由键盘输入。\n\n### 输入格式:\n\n输入一个圆的半径。\n\n### 输出格式:\n\n圆的周长和面积在不同行输出，均保留两位小数。参看下面输出样例。\n\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n\n```out\nc=18.85\ns=28.27\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 35,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'const常量定义', 'description': '在C语言中，可以使用const关键字定义常量。常量的值在程序运行过程中不能被修改。在本题中，使用const常量定义π的值为3.14159。'}, {'name': '变量定义和输入', 'description': '在C语言中，可以使用变量来存储数据。在本题中，需要定义一个float类型的变量来存储圆的半径，并通过键盘输入获取半径的值。'}, {'name': '计算圆的周长和面积', 'description': '根据圆的半径，可以使用公式计算圆的周长和面积。周长的计算公式为2 * π * 半径，面积的计算公式为π * 半径 * 半径。'}, {'name': '输出结果', 'description': '使用printf函数将计算得到的圆的周长和面积输出到屏幕上。需要注意的是，输出结果需要保留两位小数。'}]"
    },
    {
        "sortId": 105,
        "id": "1591779372812587008",
        "title": "计算变量占内存的大小",
        "content": "从键盘分别输入一个char型、int型和double型变量的值。在每一行先输出变量的值，再输出该变量所占内存的字节数。\n\n### 输入格式:\n在一行内分别输入一个字符、整数和实数，数据间以空格分隔。\n\n### 输出格式:\n第一行：输出字符变量的值和该变量所占内存的字节数，中间以逗号分隔。\n第二行：输出整型变量的值和该变量所占内存的字节数，中间以逗号分隔。\n第三行：输出实型变量的值和该变量所占内存的字节数，中间以逗号分隔。\n参考下面输出样例。\n\n### 输入样例:\n\n```in\nB 13 56.8\n```\n\n### 输出样例:\n\n```out\nB,1\n13,4\n56.800000,8\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括char型、int型和double型等，每种数据类型在内存中所占的字节数不同。'}, {'name':'输入输出','description':'C语言中可以使用scanf函数从键盘输入数据，使用printf函数输出数据。'}, {'name':'变量','description':'C语言中使用变量来存储数据，变量需要先定义后使用。'}, {'name':'格式化输出','description':'C语言中可以使用格式化输出来控制输出的格式，如输出浮点数的小数位数。'}, {'name':'内存占用','description':'C语言中不同的数据类型在内存中所占的字节数不同，可以使用sizeof运算符来获取变量所占的字节数。'}]"
    },
    {
        "sortId": 106,
        "id": "1591251585039200256",
        "title": "连乘与累加",
        "content": "本题目要求读入2个非负整数$$m$$和$$n$$，然后计算如下算式。\n\n$$\n\\qquad\\displaystyle\\sum_{i=1}^{m}{\\prod_{j=i}^{n}\\bigg((-1)^{j-i}\\frac{i}{i+j}}\\bigg)\n$$\n\n### 输入格式:\n在一行中给出2个非负整数$$m$$和$$n$$。要求：$$m,n\\leq 10^5$$。\n\n### 输出格式:\n输出$$\n\\displaystyle\\sum_{i=1}^{m}{\\prod_{j=i}^{n}\\bigg((-1)^{j-i}\\frac{i}{i+j}}\\bigg)\n$$的值。要求：结果精确到小数点后2位。\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n2 2\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n0.33\n```\n\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n2 0\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n0.00\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。在本题中，需要使用循环结构来计算累加和。'}, {'name': '数学运算', 'description': '数学运算是C语言中的基本操作之一，包括加法、减法、乘法和除法等。在本题中，需要进行数学运算来计算累加和的每一项。'}, {'name': '数据类型', 'description': '数据类型是C语言中的基本概念，用于定义变量的类型和范围。常见的数据类型有整型、浮点型和字符型等。在本题中，需要使用整型和浮点型数据类型来存储和计算整数和小数。'}, {'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件选择执行不同的代码块。常见的条件语句有if语句和switch语句。在本题中，可以使用条件语句来判断是否需要进行乘法运算。'}, {'name': '函数', 'description': '函数是C语言中的一种模块化编程方式，用于封装一段可重复使用的代码。在本题中，可以使用函数来封装计算累加和的代码，提高代码的可读性和复用性。'}]"
    },
    {
        "sortId": 107,
        "id": "1591240426177294336",
        "title": "football scoreing",
        "content": "There are five ways to score points in american professional football:\n 1) Touchdown - 6 points\n 2) Field Goal - 3 points \n 3) Safety - 2 points\n 4) After touchdown \n    a) 1 point (Field Goal or Safety) - Typically called the “Point after” \n    b) 2 points (touchdown) - Typically called the “Two-point conversion” \nGiven the box score values for two competing teams, calculate the point total for each team.\n### Input:\nThere are two lines of input each containing five space-separated non-negative integers, $T, F, S, P$ and $C$ representing the number of Touchdowns, Field goals, Safeties, Points-after-touchdown andtwo-point Conversions after touchdown respectively. ($0 ≤ T ≤ 10,0 ≤ F ≤ 10,0 ≤ S ≤ 10,0 ≤ (P+C) ≤ T$). The first line represents the box score for the visiting team, and the second linere presents the box score for the home team. \n### Output:\nThe single output line consists of two space-separated integers showing the visiting score and the home score respectively\n\n### Sample Input:\n\n```in\n1 3 0 0 1\n3 1 1 1 1\n```\n\n### Sample Output:\n\n\n```out\n17 26\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'Variables and Data Types', 'description': 'Teach students about variables and data types in C programming. Explain the different types of variables and data types available in C, such as integers, floats, and characters. Show examples of how to declare and initialize variables in C.'}, {'name': 'Arithmetic Operators', 'description': 'Teach students about arithmetic operators in C programming. Explain the different arithmetic operators available in C, such as addition, subtraction, multiplication, and division. Show examples of how to use arithmetic operators in C.'}, {'name': 'Input and Output', 'description': 'Teach students about input and output in C programming. Explain how to read input from the user and display output to the screen using functions like scanf and printf. Show examples of how to use input and output functions in C.'}, {'name': 'Conditional Statements', 'description': 'Teach students about conditional statements in C programming. Explain how to use if statements and else statements to make decisions in a program. Show examples of how to use conditional statements in C.'}, {'name': 'Loops', 'description': 'Teach students about loops in C programming. Explain how to use for loops and while loops to repeat a block of code multiple times. Show examples of how to use loops in C.'}, {'name': 'Arrays', 'description': 'Teach students about arrays in C programming. Explain how to declare and initialize arrays, and how to access individual elements in an array. Show examples of how to use arrays in C.'}, {'name': 'Functions', 'description': 'Teach students about functions in C programming. Explain how to declare and define functions, and how to call functions from other parts of a program. Show examples of how to use functions in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Pointers', 'description': 'Teach students about pointers in C programming. Explain how to declare and initialize pointers, and how to use pointers to manipulate memory addresses and access data indirectly. Show examples of how to use pointers in C.'}, {'name': 'Structures', 'description': 'Teach students about structures in C programming. Explain how to declare and define structures, and how to access individual members of a structure. Show examples of how to use structures in C.'}, {'name': 'Enums', 'description': 'Teach students about enums in C programming. Explain how to declare and define enums, and how to use enums to create named constants. Show examples of how to use enums in C.'}, {'name': 'Preprocessor Directives', 'description': 'Teach students about preprocessor directives in C programming. Explain how to use preprocessor directives like #include and #define to include header files and define macros. Show examples of how to use preprocessor directives in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Memory Management', 'description': 'Teach students about memory management in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc and free. Show examples of how to use memory management functions in C.'}, {'name': 'Error Handling', 'description': 'Teach students about error handling in C programming. Explain how to handle errors and exceptions in a program using techniques like error codes and try-catch blocks. Show examples of how to handle errors in C.'}, {'name': 'Debugging', 'description': 'Teach students about debugging in C programming. Explain how to use debugging tools and techniques to find and fix errors in a program. Show examples of how to debug a C program.'}, {'name': 'Makefiles', 'description': 'Teach students about makefiles in C programming. Explain how to create and use makefiles to automate the compilation and linking process of a program. Show examples of how to write a makefile for a C program.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Bitwise Operators', 'description': 'Teach students about bitwise operators in C programming. Explain how to perform bitwise operations like AND, OR, XOR, and shift on binary numbers. Show examples of how to use bitwise operators in C.'}, {'name': 'Header Files', 'description': 'Teach students about header files in C programming. Explain how to create and use header files to separate the interface and implementation of a program. Show examples of how to create and include a header file in C.'}, {'name': 'Type Casting', 'description': 'Teach students about type casting in C programming. Explain how to convert one data type to another using type casting operators. Show examples of how to use type casting in C.'}, {'name': 'Dynamic Memory Allocation', 'description': 'Teach students about dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use dynamic memory allocation in C.'}, {'name': 'String Manipulation', 'description': 'Teach students about string manipulation in C programming. Explain how to declare and initialize strings, and how to perform operations like concatenation, comparison, and searching on strings. Show examples of how to manipulate strings in C.'}, {'name': 'Pointers and Arrays', 'description': 'Teach students about pointers and arrays in C programming. Explain how to use pointers to access elements of an array, and how to pass arrays to functions. Show examples of how to use pointers and arrays in C.'}, {'name': 'Structures and Pointers', 'description': 'Teach students about structures and pointers in C programming. Explain how to declare and define structures, and how to use pointers to access members of a structure. Show examples of how to use structures and pointers in C.'}, {'name': 'File I/O', 'description': 'Teach students about file input/output in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to perform file I/O operations in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Sorting Algorithms', 'description': 'Teach students about sorting algorithms in C programming. Explain how to implement and use sorting algorithms like bubble sort, insertion sort, selection sort, merge sort, and quick sort. Show examples of how to use sorting algorithms in C.'}, {'name': 'Searching Algorithms', 'description': 'Teach students about searching algorithms in C programming. Explain how to implement and use searching algorithms like linear search, binary search, and hash tables. Show examples of how to use searching algorithms in C.'}, {'name': 'Data Structures', 'description': 'Teach students about data structures in C programming. Explain how to implement and use data structures like linked lists, stacks, queues, trees, and graphs. Show examples of how to use data structures in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Pointers and Dynamic Memory Allocation', 'description': 'Teach students about pointers and dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use pointers and dynamic memory allocation in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Data Structures', 'description': 'Teach students about data structures in C programming. Explain how to implement and use data structures like linked lists, stacks, queues, trees, and graphs. Show examples of how to use data structures in C.'}, {'name': 'Sorting Algorithms', 'description': 'Teach students about sorting algorithms in C programming. Explain how to implement and use sorting algorithms like bubble sort, insertion sort, selection sort, merge sort, and quick sort. Show examples of how to use sorting algorithms in C.'}, {'name': 'Searching Algorithms', 'description': 'Teach students about searching algorithms in C programming. Explain how to implement and use searching algorithms like linear search, binary search, and hash tables. Show examples of how to use searching algorithms in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Pointers and Dynamic Memory Allocation', 'description': 'Teach students about pointers and dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use pointers and dynamic memory allocation in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Data Structures', 'description': 'Teach students about data structures in C programming. Explain how to implement and use data structures like linked lists, stacks, queues, trees, and graphs. Show examples of how to use data structures in C.'}, {'name': 'Sorting Algorithms', 'description': 'Teach students about sorting algorithms in C programming. Explain how to implement and use sorting algorithms like bubble sort, insertion sort, selection sort, merge sort, and quick sort. Show examples of how to use sorting algorithms in C.'}, {'name': 'Searching Algorithms', 'description': 'Teach students about searching algorithms in C programming. Explain how to implement and use searching algorithms like linear search, binary search, and hash tables. Show examples of how to use searching algorithms in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Pointers and Dynamic Memory Allocation', 'description': 'Teach students about pointers and dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use pointers and dynamic memory allocation in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Data Structures', 'description': 'Teach students about data structures in C programming. Explain how to implement and use data structures like linked lists, stacks, queues, trees, and graphs. Show examples of how to use data structures in C.'}, {'name': 'Sorting Algorithms', 'description': 'Teach students about sorting algorithms in C programming. Explain how to implement and use sorting algorithms like bubble sort, insertion sort, selection sort, merge sort, and quick sort. Show examples of how to use sorting algorithms in C.'}, {'name': 'Searching Algorithms', 'description': 'Teach students about searching algorithms in C programming. Explain how to implement and use searching algorithms like linear search, binary search, and hash tables. Show examples of how to use searching algorithms in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Pointers and Dynamic Memory Allocation', 'description': 'Teach students about pointers and dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use pointers and dynamic memory allocation in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Data Structures', 'description': 'Teach students about data structures in C programming. Explain how to implement and use data structures like linked lists, stacks, queues, trees, and graphs. Show examples of how to use data structures in C.'}, {'name': 'Sorting Algorithms', 'description': 'Teach students about sorting algorithms in C programming. Explain how to implement and use sorting algorithms like bubble sort, insertion sort, selection sort, merge sort, and quick sort. Show examples of how to use sorting algorithms in C.'}, {'name': 'Searching Algorithms', 'description': 'Teach students about searching algorithms in C programming. Explain how to implement and use searching algorithms like linear search, binary search, and hash tables. Show examples of how to use searching algorithms in C.'}, {'name': 'Recursion', 'description': 'Teach students about recursion in C programming. Explain how to write recursive functions that call themselves to solve a problem. Show examples of how to use recursion in C.'}, {'name': 'Pointers and Dynamic Memory Allocation', 'description': 'Teach students about pointers and dynamic memory allocation in C programming. Explain how to allocate and deallocate memory dynamically using functions like malloc, calloc, realloc, and free. Show examples of how to use pointers and dynamic memory allocation in C.'}, {'name': 'File Handling', 'description': 'Teach students about file handling in C programming. Explain how to open, read, write, and close files using functions like fopen, fread, fwrite, and fclose. Show examples of how to use file handling functions in C.'}, {'name': 'Command Line Arguments', 'description': 'Teach students about command line arguments in C programming. Explain how to pass arguments to a program from the command line, and how to process them inside the program. Show examples of how to use command line arguments in C.'}]"
    },
    {
        "sortId": 108,
        "id": "1591110214605197312",
        "title": "Here, Sign In",
        "content": "In geometry, a cuboid is a convex polyhedron bounded by six quadrilateral faces, whose polyhedral graph is the same as that of a cube. While mathematical literature refers to any such polyhedron as a cuboid, other sources use \"cuboid\" to refer to a shape of this type in which each of the faces is a rectangle (and so each pair of adjacent faces meets in a right angle); this more restrictive type of cuboid is also known as a rectangular cuboid, right cuboid, rectangular box, rectangular hexahedron, right rectangular prism, or rectangular parallelepiped.\n(From wikipedia)\nThere is a cuboid with length of three sides are $a, b$ and $c$ respectively.\nOutput the volumn of the cuboid.\n$（1≤a,b,c≤10）$\n### Input:\n\nThere is one line of three integer $a, b, c$ seperated by blanks.\n\n\n### Output:\nOutput the answer\n\n###  Sample Input:\n\n```in\n1 2 3\n```\n\n###  Sample Output:\n\n```out\n6\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。常见的数据类型包括整型、浮点型、字符型等。在本题中，需要使用整型变量来存储边长的值。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数来读取输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数读取输入的边长值，使用printf函数输出计算得到的体积值。'}, {'name': '算术运算', 'description': '在C语言中，可以使用算术运算符进行基本的数学运算，如加法、减法、乘法和除法。在本题中，需要使用乘法运算符计算边长的立方值，然后再进行乘法运算得到体积值。'}]"
    },
    {
        "sortId": 109,
        "id": "1590592909261533184",
        "title": "在C语言中，用于标记回车符的转义字符是：",
        "content": "在C语言中，用于标记回车符的转义字符是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'转义字符', 'description':'转义字符是一种特殊的字符序列，用于表示一些特殊的字符或者控制字符。在C语言中，用于标记回车符的转义字符是\\\\n。'}]"
    },
    {
        "sortId": 110,
        "id": "1590588010364788736",
        "title": "设 int x=3, y=2，则表达式 x / y的值是",
        "content": "设 int x=3, y=2，则表达式 x / y的值是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，即将两个整数相除并返回结果的整数部分。在本题中，表达式x / y的值是1。'}]"
    },
    {
        "sortId": 111,
        "id": "1590587728167821312",
        "title": "下列哪项是正确的char 型变量的声明？",
        "content": "下列哪项是正确的char 型变量的声明（ ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'char 型变量的声明'，'description':'char 型变量的声明是指在C语言中声明一个char类型的变量，用于存储字符数据。在C语言中，char类型的变量可以通过以下方式进行声明：\\n1. 使用关键字char，后跟变量名，例如：char ch;\\n2. 使用关键字char，后跟变量名和初始值，例如：char ch = 'a';\\n3. 使用关键字char，后跟变量名和数组大小，例如：char str[10];\\n注意：char类型的变量只能存储一个字符，如果需要存储多个字符，可以使用字符数组。'}]"
    },
    {
        "sortId": 112,
        "id": "1590587294317404160",
        "title": "下列不属于C语言数据类型的是？",
        "content": "下列不属于C语言数据类型的是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言数据类型'，'description':'C语言数据类型是C语言中用来表示不同类型数据的关键字，包括基本数据类型和派生数据类型。'}]"
    },
    {
        "sortId": 113,
        "id": "1590586618703110144",
        "title": "下列四组选项中,均不是C语言键字的选项是",
        "content": "下列四组选项中,均不是C语言键字的选项是（）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言关键字','description':'C语言关键字是指在C语言中具有特殊含义的单词，不能作为标识符使用。'}]"
    },
    {
        "sortId": 114,
        "id": "1590044783081549824",
        "title": "布尔积与逻辑短路（动态数组）",
        "content": "对于布尔(0-1)矩阵$$A=(a_{ij})_{m\\times n}$$和$$B=(b_{ij})_{n\\times p}$$，求$A$和$B$的布尔积$A\\odot B=(c_{ij})_{m\\times p}$，并返回逻辑与运算的执行次数。\n\n布尔积运算定义如下：\n$\\qquad c_{ij}=\\displaystyle\\bigvee_{k=1}^{n}(a_{ik}\\wedge b_{kj})$.\n其中，$\\vee$是逻辑或(||)操作，$\\wedge$是逻辑与(&&)操作。\n\n例如：\n$$\\left(\n\\begin{array}{ccc}\n1&0&1\\\\\n\\textcolor{red}{0}&\\textcolor{red}{1}&\\textcolor{red}{1}\\\\\n1&0&0\n\\end{array}\\right)\\odot \\left(\n\\begin{array}{ccc}\n1&0&\\textcolor{lightgreen}{1}\\\\\n0&1&\\textcolor{lightgreen}{1}\\\\\n1&0&\\textcolor{lightgreen}{0}\n\\end{array}\\right)=\\left(\n\\begin{array}{ccc}\n1&0&1\\\\\n1&1&\\large{\\textcircled{\\small{1}}}\\\\\n1&0&1\n\\end{array}\\right)\n$$\n其中，\n$\\qquad\\large{\\textcircled{\\small{1}}}=\\textcolor{red}{0}\\&\\&\\textcolor{lightgreen}{1}||\\textcolor{red}{1}\\&\\&\\textcolor{lightgreen}{1}||\\textcolor{red}{1}\\&\\&\\textcolor{lightgreen}{0}$\n考虑到逻辑运算的逻辑短路(惰性求值)现象，事实上，\n$\\qquad\\large{\\textcircled{\\small{1}}}=\\textcolor{red}{0}\\&\\&\\textcolor{lightgreen}{1}||\\textcolor{red}{1}\\&\\&\\textcolor{lightgreen}{1}$\n即只做了2次逻辑与操作。\n\n### 输入格式:\n第一行给出变量$m$, $n$和$p$的变量, 其中，$m,n,p\\in Z^+$。\n接下来的$m$行给出矩阵$A_{m\\times n}$，每行包括$n$个布尔值（即0/1值），用空格隔开；\n接下来的$n$行给出矩阵$B_{n\\times p}$，每行包括$p$个布尔值（即0/1值），用空格隔开。\n\n### 输出格式:\n首先输出$m$行$p$列数据，即$A\\odot B$的结果，列间使用一个空格隔开，最后一列后无空格；然后在下一行给出运算过程中逻辑与运算发生的次数。\n\n### 输入样例:\n```in\n3 3 3\n1 0 1\n0 1 1\n1 0 0\n1 0 1\n0 1 1\n1 0 0\n```\n\n### 输出样例:\n```out\n1 0 1\n1 1 1\n1 0 1\n17\n```\n\n### 提示:\n由于本题中矩阵$A$和$B$的维数是由变量$m$, $n$和$p$确定的，而C语言在定义普通数组时，数组大小必须是整型常量，所以不能在程序中直接定义二维数组，需要用到动态数组。请参考如下代码段：\n```c++\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n    int m, n, p, i, j;\n    int **A, **B, **C;\n    scanf(\"%d%d%d\", &m, &n, &p);\n    \n    //生成动态数组A,B和C, 即为这3个二维数组分配内存，然后录入矩阵数据\n    A=(int**)calloc(m,sizeof(int*));\n    B=(int**)calloc(n,sizeof(int*));\n\t\tC=(int**)calloc(m,sizeof(int*));\n    for(i=0;i<m;i++)\n    {\n        A[i]=(int*)calloc(n,sizeof(int));\n        for(j=0;j<n;j++)\n\t\t\tscanf(\"%d\", &A[i][j]);\n    }\n    for(i=0;i<n;i++)\n    {\n        B[i]=(int*)calloc(p,sizeof(int));\n        for(j=0;j<p;j++)\n\t\t\tscanf(\"%d\", &B[i][j]);\n    }\n\tfor(i=0;i<m;i++)\n    {\n        C[i]=(int*)calloc(p,sizeof(int));\n    }\n    \n    /*-----------------------------------\n\t\t矩阵录入数据已结束，以下是实现布尔积的代码部分，请注意：动态数组与普通数组的引用形式相同\n\t\t该部分上面的代码和下面的代码你无需关注，不过变量声明部分可能需要增加新的变量\n\t-----------------------------------*/\n    \n    \n    \n    \n    //动态数组用完后，所占内存不会自动释放，需要手动释放\n    for(i=0;i<m;i++)\n        free(A[i]);\n    free(A);\n    for(i=0;i<n;i++)\n        free(B[i]);\n    free(B);\n    for(i=0;i<m;i++)\n        free(C[i]);\n    free(C);\n\t\t\n    return 0;\n}\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "992015922862505984",
                        "name": "线性代数",
                        "isLeaf": false,
                        "enName": "Linear Algebra"
                    },
                    {
                        "id": "992016022380769280",
                        "name": "矩阵及其运算",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "992016252002140160",
                        "name": "矩阵的基本运算",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '动态数组', 'description': '动态数组是在程序运行时动态分配内存空间的数组，可以根据需要动态调整数组的大小。在C语言中，可以使用malloc()函数或calloc()函数来动态分配内存空间，使用free()函数来释放内存空间。在本题中，需要使用动态数组来存储矩阵A、B和C的数据。'}, {'name': '矩阵输入', 'description': '矩阵输入是指从输入流中读取矩阵的数据，并将其存储到相应的数组中。在本题中，需要从输入中读取变量m、n和p的值，然后使用动态数组来存储矩阵A和B的数据。'}, {'name': '布尔积运算', 'description': '布尔积运算是指对两个布尔矩阵进行逻辑与运算的操作。在本题中，需要实现布尔积运算，并将结果存储到矩阵C中。布尔积运算的具体实现可以使用嵌套循环来遍历矩阵A和B的元素，并使用逻辑与运算符来计算布尔积的每个元素的值。'}, {'name': '逻辑与运算次数', 'description': '逻辑与运算次数是指在布尔积运算过程中进行逻辑与运算的次数。在本题中，需要统计逻辑与运算的次数，并将结果输出。逻辑与运算的次数可以通过在布尔积运算的代码中添加计数器来实现。'}]"
    },
    {
        "sortId": 115,
        "id": "1590018567452618752",
        "title": "矩阵输出",
        "content": "输出特殊格式的矩阵。\n\n### 输入格式:\n\n输入一行，给出3个整数：$$m$$、$$n$$和$$q$$，分别表示：\n1. 待输出矩阵的行数$$m$$；\n1. 待输出矩阵的列数$$n$$；\n1. 待输出矩阵中第1行第1列的数字$$q$$。\n\n### 输出格式:\n\n首先，输出$$m$$行$$n$$列的矩阵，要求：\n1. 第1列是公差为2的等差数列；\n1. 第$$i$$行是公差为$$2\\times i+3$$的等差数列。\n\n然后，在下一行输出第一个能被5整除的数的行号、列号及数值；若不存在这样的数值，则输出0\n\n### 输入样例1:\n```in\n3 5 2\n```\n\n### 输出样例1:\n```out\n2\t7\t12\t17\t22\n4\t11\t18\t25\t32\n6\t15\t24\t33\t42\n2\t4\t25\n```\n**注意**：列间用一个水平制表位相隔，最后一列后面没有制表位。\n### 输入样例2:\n```in\n1 4 1\n```\n### 输出样例2:\n```out\n1\t6\t11\t16\n0\n```\n**注意**：列间用一个水平制表位(\\t)相隔，最后一列后面没有制表位。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来输出矩阵的每一行。'},\n{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断是否存在能被5整除的数。'},\n{'name':'数组'，'description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据。在本题中，可以使用数组来存储矩阵的每个元素。'},\n{'name':'算术运算'，'description':'算术运算是C语言中的一种基本运算，包括加法、减法、乘法、除法等。在本题中，可以使用算术运算来计算矩阵中每个元素的值。'},\n{'name':'格式化输出'，'description':'格式化输出是C语言中的一种输出方式，可以按照指定的格式输出数据。在本题中，可以使用格式化输出来输出矩阵和能被5整除的数的行号、列号及数值。'}]"
    },
    {
        "sortId": 116,
        "id": "1589881871276736512",
        "title": "素因数分解",
        "content": "对于给定的正整数$$n$$，输出$$n$$的素因数的乘式。\n\n### 输入格式:\n\n输入一个正整数$$n$$，要求$$1<n\\leq 2^{16}-1$$。\n\n### 输出格式:\n\n输出$$n$$的素因数的乘式，要求这些素因数呈非递减排列。\n\n### 输入样例1:\n\n```in\n102\n```\n\n### 输出样例1:\n\n```out\n2*3*17\n```\n\n### 输入样例2:\n\n```in\n980\n```\n\n### 输出样例2:\n\n```out\n2*2*5*7*7\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '素因数分解', 'description': '素因数分解是将一个正整数分解成若干个素数相乘的形式。在这道题中，要求对给定的正整数n进行素因数分解，并按照非递减的顺序输出素因数的乘式。'}]"
    },
    {
        "sortId": 117,
        "id": "1587372315707469824",
        "title": "输出符号序列",
        "content": "本题目要求输入一个符号和一个1-50的整数n，输出n个符号序列。\n\n### 输入格式:\n\n输入一个符号和一个1-50的整数。\n\n### 输出格式:\n\n输出n个符号序列\n\n### 输入样例:\n\n```in\n& 5\n```\n\n### 输出样例:\n\n```out\n&&&&&\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何进行输入和输出操作，包括读取输入数据和输出结果。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及不同的数据类型和其使用方法。'}, {'name':'循环结构','description':'学习如何使用循环结构，包括for循环、while循环和do-while循环。'}, {'name':'条件语句','description':'学习如何使用条件语句，包括if语句和switch语句。'}, {'name':'字符串处理','description':'学习如何处理字符串，包括字符串的输入、输出和常见的字符串操作函数。'}]"
    },
    {
        "sortId": 118,
        "id": "1586710098293059584",
        "title": "命中率",
        "content": "某高射炮打飞机，开 $$n$$ 炮才能命中一次。拉来 $$n$$ 门同样的高射炮同时开火，是不是一定能把飞机打下来呢？\n\n请编写程序，输入正整数 $$n$$，输出命中率 $$p$$。\n\n#### 输入格式\n> $$n$$\n\n#### 输出格式\n> $$p$$\n\n要求：输出百分数，保留 1 位小数。\n\n#### 输入样例\n```in\n20\n\n```\n#### 输出样例\n```out\n64.2%\n\n```\n注：输入样例和输出样例只描述了数据格式，实际值可能不同。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。在本题中，可以使用循环结构来模拟高射炮的连续开火，直到命中一次为止。'}, {'name': '条件判断', 'description': '条件判断是根据某个条件的真假来决定程序的执行路径。在本题中，可以使用条件判断来判断是否命中飞机，以及计算命中率。'}, {'name': '格式化输出', 'description': '格式化输出是指按照一定的格式将数据输出到屏幕上。在本题中，需要将命中率以百分数的形式输出，可以使用格式化输出来实现。'}]"
    },
    {
        "sortId": 119,
        "id": "1586699874131804160",
        "title": "楼层高度",
        "content": "一幢楼房高度为 $$h$$ 米，共有 $$n$$ 层。小明家住 $$f$$ 层，他家地板离地面的高度 $$s$$ 为多少米？\n\n#### 输入格式\n> $$h$$  $$n$$  $$f$$\n\n\n\n#### 输出格式\n> $$s$$\n\n要求：输出2位小数，末尾四舍五入。\n\n#### 输入样例\n```in\n(略)\n\n```\n#### 输出样例\n```out\n(略)\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'输入输出'，'description':'C语言中的输入和输出的方法和格式化控制符的使用。'}, {'name':'运算符'，'description':'C语言中的各种运算符的使用方法和优先级。'}, {'name':'条件语句'，'description':'C语言中的条件语句（if语句、switch语句）的使用方法和注意事项。'}, {'name':'循环语句'，'description':'C语言中的循环语句（for循环、while循环、do-while循环）的使用方法和注意事项。'}, {'name':'函数'，'description':'C语言中函数的定义、调用和参数传递的方法。'}, {'name':'数组'，'description':'C语言中数组的定义、初始化和使用方法。'}, {'name':'指针'，'description':'C语言中指针的概念、声明和使用方法。'}, {'name':'字符串'，'description':'C语言中字符串的定义、初始化和常用操作方法。'}, {'name':'结构体'，'description':'C语言中结构体的定义、初始化和使用方法。'}, {'name':'文件操作'，'description':'C语言中文件的打开、读写和关闭操作方法。'}, {'name':'宏定义'，'description':'C语言中宏定义的概念、使用方法和注意事项。'}, {'name':'预处理指令'，'description':'C语言中预处理指令的概念、使用方法和注意事项。'}, {'name':'递归'，'description':'C语言中递归的概念、实现和注意事项。'}, {'name':'位运算'，'description':'C语言中位运算的概念、使用方法和注意事项。'}, {'name':'动态内存分配'，'description':'C语言中动态内存分配的概念、使用方法和注意事项。'}, {'name':'多文件编程'，'description':'C语言中多文件编程的概念、使用方法和注意事项。'}, {'name':'错误处理'，'description':'C语言中错误处理的概念、使用方法和注意事项。'}, {'name':'数据结构'，'description':'C语言中常用数据结构的定义、实现和使用方法。'}, {'name':'算法'，'description':'C语言中常用算法的实现和使用方法。'}, {'name':'调试技巧'，'description':'C语言程序调试的常用技巧和方法。'}, {'name':'编码规范'，'description':'C语言程序编写的规范和注意事项。'}, {'name':'其他'，'description':'C语言中其他相关知识点的介绍和使用方法。'}]"
    },
    {
        "sortId": 120,
        "id": "1586191062757044224",
        "title": "胜率",
        "content": "或者有事，或者没伴，或者……“有球必应”好些天没打乒乓球了。这一天，恰好事情可以错开，恰好有人约球，终于又能打乒乓球了，哈哈，真开心！因为只有2人打球，所以采用“七局四胜”制，即每场比赛先胜4局者赢得该场比赛。若这天共打了$n$场比赛，第$i$场比赛的比分为$a_i:b_i$，即该场“有球必应”胜$a_i$局，对手胜$b_i$局，请计算“有球必应”和对手这一天的胜率。这里约定胜率为**某个选手赢的总局数除以两个选手赢的总局数之和**。\n\n### 输入格式:\n\n测试数据有多组，处理到文件尾。对于每组测试，首先第一行输入一个正整数$n(n≤10)$，然后输入$n$行，每行包含两个整数$a_i,b_i(0≤a_i,b_i≤4)$，含义如上描述。\n\n### 输出格式:\n\n对于每组测试，输出“有球必应”和对手的胜率各是多少。结果四舍五入保留2位小数，两个胜率之间留一个空格。\n\n### 输入样例:\n\n```in\n4\n1 4\n4 1\n4 3\n3 4\n5\n2 4\n4 0\n4 1\n1 4\n4 3\n```\n\n### 输出样例:\n\n```out\n0.50 0.50\n0.56 0.44\n```\n\n### 提示:\n\n对于样例3，“有球必应”赢了2+4+4+1+4=15局，对手赢了4+0+1+4+3=12局，胜率分别为15/(15+12)=15/27, 12/(15+12)=12/27。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。常见的数据类型包括整型、浮点型、字符型等。在本题中，需要使用整型变量来存储比分。'}, {'name': '运算符', 'description': '在C语言中，运算符用于进行各种数学和逻辑运算。本题中需要使用算术运算符来计算胜率。'}, {'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的结构。在本题中，可以使用循环结构来处理多组测试数据。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码。在本题中，可以使用条件语句来判断比赛结果并计算胜率。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的方式。在本题中，需要使用输入输出函数来读取输入数据和输出结果。'}]"
    },
    {
        "sortId": 121,
        "id": "1585900023584415744",
        "title": "求球体的表面积和体积",
        "content": "### 题目描述\n\n输入一个球体的半径$r$，求该球体的表面积和体积。\n\n### 输入格式:\n\n在一行中给出1个球体的半径。\n\n### 输出格式:\n\n第一行输出球体的表面积，第二行输出球体的题记。小数点后保留2位。\n\n### 输入样例:\n\n例如：\n\n```in\n4.5\n```\n\n### 输出样例:\n\n例如：\n\n```out\n254.47\n381.70\n```\n说明：球的表面积=“圆周率π”乘以“半径平方的4倍”，即$S=4πr^2$。$π$取值3.1415926。\n球的体积=“圆周率π”乘以“半径立方的三分之四倍”，即$V=(4/3)πr^3$。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从标准输入读取数据，并将结果输出到标准输出。'}, {'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name': '运算符和表达式', 'description': '学习C语言中的运算符和表达式的使用，包括算术运算符、赋值运算符、逻辑运算符等。'}, {'name': '控制结构', 'description': '学习C语言中的控制结构，包括条件语句、循环语句等。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的遍历和操作。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的操作和处理。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针的运算和指针与数组的关系。'}, {'name': '结构体', 'description': '学习如何声明和使用结构体，以及结构体的成员访问和操作。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件的读写位置和错误处理。'}]"
    },
    {
        "sortId": 122,
        "id": "1585553923681841152",
        "title": "求圆柱体的周长、面积和体积",
        "content": "请设计程序：输入一个圆柱体的半径和高度，求圆柱体底面的圆周长、圆面积和圆柱体的体积，请按照周长、面积和体积的顺序输出，每个结果都取小数点后2位。π=3.14。如果输入数据不合法，则输出“此输入不是圆柱体。”\n\n### 输入格式:\n\n在一行中输入半径和高度，中间用一个空格分隔。\n\n### 输出格式:\n\n在一行中按顺序输出圆周长、圆面积和圆柱体的体积，取小数点后2位，中间用一个空格分隔。如果输入数据不合法，则输出“此输入不是圆柱体。”\n\n### 输入样例:\n\n\n```in\n3.1 2.2\n```\n### 输出样例:\n```out\n19.47 30.18 66.39\n```\n### 输入样例:\n\n```in\n0.2 0.0007\n```\n### 输出样例:\n\n```out\n1.26 0.13 0.00\n```\n### 输入样例:\n```in\n6.3 -1\n```\n### 输出样例:\n```out\n此输入不是圆柱体。\n```\n\n\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从用户输入获取数据，并将结果输出给用户。'}, {'name':'变量','description':'学习如何声明和使用变量来存储数据。'}, {'name':'运算符','description':'学习如何使用运算符进行数学运算和逻辑运算。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'循环语句','description':'学习如何使用循环语句来重复执行一段代码块。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、浮点数和字符串，并了解它们的特点和用法。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值。'}, {'name':'错误处理','description':'学习如何处理输入数据不合法的情况，以及如何输出错误信息给用户。'}]"
    },
    {
        "sortId": 123,
        "id": "1585537556844929024",
        "title": "阅兵方队",
        "content": "阅兵方队正迈着整齐的步伐从广场上走来，告诉你每个队伍的行、列数，以及领队数量，请你计算队伍的总人数。\n\n### 输入格式:\n\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。对于每组测试数据，输入3个整数$n,m,k(0<n,m,k<100)$，分别表示行、列数，以及领队数量。\n\n### 输出格式:\n\n对于每组测试数据，输出方队的总人数。\n\n### 输入样例:\n\n```in\n2\n10 15 2\n20 20 3\n```\n\n### 输出样例:\n\n```out\n152\n403\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等。在本题中，需要使用整型变量来表示行、列数和领队数量。'}, {'name':'运算符'，'description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符等。在本题中，需要使用算术运算符进行计算。'}, {'name':'循环结构'，'description':'C语言中的循环结构包括for循环、while循环、do-while循环等。在本题中，可以使用循环结构来重复计算每组测试数据。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数包括scanf函数和printf函数。在本题中，需要使用scanf函数来读取输入数据，使用printf函数来输出结果。'}]"
    },
    {
        "sortId": 124,
        "id": "1585535365241401344",
        "title": "大写字母转换为小写",
        "content": "用户输入一个字符，如果为大写字母，则输出小写字母；如果为其他字符，则原样输出。\n\n\n\n### 输入格式:\n\n输入一个字符。\n\n### 输出格式:\n\n对输入的大写字母输出其对应的小写字母，其他字符则原样输出。\n\n### 输入样例:\n\n例如：\n\n```in\nA\n```\n\n### 输出样例:\n\n例如：\n\n```out\na\n```\n### 输入样例:\n\n例如：\n\n```in\na\n```\n\n### 输出样例:\n\n例如：\n\n```out\na\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符输入与输出'，'description':'本题涉及到字符的输入与输出，包括用户输入一个字符和输出一个字符。'}, {'name':'条件判断'，'description':'本题涉及到条件判断，根据用户输入的字符进行判断，如果是大写字母则输出小写字母，否则原样输出。'}, {'name':'字符转换'，'description':'本题涉及到字符的转换，将大写字母转换为小写字母。'}]"
    },
    {
        "sortId": 125,
        "id": "1585101701170212864",
        "title": "C语言中，关系表达式和逻辑表达式的值",
        "content": "  C语言中，关系表达式和逻辑表达式的值是( )。\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'关系表达式和逻辑表达式','description':'关系表达式和逻辑表达式是C语言中常用的表达式类型，用于进行条件判断和逻辑运算。关系表达式用于比较两个值的大小关系，返回一个布尔值（真或假），常用的关系运算符有等于（==）、不等于（!=）、大于（>）、小于（<）、大于等于（>=）、小于等于（<=）等。逻辑表达式用于组合多个关系表达式，返回一个布尔值，常用的逻辑运算符有与（&&）、或（||）、非（!）等。'}]"
    },
    {
        "sortId": 126,
        "id": "1585088744067579904",
        "title": "正确的变量名",
        "content": "下面哪个是正确的变量名（）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量命名规则'，'description':'变量名必须以字母或下划线开头，后面可以是字母、数字或下划线。变量名不能是C语言的关键字。'}]"
    },
    {
        "sortId": 127,
        "id": "1584815364139532288",
        "title": "语句printf(\"%.2f\",1/3);输出为0.33。",
        "content": "语句`printf(\"%.2f\",1/3);`输出为`0.33`。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数的格式化输出','description':'printf函数是C语言中用于输出的函数，通过格式化字符串控制输出的格式。在本题中，通过\"%.2f\"的格式化字符串，可以将1/3的结果输出为0.33。'}]"
    },
    {
        "sortId": 128,
        "id": "1584812874161598464",
        "title": "C语言编译系统在判断一个量是否为“真”时，以0代表“假”，以非0代表“真”。",
        "content": "C语言编译系统在判断一个量是否为“真”时，以0代表“假”，以非0代表“真”。\n\n",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言编译系统', 'description': 'C语言编译系统在判断一个量是否为“真”时，以0代表“假”，以非0代表“真”'}]"
    },
    {
        "sortId": 129,
        "id": "1584812171548569600",
        "title": "printf函数输出数据时会根据格式控制符自动进行数据类型转换。",
        "content": "printf函数输出数据时会根据格式控制符自动进行数据类型转换。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式控制符', 'description': '格式控制符是用于指定printf函数输出数据时的格式，包括数据类型、宽度、精度等。printf函数会根据格式控制符自动进行数据类型转换，将不同类型的数据转换为指定的格式输出。'}]"
    },
    {
        "sortId": 130,
        "id": "1584804672011386880",
        "title": "已有变量定义 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是___。",
        "content": "已有变量定义 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是___。\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数的使用'，'description':'scanf函数用于从标准输入流中读取数据，并将其存储到指定的变量中。在本题中，正确的函数调用是scanf(\"%lf\", &a)。其中，%lf是用于读取double类型的格式控制符，&a表示将输入的值存储到变量a中。'}]"
    },
    {
        "sortId": 131,
        "id": "1584802592680976384",
        "title": "能正确表示“年龄(age)在17~30岁之间”和“80岁以上”的C语言表达式是___。",
        "content": "能正确表示“年龄(age)在17~30岁之间”和“80岁以上”的C语言表达式是___。\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对多个条件进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）和非（!）。在这道题目中，需要使用逻辑运算符来表示“年龄在17~30岁之间”和“80岁以上”的条件。'}]"
    },
    {
        "sortId": 132,
        "id": "1584738835451748352",
        "title": "输入金额输出各种面额数量",
        "content": "从键盘输入一指定金额（以元为单位，如345.78），然后显示支付该金额的各种面额人民币数量，要求显示100元、50元、10元、5元、2元、1元、5角、1角、5分、1分各多少张。(输出面额最大值)\n比如:345.78=100$$*$$3+10$$*$$4+5$$*$$1+0.5$$*$$1+0.1$$*$$2+0.05$$*$$1+0.01$$*$$3\n\n### 输入格式:\n输入指定金额以元为单位，如：345.78\n### 输出格式:\n输出各面额组成的算式：\n金额输出小数点后两位，某面额数为0则不输出该面额，等号后第一个面额前无“+”，输出完成后换行。\n如：345.78=100$$*$$3+10$$*$$4+5$$*$$1+0.5$$*$$1+0.1$$*$$2+0.05$$*$$1+0.01$$*$$3\n如：23.27=10$$*$$2+2$$*$$1+1$$*$$1+0.1$$*$$2+0.05$$*$$1+0.01$$*$$2\n如果金额小于等于零则输出“输入有误”。\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n345.78\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n345.78=100*3+10*4+5*1+0.5*1+0.1*2+0.05*1+0.01*3\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n23.27\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n23.27=10*2+2*1+1*1+0.1*2+0.05*1+0.01*2\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入指定金额，并将结果输出到屏幕上。'}, {'name':'数据类型','description':'学习如何使用浮点数类型来表示金额。'}, {'name':'算术运算','description':'学习如何进行加法、乘法等算术运算，以及如何使用取余运算符。'}, {'name':'条件语句','description':'学习如何使用条件语句来判断金额是否小于等于零。'}, {'name':'循环语句','description':'学习如何使用循环语句来计算各种面额人民币的数量。'}, {'name':'字符串格式化','description':'学习如何使用字符串格式化来输出结果。'}]"
    },
    {
        "sortId": 133,
        "id": "1583789736325947392",
        "title": "求出一个任意三位整数的各位数字",
        "content": "本题要求编写程序，输入一个任意三位数的正整数，输出这个整数的个位数字、十位数字和百位数字的值。\n\n### 输入格式:\n\n输入一个三位数的正整数x。\n\n### 输出格式:\n\n按照以下格式输出：\n  x = 个位数字 + 十位数字＊10 + 百位数字＊100\n\n### 输入样例:\n\n```in\n234\n```\n\n### 输出样例:\n\n```out\n234 = 4 + 3 * 10 + 2 * 100\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'学习如何使用输入输出函数进行基本的数据输入输出操作。'}, {'name':'变量与赋值','description':'学习如何声明变量并进行赋值操作。'}, {'name':'算术运算','description':'学习如何进行基本的算术运算操作。'}, {'name':'运算符优先级','description':'学习不同运算符的优先级，以及如何使用括号改变运算顺序。'}, {'name':'数据类型','description':'学习不同的数据类型，如整型、浮点型等，并了解它们的特点和使用方法。'}, {'name':'格式化输出','description':'学习如何使用格式化输出函数进行输出控制，如控制输出的宽度、小数位数等。'}, {'name':'条件语句','description':'学习如何使用条件语句进行程序流程控制，如if语句、switch语句等。'}, {'name':'循环语句','description':'学习如何使用循环语句进行程序流程控制，如for循环、while循环等。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name':'数组','description':'学习如何定义和使用数组，以及数组的遍历和操作。'}, {'name':'字符串','description':'学习如何定义和使用字符串，以及字符串的常见操作和函数。'}, {'name':'指针','description':'学习如何定义和使用指针，以及指针的常见操作和函数。'}, {'name':'结构体','description':'学习如何定义和使用结构体，以及结构体的成员访问和操作。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作，以及文件指针的定位和文件的打开关闭。'}]"
    },
    {
        "sortId": 134,
        "id": "1582633554491998208",
        "title": "判断char型变量c1是否为小写字母的正确表达式是（ ）。",
        "content": "判断char型变量c1是否为小写字母的正确表达式是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。'}]"
    },
    {
        "sortId": 135,
        "id": "1582054795044978688",
        "title": "输入格式(角度)",
        "content": "在空白处填写适当内容，输出一行满足格式要求的文字。\n\n```c\nint degree, minute;\ndouble second;\nscanf(__________, &degree, &minute, &second);\nprintf(\"%d %d %g\\n\", degree, minute, second);\n```\n\n##### 输入样例1\n```in\n0:0:0\n\n```\n\n##### 输出样例1\n```out\n0 0 0\n\n```\n\n##### 输入样例2\n```in\n8:20:3.5\n\n```\n\n##### 输出样例2\n```out\n8 20 3.5\n\n```\n\n##### 输入样例3\n```in\n135:5:10.001\n\n```\n\n##### 输出样例3\n```out\n135 5 10.001\n\n```\n\n#### 输入样例4\n```in\n359:59:59.994\n\n```\n\n#### 输出样例4\n```out\n359 59 59.994\n\n```\n\n提示：只填写空白处的内容。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数用于从标准输入流中读取数据，并根据指定的格式进行解析和赋值。在这道题中，scanf函数的格式字符串应为\"%d:%d:%lf\"，分别对应整数、冒号、整数、冒号、浮点数的格式。'}, {'name':'printf函数','description':'printf函数用于将数据按照指定的格式输出到标准输出流中。在这道题中，printf函数的格式字符串应为\"%d %d %g\\\\n\"，分别对应整数、空格、整数、空格、浮点数和换行符的格式。'}]"
    },
    {
        "sortId": 136,
        "id": "1582048498534842368",
        "title": "输出格式(角度)",
        "content": "在空白处填写适当内容，输出一行满足格式要求的文字。\n\n```c\nint degree, minute;\ndouble second;\nscanf(\"%d %d %lf\", &degree, &minute, &second);\nprintf(__________, degree, minute, second);\n```\n\n##### 输入样例1\n```in\n0 0 0\n\n```\n\n##### 输出样例1\n```out\n000:00:00.00\n\n```\n\n##### 输入样例2\n```in\n8 20 3.5\n\n```\n\n##### 输出样例2\n```out\n008:20:03.50\n\n```\n\n##### 输入样例3\n```in\n135 5 10.008\n\n```\n\n##### 输出样例3\n```out\n135:05:10.01\n\n```\n\n#### 输入样例4\n```in\n359 59 59.994\n\n```\n\n#### 输出样例4\n```out\n359:59:59.99\n\n```\n\n提示：只填写空白处的内容。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数用于从标准输入流中读取数据，并根据指定的格式进行解析。在这道题中，使用了%d和%lf格式分别读取整数和浮点数。'}, {'name':'printf函数','description':'printf函数用于将数据按照指定的格式输出到标准输出流中。在这道题中，使用了%d和%lf格式分别输出整数和浮点数。'}, {'name':'变量定义和赋值','description':'在这道题中，定义了三个变量degree、minute和second，并通过scanf函数将输入的值赋给这些变量。'}, {'name':'格式化输出','description':'在这道题中，要求将degree、minute和second按照指定的格式输出，即将整数部分补齐到3位，小数部分补齐到2位。'}]"
    },
    {
        "sortId": 137,
        "id": "1579463834267803650",
        "title": "设有定义“int a=2,  b=3, c=4;”, 则下列选项中值为0的表达式是()。",
        "content": "设有定义“int a=2,  b=3, c=4;”, 则下列选项中值为0的表达式是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。在本题中，需要了解算术运算符的使用，特别是等于运算符“==”和赋值运算符“=”的区别。'}]"
    },
    {
        "sortId": 138,
        "id": "1579463834267803649",
        "title": "与语句“y=(x>0? 1:x<0?-1:0);”功能相同的if语句是()。",
        "content": "与语句“y=(x>0? 1:x<0?-1:0);”功能相同的if语句是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件运算符','description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假来选择不同的值。它的语法形式为：表达式1 ? 表达式2 : 表达式3。当条件表达式为真时，返回表达式2的值；当条件表达式为假时，返回表达式3的值。在给定的题目中，语句“y=(x>0? 1:x<0?-1:0);”使用了条件运算符来实现根据x的值来给y赋不同的值。'}]"
    },
    {
        "sortId": 139,
        "id": "1579463834267803648",
        "title": "若有定义“char a; int b; float c; double d;”, 则表达式a*b+d-c值的类型为()。",
        "content": "若有定义“char a; int b; float c; double d;”, 则表达式a*b+d-c值的类型为()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念，用于定义变量的类型和大小。在这道题中，涉及到了char、int、float和double这四种数据类型的使用。'},\n {'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号。在这道题中，涉及到了乘法运算符(*)和减法运算符(-)的使用。'},\n {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。在这道题中，涉及到了不同数据类型之间的运算，需要进行隐式类型转换。'}]"
    },
    {
        "sortId": 140,
        "id": "1579463834263609349",
        "title": "若有定义“char cl = 'b',  c2 = ' e ';”, 则语句“printf (\"% d,%c\\n \" , c2",
        "content": "若有定义“char cl = 'b',  c2 = ' e ';”, 则语句“printf (\"% d,%c\\n \" , c2 -c1, c2-'a'+'A');”的输出结果是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型及其运算','description':'字符类型及其运算是C语言中的基础知识点之一。在C语言中，字符类型使用char关键字进行定义，可以进行字符之间的运算。本题中涉及到了字符类型的定义和字符之间的减法运算。'}]"
    },
    {
        "sortId": 141,
        "id": "1579463834263609348",
        "title": "在以下一组运算符中,优先级最高的运算符是()。",
        "content": "在以下一组运算符中,优先级最高的运算符是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级'，'description':'运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，括号运算符()具有最高的优先级，它可以改变表达式中的运算顺序。'}]"
    },
    {
        "sortId": 142,
        "id": "1579463834263609347",
        "title": "已知字符“A”的 ASCII代码值是65, 字符变量c1 的值是“A”, c2的值是“D”。执行语句“printf(\" % d",
        "content": "已知字符“A”的 ASCII代码值是65, 字符变量c1 的值是“A”, c2的值是“D”。执行语句“printf(\" % d ,% d\" , cl, c2-2);”后，输出结果是 ()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'ASCII码', 'description': 'ASCII码是一种用于表示字符的标准编码系统，每个字符都对应一个唯一的ASCII码值。在C语言中，可以使用整型变量来存储和操作ASCII码值。'}, {'name': '字符变量', 'description': '字符变量是一种特殊的数据类型，用于存储和操作单个字符。在C语言中，可以使用字符变量来表示和处理字符数据。'}, {'name': 'printf函数', 'description': 'printf函数是C语言中用于输出格式化字符串的函数。通过使用格式化字符串和占位符，可以将变量的值以指定的格式输出到屏幕上。'}]"
    },
    {
        "sortId": 143,
        "id": "1579463834263609346",
        "title": "已有定义“int x = 3, y= 4, z=5;”, 则表达式“!(x+y)+z-1 && y+z/2”的值是()。",
        "content": "已有定义“int x = 3, y= 4, z=5;”, 则表达式“!(x+y)+z-1 && y+z/2”的值是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级和结合性'，'description':'运算符优先级和结合性是C语言中非常重要的概念，它决定了表达式中各个运算符的执行顺序。在本题中，需要了解“&&”、“+”、“-”、“/”、“!”等运算符的优先级和结合性，以确定表达式的值。'}]"
    },
    {
        "sortId": 144,
        "id": "1579463834263609345",
        "title": "设有定义“int k=0;”, 下列选项的4个表达式中与其他3个表达式的值不相同的是()。",
        "content": "设有定义“int k=0;”, 下列选项的4个表达式中与其他3个表达式的值不相同的是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义与初始化'，'description':'变量定义与初始化是C语言中的基础知识点，通过定义和初始化变量来存储和操作数据。在这个题目中，学生需要理解变量的定义和初始化的概念，并能够分析不同表达式的值是否相同。'}]"
    },
    {
        "sortId": 145,
        "id": "1579463834263609344",
        "title": "设变量x为float型且已赋值, 则以下语句中能将x中的数值保留到小数点后两位, 并将第三位四舍五入的是()。",
        "content": "设变量x为float型且已赋值, 则以下语句中能将x中的数值保留到小数点后两位, 并将第三位四舍五入的是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数格式化'，'description':'浮点数格式化是指将浮点数按照指定的格式输出，包括保留小数位数和四舍五入等操作。在C语言中，可以使用printf函数的格式化输出来实现浮点数的格式化。'}]"
    },
    {
        "sortId": 146,
        "id": "1579463834259415043",
        "title": "下列关于单目运算符++、--的叙述正确的是()。",
        "content": "下列关于单目运算符++、--的叙述正确的是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'单目运算符++、--'，'description':'单目运算符++、--用于对变量进行自增和自减操作。'}]"
    },
    {
        "sortId": 147,
        "id": "1579463834259415042",
        "title": "以下选项中,非法的字符常量是()。",
        "content": "以下选项中,非法的字符常量是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符常量', 'description': '字符常量是由单引号括起来的一个字符，可以是字母、数字、特殊字符等。在C语言中，字符常量必须用单引号括起来，且只能包含一个字符。非法的字符常量可能是由于使用了多个字符或者没有使用单引号括起来。'}]"
    },
    {
        "sortId": 148,
        "id": "1579463834259415041",
        "title": "设有定义“int a=1, b=2, c=3, d=4, m=2, n=2;”, 则执行表达式“(m=a>b)&&(n=c>d)",
        "content": "设有定义“int a=1, b=2, c=3, d=4, m=2, n=2;”, 则执行表达式“(m=a>b)&&(n=c>d)”后,n的值为()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了逻辑运算符&&的使用。'}, {'name':'赋值语句','description':'赋值语句用于将一个值赋给变量，本题中涉及到了多个变量的赋值操作。'}, {'name':'比较运算符','description':'比较运算符用于比较两个值的大小关系，本题中涉及到了比较运算符>和<的使用。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，本题中涉及到了逻辑运算符&&的使用。'}, {'name':'变量定义','description':'变量定义用于声明并初始化变量，本题中涉及到了多个变量的定义和初始化。'}]"
    },
    {
        "sortId": 149,
        "id": "1579463834259415040",
        "title": "下列程序的输出结果是()。",
        "content": "下列程序的输出结果是()。\nint main(void)\n{   int k = 11;\nprintf(\"k =%d, k =%o, k =%x\\n\", k, k, k);\nreturn 0;    }",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式化输出', 'description': '格式化输出是C语言中常用的输出方式，通过使用格式化字符串来指定输出的格式。在本题中，使用了%d、%o和%x来分别输出十进制、八进制和十六进制的整数。'}]"
    },
    {
        "sortId": 150,
        "id": "1579463834255220736",
        "title": "下列选项中,值为1的表达式是()。",
        "content": "下列选项中,值为1的表达式是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '表达式', 'description': '在C语言中，表达式是由运算符和操作数组成的，可以进行各种运算和计算。在这道题中，需要判断哪个选项的表达式的值为1。'}]"
    },
    {
        "sortId": 151,
        "id": "1579463834251026432",
        "title": "C语言中最简单的数据类型包括()。",
        "content": "C语言中最简单的数据类型包括()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'数据类型是C语言中最基本的概念之一，用于定义变量的类型和范围。C语言中最简单的数据类型包括整型、浮点型、字符型和布尔型。'}]"
    },
    {
        "sortId": 152,
        "id": "1579390544073449472",
        "title": "若变量x、y都为int型数, 以下表达式中不能正确表示数学关系│x-y | <10的是()。",
        "content": "若变量x、y都为int型数, 以下表达式中不能正确表示数学关系│x-y | <10的是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '算术运算符', 'description': '算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，加法运算符用+表示，减法运算符用-表示。'}]"
    },
    {
        "sortId": 153,
        "id": "1579389548597338114",
        "title": "设变量已正确定义, 则以下能正确计算f=n!的程序段是()。",
        "content": "设变量已正确定义, 则以下能正确计算f=n!的程序段是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量定义', 'description': '在C语言中，变量定义是指声明一个变量并为其分配内存空间。在这个知识点中，学生需要了解如何正确定义变量，包括变量的类型、名称和初始值。'}, {'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在这个知识点中，学生需要了解如何使用循环结构来实现阶乘的计算。'}, {'name': '函数调用', 'description': '函数调用是指在程序中使用函数来执行特定的任务。在这个知识点中，学生需要了解如何调用已定义的函数来计算阶乘。'}, {'name': '递归', 'description': '递归是指在函数内部调用自身的过程。在这个知识点中，学生需要了解如何使用递归来计算阶乘。'}]"
    },
    {
        "sortId": 154,
        "id": "1579389548597338113",
        "title": "下列程序的功能是:给r输人数据并计算半径为r的圆面积s。程序在编译时出",
        "content": "下列程序的功能是:给r输人数据并计算半径为r的圆面积s。程序在编译时出\n错, 原因是()。\nint main(void)\n/*hangzhou */\n{   int r; float s;\nscanf(\"%d\" ,&r);\ns=PI *r *r;\nprintf(\"s =%f\\n \",s);\nreturn 0;    }",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量声明和定义', 'description': '在程序中声明和定义变量，包括变量的类型和名称。'}, {'name': '输入输出函数', 'description': '使用scanf和printf函数进行输入和输出操作。'}, {'name': '常量的使用', 'description': '使用常量PI进行计算。'}, {'name': '运算符的使用', 'description': '使用乘法运算符进行计算。'}, {'name': '语法错误', 'description': '程序在编译时出错，原因是语法错误。'}]"
    },
    {
        "sortId": 155,
        "id": "1579389548597338112",
        "title": "下列两条语句“int c1 =1,c2=2, c3;c3=1.0/ c2 *c1;”执行后变量c3中的值是()。",
        "content": "下列两条语句“int c1 =1,c2=2, c3;c3=1.0/ c2 *c1;”执行后变量c3中的值是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，数据类型转换可以通过强制类型转换来实现。在本题中，c2和c1都是int类型，而1.0是double类型，因此在计算1.0/ c2 *c1时，c2会被转换为double类型，然后进行除法运算，得到一个double类型的结果，最后再与c1相乘，得到的结果会被转换为int类型赋给c3。'}]"
    },
    {
        "sortId": 156,
        "id": "1579389548593143808",
        "title": "以下能正确地定义整型变量a, b和c并为它们赋初值5的语句是()。",
        "content": "以下能正确地定义整型变量a, b和c并为它们赋初值5的语句是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和赋值'，'description':'变量定义和赋值是C语言程序设计中的基础知识点。在C语言中，可以使用关键字int来定义整型变量，并使用赋值运算符=为变量赋初值。'}]"
    },
    {
        "sortId": 157,
        "id": "1579389548584755200",
        "title": "C语言中, 运算对象必须是整型数的运算符是()。",
        "content": "C语言中, 运算对象必须是整型数的运算符是()。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整型数运算符'，'description':'整型数运算符是指在C语言中，运算对象必须是整型数的运算符。这些运算符包括加法运算符（+），减法运算符（-），乘法运算符（*），除法运算符（/），取余运算符（%），自增运算符（++），自减运算符（--），位运算符（&，|，^，~，<<，>>），赋值运算符（=），等于运算符（==），不等于运算符（!=），大于运算符（>），小于运算符（<），大于等于运算符（>=），小于等于运算符（<=）等。'}]"
    },
    {
        "sortId": 158,
        "id": "1578990896078876672",
        "title": "字符输入输出函数的使用",
        "content": "编写程序：\n定义两个整型变量c1,c2，用getchar函数读入两个字符给c1和c2，然后分别用putchar函数和printf函数输出这两个字符。\n定义两个字符型变量C1,C2，用getchar函数读入两个字符给C1和C2，然后分别用putchar函数和printf函数输出这两个字符。并要求输出C1和C2的ASCII码值。\n\n\n### 输入格式:\n\n请在这里写输入格式。例如：输入在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n请在这里描述输出格式。例如：对每一组输入，在一行中输出A+B的值。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nab\nAB\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nc1=a,c2=b\nC1=A,C2=B\nASCII:C1=65,C2=66\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'getchar函数', 'description': 'getchar函数用于从标准输入流中读取一个字符，并返回读取的字符值。'}, {'name': 'putchar函数', 'description': 'putchar函数用于将一个字符输出到标准输出流中。'}, {'name': 'printf函数', 'description': 'printf函数用于格式化输出，可以输出各种类型的数据，包括字符、字符串、整数、浮点数等。'}, {'name': '整型变量', 'description': '整型变量用于存储整数值，可以通过定义变量来创建整型变量。'}, {'name': '字符型变量', 'description': '字符型变量用于存储单个字符，可以通过定义变量来创建字符型变量。'}, {'name': 'ASCII码值', 'description': 'ASCII码是一种字符编码标准，用于表示字符和数字之间的对应关系。可以通过printf函数输出字符的ASCII码值。'}]"
    },
    {
        "sortId": 159,
        "id": "1578972357892730880",
        "title": "输入构成三角形三边，计算其面积。",
        "content": "输入三个整数a,b,c，判断其是否能够构成三角形三边，如果能够则计算其面积。如果不能则输出相关提示“不能构成三角形。”\n构成三角形三边的条件是：任意两边之和大于第三边。\n三角形面积公式为：\n\narea=$$\\sqrt{p(p-a)(p-b)(p-c)}$$\n\n         （ 其中p=(a+b+c)/2，为半周长）\n\n\np及area使用double类型。\n\n### 输入格式:\n3 4 5\n\n### 输出格式:\n能构成三角形输出输入前的提示及计算后的面积，面积保留三位小数位数。\n不能构成三角形则输出相关提示“不能构成三角形。”的提示信息。\n请输入a,b,c:\n3 4 5\narea=6.000\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n3 4 5\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入a,b,c:\narea=6.000\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n1 2 5\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入a,b,c:\n不能构成三角形。\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 9,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件判断', 'description': '学生需要掌握如何使用条件判断语句来判断三个整数是否能够构成三角形。'}, {'name': '变量和数据类型', 'description': '学生需要了解如何定义和使用整数和浮点数类型的变量来存储输入的三个整数和计算的面积。'}, {'name': '数学运算', 'description': '学生需要了解如何使用数学运算符和函数来进行数值计算，包括求和、求平方根和乘法。'}, {'name': '输入输出', 'description': '学生需要了解如何使用输入输出函数来获取用户输入的三个整数和输出计算后的面积。'}, {'name': '字符串格式化', 'description': '学生需要了解如何使用字符串格式化函数来将计算后的面积保留三位小数位数并输出。'}]"
    },
    {
        "sortId": 160,
        "id": "1578965320664313856",
        "title": "输入任意一个4位数整数，将该数反序输出(不使用循环）",
        "content": "输入任意一个4位数整数n，将该数反序输出。（不使用循环语句依次求出各位数值，并组装反序数值。）\n\n### 输入格式:\n要求输入的数据是一个四位整数。\n如：1354\n若输入的数据不在范围1000<=n<=9999中。则输出提示信息“输入的数据有误!”\n\n### 输出格式:\nn为1354,反序后：4531\n\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n1354\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\nn为1354,反序后：4531\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n1000\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\nn为1000,反序后：0001\n```\n### 输入样例3:\n\n在这里给出一组输入。例如：\n\n```in\n354\n```\n\n### 输出样例3:\n\n在这里给出相应的输出。例如：\n\n```out\nn为354,输入的数据有误!\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 11,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环语句', 'description': '循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在C语言中，常用的循环语句有for循环、while循环和do-while循环。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件语句有if语句和switch语句。'}, {'name': '输入输出函数', 'description': '输入输出函数用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '数据类型', 'description': '数据类型用于定义变量的类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型和指针类型等。'}, {'name': '运算符', 'description': '运算符用于进行各种数学和逻辑运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组', 'description': '数组是一种用于存储多个相同类型的数据的数据结构。在C语言中，数组的下标从0开始，可以通过下标来访问数组中的元素。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用函数并传递参数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}, {'name': '字符串', 'description': '字符串是由多个字符组成的字符数组，在C语言中，字符串以null字符结尾。可以使用字符串函数来处理字符串，如strlen函数、strcpy函数和strcat函数等。'}, {'name': '指针', 'description': '指针是用来存储内存地址的变量，在C语言中，可以通过指针来访问和修改内存中的数据。指针可以指向不同类型的数据，可以进行指针运算和指针的比较。'}, {'name': '条件判断', 'description': '条件判断用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name': '循环控制', 'description': '循环控制用于控制循环的执行流程，可以通过循环控制语句来改变循环的次数或跳出循环。在C语言中，常用的循环控制语句有break语句和continue语句。'}, {'name': '输入输出', 'description': '输入输出用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '变量', 'description': '变量是用来存储数据的内存空间，在C语言中，变量需要先声明后使用，并且可以通过变量名来访问和修改变量的值。'}, {'name': '逻辑运算', 'description': '逻辑运算用于对多个条件进行逻辑判断，常用的逻辑运算符有与运算、或运算和非运算。'}, {'name': '算术运算', 'description': '算术运算用于进行各种数学运算，常用的算术运算符有加法、减法、乘法和除法等。'}, {'name': '循环', 'description': '循环用于重复执行一段代码，可以根据条件来控制循环的次数。在C语言中，常用的循环语句有for循环、while循环和do-while循环。'}, {'name': '数组访问', 'description': '数组访问用于通过下标来访问数组中的元素，数组的下标从0开始。在C语言中，可以使用下标运算符[]来进行数组访问。'}, {'name': '字符串处理', 'description': '字符串处理用于对字符串进行各种操作，如字符串的拼接、复制和比较等。在C语言中，可以使用字符串函数来进行字符串处理。'}, {'name': '指针操作', 'description': '指针操作用于对指针进行各种操作，如指针的赋值、指针的运算和指针的比较等。在C语言中，可以使用指针运算符*和&来进行指针操作。'}, {'name': '条件判断语句', 'description': '条件判断语句用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name': '循环控制语句', 'description': '循环控制语句用于控制循环的执行流程，可以通过循环控制语句来改变循环的次数或跳出循环。在C语言中，常用的循环控制语句有break语句和continue语句。'}, {'name': '输入输出函数', 'description': '输入输出函数用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '数据类型定义', 'description': '数据类型定义用于定义变量的类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型和指针类型等。'}, {'name': '运算符使用', 'description': '运算符使用用于进行各种数学和逻辑运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组定义', 'description': '数组定义用于定义一个包含多个相同类型元素的数据结构。在C语言中，数组的下标从0开始，可以通过下标来访问数组中的元素。'}, {'name': '函数定义', 'description': '函数定义用于定义一个完成特定任务的代码块，可以通过函数名来调用函数并传递参数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}, {'name': '字符串定义', 'description': '字符串定义用于定义一个由多个字符组成的字符数组，在C语言中，字符串以null字符结尾。可以使用字符串函数来处理字符串，如strlen函数、strcpy函数和strcat函数等。'}, {'name': '指针定义', 'description': '指针定义用于定义一个用来存储内存地址的变量，在C语言中，可以通过指针来访问和修改内存中的数据。指针可以指向不同类型的数据，可以进行指针运算和指针的比较。'}, {'name': '条件判断使用', 'description': '条件判断使用用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name': '循环控制使用', 'description': '循环控制使用用于控制循环的执行流程，可以通过循环控制语句来改变循环的次数或跳出循环。在C语言中，常用的循环控制语句有break语句和continue语句。'}, {'name': '输入输出使用', 'description': '输入输出使用用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '数据类型使用', 'description': '数据类型使用用于定义变量的类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型和指针类型等。'}, {'name': '运算符操作', 'description': '运算符操作用于进行各种数学和逻辑运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组操作', 'description': '数组操作用于通过下标来访问数组中的元素，数组的下标从0开始。在C语言中，可以使用下标运算符[]来进行数组操作。'}, {'name': '函数调用', 'description': '函数调用用于调用一个已经定义好的函数，并传递参数给函数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}, {'name': '字符串处理操作', 'description': '字符串处理操作用于对字符串进行各种操作，如字符串的拼接、复制和比较等。在C语言中，可以使用字符串函数来进行字符串处理。'}, {'name': '指针操作', 'description': '指针操作用于对指针进行各种操作，如指针的赋值、指针的运算和指针的比较等。在C语言中，可以使用指针运算符*和&来进行指针操作。'}, {'name': '条件判断语句使用', 'description': '条件判断语句使用用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name': '循环控制语句使用', 'description': '循环控制语句使用用于控制循环的执行流程，可以通过循环控制语句来改变循环的次数或跳出循环。在C语言中，常用的循环控制语句有break语句和continue语句。'}, {'name': '输入输出函数使用', 'description': '输入输出函数使用用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '数据类型定义和使用', 'description': '数据类型定义和使用用于定义变量的类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型和指针类型等。'}, {'name': '运算符使用和操作', 'description': '运算符使用和操作用于进行各种数学和逻辑运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组定义和操作', 'description': '数组定义和操作用于定义一个包含多个相同类型元素的数据结构。在C语言中，数组的下标从0开始，可以通过下标来访问数组中的元素。'}, {'name': '函数定义和调用', 'description': '函数定义和调用用于定义一个完成特定任务的代码块，可以通过函数名来调用函数并传递参数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}, {'name': '字符串定义和处理', 'description': '字符串定义和处理用于定义一个由多个字符组成的字符数组，在C语言中，字符串以null字符结尾。可以使用字符串函数来处理字符串，如strlen函数、strcpy函数和strcat函数等。'}, {'name': '指针定义和操作', 'description': '指针定义和操作用于定义一个用来存储内存地址的变量，在C语言中，可以通过指针来访问和修改内存中的数据。指针可以指向不同类型的数据，可以进行指针运算和指针的比较。'}, {'name': '条件判断语句使用和操作', 'description': '条件判断语句使用和操作用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name': '循环控制语句使用和操作', 'description': '循环控制语句使用和操作用于控制循环的执行流程，可以通过循环控制语句来改变循环的次数或跳出循环。在C语言中，常用的循环控制语句有break语句和continue语句。'}, {'name': '输入输出函数使用和操作', 'description': '输入输出函数使用和操作用于从键盘上读取输入数据或将数据输出到屏幕上。在C语言中，常用的输入输出函数有scanf函数和printf函数。'}, {'name': '数据类型定义和使用', 'description': '数据类型定义和使用用于定义变量的类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型和指针类型等。'}, {'name': '运算符使用和操作', 'description': '运算符使用和操作用于进行各种数学和逻辑运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组定义和操作', 'description': '数组定义和操作用于定义一个包含多个相同类型元素的数据结构。在C语言中，数组的下标从0开始，可以通过下标来访问数组中的元素。'}, {'name': '函数定义和调用', 'description': '函数定义和调用用于定义一个完成特定任务的代码块，可以通过函数名来调用函数并传递参数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}]"
    },
    {
        "sortId": 161,
        "id": "1578962560099262464",
        "title": "输入任意一个4位数整数，将该数反序输出(使用循环）",
        "content": "输入任意一个4位数整数a，将该数反序输出。（使用循环语句依次求出各位数值，并组装反序数值。）\n\n### 输入格式:\n要求输入的数据是一个四位整数。\n如：1354\n若输入的数据不在范围1000<=a<=9999中。则输出提示信息“输入的数据有误!”\n\n### 输出格式:\na为1354,反序后：4531\n\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n1354\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\na为1354,反序后：4531\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n1000\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\na为1000,反序后：0001\n```\n### 输入样例3:\n\n在这里给出一组输入。例如：\n\n```in\n354\n```\n\n### 输出样例3:\n\n在这里给出相应的输出。例如：\n\n```out\na为354,输入的数据有误!\n```\n\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 11,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环语句', 'description':'循环语句用于重复执行一段代码，可以使用for循环、while循环或do-while循环来实现。在本题中，可以使用循环语句依次求出输入整数的各位数值，并组装成反序数值。'}, {'name':'条件判断', 'description':'条件判断用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件判断来判断输入的数据是否在范围1000<=a<=9999中，如果不在范围内，则输出提示信息。'}, {'name':'变量', 'description':'变量用于存储数据，可以通过变量来保存输入的整数和计算得到的反序数值。在本题中，可以使用变量来保存输入的整数a和计算得到的反序数值。'}]"
    },
    {
        "sortId": 162,
        "id": "1578958239806754816",
        "title": "输入两个整数，交换两个数的值",
        "content": "从那键盘上输入两个整数a和b，交换两个数的值。分别输出交换前及交换后的结果。\n### 输入格式:\n3 5\n### 输出格式:\n输出前有一定的提示：\n交换前：a=3,b=5\n交换后：a=5,b=3\n### 输入样例:\n例如：\n```in\n3 5\n```\n### 输出样例:\n例如：\n```out\n交换前：a=3,b=5\n交换后：a=5,b=3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'通过使用临时变量，将两个变量的值进行交换。'}, {'name':'输入输出','description':'使用键盘输入函数和输出函数，实现从键盘输入两个整数，并输出交换前后的结果。'}]"
    },
    {
        "sortId": 163,
        "id": "1578319715294121984",
        "title": "圆的周长",
        "content": "给你圆的半径，请你求出圆的周长，取pi=3.1415926。\n\n### 输入格式:\n输入一个数，代表圆的半径。\n\n### 输出格式:\n每行对应输出圆的周长，结果保留2位小数。\n\n### 输入样例:\n```in\n1\n```\n\n### 输出样例:\n```out\n6.28\n```\n\n### 输入样例:\n```in\n4.5\n```\n\n### 输出样例:\n```out\n28.27\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等，通过定义变量来存储数据。'}，{'name':'运算符'，'description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符等，用于进行各种运算操作。'}，{'name':'输入输出'，'description':'C语言中的输入输出函数包括scanf()和printf()，用于从键盘输入数据和向屏幕输出数据。'}，{'name':'控制语句'，'description':'C语言中的控制语句包括条件语句、循环语句和跳转语句，用于控制程序的执行流程。'}，{'name':'函数'，'description':'C语言中的函数是一段完成特定任务的代码块，可以重复使用，提高代码的复用性和可读性。'}，{'name':'数组'，'description':'C语言中的数组是一种存储相同类型数据的集合，通过下标访问数组元素。'}，{'name':'指针'，'description':'C语言中的指针是一种特殊的变量，存储变量的地址，可以通过指针访问和修改变量的值。'}，{'name':'结构体'，'description':'C语言中的结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。'}，{'name':'文件操作'，'description':'C语言中的文件操作函数包括打开文件、读写文件和关闭文件等，用于对文件进行读写操作。'}]"
    },
    {
        "sortId": 164,
        "id": "1578312865047777280",
        "title": "两个整数的平均值",
        "content": "题目描述\n求两个整数的平均数，要求结果保留2位小数。\n\n### 输入格式:\n输入两个整数a、b，用空格分开。\n\n### 输出格式:\n对每一组输入，在一行中先输出“Average=”,然后输出a、b的平均值（结果保留2位小数）。\n\n### 输入样例:\n```in\n3 5\n```\n\n### 输出样例:\n```out\nAverage=4.00\n```\n\n### 输入样例:\n```in\n3 6\n```\n\n### 输出样例:\n```out\nAverage=4.50\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法，包括整型、浮点型等数据类型的声明和赋值操作。'}, {'name':'算术运算符'，'description':'C语言中的算术运算符的使用方法，包括加法、减法、乘法、除法等运算符的使用。'}, {'name':'格式化输出'，'description':'C语言中的格式化输出的方法，包括使用printf函数进行输出，并且控制输出的格式，如保留小数位数等。'}, {'name':'输入输出'，'description':'C语言中的输入输出的方法，包括使用scanf函数进行输入，并且控制输入的格式，如读取整数、浮点数等。'}, {'name':'运算符优先级'，'description':'C语言中的运算符优先级的概念和使用方法，包括算术运算符、关系运算符、逻辑运算符等的优先级顺序。'}]"
    },
    {
        "sortId": 165,
        "id": "1578304960361795584",
        "title": "利用公式计算前N个自然数的和",
        "content": "输入一个正整数n，请你利用公式(1+n)*n/2计算1+2+…+n的和。\n\n\n### 输入格式:\n\n输入一个正整数n。\n\n### 输出格式:\n\n对每一个输入的正整数n，在一行中输出1+2+…+n的和。\n\n### 输入样例:\n\n```in\n10\n```\n\n### 输出样例:\n\n```out\n55\n```\n### 输入样例:\n\n```in\n100\n```\n\n### 输出样例:\n\n```out\n5050\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来计算1+2+…+n的和。'}，{'name':'算术运算'，'description':'算术运算是C语言中的一种基本运算，包括加法、乘法等。在本题中，可以使用算术运算来计算1+2+…+n的和。'}]"
    },
    {
        "sortId": 166,
        "id": "1577511473240481792",
        "title": "程序设计基础-第一次课-课堂练习-自增运算",
        "content": "以下程序的执行结果为 ,  ,  , \n#include<stdio.h> \nint main( )\n{ \n    int i, j, x, y;\n    i=5; j=7;\n    x=++i, y=j++;\n    printf(\"%d,%d,%d,%d\\n\",i,j,x,y);\n    return 0;\n}",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自增运算符'，'description':'自增运算符是C语言中的一种特殊运算符，用于将变量的值增加1。在表达式中，自增运算符可以放在变量的前面（前自增）或者后面（后自增）。前自增运算符会先将变量的值增加1，然后再参与表达式的计算；后自增运算符会先参与表达式的计算，然后再将变量的值增加1。'}，{'name':'逗号运算符'，'description':'逗号运算符是C语言中的一种特殊运算符，用于将多个表达式连接在一起，并按照从左到右的顺序依次计算这些表达式。逗号运算符的结果是最后一个表达式的值。在给变量赋值时，逗号运算符可以用于同时给多个变量赋值。'}]"
    },
    {
        "sortId": 167,
        "id": "1577509234484580352",
        "title": "程序设计基础-第一次课-课堂练习-逗号表达式",
        "content": "逗号表达式(a＝3*5,a*4),a+15的值为，a的值为。 \n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逗号表达式'，'description':'逗号表达式是一种特殊的运算符，它允许在一个表达式中使用多个子表达式，并按照从左到右的顺序依次计算这些子表达式。逗号表达式的值是最后一个子表达式的值。在给定的习题中，逗号表达式(a＝3*5,a*4)中，首先计算a＝3*5，然后计算a*4，最后的结果就是a+15的值。'}]"
    },
    {
        "sortId": 168,
        "id": "1577508656454955008",
        "title": "程序设计基础-第一次课-课堂练习-赋值运算符",
        "content": "若有int a＝10;则执行完语句a+＝a－＝a－a后，a的值是\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符有多种形式，包括=、+=、-=等。本题涉及到+=和-=运算符的使用。'}, {'name':'运算符优先级','description':'在C语言中，不同的运算符有不同的优先级。当一个表达式中包含多个运算符时，需要按照优先级的顺序进行计算。本题涉及到+=和-=运算符的优先级。'}, {'name':'变量','description':'变量是用来存储数据的内存位置。在C语言中，变量需要先声明后使用，并且可以通过赋值运算符来改变变量的值。本题涉及到变量a的使用。'}]"
    },
    {
        "sortId": 169,
        "id": "1577507857712680960",
        "title": "程序设计基础-第一次课-课堂练习-整型常量",
        "content": "以下正确的整型常量是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整型常量', 'description':'整型常量是指在程序中直接写出的整数值，可以是正数、负数或零。在C语言中，整型常量可以使用十进制、八进制或十六进制表示。'}]"
    },
    {
        "sortId": 170,
        "id": "1577507520616468480",
        "title": "程序设计基础-第一次课-课堂练习-c源程序",
        "content": "C源程序文件的扩展名为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C源程序文件的扩展名', 'description':'C源程序文件的扩展名是.c。在C语言中，源程序文件的扩展名为.c，这是为了方便编译器识别和处理C语言源代码文件。'}]"
    },
    {
        "sortId": 171,
        "id": "1577507207129993216",
        "title": "程序设计基础-第一次课-课堂练习-c源程序编译",
        "content": "以下说法中正确的是\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中有几种基本数据类型，包括整型、浮点型、字符型等。在C语言中，整型数据可以表示整数，浮点型数据可以表示小数，字符型数据可以表示单个字符。在本题中，正确的说法应该是关于基本数据类型的知识点。'},\n{'name':'运算符'，'description':'C语言中有多种运算符，包括算术运算符、关系运算符、逻辑运算符等。算术运算符用于进行基本的数学运算，关系运算符用于比较两个值的大小关系，逻辑运算符用于进行逻辑判断。在本题中，正确的说法应该是关于运算符的知识点。'},\n{'name':'条件语句'，'description':'C语言中的条件语句用于根据条件的真假来执行不同的代码块。常见的条件语句有if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。在本题中，正确的说法应该是关于条件语句的知识点。'},\n{'name':'循环语句'，'description':'C语言中的循环语句用于重复执行一段代码块。常见的循环语句有for循环、while循环和do-while循环。for循环根据循环变量的变化来控制循环次数，while循环根据条件的真假来控制循环次数，do-while循环先执行一次代码块，然后根据条件的真假来决定是否继续执行。在本题中，正确的说法应该是关于循环语句的知识点。'},\n{'name':'数组'，'description':'C语言中的数组是一种用于存储多个相同类型的数据的数据结构。数组可以通过下标来访问其中的元素，下标从0开始。在本题中，正确的说法应该是关于数组的知识点。'}]"
    },
    {
        "sortId": 172,
        "id": "1577506517565448192",
        "title": "程序设计基础-第一次课-课堂练习-c源程序组成",
        "content": "以下叙述不正确的是\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'C语言基础知识点包括数据类型、变量、运算符、控制语句等基本概念和语法规则。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与、或、非等运算符。'}, {'name':'条件语句','description':'条件语句用于根据条件的真假执行不同的代码块，包括if语句和switch语句。'}, {'name':'循环语句','description':'循环语句用于重复执行一段代码，包括for循环、while循环和do-while循环。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块，可以重复使用，包括函数的定义、调用和参数传递等。'}, {'name':'数组','description':'数组是一种存储多个相同类型数据的容器，包括数组的定义、访问和操作等。'}, {'name':'指针','description':'指针是一种特殊的变量，存储变量的地址，包括指针的定义、指针运算和指针与数组的关系等。'}, {'name':'字符串','description':'字符串是一串字符的序列，包括字符串的定义、操作和常用字符串函数等。'}, {'name':'结构体','description':'结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量，包括结构体的定义、访问和操作等。'}, {'name':'文件操作','description':'文件操作用于读写文件，包括文件的打开、关闭、读写和文件指针的操作等。'}]"
    },
    {
        "sortId": 173,
        "id": "1577204053570097152",
        "title": "输出字符对应ASCII码",
        "content": "输入一个字符，输出其前一个字符和后一个字符，以及这个字符对应的ASCII码值。\n\n### 输入格式:\n\n在一行中给出一个字符。\n\n### 输出格式:\n\n在一行中输出前一个字符、后一个字符，以及这个字符对应的ASCII码值，用一个空格分隔。\n\n### 输入样例:\n\n例如：\n\n```in\nb\n```\n\n### 输出样例:\n\n例如：\n\n```out\n97 99 98\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符输入输出','description':'本题主要涉及字符的输入输出，以及字符对应的ASCII码值的输出。学生需要了解字符的输入输出方式，以及如何获取字符对应的ASCII码值。'}]"
    },
    {
        "sortId": 174,
        "id": "1577200527628443648",
        "title": "字符交换",
        "content": "输入两个字符到字符变量a、b中，交换a、b的值，并输出交换后a、b的值。\n\n### 输入格式:\n\n在一行中输入两个字符，用1个或多个空格分隔。\n\n### 输出格式:\n\n在一行中输出交换后的两个字符，用1个空格分隔。\n\n### 输入样例:\n\n例如：\n\n```in\na b\n```\n\n### 输出样例:\n\n例如：\n\n```out\nb a\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'通过使用临时变量，将两个变量的值进行交换。'}]"
    },
    {
        "sortId": 175,
        "id": "1577197079017156608",
        "title": "求整数的百位数、十位数和个位数的数值",
        "content": "输入一个三位的正整数,分别求出该数的百位数、十位数和个位数的数值。\n\n### 输入格式:\n\n在一行中给出一个三位的正整数。\n\n### 输出格式:\n\n在一行中输出该数的百位数、十位数和个位数的数值，用空格分隔。\n\n### 输入样例:\n\n\n```in\n123\n```\n\n### 输出样例:\n\n\n```out\n1 2 3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明变量，并了解C语言中的基本数据类型。'}, {'name':'算术运算符','description':'学习如何使用算术运算符进行数值计算。'}, {'name':'取模运算符','description':'学习如何使用取模运算符获取一个数的个位数、十位数和百位数。'}, {'name':'条件语句','description':'学习如何使用条件语句根据不同的情况执行不同的代码块。'}, {'name':'循环语句','description':'学习如何使用循环语句重复执行一段代码块。'}]"
    },
    {
        "sortId": 176,
        "id": "1577195222018433024",
        "title": "求两点之间的距离。",
        "content": "输入两组数据x1、y1和x2、y2，分别代表平面直角坐标系中的两个点，求此两点间的距离。\n\n### 输入格式:\n\n在一行中给出四个整数，分别代表平面直角坐标系中的两个点（x1,y1）和（x2,y2）。\n\n### 输出格式:\n\n在一行中输出两点间的距离。小数点后保留两位。\n\n### 输入样例:\n\n例如：\n\n```in\n1 2 5 8\n```\n\n### 输出样例:\n\n例如：\n\n```out\n7.21\n```\n\n说明：\n\n![image.png](~/bc68a180-24fe-4399-93bf-b41689e903a0.png)\n\n\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'平面直角坐标系','description':'平面直角坐标系是由两个相互垂直的坐标轴组成的坐标系，用于表示平面上的点的位置。'}, {'name':'距离计算','description':'根据两点的坐标，可以使用勾股定理计算出两点之间的距离。'}]"
    },
    {
        "sortId": 177,
        "id": "1577185284332326912",
        "title": "求球体的表面积和体积",
        "content": "输入一个球体的半径r,求该球体的表面积和体积。\n\n### 输入格式:\n\n在一行中给出1个球体的半径。\n\n### 输出格式:\n\n第一行输出球体的表面积，第二行输出球体的题记。小数点后保留2位。\n\n### 输入样例:\n\n例如：\n\n```in\n4.5\n```\n\n### 输出样例:\n\n例如：\n\n```out\n254.47\n381.70\n```\n说明：球的表面积=“圆周率π”乘以“半径平方的4倍”，即S=4πr^2。π取值3.1415026.\n\n球的体积=“圆周率π”乘以“半径立方的三分之四倍”，即V=(4/3)πr^3。\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从标准输入读取数据，并将结果输出到标准输出。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符和表达式','description':'学习C语言中的运算符和表达式的使用，包括算术运算符、赋值运算符、逻辑运算符等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的流程。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的遍历和操作。'}, {'name':'指针','description':'学习如何声明和使用指针，以及指针和数组的关系。'}, {'name':'结构体','description':'学习如何声明和使用结构体，以及结构体的成员访问和操作。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件，以及文件指针的使用。'}, {'name':'字符串操作','description':'学习如何声明和使用字符串，以及字符串的比较、拼接和截取。'}, {'name':'递归','description':'学习如何使用递归解决问题，以及递归的原理和应用。'}]"
    },
    {
        "sortId": 178,
        "id": "1577124450923048960",
        "title": "杂诗(竖版)",
        "content": "请编写程序，输出东晋诗人陶渊明的《杂诗》。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n岁 及 一 盛 斗 得 何 落 此 分 飘 人   陶 杂\n月 时 日 年 酒 欢 必 地 已 散 如 生   渊 诗\n不 当 难 不 聚 当 骨 为 非 逐 陌 无   明\n待 勉 再 重 比 作 肉 兄 常 风 上 根\n人 励 晨 来 邻 乐 亲 弟 身 转 尘 蒂\n\n```\n\n实际显示效果如下：\n\n> ![题图.jpg](~/96207230-c752-4f72-b8b3-4e0a497e4798.jpg)\n\n说明：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮。\n\n---\n\n提示：\n- 标题、作者与诗文之间空一行；\n- 一个汉字占两格宽度；\n- 诗文中的空白均为半角空格；\n- 诗文中的标点符号均为全角符号；\n- 每行末尾都没有多余的空白。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'程序需要实现输入输出功能，读取输入数据并将结果输出。'}, {'name':'字符串处理','description':'程序需要对字符串进行处理，包括字符串的拼接、分割、格式化等操作。'}, {'name':'循环结构','description':'程序需要使用循环结构来重复执行某段代码，以实现输出诗文的格式要求。'}, {'name':'条件判断','description':'程序需要使用条件判断语句来判断是否满足某个条件，以决定是否执行某段代码。'}, {'name':'数组','description':'程序需要使用数组来存储诗文的内容，以便进行处理和输出。'}, {'name':'函数','description':'程序需要使用函数来封装某些功能，以提高代码的复用性和可读性。'}]"
    },
    {
        "sortId": 179,
        "id": "1576807602004303872",
        "title": "八皇后摆法",
        "content": "在国际象棋中，皇后是最厉害的棋子，可以横走、直走，还可以斜走。棋手马克斯·贝瑟尔 1848 年提出著名的八皇后问题：即在 8 × 8 的棋盘上摆放八个皇后，使其不能互相攻击 —— 即任意两个皇后都不能处于同一行、同一列或同一条斜线上。答案非常多，例如：\n\n<table>\n<tr>\n<td>![题图.jpg](~/f02577b2-a28e-4f3b-bbc7-93801a88a630.jpg)</td>\n</tr>\n</table>\n\n就是其中一个摆法。请编写程序，输出此摆法。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n┏━┯━┯━┯━┯━┯━┯━┯━┓\n┃  │  │★│  │  │  │  │  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │  │  │  │★│  │  │  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │★│  │  │  │  │  │  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │  │  │  │  │  │  │★┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃★│  │  │  │  │  │  │  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │  │  │  │  │  │★│  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │  │  │★│  │  │  │  ┃\n┠─┼─┼─┼─┼─┼─┼─┼─┨\n┃  │  │  │  │  │★│  │  ┃\n┗━┷━┷━┷━┷━┷━┷━┷━┛\n\n```\n\n实际显示效果如下：\n\n> \n![八皇后摆法.jpg](~/5d0440e2-80dc-4ecc-98d4-02c8ec982632.jpg)\n\n\n注：外框是粗线，内部是细线。棋盘中的空白处是西文空格。\n\n---\n\n提示：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，可以使用for循环或while循环来实现。在这个题目中，可以使用两层循环来遍历棋盘的每一个位置，判断是否可以放置皇后。'},\n{'name':'数组'，'description':'数组是一种存储多个相同类型数据的容器，可以通过下标来访问数组中的元素。在这个题目中，可以使用一个二维数组来表示棋盘，每个元素表示一个位置是否可以放置皇后。'},\n{'name':'递归'，'description':'递归是一种函数调用自身的方法，可以用来解决一些具有重复性质的问题。在这个题目中，可以使用递归来依次放置每个皇后，每次放置时判断是否与已放置的皇后冲突。'},\n{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在这个题目中，可以使用条件语句来判断是否可以放置皇后，以及在棋盘上输出皇后的位置。'},\n{'name':'字符串输出'，'description':'字符串输出是将多个字符按照一定的格式输出到屏幕上。在这个题目中，可以使用字符串输出来输出棋盘上的每个位置，以及最终的摆法。'}]"
    },
    {
        "sortId": 180,
        "id": "1576793048264347648",
        "title": "国庆快乐",
        "content": "爱我中华，喜迎国庆。请编写程序，输出“国庆”两个大字。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n□□□□□□□□□□□□□■□□□□□□□□□■□□□□□□□□\n□■■■■■■■■■■■■■■□□□□□□□□□■□□□■□□□\n□■□□□□□□□□■□□■□□□□■■■■■■■■■■■■□□\n□■□■■■■■■■■■□■□□□□■□□□□□■□□□□□□□\n□■□□□□□■□□□□□■□□□□■□□□□□■□□□□□□□\n□■□□□□□■□□□□□■□□□□■□□□□□■□□□■□□□\n□■□□□□□■□■□□□■□□□□■■■■■■■■■■■■□□\n□■□□■■■■■■■□□■□□□□■□□□□□■□□□□□□□\n□■□□□□□■□□□□□■□□□□■□□□□□■□□□□□□□\n□■□□□□□■□■□□□■□□□□■□□□□■□■□□□□□□\n□■□□□□□■□□■□□■□□□□■□□□□■□■□□□□□□\n□■□□□□□■□□□□□■□□□□■□□□■□□□■□□□□□\n□■□■■■■■■■■■□■□□□□■□□□■□□□■□□□□□\n□■□□□□□□□□□□□■□□□■□□□■□□□□□■□□□□\n□■■■■■■■■■■■■■□□■□□□■□□□□□□□■■■□\n□■□□□□□□□□□□□■□□□□■■□□□□□□□□□■□□\n\n```\n\n实际显示效果如下：\n\n> ![国庆.jpg](~/a74e487b-608d-471a-bb57-0e9b7035d100.jpg)\n\n---\n\n提示：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'使用printf函数进行输出'}, {'name':'字符输出','description':'使用字符数组进行输出'}, {'name':'循环结构','description':'使用循环结构控制输出的行数和列数'}, {'name':'条件判断','description':'使用条件判断控制输出的字符'}, {'name':'图形输出','description':'使用特定的字符进行图形输出'}]"
    },
    {
        "sortId": 181,
        "id": "1574969820577984512",
        "title": "从键盘输入圆锥体的底半径r、高h的值，编写程序计算其体积。",
        "content": "从键盘输入圆锥体的底半径r、高h的值，编写程序计算其体积。\n计算公式：\n$$v=\\cfrac{1}{3}\\pi r^{\\smash{2}} h$$\n假设：$$\\pi=3.14$$\n\n\n\n\n\n### 输入格式:\n\n在一行中给出2个双精度实数r和h，两个值之间使用空格分隔。\n\n### 输出格式:\n\n在一行中输出计算后圆锥体的体积。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2.5 5\n```\n\n### 输出样例:\n使用实数的默认小数位数\n```out\n请输入半径r及高h的值:\n32.708333\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是存储数据的一种方式，可以通过变量名来访问和操作存储的数据。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在C语言中，可以使用标准库函数scanf和printf来实现输入和输出操作。'}, {'name': '运算符', 'description': '运算符是用于进行各种运算操作的符号。在C语言中，常见的运算符有算术运算符、赋值运算符、关系运算符、逻辑运算符等。'}, {'name': '数据类型', 'description': '数据类型是用来表示不同种类的数据的属性。在C语言中，常见的数据类型有整型、浮点型、字符型等。不同的数据类型在内存中占用的空间大小和表示范围不同。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程。在C语言中，常见的控制语句有条件语句、循环语句和跳转语句。条件语句用于根据条件的真假来选择执行不同的代码块，循环语句用于重复执行一段代码块，跳转语句用于改变程序的执行顺序。'}, {'name': '数学库函数', 'description': '数学库函数是用于进行各种数学计算的函数。在C语言中，可以使用数学库函数来进行数值计算、数学运算、数值转换等操作。'}, {'name': '常量', 'description': '常量是指在程序中固定不变的值。在C语言中，常量可以分为整型常量、浮点型常量、字符常量和字符串常量等。常量在程序中使用时不可修改。'}, {'name': '运算表达式', 'description': '运算表达式是由运算符和操作数组成的式子，用于进行各种运算操作。在C语言中，可以使用运算表达式来进行算术运算、逻辑运算、关系运算等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行。在C语言中，函数可以有返回值和参数，可以用来封装和重用代码。'}, {'name': '注释', 'description': '注释是用于给程序添加说明和解释的文本。在C语言中，注释可以分为单行注释和多行注释，可以提高代码的可读性和可维护性。'}, {'name': '宏定义', 'description': '宏定义是一种预处理指令，用于定义常量、函数和代码片段的别名。在C语言中，可以使用宏定义来简化代码、提高代码的可读性和可维护性。'}, {'name': '运算优先级', 'description': '运算优先级是指运算符在表达式中的执行顺序。在C语言中，不同的运算符有不同的优先级，可以使用括号来改变运算符的优先级。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的连续内存空间。在C语言中，可以使用数组来存储和操作一组数据，数组的大小在声明时需要指定。'}, {'name': '指针', 'description': '指针是一种特殊的变量，用于存储内存地址。在C语言中，可以使用指针来访问和操作内存中的数据，指针可以指向不同类型的数据。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，用于存储多个不同类型的数据。在C语言中，可以使用结构体来组织和管理复杂的数据，结构体的成员可以是不同类型的数据。'}, {'name': '文件操作', 'description': '文件操作是用于对文件进行读写操作的方式。在C语言中，可以使用文件操作函数来打开、关闭、读取和写入文件，可以实现文件的读写和处理。'}, {'name': '字符串操作', 'description': '字符串操作是用于对字符串进行处理和操作的方式。在C语言中，可以使用字符串操作函数来实现字符串的拼接、复制、比较等操作，可以对字符串进行各种处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作，可以提高代码的可读性和可维护性。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方式。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数需要有递归终止条件，否则会导致无限递归。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素是指针。在C语言中，可以使用指针数组来存储和操作一组指针，指针数组的大小在声明时需要指定。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存空间的方式。在C语言中，可以使用动态内存分配函数来动态分配和释放内存，可以灵活地管理内存空间。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算。在C语言中，可以使用位运算符来进行位运算操作，位运算可以高效地处理二进制数据。'}, {'name': '指针操作', 'description': '指针操作是对指针进行操作和处理的方式。在C语言中，可以使用指针操作符来访问和操作指针指向的数据，可以通过指针来修改变量的值和传递变量的地址。'}, {'name': '链表', 'description': '链表是一种动态数据结构，用于存储和操作一组数据。在C语言中，可以使用链表来实现各种数据结构，链表的节点包含数据和指向下一个节点的指针。'}, {'name': '排序算法', 'description': '排序算法是用于将一组数据按照特定顺序排列的算法。在C语言中，可以使用各种排序算法来对数据进行排序，常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。'}, {'name': '搜索算法', 'description': '搜索算法是用于在一组数据中查找特定元素的算法。在C语言中，可以使用各种搜索算法来查找数据，常见的搜索算法有线性搜索、二分搜索、哈希搜索等。'}, {'name': '文件操作', 'description': '文件操作是用于对文件进行读写操作的方式。在C语言中，可以使用文件操作函数来打开、关闭、读取和写入文件，可以实现文件的读写和处理。'}, {'name': '字符串操作', 'description': '字符串操作是用于对字符串进行处理和操作的方式。在C语言中，可以使用字符串操作函数来实现字符串的拼接、复制、比较等操作，可以对字符串进行各种处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作，可以提高代码的可读性和可维护性。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方式。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数需要有递归终止条件，否则会导致无限递归。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素是指针。在C语言中，可以使用指针数组来存储和操作一组指针，指针数组的大小在声明时需要指定。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存空间的方式。在C语言中，可以使用动态内存分配函数来动态分配和释放内存，可以灵活地管理内存空间。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算。在C语言中，可以使用位运算符来进行位运算操作，位运算可以高效地处理二进制数据。'}, {'name': '指针操作', 'description': '指针操作是对指针进行操作和处理的方式。在C语言中，可以使用指针操作符来访问和操作指针指向的数据，可以通过指针来修改变量的值和传递变量的地址。'}, {'name': '链表', 'description': '链表是一种动态数据结构，用于存储和操作一组数据。在C语言中，可以使用链表来实现各种数据结构，链表的节点包含数据和指向下一个节点的指针。'}, {'name': '排序算法', 'description': '排序算法是用于将一组数据按照特定顺序排列的算法。在C语言中，可以使用各种排序算法来对数据进行排序，常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。'}, {'name': '搜索算法', 'description': '搜索算法是用于在一组数据中查找特定元素的算法。在C语言中，可以使用各种搜索算法来查找数据，常见的搜索算法有线性搜索、二分搜索、哈希搜索等。'}, {'name': '文件操作', 'description': '文件操作是用于对文件进行读写操作的方式。在C语言中，可以使用文件操作函数来打开、关闭、读取和写入文件，可以实现文件的读写和处理。'}, {'name': '字符串操作', 'description': '字符串操作是用于对字符串进行处理和操作的方式。在C语言中，可以使用字符串操作函数来实现字符串的拼接、复制、比较等操作，可以对字符串进行各种处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作，可以提高代码的可读性和可维护性。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方式。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数需要有递归终止条件，否则会导致无限递归。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素是指针。在C语言中，可以使用指针数组来存储和操作一组指针，指针数组的大小在声明时需要指定。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存空间的方式。在C语言中，可以使用动态内存分配函数来动态分配和释放内存，可以灵活地管理内存空间。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算。在C语言中，可以使用位运算符来进行位运算操作，位运算可以高效地处理二进制数据。'}, {'name': '指针操作', 'description': '指针操作是对指针进行操作和处理的方式。在C语言中，可以使用指针操作符来访问和操作指针指向的数据，可以通过指针来修改变量的值和传递变量的地址。'}, {'name': '链表', 'description': '链表是一种动态数据结构，用于存储和操作一组数据。在C语言中，可以使用链表来实现各种数据结构，链表的节点包含数据和指向下一个节点的指针。'}, {'name': '排序算法', 'description': '排序算法是用于将一组数据按照特定顺序排列的算法。在C语言中，可以使用各种排序算法来对数据进行排序，常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。'}, {'name': '搜索算法', 'description': '搜索算法是用于在一组数据中查找特定元素的算法。在C语言中，可以使用各种搜索算法来查找数据，常见的搜索算法有线性搜索、二分搜索、哈希搜索等。'}, {'name': '文件操作', 'description': '文件操作是用于对文件进行读写操作的方式。在C语言中，可以使用文件操作函数来打开、关闭、读取和写入文件，可以实现文件的读写和处理。'}, {'name': '字符串操作', 'description': '字符串操作是用于对字符串进行处理和操作的方式。在C语言中，可以使用字符串操作函数来实现字符串的拼接、复制、比较等操作，可以对字符串进行各种处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作，可以提高代码的可读性和可维护性。'}, {'name': '递归', 'description': '递归是一种函数调用'}]"
    },
    {
        "sortId": 182,
        "id": "1574965500562305024",
        "title": "（运算符的优先级与结合性）阅读程序，写出程序的运行结果：",
        "content": "阅读程序，写出程序的运行结果：\n#include <stdio.h>\nint main()\n{\n\tint s=8,r=3,t=12;\n  int res;\n\tdouble i=4.5, j=3.6,f;\n\tf=(t<<2)-s%r+(s+=r*=t)+(!t&&i+2)-j; \n  res=t<<2;\n  printf(\"%d\\n\",res);\n\t//输出结果是：\n\tprintf(\"%f\\n\",f);\n\t//输出结果是：\n\treturn 0;\n}\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'位运算'，'description':'位运算是C语言中的一种运算方式，通过对二进制数的位进行操作来实现特定的功能。在本题中，使用了左移运算符<<来将t的值左移2位，得到res的值。'}，{'name':'取余运算'，'description':'取余运算是C语言中的一种运算方式，用于求两个数相除的余数。在本题中，使用了取余运算符%来计算s%r的值。'}，{'name':'赋值运算'，'description':'赋值运算是C语言中的一种运算方式，用于将一个值赋给一个变量。在本题中，使用了赋值运算符=来将r的值赋给s和t，以及将t*r的值赋给r。'}，{'name':'逻辑运算'，'description':'逻辑运算是C语言中的一种运算方式，用于判断条件的真假。在本题中，使用了逻辑与运算符&&来判断t是否为0，以及逻辑非运算符!来对t+2的值取反。'}]"
    },
    {
        "sortId": 183,
        "id": "1574962593012051968",
        "title": "（赋值运算符及表达式）阅读程序写程序结果",
        "content": "阅读程序写程序结果：\n#include <stdio.h>\nvoid main()\n{\n\tint x,y,z,i,j;\n\tx=3;y=5;z=7,i=j=9;\n\ty+=3;\n\tz%=x;\n\ti*=x+6;\n\tx-=j/4;\t\n\tprintf(\"%d\\t%d\\t%d\\t%d\\t \",x,y,z,i);\t\n}\n//程序的运行结果是：\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量赋值和运算符','description':'学习如何给变量赋值和使用不同的运算符进行运算。'}, {'name':'格式化输出','description':'学习如何使用printf函数进行格式化输出。'}]"
    },
    {
        "sortId": 184,
        "id": "1574317177220300800",
        "title": "计算一个四位整数的各位数字之和",
        "content": "题目描述：本题目要求读入1个四位数的整数，然后其各位数字之和。\n\n### 输入格式:\n输入一个四位的整数。\n\n### 输出格式:\n输出千、百、十、个位上的各位数字的和。\n\n### 输入样例:\n```in\n-1234\n```\n\n### 输出样例:\n```out\n10\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数输入与输出','description':'本知识点主要涉及C语言中整数的输入与输出，包括格式化输出和格式化输入。在本题中，需要读入一个四位数的整数，并输出各位数字之和。'}，{'name':'循环结构','description':'本知识点主要涉及C语言中的循环结构，包括for循环、while循环和do-while循环。在本题中，可以使用循环结构来遍历四位数的每一位，并计算各位数字之和。'}]"
    },
    {
        "sortId": 185,
        "id": "1574295922383630336",
        "title": "计算正六边形面积及其周长",
        "content": "题目描述：\n从键盘输入一个正实数作为正六边形的边长，计算并输出该六边形的面积和周长，保留2位小数。正六边形的面积公式为（其中a为边长）：\n$$Area=3\\times\\sqrt{3}/2\\times{a^2}$$\n\n### 输入格式:\n输入正六边形的边长。\n\n### 输出格式:\n对每一组输入，输出正六边形的面积和周长，保留2位小数，以空格符分隔。\n\n### 输入样例:\n```in\n6.2\n```\n### 输出样例:\n```out\n99.87 37.20\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 35,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整数、浮点数和字符串，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习各种运算符，如加法、减法、乘法和除法，并了解它们的优先级和结合性。'}, {'name': '数学函数', 'description': '学习如何使用数学函数来进行数值计算，如开方、求幂和四舍五入。'}, {'name': '格式化输出', 'description': '学习如何使用格式化字符串来控制输出的格式，如保留小数位数和对齐方式。'}, {'name': '注释', 'description': '学习如何使用注释来解释代码的作用和思路，以便他人能够理解和修改代码。'}, {'name': '算法设计', 'description': '学习如何设计算法来解决实际问题，如计算面积和周长。'}, {'name': '控制流程', 'description': '学习如何使用条件语句和循环语句来控制程序的执行流程，以实现不同的功能。'}, {'name': '错误处理', 'description': '学习如何处理用户输入错误和运行时错误，以保证程序的稳定性和可靠性。'}]"
    },
    {
        "sortId": 186,
        "id": "1573653660678942720",
        "title": "计算多边形的内角和",
        "content": "计算多边形的内角和\n\n### 输入格式:\n输入一个正整数n(n>=3)\n\n### 输出格式:\n\n,输出n边形的内角和\n\n### 输入样例:\n\n\n```in\n3\n```\n\n### 输出样例:\n\n```out\n180\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何进行输入和输出操作，包括读取用户输入和打印输出结果。'}, {'name': '变量和数据类型', 'description': '教学如何声明变量和使用不同的数据类型，包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '教学如何使用不同的运算符进行数学运算和逻辑运算。'}, {'name': '控制结构', 'description': '教学如何使用条件语句和循环语句控制程序的执行流程。'}, {'name': '函数', 'description': '教学如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '数组', 'description': '教学如何声明和使用数组，以及数组的遍历和操作。'}, {'name': '字符串', 'description': '教学如何声明和使用字符串，以及字符串的操作和处理。'}, {'name': '指针', 'description': '教学如何声明和使用指针，以及指针的运算和指针与数组的关系。'}, {'name': '结构体', 'description': '教学如何声明和使用结构体，以及结构体的成员访问和结构体数组的操作。'}, {'name': '文件操作', 'description': '教学如何打开、读写和关闭文件，以及文件的读写位置和错误处理。'}, {'name': '递归', 'description': '教学如何使用递归算法解决问题，以及递归的实现和优化。'}, {'name': '动态内存管理', 'description': '教学如何使用动态内存分配函数进行内存管理，以及内存泄漏和内存溢出的处理。'}, {'name': '预处理指令', 'description': '教学如何使用预处理指令进行宏定义、条件编译和文件包含等操作。'}, {'name': '错误处理', 'description': '教学如何处理程序中可能出现的错误和异常情况，以及错误处理的方法和技巧。'}, {'name': '模块化编程', 'description': '教学如何将程序分解为多个模块，以及模块之间的接口和调用关系。'}, {'name': '调试技巧', 'description': '教学如何使用调试工具和技巧进行程序调试，以及常见的调试技巧和方法。'}, {'name': '代码风格', 'description': '教学如何编写规范、清晰和易于理解的代码，以及代码风格的规范和要求。'}, {'name': '算法和数据结构', 'description': '教学如何设计和实现常见的算法和数据结构，以及算法的时间复杂度和空间复杂度分析。'}, {'name': '编程实践', 'description': '教学如何进行实际的编程实践，包括项目开发、团队合作和版本控制等。'}, {'name': '其他', 'description': '其他与C语言程序设计相关的知识点和技巧。'}]"
    },
    {
        "sortId": 187,
        "id": "1573130085643694080",
        "title": "C语言程序设计—Test",
        "content": "本题目要求读入两个整数 A 和 B，输出 A+B 的值\n\n### 输入格式:\n输入在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n对每一组输入，在一行中输出A+B的值。\n\n### 输入样例:\n```in\n18 -299\n```\n\n### 输出样例:\n```out\n-281\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整数输入输出', 'description': '教学目标：学生能够掌握C语言中整数的输入和输出方法。\\n教学内容：介绍C语言中整数的输入和输出方法，包括使用scanf函数进行输入和使用printf函数进行输出。\\n教学方法：讲解+示例+练习。\\n教学资源：教材、课件、习题。'}, {'name': '变量定义和赋值', 'description': '教学目标：学生能够掌握C语言中变量的定义和赋值方法。\\n教学内容：介绍C语言中变量的定义和赋值方法，包括使用int关键字定义整型变量和使用赋值运算符进行赋值。\\n教学方法：讲解+示例+练习。\\n教学资源：教材、课件、习题。'}, {'name': '加法运算', 'description': '教学目标：学生能够掌握C语言中加法运算的方法。\\n教学内容：介绍C语言中加法运算的方法，包括使用+运算符进行加法运算。\\n教学方法：讲解+示例+练习。\\n教学资源：教材、课件、习题。'}]"
    },
    {
        "sortId": 188,
        "id": "1570003874398539776",
        "title": "下列属于高级程序设计语言的是（）",
        "content": "下列属于高级程序设计语言的是（）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'高级程序设计语言'，'description':'高级程序设计语言是相对于低级程序设计语言而言的，它具有更高的抽象程度和更强的功能，能够更方便地进行复杂的程序设计和开发。'}]"
    },
    {
        "sortId": 189,
        "id": "1569213140636471296",
        "title": "求圆的面积",
        "content": "本题目要求读入一个实数r构成的圆，求出其面积，pi取3.14。\n\n### 输入格式:\n\n输入一个实数r。\n\n### 输出格式:\n\n输出以r为半径构成的圆面积，保留三位小数。\n\n### 输入样例:\n\n```in\n1\n```\n\n### 输出样例:\n\n```out\n3.140\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'本知识点主要介绍C语言中的变量和数据类型，包括整型、浮点型、字符型等。在本题中，需要读入一个实数r，实数是C语言中的浮点型数据类型。'}, {'name':'输入输出'，'description':'本知识点主要介绍C语言中的输入输出函数，包括scanf和printf函数。在本题中，需要使用scanf函数读入一个实数r，并使用printf函数输出圆的面积。'}, {'name':'运算符'，'description':'本知识点主要介绍C语言中的运算符，包括算术运算符、赋值运算符等。在本题中，需要使用算术运算符和赋值运算符计算圆的面积。'}, {'name':'常量'，'description':'本知识点主要介绍C语言中的常量，包括整型常量、浮点型常量等。在本题中，需要使用常量pi的值计算圆的面积。'}]"
    },
    {
        "sortId": 190,
        "id": "1569182963470635008",
        "title": "（逻辑运算符及表达式）程序阅读写程序结果",
        "content": "逻辑运算符及表达式，程序阅读，写程序结果\n\n#include <stdio.h>\nint main()\n{\n\tint s,r,t;\n\tfloat x;\n\ts=0;r=4;t=0;\n\tx=6.5;\n\tprintf(\"%d\\t\",s&&r&&t);\n\tprintf(\"%d\\t\", s||r||t);\n\tprintf(\"%d\\t\", !s);\n\tprintf(\"%d\\t\", r>s&&('s'||'r'));\n\tprintf(\"%d\\t\", !(x>3)&&(r<=x));\n\treturn 0;\n}\n程序的运行结果是：\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符及表达式'，'description':'逻辑运算符用于对表达式进行逻辑运算，包括与（&&）、或（||）、非（!）等。逻辑运算符的运算结果为真（非零）或假（0）。本题涉及到逻辑运算符的使用，以及逻辑表达式的计算。'}]"
    },
    {
        "sortId": 191,
        "id": "1569181513919172608",
        "title": "（关系运算符的基本运算）阅读程序写程序的运行结果",
        "content": "（关系运算符的基本运算）\n阅读程序，写程序的运行结果：\n#include <stdio.h>\nint main()\n{\n\tint a,b;\n\tdouble i,j;\n\tprintf(\"请输入整型变量a、b的值：\\n\");\n\tscanf(\"%d %d\",&a,&b);\n\tprintf(\"请输入实型变量i、j的值：\\n\");\n\tscanf(\"%f %f\",&i,&j);\n\tprintf(\"%d\\t\",a>b);\n\tprintf(\"%d\\t\",'g'>'X');\n\tprintf(\"%d\\t\",b/a$$*$$a==b);  /$$*$$可能有误差产生*/\n\tprintf(\"%d\\t\",j/i$$*$$i==j);  /$$*$$可能有误差产生*/\n\tprintf(\"%d\\n\",0<a<100);   /$$*$$结果为逻辑值而非取值空间*/\n\treturn 0;\n}\n假设从键盘输入的值如下：\n请输入整型变量a、b的值：\n3 4\n请输入实型变量i、j的值：\n5.1 6.2\n程序的运行结果是：\n\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '关系运算符', 'description': '关系运算符用于比较两个值之间的关系，包括大于、小于、等于等。在C语言中，关系运算符包括 >、<、>=、<=、==、!=。本题涉及到了关系运算符的基本运算，需要学生理解关系运算符的含义和使用方法。'}, {'name': '输入输出函数', 'description': '本题使用了C语言中的输入输出函数，包括printf()和scanf()函数。学生需要了解这两个函数的使用方法，以及格式化输入输出的规则。'}, {'name': '数据类型转换', 'description': '本题涉及到了不同数据类型之间的转换，包括整型和实型之间的转换。学生需要了解C语言中的数据类型转换规则，以及可能出现的误差问题。'}, {'name': '逻辑运算符', 'description': '本题涉及到了逻辑运算符的使用，包括逻辑与运算符&&。学生需要了解逻辑运算符的含义和使用方法，以及逻辑运算的结果类型。'}]"
    },
    {
        "sortId": 192,
        "id": "1569176859852345344",
        "title": "从键盘输入两个实数，计算表达式的值",
        "content": "从键盘输入两个实数，计算表达式![表达式.png](~/ea46aa99-ce74-4a26-add4-0964d3e6f887.png) 的值\n\n\n#include <stdio.h>\n#include \n main()\n{\n\tfloat x,y,z;\n\tprintf(\"请输入实型变量x和y的值，x不等于y：\\n\");\n\tscanf(\"%f %f\",&x,&y);\n\t\n\tprintf(\"z=%f\\n\",z);\n\t\n}\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出函数','description':'输入输出函数是C语言中常用的函数，用于从键盘输入数据和向屏幕输出数据。本题中使用了printf函数进行输出和scanf函数进行输入。'}, {'name':'变量定义和赋值','description':'变量定义和赋值是C语言中基本的操作，用于声明变量并给变量赋值。本题中定义了三个实型变量x、y和z，并通过scanf函数给x和y赋值。'}, {'name':'算术运算','description':'算术运算是C语言中常用的运算，包括加法、减法、乘法、除法等。本题中使用了加法运算符+和除法运算符/来计算表达式的值。'}]"
    },
    {
        "sortId": 193,
        "id": "1569173450185183232",
        "title": "（自增运算符）阅读程序：填空运行结果",
        "content": "阅读程序：写程序的运行结果\n#include <stdio.h>\nint main()\n{\n\tint a=5;\n\tint f,h,g;\n\tf=18-a++;\n\tprintf(\"f=%d  \",f);\n\tprintf(\"a=%d\\n\",a);\n\t/*输出结果为：*/\n\th=++a+6;\n\tprintf(\"h=%d  \",h);\n\tprintf(\"a=%d\\n\",a);\n\t/*输出结果为：*/\n\tg=++a+a++;\n\tprintf(\"g=%d  \",g);\n\tprintf(\"a=%d\\n\",a);\n\t/*输出结果为：*/\n\treturn 0;\n}\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自增运算符'，'description':'自增运算符是C语言中的一种特殊运算符，用于将变量的值增加1。在表达式中，自增运算符可以放在变量的前面（前自增）或者后面（后自增）。前自增运算符会先将变量的值增加1，然后再使用增加后的值；后自增运算符会先使用变量的值，然后再将变量的值增加1。'}，{'name':'printf函数'，'description':'printf函数是C语言中的一个输出函数，用于将指定的内容输出到标准输出设备（通常是显示器）。printf函数的第一个参数是一个格式化字符串，用于指定输出的格式；后面的参数是要输出的内容。在格式化字符串中，可以使用特定的格式控制符来指定输出的格式，如%d表示输出整数，%f表示输出浮点数，%s表示输出字符串等。'}]"
    },
    {
        "sortId": 194,
        "id": "1568902957888696320",
        "title": "数据类型的强制转换",
        "content": "阅读下面的程序段：\n#include <stdio.h>\nint main()\n{\n\tint a,b,c,d;\n\tfloat x=6.46,y=8.57,z=7.68;\n\ta=(int)x;\n\tb=(int)x+(int)y+(int)z;\n\tc=(int)(x+y+z);\n\td=(int)x+y+z;\n\tprintf(\"%d\\t%d\\t%d\\t%d\\n\",a,b,c,d);\n\tprintf(\"%f\\t%f\\t%f\\n\",x,y,z);\n\treturn 0;\n}\n程序运行后：\na,b,c,d的值是：                   \n\n\nx,y,z的值是：               \n\n\n\n\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 7,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'类型转换'，'description':'类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符将一个表达式的值转换为指定的数据类型。在上述程序中，使用了强制类型转换将浮点数转换为整数类型。'}，{'name':'格式化输出'，'description':'格式化输出是指按照指定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数进行格式化输出。在上述程序中，使用了printf函数输出变量a、b、c、d的值和变量x、y、z的值。'}]"
    },
    {
        "sortId": 195,
        "id": "1568899575866191872",
        "title": "利用赋值运算实现类型转换",
        "content": "利用赋值运算实现类型转换，阅读程序写程序的运行结果：\n#include <stdio.h>\nint main()\n{\n\tshort int t;\n\tchar b;\n\tlong h;\n\tfloat f;\n\tdouble d;\n\tint e;\n\tt=65;\n\tb='A';\n\tf=12.64;\n\te=100;\n\td=e;     /*将int型变量转换为double型*/\n\te=f;\t /*将float型变量转换为int型*/\n\th=t+b;   /*t+b为int型，将int型转换为long型*/\n\tf=b;     /*将char型变量转换为float型*/\n\tb=t;     \n\tprintf(\"%f %d %ld %f %c\\n\",d,e,h,f,b);\n\treturn 0;\n}\n程序的运行结果是：\n\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'类型转换'，'description':'类型转换是指将一个数据类型的值转换为另一个数据类型的过程。在C语言中，可以通过赋值运算符或强制类型转换运算符来实现类型转换。本题涉及到了不同数据类型之间的转换，包括将int型变量转换为double型、将float型变量转换为int型、将char型变量转换为float型等。'}]"
    },
    {
        "sortId": 196,
        "id": "1568896803145977856",
        "title": "实型数据的定义、赋值与输出",
        "content": "实型数据的定义、赋值与输出：\n要求：\n定义单精度实型变量x,m，并对x赋题设值;\n定义双精度实型变量y,n，并对y赋题设值;\nm和n分别计算x与y的和。\n输出x,y,m,n的值。\n#include <stdio.h>\nint main()\n{\n\t x=256.012341678,m;   /*单精度实型变量*/\n\t y=123456780.1256789,n;   /*双精度实型变量*/\n\tm=;\n\tn=;\n\tprintf(\"x=\\n\",x);\t/*有误差产生*/\n\tprintf(\"y=%f\\n\",y);\t\n\tprintf(\"m=%f\\n\",m);   /*有误差产生*/\n\tprintf(\"n=\\n\",n);\n\treturn 0;\n}\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 12,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实型数据的定义、赋值与输出'，'description':'实型数据是C语言中的一种数据类型，用于表示实数。在C语言中，实型数据可以分为单精度实型和双精度实型。单精度实型变量可以用float关键字定义，双精度实型变量可以用double关键字定义。赋值操作可以使用赋值运算符=，将一个值赋给一个实型变量。输出操作可以使用printf函数，通过格式化字符串指定输出的格式，%f用于输出实型数据。在实型数据的计算中，可能会产生误差，需要注意。'}]"
    },
    {
        "sortId": 197,
        "id": "1568829708882350080",
        "title": "整形数据的定义、赋值与输出",
        "content": "整形数据的定义、赋值与输出\n分别定义整型的数据a,b,c,d，并对其赋值后并输出。\n要求：a为基本整型，b为短整型，c为长整型，d为无符号整型。\n\n#include <stdio.h>\nint main()\n{\n    =30000;\t\t/*要求基本整型a**/\n    =20000;\t\t/*短整型b*/\n    =123456780;\t/*长整型c*/\n    =25;\t\t/*无符号整型d*/\n    printf(\"%d,%d,%ld,%u\\n\",);  /*依次输出a,b,c,d的整型数据值，%u为无符号类型*/\n    return 0;\n}\n\n\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整形数据的定义、赋值与输出'，'description':'本知识点主要包括整型数据的定义、赋值和输出的方法。在C语言中，可以使用int、short、long和unsigned等关键字来定义不同类型的整型变量。赋值可以使用赋值运算符=来将一个值赋给变量。输出可以使用printf函数来将变量的值输出到屏幕上。'}]"
    },
    {
        "sortId": 198,
        "id": "1568821062060470272",
        "title": "输入的开始及结束里程数及使用的时间计算平均时速",
        "content": "问题的描述：\n\n汽车在有里程标志的公路上行驶，从键盘输入开始里程L1和结束的里程L2，及时间（以小时H、分钟M、秒S输入），计算并输出其平均速度V（公里数/每小时）\n\n\n\n### 输入格式:\n\n在一行中给出2两个实数L1与L2表示其开始里程及结束里程数，两者之间使用逗号分隔。如：1000.00,2000.00\n在第二行中给出三个整数H,M,S表示所使用的时间的小时数，分钟数及秒钟数，三者之间使用冒号分隔。\n如：9:45:38\n\n### 输出格式:\n请输入开始及结束的里程数，单位为千米：\nL1,L2\n请输入时间，格式为 时，分，秒\nH:M:S\nv=x.yz\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1000.00,2000.00\n9:45:38\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入开始及结束的里程数，单位为千米：\n请输入时间，格式为 时，分，秒\nv=102.45\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 11,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整数、浮点数和字符串，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数学运算和逻辑运算。'}, {'name': '条件语句', 'description': '学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句来重复执行一段代码块。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，如字符串的拼接、截取和替换等操作。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name': '文件操作', 'description': '学习如何读写文件，以及文件的打开、关闭和读写操作。'}, {'name': '错误处理', 'description': '学习如何处理程序运行过程中可能出现的错误，如输入错误、文件读写错误等。'}]"
    },
    {
        "sortId": 199,
        "id": "1568811127943655424",
        "title": "输入半径，求球的表面积和体积",
        "content": "从键盘输入一个半径r，求出球的表面积s和体积v。r小于等于0时返回相应提示信息。\n提示：\n要使用常量π\n公式：\n  s=4 πr2\n  v=4/3 πr3\n\n### 输入格式:\n\nr\n\n### 输出格式:\n\ns=x.yz v=x.yz\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n2\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入半径r:\ns=50.24,v=33.49\n```\n\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n0\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入半径r:\n输入的半径应该大于0\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'常量', 'description':'常量是指在程序运行过程中其值不会发生改变的量，常量可以是整数、浮点数、字符或字符串等。在C语言中，常量可以使用关键字const来声明。'}, {'name':'变量', 'description':'变量是指在程序运行过程中其值可以发生改变的量，变量需要先声明后使用。在C语言中，变量的声明需要指定变量的类型和名称。'}, {'name':'输入输出', 'description':'输入输出是指程序与用户或外部设备之间进行数据交互的过程。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name':'运算符', 'description':'运算符是指用于进行数学运算或逻辑运算的符号。在C语言中，常见的运算符包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'条件语句', 'description':'条件语句是指根据条件的真假来执行不同的代码块。在C语言中，可以使用if语句和switch语句来实现条件语句。'}, {'name':'循环语句', 'description':'循环语句是指根据条件的真假来重复执行某段代码。在C语言中，可以使用for循环、while循环和do-while循环来实现循环语句。'}, {'name':'数据类型', 'description':'数据类型是指变量在内存中所占的空间大小和表示范围。在C语言中，常见的数据类型包括整型、浮点型、字符型和指针型等。'}, {'name':'函数', 'description':'函数是指一段完成特定任务的代码块，可以通过函数名来调用并传递参数。在C语言中，函数可以有返回值和参数，也可以没有返回值和参数。'}, {'name':'数组', 'description':'数组是指一组相同类型的数据按照一定顺序排列在一起的集合。在C语言中，数组可以用来存储多个相同类型的数据，可以通过下标来访问数组中的元素。'}, {'name':'指针', 'description':'指针是指存储变量地址的变量，可以通过指针来访问和修改变量的值。在C语言中，可以使用指针来实现动态内存分配和传递参数的引用。'}, {'name':'结构体', 'description':'结构体是指将多个不同类型的变量组合在一起形成一个新的数据类型。在C语言中，可以使用结构体来表示复杂的数据结构，可以通过结构体变量来访问结构体中的成员。'}, {'name':'文件操作', 'description':'文件操作是指对计算机硬盘上的文件进行读取和写入的操作。在C语言中，可以使用标准库函数来实现文件的打开、关闭、读取和写入等操作。'}, {'name':'预处理指令', 'description':'预处理指令是指在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作。'}, {'name':'递归', 'description':'递归是指一个函数调用自身的过程。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题。'}, {'name':'指针运算', 'description':'指针运算是指对指针进行加减操作的过程。在C语言中，可以使用指针运算来实现对数组和字符串的遍历和操作。'}, {'name':'动态内存分配', 'description':'动态内存分配是指在程序运行过程中根据需要分配和释放内存的过程。在C语言中，可以使用标准库函数malloc和free来实现动态内存分配。'}, {'name':'字符串处理', 'description':'字符串处理是指对字符串进行操作和处理的过程。在C语言中，可以使用标准库函数来实现字符串的复制、连接、比较等操作。'}, {'name':'位运算', 'description':'位运算是指对二进制位进行操作的运算。在C语言中，可以使用位运算符来实现对整数的位操作，如与、或、异或等。'}, {'name':'指针和数组', 'description':'指针和数组是C语言中非常重要的概念，可以通过指针来访问和操作数组中的元素。'}, {'name':'指针和函数', 'description':'指针和函数是C语言中非常重要的概念，可以通过指针来传递函数的地址和调用函数。'}, {'name':'指针和结构体', 'description':'指针和结构体是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串', 'description':'指针和字符串是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配', 'description':'指针和动态内存分配是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作', 'description':'指针和文件操作是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组', 'description':'指针和多维数组是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针', 'description':'指针和函数指针是C语言中非常重要的概念，可以通过指针来调用函数和传递函数的地址。'}, {'name':'指针和结构体指针', 'description':'指针和结构体指针是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串指针', 'description':'指针和字符串指针是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配指针', 'description':'指针和动态内存分配指针是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作指针', 'description':'指针和文件操作指针是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组指针', 'description':'指针和多维数组指针是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针指针', 'description':'指针和函数指针指针是C语言中非常重要的概念，可以通过指针来调用函数和传递函数的地址。'}, {'name':'指针和结构体指针指针', 'description':'指针和结构体指针指针是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串指针指针', 'description':'指针和字符串指针指针是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配指针指针', 'description':'指针和动态内存分配指针指针是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作指针指针', 'description':'指针和文件操作指针指针是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组指针指针', 'description':'指针和多维数组指针指针是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针指针指针', 'description':'指针和函数指针指针指针是C语言中非常重要的概念，可以通过指针来调用函数和传递函数的地址。'}, {'name':'指针和结构体指针指针指针', 'description':'指针和结构体指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串指针指针指针', 'description':'指针和字符串指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配指针指针指针', 'description':'指针和动态内存分配指针指针指针是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作指针指针指针', 'description':'指针和文件操作指针指针指针是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组指针指针指针', 'description':'指针和多维数组指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针指针指针指针', 'description':'指针和函数指针指针指针指针是C语言中非常重要的概念，可以通过指针来调用函数和传递函数的地址。'}, {'name':'指针和结构体指针指针指针指针', 'description':'指针和结构体指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串指针指针指针指针', 'description':'指针和字符串指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配指针指针指针指针', 'description':'指针和动态内存分配指针指针指针指针是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作指针指针指针指针', 'description':'指针和文件操作指针指针指针指针是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组指针指针指针指针', 'description':'指针和多维数组指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针指针指针指针指针', 'description':'指针和函数指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来调用函数和传递函数的地址。'}, {'name':'指针和结构体指针指针指针指针指针', 'description':'指针和结构体指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作结构体中的成员。'}, {'name':'指针和字符串指针指针指针指针指针', 'description':'指针和字符串指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作字符串中的字符。'}, {'name':'指针和动态内存分配指针指针指针指针指针', 'description':'指针和动态内存分配指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来分配和释放动态内存。'}, {'name':'指针和文件操作指针指针指针指针指针', 'description':'指针和文件操作指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来读取和写入文件中的数据。'}, {'name':'指针和多维数组指针指针指针指针指针', 'description':'指针和多维数组指针指针指针指针指针是C语言中非常重要的概念，可以通过指针来访问和操作多维数组中的元素。'}, {'name':'指针和函数指针指针指针指针指针指针', 'description':'指针和函数指"
    },
    {
        "sortId": 200,
        "id": "1568460912023760896",
        "title": "中秋月饼圆",
        "content": "今天是9月10日，既是中秋佳节，又是我国的第38个教师节。这真是“蟾宫折桂师恩重，玉魄流光乡恋长”。\n中秋制作月饼、品尝月饼是我国的传统习俗。\n某食品厂要生产一批月饼，请你帮着算一下需要多少千克面粉。\n假设月饼的形状是圆柱体，半径是r公分，高是h公分，面粉的密度是520克/升，圆周率取为3.1416。\n### 输入格式:\n在一行中给出月饼的半径r(公分,实数)，高h(公分,实数)，数量n(个,整数）。\n### 输出格式:\n在一行中输出制作上述月饼所需的面粉量(千克,保留3位小数)。\n### 输入样例:\n```in\n7.2 1.2 2000\n```\n### 输出样例:\n```out\n203.250\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '学习如何定义变量和使用不同的数据类型来存储数据。'}, {'name': '运算符', 'description': '学习如何使用不同的运算符进行数学运算和逻辑运算。'}, {'name': '输入和输出', 'description': '学习如何从用户输入获取数据，并将结果输出给用户。'}, {'name': '条件语句', 'description': '学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句来重复执行一段代码。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数和返回值。'}, {'name': '数组', 'description': '学习如何定义和使用数组来存储多个相同类型的数据。'}, {'name': '字符串', 'description': '学习如何定义和操作字符串类型的数据。'}, {'name': '指针', 'description': '学习如何使用指针来操作内存中的数据。'}, {'name': '结构体', 'description': '学习如何定义和使用结构体来组织和管理多个不同类型的数据。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件指针的操作。'}, {'name': '预处理指令', 'description': '学习如何使用预处理指令来控制编译过程和包含外部文件。'}, {'name': '错误处理', 'description': '学习如何处理程序运行过程中可能出现的错误和异常情况。'}, {'name': '递归', 'description': '学习如何使用递归来解决一些复杂的问题。'}, {'name': '动态内存管理', 'description': '学习如何使用动态内存分配和释放来管理程序运行过程中的内存。'}, {'name': '多线程编程', 'description': '学习如何使用多线程来实现并发执行的程序。'}, {'name': '网络编程', 'description': '学习如何使用网络编程来实现网络通信功能。'}, {'name': '图形界面编程', 'description': '学习如何使用图形界面库来开发图形界面应用程序。'}, {'name': '模块化编程', 'description': '学习如何将程序分解为多个模块，以便于开发和维护。'}, {'name': '调试和测试', 'description': '学习如何使用调试工具和编写测试用例来调试和测试程序。'}, {'name': '性能优化', 'description': '学习如何优化程序的性能，提高程序的运行效率。'}]"
    },
    {
        "sortId": 201,
        "id": "1567739660208377856",
        "title": "小明的红包",
        "content": "今年高考，小明顺利地考入了自己心仪的大学。妈妈给他发了n个红包，每个红包的大小是m元。小明为了鼓励弟弟和妹妹努力学习，分别给每人发了一个红包，大小是p元。请问小明现在还剩多少钱。\n### 输入格式:\n在一行中输入3个整数，分别代表小明收到的红包数，小明收到的每个红包的大小，以及小明送给弟弟和妹妹的红包的大小 。\n### 输出格式:\n在一行中输出小明还剩多少钱。\n### 输入样例:\n```in\n4  200 150\n```\n### 输出样例:\n```out\n500\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法，包括整型、浮点型、字符型等。'}, {'name':'运算符'，'description':'C语言中的运算符的概念和使用方法，包括算术运算符、赋值运算符等。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数的使用方法，包括scanf()和printf()等。'}, {'name':'条件语句'，'description':'C语言中的条件语句的概念和使用方法，包括if语句、switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句的概念和使用方法，包括for循环、while循环等。'}, {'name':'数组'，'description':'C语言中的数组的概念和使用方法，包括一维数组、多维数组等。'}, {'name':'函数'，'description':'C语言中的函数的概念和使用方法，包括函数的定义、函数的调用等。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法，包括指针的定义、指针的运算等。'}, {'name':'字符串'，'description':'C语言中的字符串的概念和使用方法，包括字符串的输入输出、字符串的处理等。'}, {'name':'结构体'，'description':'C语言中的结构体的概念和使用方法，包括结构体的定义、结构体的操作等。'}, {'name':'文件操作'，'description':'C语言中的文件操作的概念和使用方法，包括文件的打开、文件的读写等。'}, {'name':'其他'，'description':'C语言中的其他知识点，包括宏定义、预处理指令等。'}]"
    },
    {
        "sortId": 202,
        "id": "1567735481498804224",
        "title": "倒背如流",
        "content": "  人们常常用“倒背如流”来形容一个人的记忆力特别好。倒背如流的意思是把书或文章倒过来背，背得像流水一样流畅。现在请你编程来模仿一下“倒背如流”。要求读入5个整数a, b, c, d和e，然后倒着把它们输出。好一个倒背如流。\n### 输入格式:\n在一行中输入5个整数。\n### 输出格式:\n对输入的整数，在一行中倒着输出。\n### 输入样例:\n```in\n 18  49 76 35 21\n```\n### 输出样例:\n```out\n21 35 76 49 18\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及C语言中的基本数据类型，如整型、浮点型、字符型等。'}, {'name': '输入和输出', 'description': '学习如何使用scanf函数进行输入，以及使用printf函数进行输出。'}, {'name': '循环结构', 'description': '学习如何使用循环结构，如for循环、while循环、do-while循环等。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的基本操作，如遍历、查找、排序等。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的基本操作，如拼接、比较、查找等。'}, {'name': '函数', 'description': '学习如何声明和使用函数，以及函数的参数传递、返回值等。'}, {'name': '条件语句', 'description': '学习如何使用条件语句，如if语句、switch语句等。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针的基本操作，如取地址、解引用、指针运算等。'}, {'name': '文件操作', 'description': '学习如何进行文件的读写操作，如打开文件、读取文件、写入文件等。'}, {'name': '结构体', 'description': '学习如何声明和使用结构体，以及结构体的基本操作，如定义、访问、赋值等。'}]"
    },
    {
        "sortId": 203,
        "id": "1567731480703205376",
        "title": "磕磕绊绊",
        "content": "2岁的小胖还在学说话，平时也能磕磕绊绊地学着大人的样儿说几句。比如大人教他说1、2、3，他会磕磕绊绊地说1、1、2、2、3、3。请你用程序模仿努力学说话的小胖。\n### 输入格式:\n在一行输入3个整数。\n### 输出格式:\n将输入的每个数依次重复两次输出，数之间用空格分隔。\n### 输入样例:\n```in\n1 2 3\n```\n### 输出样例:\n```out\n1 1 2 2 3 3\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来重复输出输入的每个数两次。'}]"
    },
    {
        "sortId": 204,
        "id": "1567434348205117440",
        "title": "加油折扣(存在误差版)",
        "content": "小杰开学了，小杰爸爸开车送他去学校。路上汽车加油时，小杰爸爸告诉他，油价原价是8.38元一升。现在有一个折扣：每升汽油可优惠3毛，星期五加油每升汽油可额外优惠1毛，现在我还有一张满200减20的优惠券，但优惠券内购买的汽油不能享受这个折扣，在星期x加油，一共加了y升汽油，订单金额，电子券减免金额，折扣金额，支付金额分别是多少元？现在请你写一个程序来帮帮小杰吧。\n\n### 输入格式:\n\n第一行一个整数T,表示测试数据个数。\n第一行包含一个整数x(1$$\\le$$x$$\\le$$7)，表示星期几。\n第二行包含一个小数y(0$$\\le$$y$$\\le$$50)，表示升数。\n\n### 输出格式:\n\n请参考样例输出。订单金额，折扣金额，支付金额四舍五入保留两位小数。\n\n### 输入样例:\n\n```in\n1\n5\n29.6\n```\n\n### 输出样例:\n\n```out\nOrder amount: 248.05\nE-coupon discount amount: 20.00\nDiscount amount: 2.29\nPayment amount: 225.75\n```\n注意: 冒号全为英文冒号，冒号后有一个空格\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '教学内容包括变量的定义和声明，数据类型的分类和使用，以及变量的赋值和运算。'}, {'name': '条件语句', 'description': '教学内容包括if语句和switch语句的使用，以及条件表达式的写法和逻辑运算符的使用。'}, {'name': '循环语句', 'description': '教学内容包括for循环、while循环和do-while循环的使用，以及循环控制语句（break和continue）的使用。'}, {'name': '浮点数运算', 'description': '教学内容包括浮点数的表示和运算，以及浮点数的精度问题和舍入规则。'}, {'name': '格式化输出', 'description': '教学内容包括printf函数的使用，以及格式化输出的控制符和转义字符的使用。'}, {'name': '四舍五入', 'description': '教学内容包括四舍五入的原理和实现方法，以及在C语言中如何进行四舍五入操作。'}, {'name': '运算符优先级', 'description': '教学内容包括运算符的优先级和结合性，以及如何正确理解和使用运算符。'}, {'name': '类型转换', 'description': '教学内容包括隐式类型转换和显式类型转换的概念和使用方法，以及类型转换可能引发的问题和注意事项。'}, {'name': '数组', 'description': '教学内容包括数组的定义和声明，数组的初始化和访问，以及多维数组的使用。'}, {'name': '函数', 'description': '教学内容包括函数的定义和声明，函数的参数传递和返回值，以及函数的调用和递归。'}, {'name': '字符串处理', 'description': '教学内容包括字符串的定义和声明，字符串的输入和输出，以及字符串的操作和处理。'}, {'name': '条件运算符', 'description': '教学内容包括条件运算符的使用和语法，以及条件运算符的嵌套和多重条件判断。'}, {'name': '输入输出', 'description': '教学内容包括scanf函数和gets函数的使用，以及printf函数和puts函数的使用。'}, {'name': '常量', 'description': '教学内容包括常量的定义和分类，以及常量的使用和命名规则。'}, {'name': '指针', 'description': '教学内容包括指针的定义和声明，指针的运算和访问，以及指针和数组的关系。'}, {'name': '结构体', 'description': '教学内容包括结构体的定义和声明，结构体的成员和访问，以及结构体的嵌套和指针。'}, {'name': '文件操作', 'description': '教学内容包括文件的打开和关闭，文件的读写和定位，以及文件的操作和错误处理。'}, {'name': '宏定义', 'description': '教学内容包括宏定义的概念和语法，以及宏定义的使用和注意事项。'}, {'name': '递归', 'description': '教学内容包括递归的概念和原理，递归的实现和调用，以及递归的应用和优化。'}, {'name': '指针和数组', 'description': '教学内容包括指针和数组的关系和区别，指针数组和数组指针的使用，以及指针和字符串的关系。'}, {'name': '动态内存分配', 'description': '教学内容包括动态内存分配的概念和方法，动态内存的申请和释放，以及动态内存的管理和优化。'}, {'name': '位运算', 'description': '教学内容包括位运算的概念和操作符，位运算的应用和效率，以及位运算和逻辑运算的关系。'}, {'name': '指针和函数', 'description': '教学内容包括指针和函数的关系和传递，指针函数和函数指针的使用，以及指针和数组的关系。'}, {'name': '预处理指令', 'description': '教学内容包括预处理指令的概念和语法，预处理指令的使用和注意事项，以及预处理指令和编译过程的关系。'}, {'name': '枚举类型', 'description': '教学内容包括枚举类型的定义和声明，枚举类型的成员和访问，以及枚举类型的应用和注意事项。'}, {'name': '指针和字符串', 'description': '教学内容包括指针和字符串的关系和操作，指针和字符串的比较和拷贝，以及指针和字符串的应用。'}, {'name': '链表', 'description': '教学内容包括链表的定义和声明，链表的插入和删除，以及链表的遍历和操作。'}, {'name': '排序算法', 'description': '教学内容包括排序算法的分类和原理，排序算法的实现和效率，以及排序算法的应用和优化。'}, {'name': '查找算法', 'description': '教学内容包括查找算法的分类和原理，查找算法的实现和效率，以及查找算法的应用和优化。'}, {'name': '文件操作', 'description': '教学内容包括文件的打开和关闭，文件的读写和定位，以及文件的操作和错误处理。'}, {'name': '错误处理', 'description': '教学内容包括错误处理的概念和方法，错误处理的实现和调用，以及错误处理的应用和优化。'}, {'name': '数据结构', 'description': '教学内容包括数据结构的概念和分类，数据结构的实现和应用，以及数据结构的设计和优化。'}, {'name': '算法设计', 'description': '教学内容包括算法设计的基本原则和方法，算法设计的实现和调试，以及算法设计的应用和优化。'}, {'name': '模块化编程', 'description': '教学内容包括模块化编程的概念和方法，模块化编程的实现和调用，以及模块化编程的应用和优化。'}, {'name': '面向对象编程', 'description': '教学内容包括面向对象编程的概念和特点，面向对象编程的实现和调用，以及面向对象编程的应用和优化。'}, {'name': '并发编程', 'description': '教学内容包括并发编程的概念和原理，并发编程的实现和调试，以及并发编程的应用和优化。'}, {'name': '网络编程', 'description': '教学内容包括网络编程的概念和方法，网络编程的实现和调试，以及网络编程的应用和优化。'}, {'name': '图形界面编程', 'description': '教学内容包括图形界面编程的概念和工具，图形界面编程的实现和调试，以及图形界面编程的应用和优化。'}, {'name': '嵌入式系统', 'description': '教学内容包括嵌入式系统的概念和特点，嵌入式系统的实现和调试，以及嵌入式系统的应用和优化。'}, {'name': '算法分析', 'description': '教学内容包括算法分析的基本原则和方法，算法分析的实现和调试，以及算法分析的应用和优化。'}, {'name': '软件工程', 'description': '教学内容包括软件工程的概念和原则，软件工程的实现和调试，以及软件工程的应用和优化。'}, {'name': '操作系统', 'description': '教学内容包括操作系统的概念和特点，操作系统的实现和调试，以及操作系统的应用和优化。'}, {'name': '数据库', 'description': '教学内容包括数据库的概念和分类，数据库的实现和调试，以及数据库的应用和优化。'}, {'name': '网络安全', 'description': '教学内容包括网络安全的概念和原理，网络安全的实现和调试，以及网络安全的应用和优化。'}, {'name': '人工智能', 'description': '教学内容包括人工智能的概念和方法，人工智能的实现和调试，以及人工智能的应用和优化。'}, {'name': '大数据', 'description': '教学内容包括大数据的概念和特点，大数据的实现和调试，以及大数据的应用和优化。'}, {'name': '云计算', 'description': '教学内容包括云计算的概念和原理，云计算的实现和调试，以及云计算的应用和优化。'}, {'name': '物联网', 'description': '教学内容包括物联网的概念和特点，物联网的实现和调试，以及物联网的应用和优化。'}, {'name': '区块链', 'description': '教学内容包括区块链的概念和原理，区块链的实现和调试，以及区块链的应用和优化。'}, {'name': '机器学习', 'description': '教学内容包括机器学习的概念和方法，机器学习的实现和调试，以及机器学习的应用和优化。'}, {'name': '深度学习', 'description': '教学内容包括深度学习的概念和原理，深度学习的实现和调试，以及深度学习的应用和优化。'}, {'name': '自然语言处理', 'description': '教学内容包括自然语言处理的概念和方法，自然语言处理的实现和调试，以及自然语言处理的应用和优化。'}, {'name': '计算机视觉', 'description': '教学内容包括计算机视觉的概念和原理，计算机视觉的实现和调试，以及计算机视觉的应用和优化。'}, {'name': '数据挖掘', 'description': '教学内容包括数据挖掘的概念和方法，数据挖掘的实现和调试，以及数据挖掘的应用和优化。'}, {'name': '自动化', 'description': '教学内容包括自动化的概念和原理，自动化的实现和调试，以及自动化的应用和优化。'}, {'name': '计算机网络', 'description': '教学内容包括计算机网络的概念和分类，计算机网络的实现和调试，以及计算机网络的应用和优化。'}, {'name': '计算机组成原理', 'description': '教学内容包括计算机组成原理的概念和原理，计算机组成原理的实现和调试，以及计算机组成原理的应用和优化。'}, {'name': '操作系统原理', 'description': '教学内容包括操作系统原理的概念和原理，操作系统原理的实现和调试，以及操作系统原理的应用和优化。'}, {'name': '数据库原理', 'description': '教学内容包括数据库原理的概念和原理，数据库原理的实现和调试，以及数据库原理的应用和优化。'}, {'name': '编译原理', 'description': '教学内容包括编译原理的概念和原理，编译原理的实现和调试，以及编译原理的应用和优化。'}, {'name': '软件工程原理', 'description': '教学内容包括软件工程原理的概念和原理，软件工程原理的实现和调试，以及软件工程原理的应用和优化。'}, {'name': '计算机图形学', 'description': '教学内容包括计算机图形学的概念和原理，计算机图形学的实现和调试，以及计算机图形学的应用和优化。'}, {'name': '人机交互', 'description': '教学内容包括人机交互的概念和原理，人机交互的实现和调试，以及人机交互的应用和优化。'}, {'name': '计算机安全', 'description': '教学内容包括计算机安全的概念和原理，计算机安全的实现和调试，以及计算机安全的应用和优化。'}, {'name': '计算机体系结构', 'description': '"
    },
    {
        "sortId": 205,
        "id": "1567338833568268288",
        "title": "停车场时间计算问题（基础版）",
        "content": "\n\n![image.png](~/e3e56ea4-2a57-405b-ad3b-aba43c8269e0.png)\n\n小卢同学自从考了驾照。每次都带小伙伴开车出去玩，每次在遇到停车计费问题，都使他很苦恼。短时间停车时，他还能算清楚。\n由于贪玩，经常把车停了好长时间，每当结算计费的时候，他并不能马上算出自己有没有被多收了钱。他觉得每次都好像被停车计费系统多收了钱，但是又不知道准确的值时多少。你能帮帮他吗。\n即输入两个日期时间，时间格式为yyyy/mm/dd hh:mm，输出为xD x.xH。可能存在后一个时间内比前一个时间早的情况，则输出为-xD x.xH，\n\n若年份不在2000-2100年，月份，时间不在正常范围内，即输出“输入错误”。(注意，本题不考虑闰年情况，即每年均是358天，每个月30天，其中二月份28天。天数只保留整数位，时间整数位和小数位均保留1位，多余部分四舍五入)\n\n\n### 输入格式:\n\n输入在一行中给出2个日期时间A和B。\n\n### 输出格式:\n\n输出两个时间的时间间隔xD x.xH（中间有空格）\n注意默认保留小数点前后一位，即使两个时间相同也要输出0.0D 0.0H\n若输入不规范，则输出：输入错误\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2022/5/6 16:00 2022/5/7 17:00\n```\n```in\n2022/4/4 22:02 2022/4/4 22:02\n```\n```in\n2022/4/6 12:00 2022/4/5 00:00\n```\n```in\n2022/5/9 26:00 2022/5/3 21:00\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1D 1.0H\n```\n```out\n0D 0.0H\n```\n```out\n-1D 12.0H\n```\n```out\n输入错误\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '日期时间计算', 'description': '本题要求计算两个日期时间之间的时间间隔。首先需要将输入的日期时间解析为年、月、日、时、分的整数值。然后根据题目要求的时间格式，计算出两个日期时间之间的天数和小时数。最后根据天数和小时数的正负情况，输出对应的结果。需要注意输入的合法性，包括年份是否在2000-2100年范围内，月份和时间是否在正常范围内。'}]"
    },
    {
        "sortId": 206,
        "id": "1567121998805671936",
        "title": "1-5 输入的温度区间及步长输出华氏摄氏温度对照表",
        "content": "题目描述\n从键盘的一行中输入三个值L、H、S，其中L是华氏温度的下限，H是上限，S是步长，打印输出华氏摄氏温度对照表；其中（0<=L，S>0)，要求判断L及S的值是否合法；如果L>H，则交换。\n\n\n【问题分析与算法设计】\n利用华氏和摄氏的温度转换公式C°=5/9(F°-32),，通过循环语句打印输出华氏和摄氏的温度转换表。\n\n输入格式:\n在一行中输入三个整数L、H、S，三个数之间用空格隔开。\n输出格式:\n要求输出表头\n华氏温度与摄氏温度之间使用四个“-”隔开；\n具体的对照表中的数值之间使用八个“.”隔开，摄氏温度左对齐，宽度为6位，保留两位小数位数。\n\n====华氏与摄氏温度对照表====\n华氏温度----摄氏温度\nL........xxx.yz\n...\n...\n...\nH........xxx.yz\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n0  300 20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n====华氏与摄氏温度对照表====\n华氏温度----摄氏温度\n0........-17.00\n20........-6.00 \n40........4.00  \n60........15.00 \n80........26.00 \n100........37.00 \n120........48.00 \n140........60.00 \n160........71.00 \n180........82.00 \n200........93.00 \n220........104.00\n240........115.00\n260........126.00\n280........137.00\n300........148.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 11,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环语句', 'description': '通过循环语句打印输出华氏和摄氏的温度转换表'}, {'name': '条件判断', 'description': '判断L及S的值是否合法'}, {'name': '变量交换', 'description': '如果L>H，则交换'}]"
    },
    {
        "sortId": 207,
        "id": "1566648050913452032",
        "title": "1-3 打印输出华氏摄氏温度对照表",
        "content": "打印输出华氏摄氏温度对照表；\n\n打印输出华氏和摄氏的温度对照表。\n0   -17\n 20    -6\n 40     4\n 60    15\n 80    26\n......\n......\n......\n\n300   148\n【问题分析与算法设计】\n利用华氏和摄氏的温度转换公式C°=5/9(F°-32),设置温度间隔步长20，华氏温度的区间为【0，300】，通过循环语句打印输出华氏和摄氏的温度转换表。\n华氏温度与摄氏温度之间使用四个“-”隔开；\n具体的对照表中的数值之间使用八个“-”隔开。\n\n### 输入格式:\n\n本题无输入\n\n### 输出格式:\n====华氏与摄氏温度对照表====\n华氏温度----摄氏温度\n0---------17\n20---------6\n40--------4\n60--------15\n80--------26\n...\n...\n...\n300--------148\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n====华氏与摄氏温度对照表====\n华氏温度----摄氏温度\n0---------17\n20---------6\n40--------4\n60--------15\n80--------26\n100--------37\n120--------48\n140--------60\n160--------71\n180--------82\n200--------93\n220--------104\n240--------115\n260--------126\n280--------137\n300--------148\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环语句'，'description':'通过循环语句打印输出华氏和摄氏的温度转换表'}, {'name':'华氏和摄氏温度转换公式'，'description':'利用华氏和摄氏的温度转换公式C°=5/9(F°-32)'}, {'name':'输出格式'，'description':'输出格式为华氏温度和摄氏温度之间使用四个“-”隔开，具体的对照表中的数值之间使用八个“-”隔开'}]"
    },
    {
        "sortId": 208,
        "id": "1565903391828279296",
        "title": "1-1 输出金字塔图案",
        "content": "输出4行金字塔图案，每行的星数为1，3，5，7。\n### 输入格式:\n本题无输入\n### 输出格式:\n  输出由*组成的金字塔图案（一个等腰三角形）。\n### 输入样例:\n```in\n```\n### 输出样例:\n```out\n   *\n  ***\n *****\n*******\n\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制每行输出的星号数量。'}]"
    },
    {
        "sortId": 209,
        "id": "1565296306732199936",
        "title": "整数A+B",
        "content": "\n\n本题目要求读入2个整数A和B，然后输出它们的和。\n\n### 输入格式:\n\n请在这里写输入格式。例如：输入在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n请在这里描述输出格式。例如：对每一组输入，在一行中输出A+B的值。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n18 -299\n```\n\n\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n-281\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和赋值'，'description':'在C语言中，可以使用变量来存储数据。变量的定义和赋值是C语言程序设计的基础知识点。在本题中，需要定义两个整型变量A和B，并将输入的值赋给它们。'}, {'name':'加法运算'，'description':'C语言中的加法运算可以使用+运算符来实现。在本题中，需要将变量A和B的值相加，并将结果输出。'}, {'name':'输入输出'，'description':'C语言中可以使用scanf函数来读取输入的值，使用printf函数来输出结果。在本题中，需要使用scanf函数读取输入的两个整数，使用printf函数输出它们的和。'}]"
    },
    {
        "sortId": 210,
        "id": "1565163448201973760",
        "title": "格式化输出可以处理负整数的二进制补码形式，输出8位二进制补码，不足8位在前面补0",
        "content": "格式化输出可以处理负整数的二进制补码形式，输出8位二进制补码，不足8位在前面补0\n\n\n\n### 输入格式:\n\n-128到127之间的整数\n\n### 输出格式:\n\n整数对应的二进制补码\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n-128\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n10000000\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247804354764800",
                        "name": "基本数据类型",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924249108116414464",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247804354764800",
                        "name": "基本数据类型",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924248982081773568",
                        "name": "整型",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式化输出', 'description': '格式化输出可以处理负整数的二进制补码形式，输出8位二进制补码，不足8位在前面补0'}]"
    },
    {
        "sortId": 211,
        "id": "1564810498132746240",
        "title": "格式输出整数，控制长度，右边补空格。",
        "content": "格式输出整数，控制长度。\n\n输入两个整数，求两个整数的乘积。输出每个整数时控制每个整数的输出长度为3，不足3个时在右边补空格。\n\n\n\n### 输入格式:\n\n3\n5\n\n### 输出格式:\n\n3  *5  =15 \n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3  *5  =15 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247696443711488",
                        "name": "输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924248852306845696",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式输出整数，控制长度', 'description': '本知识点主要涉及如何使用格式化输出控制整数的长度。在C语言中，可以使用printf函数的格式控制符来控制输出的长度。具体来说，可以使用%Nd来控制一个整数的输出长度为N，不足N个时在右边补空格。其中N为一个正整数。在本题中，需要使用%3d来控制两个整数的输出长度为3。'}]"
    },
    {
        "sortId": 212,
        "id": "1564807941746393088",
        "title": "格式输出整数，控制长度，左边补空格。",
        "content": "这是一个编程题模板。\n\n格式输出整数，控制长度。\n\n输入两个整数，求两个整数的乘积。输出乘积结果整数时控制每个整数的输出长度为3，不足3个时在左边补空格。\n\n### 输入格式:\n\n3\n5\n\n### 输出格式:\n\n3*5= 15\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3*5= 15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247696443711488",
                        "name": "输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924248759662026752",
                        "name": "print()",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整数输入输出', 'description': '教学目标：学生能够掌握整数的输入和输出方法。\\n教学内容：介绍整数的输入和输出方法，包括格式化输出和控制输出长度。\\n教学方法：通过示例代码和练习题，引导学生掌握整数的输入和输出方法。\\n教学评价：通过练习题的完成情况和学生的理解程度，评价学生对整数输入输出的掌握程度。'}, {'name': '整数乘法运算', 'description': '教学目标：学生能够掌握整数的乘法运算方法。\\n教学内容：介绍整数的乘法运算方法，包括乘法运算符和乘法运算的结果输出。\\n教学方法：通过示例代码和练习题，引导学生掌握整数的乘法运算方法。\\n教学评价：通过练习题的完成情况和学生的理解程度，评价学生对整数乘法运算的掌握程度。'}, {'name': '格式化输出', 'description': '教学目标：学生能够掌握格式化输出方法。\\n教学内容：介绍格式化输出的方法，包括控制输出长度和补空格。\\n教学方法：通过示例代码和练习题，引导学生掌握格式化输出的方法。\\n教学评价：通过练习题的完成情况和学生的理解程度，评价学生对格式化输出的掌握程度。'}]"
    },
    {
        "sortId": 213,
        "id": "1564497036849332224",
        "title": "1-0 输出字符串\"您好，中国！\"",
        "content": "输出字数串\"您好！中国！\"\n\n\n### 输入格式:\n本题无输入\n\n### 输出格式:\n在一行中输出\"您好，中国！\"\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n您好，中国！\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句'，'description':'使用printf函数输出指定的字符串'}]"
    },
    {
        "sortId": 214,
        "id": "1561970826424500224",
        "title": "阀门传感器 - C/C++ 位操作",
        "content": "CPU通过一个8位的IO口读取了1个字节的传感器值：unsigned char value = 0x45。这个字节的8个比特分别代表了车间里8个阀门的当前状态，1表示该阀门通，0表示该阀门断。请编写一个程序，从value变量解析出8个阀门的当前状态，并依次输出。\n\n请将下述程序补充完整，使其可以完成上述任务。\n\n```c\n#include <stdio.h>\n#include <stdbool.h>\n\nbool isValveOn(unsigned char v, int iNumber)\n{\n    return \n}\n\nint main()\n{\n    unsigned char v = 0x45;\n    for (int i=0;i<8;i++)\n        printf(\"Valve %d: %s\\n\",i,);\n    return 0;\n}\n```\n程序期望的执行结果为：\n```\nValve 0: On\nValve 1: Off\nValve 2: On\nValve 3: Off\nValve 4: Off\nValve 5: Off\nValve 6: On\nValve 7: Off\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '位运算', 'description': '位运算是一种对二进制数进行操作的运算方式，常用的位运算符有与（&）、或（|）、异或（^）、取反（~）等。在本题中，可以使用位运算来解析出8个阀门的当前状态。'}, {'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的结构，常用的循环结构有for循环、while循环和do-while循环。在本题中，可以使用for循环来依次输出8个阀门的当前状态。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件判断来执行不同代码的结构，常用的条件语句有if语句和switch语句。在本题中，可以使用条件语句来判断阀门的状态并输出相应的结果。'}, {'name': '数据类型', 'description': '数据类型是一种用来表示数据的属性和操作的分类，常用的数据类型有整型、浮点型、字符型等。在本题中，使用了无符号字符型（unsigned char）来表示传感器值和阀门状态。'}, {'name': '函数', 'description': '函数是一种封装了一段可重复使用的代码的结构，常用的函数有库函数和自定义函数。在本题中，可以使用自定义函数isValveOn来判断阀门是否打开。'}, {'name': '输出语句', 'description': '输出语句是一种将数据打印到屏幕上的语句，常用的输出语句有printf函数。在本题中，使用了printf函数来输出阀门的状态。'}]"
    },
    {
        "sortId": 215,
        "id": "1561918336450572288",
        "title": "进制转换 - C/C++ 位操作",
        "content": "0x0310 =  （十进制）\n0b01111010 =    （十进制）\n0x8F =   （二进制 ，不含0b）\n\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '十六进制转十进制', 'description': '学习如何将十六进制数转换为十进制数。'}, {'name': '二进制转十进制', 'description': '学习如何将二进制数转换为十进制数。'}]"
    },
    {
        "sortId": 216,
        "id": "1558712413665931264",
        "title": "橡皮泥 - C/C++ 语法基础",
        "content": "将两块球形橡皮泥揉在一起，捏成一个正方体。请编程，完成下述功能：\n\n从键盘读入第1个球形橡皮泥的直径，该直径为浮点数；\n从键盘读入第2个球形橡皮泥的直径，该直径仍为浮点数；\n求正方体的边长，并保留两位小数输出;\n\n\n### 输入格式:\n\n第一个球的直径\n第二个球的直径\n\n### 输出格式:\n\n请参考输出样例。\n\n### 输入样例:\n\n```in\n3.2\n5.553\n```\n\n### 输出样例:\n\n```out\nSide length of cube: 4.74\n```\n\n提示：圆球的体积 V = 4/3 * π r³\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '键盘输入', 'description': '学习如何从键盘读入数据'}, {'name': '浮点数', 'description': '学习浮点数的概念和使用'}, {'name': '变量', 'description': '学习如何定义和使用变量'}, {'name': '运算符', 'description': '学习如何使用运算符进行数值计算'}, {'name': '保留小数位数', 'description': '学习如何保留指定小数位数'}, {'name': '输出格式', 'description': '学习如何按照指定格式输出结果'}, {'name': '圆球体积计算', 'description': '学习如何计算圆球的体积'}, {'name': '正方体边长计算', 'description': '学习如何根据圆球的直径计算正方体的边长'}]"
    },
    {
        "sortId": 217,
        "id": "1558705455017799680",
        "title": "最短跑道长度 - C/C++ 语法基础",
        "content": "假设某飞机的加速度是a，起飞的速度是v，下述公式可以计算出该飞机起飞所需的最短跑道长度: L = v²/(2a)。编写一个程序，提示用户输入起飞速度v(m/s)和加速度a(m/s²)，计算飞机起飞的最短跑道长度，输出时保留2位小数。计算过程宜封装成一个函数，该函数接受参数v和a，返回计算所得的L。\n\n\n### 输入样例:\n```in\n100.1\n5.0\n```\n\n### 输出样例:\n```out\nThe shortest length of run  way: 1002.00\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义与调用', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在本题中，需要封装一个函数来计算飞机起飞的最短跑道长度。函数的定义包括函数名、参数列表和函数体，函数的调用通过函数名和实参来完成。'}, {'name': '变量的声明与赋值', 'description': '在程序中，需要声明和定义变量来存储数据。在本题中，需要声明和定义变量来存储起飞速度v和加速度a，并通过用户输入来为这些变量赋值。变量的声明包括变量类型和变量名，变量的赋值通过赋值运算符“=”来完成。'}, {'name': '数学运算', 'description': '在程序中，需要进行数学运算来完成特定的计算任务。在本题中，需要使用数学运算符“+”、“-”、“*”、“/”和“**”来进行加、减、乘、除和幂运算，以及使用括号来改变运算的优先级。'}, {'name': '输入与输出', 'description': '在程序中，需要与用户进行交互，接收用户的输入并输出结果。在本题中，需要使用输入函数input()来接收用户输入的起飞速度v和加速度a，并使用输出函数print()来输出计算所得的最短跑道长度L。'}, {'name': '格式化输出', 'description': '在程序中，需要对输出结果进行格式化，以满足特定的要求。在本题中，需要保留最短跑道长度L的小数点后两位，并在输出时进行格式化。可以使用格式化字符串来实现，例如使用字符串的format()方法或者使用f-string。'}]"
    },
    {
        "sortId": 218,
        "id": "1558433137813139456",
        "title": "海伦-秦九韶 - C/C++ 语法基础",
        "content": "编程序实现功能：输入三角形的三条边边长，求三角形面积，其中面积计算使用用户自定义函数实现。\n输出的面积保留两位小数。\n\n\n\n### 输入格式:\n\n边长1\n边长2\n边长3\n\n### 输出格式:\n\n当三条边可能构成合法的三角形时，输出应为：\n```\n面积\n```\n当三条边无法构成合法的三角形时，输出：\n```\nError Input.\n```\n### 输入样例:\n```in\n3.1\n4\n5\n```\n\n### 输出样例:\n```out\n6.20\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '用户自定义函数', 'description': '用户自定义函数是指由用户自己编写的函数，用于实现特定的功能。在本题中，需要使用用户自定义函数来计算三角形的面积。'}]"
    },
    {
        "sortId": 219,
        "id": "1558430072456404992",
        "title": "对角线 - C/C++ 语法基础",
        "content": "编写程序，实现下述功能：\n\n从键盘读入矩形的长，以厘米为单位，应为小数；\n从键盘读入矩形的宽，以厘米为单位，应为小数；\n使用勾股定理计算对角线的长度并输出，保留1位小数。\n\n\n\n### 输入格式:\n\n长\n宽\n\n### 输出格式:\n\n参见输出样例\n\n### 输入样例:\n```in\n5.1\n4.3\n```\n\n### 输出样例:\n```out\nThe diagonal legnth is: 6.7 cm.\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘读入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整数、浮点数等，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数学运算和逻辑运算。'}, {'name': '条件语句', 'description': '学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name': '勾股定理', 'description': '学习如何使用勾股定理计算直角三角形的斜边长度。'}]"
    },
    {
        "sortId": 220,
        "id": "1558425541857304576",
        "title": "菲姐游泳 - C/C++ 语法基础",
        "content": "游泳奥运冠军菲姐刻苦训练，从早上a时b分开始下水训练，直到当天的c时d分结束。请编程计算：菲姐当天一共训练多少小时多少分钟？\n\n### 输入格式:\n\n一行之内输入以空格分隔的4个非负整数，分别对应a,b,c,d。其中，0 ≤a<c ≤24；b和d均不大于60。\n\n### 输出格式:\n\nh:m。其中，整数h表示小时数，整数m表示分钟数,m应小于60。\n\n### 输入样例:\n\n```in\n6 30 23 20\n```\n\n### 输出样例:\n```out\n16:50\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量用于存储数据，数据类型决定了变量可以存储的数据的种类和范围。学生需要了解C语言中的基本数据类型，如整型、浮点型、字符型等，以及如何声明和使用变量。'}, {'name': '运算符', 'description': 'C语言中有各种运算符，包括算术运算符、关系运算符、逻辑运算符等。学生需要了解这些运算符的使用方法和优先级。'}, {'name': '输入输出', 'description': '学生需要了解如何使用C语言中的输入输出函数，如scanf和printf函数，以及格式化输出的方法。'}, {'name': '条件语句', 'description': '学生需要了解C语言中的条件语句，如if语句和switch语句，以及如何根据条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学生需要了解C语言中的循环语句，如for循环、while循环和do-while循环，以及如何使用循环来重复执行一段代码。'}, {'name': '数组', 'description': '学生需要了解C语言中的数组，包括一维数组和多维数组，以及如何声明和使用数组。'}, {'name': '函数', 'description': '学生需要了解C语言中的函数，包括函数的声明、定义和调用，以及函数的参数和返回值的使用。'}, {'name': '指针', 'description': '学生需要了解C语言中的指针，包括指针的声明、初始化和使用，以及指针和数组、指针和函数的关系。'}, {'name': '字符串', 'description': '学生需要了解C语言中的字符串，包括字符串的声明、初始化和使用，以及字符串的输入输出和常见的字符串操作函数。'}, {'name': '结构体', 'description': '学生需要了解C语言中的结构体，包括结构体的声明、定义和使用，以及结构体数组和结构体指针的使用。'}, {'name': '文件操作', 'description': '学生需要了解C语言中的文件操作，包括文件的打开、关闭、读写等操作，以及文件指针的使用。'}]"
    },
    {
        "sortId": 221,
        "id": "1558422664678006784",
        "title": "和与平均 - C/C++ 语法基础",
        "content": "编程从键盘读入3个整数，输出它们的和与平均值。其中，平均值保留2位小数。\n\n\n\n### 输入格式:\n\n整数1\n整数2\n整数3\n\n\n\n### 输出格式:\n\n和,平均值\n\n### 输入样例:\n\n```in\n1\n2\n3\n```\n\n### 输出样例:\n```out\n6,2.00\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '从键盘读入整数', 'description': '教学如何从键盘读入整数'}, {'name': '整数的加法运算', 'description': '教学如何进行整数的加法运算'}, {'name': '保留小数位数', 'description': '教学如何保留小数的位数'}, {'name': '计算平均值', 'description': '教学如何计算一组数的平均值'}]"
    },
    {
        "sortId": 222,
        "id": "1558383746486161408",
        "title": "绩点计算 - C/C++ 语法基础",
        "content": "某大学的GPA(绩点)计算规则如下：\n\n课程百分制成绩90分对应绩点4.0，超过90分的，按90分计；如不足90分，则课程绩点 = 4.0 * 分数/90。\n学生综合绩点按该生已修的各门课程绩点结合学分加权平均而得。\n现有步步同学入学后的已修课程（共5门）成绩表如下，请编程计算其GPA。\n\n\n### 输入格式:\n\n第1门课程百分制分数 学分\n\n\n第2门课程百分制分数 学分\n\n\n第3门课程分制分数 学分\n\n\n第4门课程百分制分数 学分\n\n\n第5门课程百分制分数 学分\n\n\n说明：百分制分数和学分均为整数。\n\n\n\n### 输出格式:\n\n请参考输出样例。其中，GPA值保留两位小数。\n\n### 输入样例:\n\n```in\n78 3\n91 5\n65 4\n95 3\n60 2\n```\n\n### 输出样例:\n```out\nGPA:3.49\n```\n\n提示：从键盘读取输入的方法，请参考教材后续章节。\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何从键盘读取输入和输出结果。'}, {'name': '变量和数据类型', 'description': '教学如何定义变量和使用不同的数据类型。'}, {'name': '运算符', 'description': '教学如何使用算术运算符和赋值运算符。'}, {'name': '条件语句', 'description': '教学如何使用条件语句进行分支控制。'}, {'name': '循环语句', 'description': '教学如何使用循环语句进行重复执行。'}, {'name': '数组', 'description': '教学如何定义和使用数组。'}, {'name': '函数', 'description': '教学如何定义和调用函数。'}, {'name': '浮点数运算', 'description': '教学如何进行浮点数运算和保留小数位数。'}]"
    },
    {
        "sortId": 223,
        "id": "1558339960175378432",
        "title": "分苹果 - C/C++ 语法基础",
        "content": "现有n个苹果，均分给5位同学，剩下的苹果交还老师。请编写程序，解决下述问题：\n\n* 每位同学能分得几个苹果？\n* 一共分出去多少个苹果？\n* 交还老师的苹果有几个？\n\n### 输入样例:\n\n```in\n17\n```\n\n### 输出样例:\n```out\nEveryone have 3 apples.\n15 apples have been taken in total.\nreturned 2 apples to the teacher.\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是存储数据的一种方式，可以用来保存和操作数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在C语言中，可以使用scanf函数进行输入操作，使用printf函数进行输出操作。'}, {'name': '运算符', 'description': '运算符是用来进行数学运算或逻辑运算的符号。在C语言中，常见的运算符有算术运算符、赋值运算符、比较运算符、逻辑运算符等。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程，包括条件语句和循环语句。在C语言中，常见的控制语句有if语句、switch语句、for循环、while循环等。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的方式，可以通过下标访问数组中的元素。在C语言中，数组的声明和使用需要指定数组的类型和大小。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数的调用来执行这段代码。在C语言中，函数需要先声明后使用，声明时需要指定函数的返回类型、函数名和参数列表。'}, {'name': '算术运算', 'description': '算术运算是对数字进行加减乘除等数学运算的操作。在C语言中，常见的算术运算符有加法运算符、减法运算符、乘法运算符、除法运算符等。'}, {'name': '赋值运算', 'description': '赋值运算是将一个值赋给一个变量的操作。在C语言中，赋值运算符使用等号（=）表示，可以将一个表达式的值赋给一个变量。'}, {'name': '比较运算', 'description': '比较运算是对两个值进行比较的操作，返回一个布尔值（真或假）。在C语言中，常见的比较运算符有等于运算符、不等于运算符、大于运算符、小于运算符等。'}, {'name': '逻辑运算', 'description': '逻辑运算是对布尔值进行逻辑操作的运算。在C语言中，常见的逻辑运算符有与运算符、或运算符、非运算符等。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在C语言中，常见的条件语句有if语句、if-else语句、if-else if语句等。'}, {'name': '循环语句', 'description': '循环语句用于重复执行一段代码块，直到满足退出条件为止。在C语言中，常见的循环语句有for循环、while循环、do-while循环等。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，用于指定变量可以存储的数据的类型和范围。在C语言中，常见的数据类型有整型、浮点型、字符型、数组类型等。'}, {'name': '数组访问', 'description': '数组访问是通过下标来访问数组中的元素。在C语言中，数组的下标从0开始，可以使用下标来读取或修改数组中的元素。'}, {'name': '函数调用', 'description': '函数调用是通过函数名和参数列表来执行函数中的代码。在C语言中，函数调用时需要提供函数名和参数列表，参数列表中的参数可以是常量、变量或表达式。'}, {'name': '函数声明', 'description': '函数声明是在使用函数之前对函数进行声明，包括函数的返回类型、函数名和参数列表。在C语言中，函数声明可以放在函数调用之前或放在函数定义之前。'}, {'name': '函数定义', 'description': '函数定义是对函数进行具体实现的代码块，包括函数的返回类型、函数名、参数列表和函数体。在C语言中，函数定义需要在函数调用之前进行。'}, {'name': '输入操作', 'description': '输入操作是从外部设备（如键盘）读取数据并存储到变量中的操作。在C语言中，可以使用scanf函数进行输入操作，需要提供格式字符串和变量地址作为参数。'}, {'name': '输出操作', 'description': '输出操作是将数据从变量中输出到外部设备（如屏幕）的操作。在C语言中，可以使用printf函数进行输出操作，需要提供格式字符串和变量值作为参数。'}, {'name': '整数除法', 'description': '整数除法是对两个整数进行除法运算的操作，结果为整数部分。在C语言中，整数除法使用除法运算符（/）进行计算。'}, {'name': '取余运算', 'description': '取余运算是对两个整数进行取余运算的操作，结果为余数部分。在C语言中，取余运算使用取余运算符（%）进行计算。'}, {'name': '变量声明', 'description': '变量声明是在使用变量之前对变量进行声明，包括变量的类型和名称。在C语言中，变量声明可以放在函数内部或函数外部。'}, {'name': '变量赋值', 'description': '变量赋值是将一个值赋给一个变量的操作。在C语言中，变量赋值使用赋值运算符（=）进行计算。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来决定程序的执行流程。在C语言中，可以使用if语句进行条件判断，根据条件的真假来执行不同的代码块。'}, {'name': '循环控制', 'description': '循环控制是控制循环执行次数或跳出循环的操作。在C语言中，可以使用循环语句（如for循环、while循环）和循环控制语句（如break语句、continue语句）来控制循环的执行。'}, {'name': '整型数据', 'description': '整型数据是一种数据类型，用于存储整数。在C语言中，常见的整型数据类型有int、short、long等。'}, {'name': '浮点型数据', 'description': '浮点型数据是一种数据类型，用于存储小数。在C语言中，常见的浮点型数据类型有float、double等。'}, {'name': '字符型数据', 'description': '字符型数据是一种数据类型，用于存储单个字符。在C语言中，字符型数据使用单引号（\\'\\'）表示，如\\'A\\'、\\'b\\'等。'}, {'name': '数组大小', 'description': '数组大小是指数组中元素的个数。在C语言中，可以使用sizeof运算符来获取数组的大小，单位为字节。'}, {'name': '函数返回值', 'description': '函数返回值是函数执行完毕后返回给调用者的值。在C语言中，可以使用return语句来指定函数的返回值，返回值的类型需要与函数声明中的返回类型一致。'}, {'name': '函数参数', 'description': '函数参数是在函数调用时传递给函数的值，用于函数的计算和处理。在C语言中，函数参数可以是常量、变量或表达式，参数的个数和类型需要与函数声明中的参数列表一致。'}, {'name': '函数调用', 'description': '函数调用是通过函数名和参数列表来执行函数中的代码。在C语言中，函数调用时需要提供函数名和参数列表，参数列表中的参数可以是常量、变量或表达式。'}, {'name': '函数返回类型', 'description': '函数返回类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数参数传递', 'description': '函数参数传递是指将参数的值传递给函数的过程。在C语言中，函数参数传递可以是按值传递、按地址传递或按引用传递。'}, {'name': '函数返回值传递', 'description': '函数返回值传递是指将函数的返回值传递给调用者的过程。在C语言中，函数返回值传递可以是通过赋值给变量、作为表达式的一部分或作为函数的参数传递给其他函数。'}, {'name': '函数调用过程', 'description': '函数调用过程是指在程序中调用函数时的执行流程。在C语言中，函数调用过程包括函数调用、参数传递、函数执行、返回值传递等步骤。'}, {'name': '函数声明与定义', 'description': '函数声明是在使用函数之前对函数进行声明，包括函数的返回类型、函数名和参数列表。函数定义是对函数进行具体实现的代码块，包括函数的返回类型、函数名、参数列表和函数体。'}, {'name': '函数返回值类型', 'description': '函数返回值类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回值类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数参数个数', 'description': '函数参数个数是指函数声明或定义中的参数的个数。在C语言中，函数参数个数需要与函数调用时提供的参数的个数一致。'}, {'name': '函数参数类型', 'description': '函数参数类型是指函数声明或定义中的参数的类型。在C语言中，函数参数类型需要与函数调用时提供的参数的类型一致。'}, {'name': '函数参数传递方式', 'description': '函数参数传递方式是指将参数的值传递给函数的方式。在C语言中，函数参数传递方式可以是按值传递、按地址传递或按引用传递。'}, {'name': '函数返回值类型', 'description': '函数返回值类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回值类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数返回值传递方式', 'description': '函数返回值传递方式是指将函数的返回值传递给调用者的方式。在C语言中，函数返回值传递方式可以是通过赋值给变量、作为表达式的一部分或作为函数的参数传递给其他函数。'}, {'name': '函数调用过程', 'description': '函数调用过程是指在程序中调用函数时的执行流程。在C语言中，函数调用过程包括函数调用、参数传递、函数执行、返回值传递等步骤。'}, {'name': '函数声明与定义', 'description': '函数声明是在使用函数之前对函数进行声明，包括函数的返回类型、函数名和参数列表。函数定义是对函数进行具体实现的代码块，包括函数的返回类型、函数名、参数列表和函数体。'}, {'name': '函数返回值类型', 'description': '函数返回值类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回值类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数参数个数', 'description': '函数参数个数是指函数声明或定义中的参数的个数。在C语言中，函数参数个数需要与函数调用时提供的参数的个数一致。'}, {'name': '函数参数类型', 'description': '函数参数类型是指函数声明或定义中的参数的类型。在C语言中，函数参数类型需要与函数调用时提供的参数的类型一致。'}, {'name': '函数参数传递方式', 'description': '函数参数传递方式是指将参数的值传递给函数的方式。在C语言中，函数参数传递方式可以是按值传递、按地址传递或按引用传递。'}, {'name': '函数返回值类型', 'description': '函数返回值类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回值类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数返回值传递方式', 'description': '函数返回值传递方式是指将函数的返回值传递给调用者的方式。在C语言中，函数返回值传递方式可以是通过赋值给变量、作为表达式的一部分或作为函数的参数传递给其他函数。'}, {'name': '函数调用过程', 'description': '函数调用过程是指在程序中调用函数时的执行流程。在C语言中，函数调用过程包括函数调用、参数传递、函数执行、返回值传递等步骤。'}, {'name': '函数声明与定义', 'description': '函数声明是在使用函数之前对函数进行声明，包括函数的返回类型、函数名和参数列表。函数定义是对函数进行具体实现的代码块，包括函数的返回类型、函数名、参数列表和函数体。'}, {'name': '函数返回值类型', 'description': '函数返回值类型是指函数执行完毕后返回给调用者的值的类型。在C语言中，函数的返回值类型可以是整型、浮点型、字符型、指针类型等。'}, {'name': '函数参数个数', 'description': '函数参数个数是指函数声明或定义中的参数的个数。在"
    },
    {
        "sortId": 224,
        "id": "1558021749747789824",
        "title": "温度单位转换 - C/C++ 语法基础",
        "content": "从键盘读取华氏温度，转换成摄氏温度并输出，保留1位小数。\n转换公式为：c=5/9*(f-32), 其中，f为华氏温度，c为摄氏温度。\n\n### 输入格式:\n\n华氏温度\n\n### 输出格式:\n\n摄氏温度\n\n### 输入样例:\n\n```in\n100\n```\n\n### 输出样例:\n```out\n37.8\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘读取输入，并将结果输出到屏幕上。'}, {'name': '数据类型转换', 'description': '学习如何将一个数据类型转换为另一个数据类型。'}, {'name': '算术运算', 'description': '学习如何进行算术运算，包括加法、减法、乘法和除法。'}, {'name': '运算符优先级', 'description': '学习不同运算符的优先级，以正确计算表达式的值。'}, {'name': '变量', 'description': '学习如何声明和使用变量，以及变量的作用域和生命周期。'}, {'name': '表达式', 'description': '学习如何构建和计算表达式，以及表达式的值和类型。'}, {'name': '条件语句', 'description': '学习如何使用条件语句，根据条件的真假执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句，重复执行一段代码块，直到满足退出条件。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数和返回值。'}, {'name': '库函数', 'description': '学习如何使用C语言提供的库函数，以实现特定的功能。'}, {'name': '注释', 'description': '学习如何添加注释，提高代码的可读性和可维护性。'}]"
    },
    {
        "sortId": 225,
        "id": "1558017881764847616",
        "title": "游客检票 - C/C++ 变量及简单数据类型",
        "content": "题目描述\n假设张家界景区的游客抵达检票口的速度是恒定的。某国庆长假日清晨景区开门时检票口已积聚了一定数量的游客，且随时间流逝，不断有新的游客抵达。如果打开8个检票口，m分钟刚好可以完成全部游客的检票放行；如果使用6个检票口，则需要n (n>m)分钟才能完成。请编程计算：如果使用10个检票口，需要多少时间才能将景区入口的待检票人数清零？\n\n【分析】\n\n这是小学奥数中著名的“牛吃草”问题。现假设每个检票口每分钟可以完成1份游客的检票放行任务。设景区开门时积聚的游客数量为x份，设每分钟有y份游客抵达检票口。然后列出方程组，根据方程组求解x,y。\n\n然后，设使用10个检票口时，需要z分钟清零，根据x,y列方程，求出z。\n\n### 输入格式:\nm\nn\n\n说明：m,n为整数且n>m，且该输入确保问题有解。\n\n\n### 输出格式:\n\n原有排队游客份数:A, 每分钟新到游客份数:B, 10口同开需C分钟清零待检票游客.\n\n说明：A, B, C均为保留1位小数的浮点数。\n\n\n### 输入样例:\n\n```in\n180\n300\n```\n\n### 输出样例:\n```out\nOriginal number of visitors: 900.0\nNew arriavlas per minute: 3.0\nCheck time when 10 gates are opened: 128.6\n```\n\n注意：从数学角度上看，900.0, 30.0均为份数，不是游客人数。\n\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '方程组求解', 'description': '根据题目中给出的条件，列出方程组，通过求解方程组得到相关的变量值。'}, {'name': '浮点数计算', 'description': '题目中要求输出保留一位小数的浮点数，需要进行浮点数的计算和格式化输出。'}]"
    },
    {
        "sortId": 226,
        "id": "1558006924195971072",
        "title": "猴子吃桃 - C/C++ 变量及简单数据类型",
        "content": "一只猴子在树上摘了若干个桃，当即吃了x%，觉得不过瘾，又多吃了一个；第二天它吃了剩下桃子的x%加一个；第三天它又吃了剩下桃子的x%加一个，此时，只剩下一个桃子。请编程求解：猴子第一天从树上摘得多少个桃子？\n\n【解题提示】\n\n1). 使用倒推法，第3天剩余桃数为1;\n\n2). 猴子吐出了最后吃的那个桃，1+1=2，2即为第3天吃桃前全部桃数的(100-x)%，由此推导出第3天吃桃前的桃数；\n\n3). 同理，第3天吃桃前的桃数加1，再除以(100-x)%，即为第2天吃桃前的桃数。\n\n4). 同理，第2天的桃数加1，再除以(100-x)%，即为第1天摘得的桃数。\n\n\n\n### 输入格式:\n\nx\n\n说明：x为整数且其值可确保第1天的桃数为整数。\n\n\n### 输出格式:\n\n猴子第1天摘得y个桃.\n\n说明：y是整数。\n\n\n\n### 输入样例:\n```in\n50\n```\n\n### 输出样例:\n```out\nThe monkey taken 22 peaches at the first day.\n```\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '倒推法', 'description': '使用倒推法，根据已知条件逆向推导出第一天摘得的桃子数量。'}, {'name': '百分比计算', 'description': '根据题目中的百分比计算公式，计算出每天剩余桃子的数量。'}, {'name': '整数运算', 'description': '确保计算结果为整数，需要注意除法运算时的取整操作。'}]"
    },
    {
        "sortId": 227,
        "id": "1557998820418969600",
        "title": "英文字母 - C/C++ 变量及简单数据类型",
        "content": "\n在计算机内部，英文字母依ASCII码分别由连续的整数来表示。比如，大写的英文字母A的ASCII码值为65，B的码值为66，然后依次递增，Z的码值为90。\n\n请编程计算：\n\n从键盘读取大写字母Q（代号，其值由具体输入确定），请问Q所代表的大写字母是字母表中的第几个字母（从1开始计数，即A为第1个字母）？\n从键盘读取整数N，求字母表中的第N个字母（从1开始计数）是什么？\n\n\n\n### 输入格式:\n\nQ\nN\n\n说明：是一个字符的大写字母；N的取值范围为1~26。\n\n\n\n### 输出格式:\n\n请参考输出样例。\n\n\n### 输入样例:\n```in\nB\n3\n```\n\n### 输出样例:\n```out\n2\nC\n```\n\n提示：C/C++语言获取用户输入的方法请参考教科书后续章节。\n\n\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "98",
                        "name": "输入输出基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "97",
                        "name": "基本输入输出",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "99",
                        "name": "格式控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'ASCII码', 'description': 'ASCII码是一种字符编码标准，用于将字符映射为整数。在计算机内部，英文字母依ASCII码分别由连续的整数来表示。比如，大写的英文字母A的ASCII码值为65，B的码值为66，然后依次递增，Z的码值为90。'}, {'name': '从键盘读取输入', 'description': '从键盘读取输入是指通过程序获取用户在键盘上输入的数据。在C语言中，可以使用scanf函数来实现从键盘读取输入。'}, {'name': '整数运算', 'description': '整数运算是指对整数进行加减乘除等数学运算。在C语言中，可以使用+、-、*、/等运算符进行整数运算。'}, {'name': '条件判断', 'description': '条件判断是指根据条件的真假来执行不同的代码块。在C语言中，可以使用if语句来进行条件判断。'}, {'name': '输出结果', 'description': '输出结果是指将程序运行的结果显示给用户。在C语言中，可以使用printf函数来输出结果。'}]"
    },
    {
        "sortId": 228,
        "id": "1557942793258459136",
        "title": "火车相遇 - C/C++ 变量及简单数据类型",
        "content": "2-1（火车相遇）甲列火车长150米，速度为15米/秒；乙列火车长200米，速度为12米/秒。两列火车相向而行，从车头相遇开始至两车车尾分离，共需要多少时间？请编程求解，输出结果保留两位小数，以秒为单位。\n\n\n![image.png](~/78f73fa0-edf9-4411-9d80-7fd4574e4d5e.png)\n\n\n### 输入格式:\n\n本题无输入\n\n### 输出格式:\n\nx.yz seconds.\n\n### 输入样例:\n```in\n```\n\n### 输出样例:\n```out\n12.96 seconds.\n```\n\n提示：在C/C++里，整数/整数的结果为整数，为了保证计算结果的精度，在当前的知识背景下，建议全部变量均采用浮点数。\n\n### 感觉不会？  那试着听听**免费的B站网课**\n[简洁的C和C++ - 重庆大学在线课程](https://www.bilibili.com/video/BV1it411d7zx/)\n[Python编程基础及应用 - 重庆大学在线课程](https://www.bilibili.com/video/BV1kt411R7uW/)\n![image.png](~/6e79c9e3-cb7f-486d-ab78-36b5a8f655c0.png)\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的一种容器。变量的类型决定了变量可以存储的数据的种类和范围。常见的数据类型包括整型、浮点型、字符型等。在本题中，需要使用浮点型变量来存储火车的长度和速度。'},\n{'name': '运算符', 'description': '在C语言中，运算符用于对变量进行各种运算操作。常见的运算符包括加法运算符、减法运算符、乘法运算符、除法运算符等。在本题中，需要使用除法运算符来计算两列火车相遇所需的时间。'},\n{'name': '算术运算', 'description': '在C语言中，可以使用算术运算符对数值进行加减乘除等运算。在本题中，需要使用除法运算符来计算两列火车相遇所需的时间。'},\n{'name': '格式化输出', 'description': '在C语言中，可以使用格式化输出函数来将计算结果以指定的格式输出。常见的格式化输出函数包括printf函数。在本题中，需要使用printf函数将计算结果输出为指定的格式。'}]"
    },
    {
        "sortId": 229,
        "id": "1557580713581916160",
        "title": "h0179. 输出字符菱形",
        "content": "现在给你一个字符，希望你能用它构造一个对角线长 5个字符，倾斜放置的菱形。\n\n### 输入格式:\n\n输入只有一行，包含一个字符。\n\n\n### 输出格式:\n\n该字符构成的菱形。\n\n### 输入样例:\n\n```in\n@\n```\n\n### 输出样例:\n\n```out\n  @\n @@@\n@@@@@\n @@@\n  @\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环语句', 'description': '循环语句是C语言中的一种控制结构，用于重复执行一段代码块。常见的循环语句有for循环、while循环和do-while循环。在本题中，可以使用循环语句来控制字符的输出，实现菱形的构造。'}, {'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断字符的输出位置，实现菱形的倾斜放置。'}, {'name': '字符输出', 'description': '字符输出是C语言中的一种基本操作，用于将字符输出到屏幕上。在本题中，需要使用字符输出来构造菱形。'}]"
    },
    {
        "sortId": 230,
        "id": "1556208621649104896",
        "title": "h0177. 距离",
        "content": "两辆汽车在两个不同的地点a、b，同时，相向前进。\n\n一辆车的速度为 60 km/h，另一辆车的速度为 90 km/h。两车在距离ab中点到L 公里处相遇。\n\n现在，告诉你两车在距离ab中点到 L 的公里数，请你求出ab的总长度？\n\n\n\n### 输入格式:\n\n输入包含一个整数 L，表示两车相遇离中点的距离。\n\n\n### 输出格式:\n输出格式为 X km，其中 X 为ab的总长度，单位为公里。\n\n### 输入样例:\n\n```in\n30\n```\n\n### 输出样例:\n\n```out\n300 km\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是用来存储数据的一种数据类型，可以通过变量名来访问和操作存储的数据。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。'}, {'name': '运算符', 'description': '运算符是用来进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。在C语言中，可以使用运算符进行各种数值计算和逻辑判断。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交互的过程。在C语言中，可以使用标准库函数来实现输入输出操作，如scanf函数用于从键盘读取输入，printf函数用于向屏幕输出结果。'}, {'name': '条件语句', 'description': '条件语句是根据条件判断来执行不同的代码块的语句。在C语言中，可以使用if语句、switch语句等来实现条件判断和分支控制。'}, {'name': '循环语句', 'description': '循环语句是重复执行某段代码块的语句。在C语言中，可以使用for循环、while循环、do-while循环等来实现不同类型的循环控制。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行。在C语言中，可以自定义函数来实现特定的功能，也可以使用标准库函数来调用已经定义好的函数。'}, {'name': '数据类型', 'description': '数据类型是用来定义变量的类型和范围的一种规定。在C语言中，常见的数据类型包括整型、浮点型、字符型等，可以根据需要选择合适的数据类型来存储和处理数据。'}, {'name': '运算表达式', 'description': '运算表达式是由运算符和操作数组成的表达式，用来进行各种数值计算和逻辑判断。在C语言中，可以使用运算表达式来实现各种复杂的计算和逻辑操作。'}, {'name': '数组', 'description': '数组是一种用来存储多个相同类型数据的集合，可以通过下标来访问和操作数组中的元素。在C语言中，可以使用数组来存储和处理大量的数据。'}, {'name': '指针', 'description': '指针是用来存储变量地址的一种数据类型，可以通过指针来访问和操作变量。在C语言中，可以使用指针来实现对变量的间接访问和操作，还可以通过指针来实现动态内存分配和释放。'}, {'name': '字符串', 'description': '字符串是由字符组成的一种数据类型，可以用来存储和处理文本信息。在C语言中，可以使用字符数组或指针来表示和操作字符串，还可以使用字符串库函数来实现字符串的各种操作。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起形成一个新的数据类型。在C语言中，可以使用结构体来表示复杂的数据结构，如学生信息、员工信息等。'}, {'name': '文件操作', 'description': '文件操作是指对计算机文件进行读写和管理的操作。在C语言中，可以使用文件指针和文件操作函数来实现对文件的打开、关闭、读取和写入等操作。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令，用来定义常量、宏、条件编译等。在C语言中，可以使用预处理指令来实现代码的复用和条件编译等功能。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方法，用来解决可以分解为相同问题的子问题的计算。在C语言中，可以使用递归来实现对复杂问题的简化和求解。'}, {'name': '指针运算', 'description': '指针运算是对指针进行加减操作的运算，用来实现对数组和字符串的遍历和访问。在C语言中，可以使用指针运算来实现对指针的移动和偏移。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行过程中根据需要分配和释放内存空间的操作。在C语言中，可以使用malloc函数和free函数来实现动态内存分配和释放。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算，包括按位与、按位或、按位异或等。在C语言中，可以使用位运算来实现对二进制数据的处理和优化。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是一个指针。在C语言中，可以使用指针数组来存储和处理多个指针，如字符串数组、函数指针数组等。'}, {'name': '多维数组', 'description': '多维数组是一个数组，其中的每个元素也是一个数组。在C语言中，可以使用多维数组来存储和处理多维数据，如矩阵、图像等。'}, {'name': '结构体指针', 'description': '结构体指针是指向结构体变量的指针，可以通过结构体指针来访问和操作结构体的成员。在C语言中，可以使用结构体指针来实现对结构体的间接访问和操作。'}, {'name': '函数指针', 'description': '函数指针是指向函数的指针，可以通过函数指针来调用和执行函数。在C语言中，可以使用函数指针来实现函数的动态调用和回调。'}, {'name': '文件指针', 'description': '文件指针是指向文件的指针，可以通过文件指针来进行文件的读写和管理。在C语言中，可以使用文件指针来实现对文件的打开、关闭、读取和写入等操作。'}, {'name': '链表', 'description': '链表是一种动态数据结构，可以在运行时动态分配和释放内存空间。在C语言中，可以使用链表来存储和处理大量的数据，如链表的插入、删除、查找等操作。'}, {'name': '排序算法', 'description': '排序算法是将一组数据按照一定规则进行排序的算法。在C语言中，可以使用各种排序算法来对数据进行排序，如冒泡排序、插入排序、快速排序等。'}, {'name': '查找算法', 'description': '查找算法是在一组数据中查找指定元素的算法。在C语言中，可以使用各种查找算法来查找数据，如线性查找、二分查找、哈希查找等。'}, {'name': '字符串操作', 'description': '字符串操作是对字符串进行各种操作的方法，包括字符串的拼接、复制、比较等。在C语言中，可以使用字符串库函数来实现字符串的各种操作，如strcpy函数用于字符串的复制，strcmp函数用于字符串的比较等。'}, {'name': '文件操作函数', 'description': '文件操作函数是用来对文件进行读写和管理的函数，包括文件的打开、关闭、读取和写入等操作。在C语言中，可以使用标准库函数来实现对文件的各种操作，如fopen函数用于打开文件，fclose函数用于关闭文件等。'}, {'name': '递归函数', 'description': '递归函数是调用自身的函数，用来解决可以分解为相同问题的子问题的计算。在C语言中，可以使用递归函数来实现对复杂问题的简化和求解。'}, {'name': '指针操作', 'description': '指针操作是对指针进行各种操作的方法，包括指针的赋值、取值、比较等。在C语言中，可以使用指针操作符来实现对指针的各种操作，如*运算符用于取指针指向的值，&运算符用于取变量的地址等。'}, {'name': '动态内存管理', 'description': '动态内存管理是在程序运行过程中根据需要分配和释放内存空间的管理。在C语言中，可以使用malloc函数和free函数来实现动态内存的分配和释放，还可以使用realloc函数来重新分配已经分配的内存空间。'}, {'name': '位操作', 'description': '位操作是对二进制位进行各种操作的方法，包括位的与、或、异或等。在C语言中，可以使用位操作符来实现对二进制数据的处理和优化，如&运算符用于位与操作，|运算符用于位或操作等。'}, {'name': '指针和数组', 'description': '指针和数组是C语言中常用的数据类型，可以通过指针和数组来存储和处理大量的数据。在C语言中，可以使用指针和数组来实现对数据的访问和操作，如指针数组、数组指针等。'}, {'name': '链表操作', 'description': '链表操作是对链表进行各种操作的方法，包括链表的插入、删除、查找等。在C语言中，可以使用链表来存储和处理大量的数据，如链表的插入、删除、查找等操作。'}, {'name': '排序和查找', 'description': '排序和查找是对数据进行排序和查找的方法，包括各种排序算法和查找算法。在C语言中，可以使用各种排序算法和查找算法来对数据进行排序和查找，如冒泡排序、插入排序、快速排序等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的方法，包括字符串的拼接、复制、比较等。在C语言中，可以使用字符串库函数来实现字符串的各种操作，如strcpy函数用于字符串的复制，strcmp函数用于字符串的比较等。'}, {'name': '文件操作指针', 'description': '文件操作指针是用来对文件进行读写和管理的指针，可以通过文件操作指针来进行文件的打开、关闭、读取和写入等操作。在C语言中，可以使用文件操作指针来实现对文件的各种操作，如fopen函数用于打开文件，fclose函数用于关闭文件等。'}, {'name': '递归和回溯', 'description': '递归和回溯是一种解决问题的方法，通过不断地调用自身来解决问题。在C语言中，可以使用递归和回溯来解决各种复杂的问题，如全排列、组合问题等。'}, {'name': '指针和字符串', 'description': '指针和字符串是C语言中常用的数据类型，可以通过指针和字符串来存储和处理文本信息。在C语言中，可以使用指针和字符串来实现对字符串的访问和操作，如字符串的拼接、复制、比较等。'}, {'name': '链表和树', 'description': '链表和树是C语言中常用的数据结构，可以用来存储和处理大量的数据。在C语言中，可以使用链表和树来实现对数据的存储和操作，如链表的插入、删除、查找等操作，树的遍历、搜索等操作。'}, {'name': '排序和查找算法', 'description': '排序和查找算法是对数据进行排序和查找的算法，包括各种排序算法和查找算法。在C语言中，可以使用各种排序算法和查找算法来对数据进行排序和查找，如冒泡排序、插入排序、快速排序等。'}, {'name': '字符串处理函数', 'description': '字符串处理函数是用来对字符串进行各种操作的函数，包括字符串的拼接、复制、比较等操作。在C语言中，可以使用字符串处理函数来实现字符串的各种操作，如strcpy函数用于字符串的复制，strcmp函数用于字符串的比较等。'}, {'name': '文件操作指针和函数', 'description': '文件操作指针和函数是用来对文件进行读写和管理的指针和函数，包括文件的打开、关闭、读取和写入等操作。在C语言中，可以使用文件操作指针和函数来实现对文件的各种操作，如fopen函数用于打开文件，fclose函数用于关闭文件等。'}, {'name': '递归和回溯算法', 'description': '递归和回溯算法是一种解决问题的方法，通过不断地调用自身来解决问题。在C语言中，可以使用递归和回溯算法来解决各种复杂的问题，如全排列、组合问题等。'}, {'name': '指针和字符串处理', 'description': '指针和字符串处理是C语言中常用的数据类型和操作方法，可以通过指针和字符串来存储和处理文本信息。在C语言中，可以使用指针和字符串来实现对字符串的访问和操作，如字符串的拼接、复制、比较等。'}, {'name': '链表和树操作', 'description': '链表和树操作是对链表和树进行各种操作的方法，包括链表的插入、删除、查找等操作，树的遍历、搜索等操作。在C语言中，可以使用链表和树来存储和处理大量的数据，如链表的插入、删除、查找等操作"
    },
    {
        "sortId": 231,
        "id": "1553723853589643264",
        "title": "截断问题(实用版)",
        "content": "C99 标准函数库中引入了截断函数 trunc，用于对小数作截断处理。作为练习，我们自己编写一个功能更全、更实用的函数。\n\n```c\ndouble Trunc(double x, int d);\n```\n\n说明：参数 x 是任意实数，d 为小位位数。函数值为将 x 截断为保留 d 位小数的实数。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n#include <math.h>\n\n#define epsilon 1e-8\n\n......\n\ndouble Trunc(double x, int d);\n\nint main()\n{\n\tdouble x, y;\n\tint d;\n\tscanf(\"%lg%d\", &x, &d);\n\ty = Trunc(x, d);\n\tprintf(\"%.15g\\n\", y);\n\treturn 0;\n}\n\n......\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n注：epsilon 为误差阈值。\n\n#### 输入样例1\n```in\n-0.0000326 4\n\n```\n#### 输出样例1\n```out\n0\n\n```\n\n#### 输入样例2\n```in\n30.2689 2\n\n```\n#### 输出样例2\n```out\n30.26\n\n```\n\n#### 输入样例3\n```in\n-15374093826.98 0\n\n```\n#### 输出样例3\n```out\n-15374093826\n\n```\n\n#### 输入样例4\n```in\n927.19999999999993 1\n\n```\n#### 输出样例4\n```out\n927.2\n\n```\n\n样例说明：实数 165.4 与 761.8 相加，结果本应为 927.2。若保留 1 位小数，则为 927.2。但在计算机上因误差原因机器值为 927.19999999999993，应考虑误差因素将结果调整为 927.2。\n\n提示：需要用到前面练习中的实数零的校正、实数的整数次幂等函数，以及 C 语言标准库中的 floor、ceil 等函数。\n\n---\n\n相关习题：实数零的校正、实数的整数次幂、截断问题(简版、高级版)、舍入问题(简版、高级版、实用版)。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '实数零的校正', 'description': '实数零的校正是指对一个实数进行判断，如果其绝对值小于一个给定的误差阈值，则将其视为零。在本题中，需要使用实数零的校正来判断截断后的结果是否为零。'}, {'name': '实数的整数次幂', 'description': '实数的整数次幂是指将一个实数乘以自身多次，其中指数为整数。在本题中，可能需要使用实数的整数次幂来进行计算。'}, {'name': '截断问题(简版、高级版)', 'description': '截断问题是指对一个实数进行截断处理，保留指定位数的小数。在本题中，需要编写一个截断函数来实现对实数的截断处理。'}, {'name': '舍入问题(简版、高级版、实用版)', 'description': '舍入问题是指对一个实数进行舍入处理，将其四舍五入到指定的位数。在本题中，可能需要考虑舍入问题来处理计算机误差。'}]"
    },
    {
        "sortId": 232,
        "id": "1551491112902959104",
        "title": "人生进度条",
        "content": "2022年国家卫健委宣布我国人均预期寿命提高到77.93岁。现在以平均寿命78为基准，请输入你的年龄，输出你的人生进度条。\n\n### 输入格式:\n\n输入整数年龄。\n\n### 输出格式:\n\n输出占比，以%形式输出，保留两位小数。\n(注意%的输出需要“%%”形式才能输出)\n\n### 输入样例:\n\n```in\n39\n```\n\n### 输出样例:\n\n```out\n50.00%\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。在本题中，需要使用整数类型的变量来存储年龄。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数来接收用户输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数接收用户输入的年龄，并使用printf函数输出人生进度条的占比。'}, {'name': '算术运算', 'description': '在C语言中，可以使用算术运算符进行数值计算。在本题中，需要使用除法运算符来计算人生进度条的占比。'}, {'name': '格式化输出', 'description': '在C语言中，可以使用格式化输出来控制输出结果的格式。在本题中，需要使用格式化输出来输出人生进度条的占比，保留两位小数并添加百分号。'}]"
    },
    {
        "sortId": 233,
        "id": "1550798194672234496",
        "title": "FP18-计算速度和距离",
        "content": "输入物体匀加速运动的初速度、加速度和移动时间t（整数），计算物体在t秒中移动的距离，t秒后的速度，和t秒中的平均速度。\n\n### 输入格式:\n\n输入在一行中给出初速度、加速度和移动时间t，分别用空格分开。\n\n### 输出格式:\n\n在一行中t秒中移动的距离，t秒后的速度，和t秒中的平均速度，小数点后面保留2位。\n\n### 输入样例:\n\n```in\n10.0 20.0 30\n```\n\n### 输出样例:\n\n```out\n9300.00,610.00,15.25\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'物体匀加速运动','description':'物体匀加速运动是指物体在单位时间内速度的增量相等的运动。在C语言中，可以通过输入物体的初速度、加速度和移动时间，计算物体在指定时间内的移动距离、速度和平均速度。'}]"
    },
    {
        "sortId": 234,
        "id": "1550788511626526720",
        "title": "FP17 计算x的5次方",
        "content": "输入一个浮点数$$x（1.0≤x≤100.0）$$，计算并输出$$x^{5}$$。\n\n### 输入格式:\n\n在一行中给出1个绝对值不超过100的浮点数。\n\n### 输出格式:\n\n在一行中输出$$x^{5}$$的值，小数点后面保留2位。\n\n### 输入样例:\n\n```in\n3.5\n```\n\n### 输出样例:\n\n```out\n525.22\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '浮点数运算', 'description': '教学目标：学生能够理解浮点数的概念，掌握浮点数的运算规则，能够进行浮点数的乘方运算。'}, {'name': '输入输出', 'description': '教学目标：学生能够使用输入输出函数，掌握输入输出的基本操作，能够正确读取和输出浮点数。'}]"
    },
    {
        "sortId": 235,
        "id": "1550786106679721984",
        "title": "FP16 字符串转整数",
        "content": "3. 输入三个数字字符（字符‘1’~字符‘9’），输出由它们组成的一个整数。例如：输入‘2’、‘5’、‘7’，输出整数257。\n\n### 输入格式:\n\n输入在一行中给出3个字符，中间用1个空格分开。\n\n### 输出格式:\n\n在一行中输出转换后的1个整数。\n\n### 输入样例:\n\n```in\n2 5 7\n```\n\n### 输出样例:\n\n```out\n257\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符转整数','description':'本题考察了字符与整数之间的转换。需要注意的是，字符与整数之间的转换是通过ASCII码进行的，可以通过将字符减去字符‘0’得到对应的整数值。'}]"
    },
    {
        "sortId": 236,
        "id": "1550782667685986304",
        "title": "FP15 简单求解一元二次方程",
        "content": "对一元二次方程$$ax^{2}+bx+c=0$$，输入该方程的三个实系数$$a,b,c$$（输入的数值应保证方程有实根），计算并输出该方程的两个实根。\n\n### 输入格式:\n\n输入在一行中给出2三个实系数$$a,b,c$$\n\n### 输出格式:\n\n在一行中输出方程的两个实根。\n\n### 输入样例:\n\n```in\n3.0 4.0 1.0\n```\n\n### 输出样例:\n\n```out\nv1=-1.00,v2=-0.33\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '一元二次方程', 'description': '教学描述：介绍一元二次方程的定义和基本形式，以及求解一元二次方程的方法。'}, {'name': '输入输出', 'description': '教学描述：介绍如何在C语言中进行输入和输出操作，包括使用scanf函数进行输入和使用printf函数进行输出。'}, {'name': '变量和运算符', 'description': '教学描述：介绍C语言中的变量和运算符的概念，以及如何在程序中使用变量和运算符进行计算。'}, {'name': '条件语句', 'description': '教学描述：介绍C语言中的条件语句的概念和用法，包括if语句和else语句，以及如何根据条件执行不同的代码块。'}, {'name': '浮点数', 'description': '教学描述：介绍C语言中的浮点数的概念和表示方法，以及浮点数的运算和精度问题。'}]"
    },
    {
        "sortId": 237,
        "id": "1550779732637872128",
        "title": "FP14-计算梯形的面积",
        "content": "输入梯形的上底、下底和高，计算梯形面积s。\n\n### 输入格式:\n\n输入在一行中给出梯形的上底、下底和高的值，为超过1000的整数。\n\n### 输出格式:\n\n在一行中输出梯形的面积，小数点后面保留两位小数。\n\n### 输入样例:\n\n```in\n3 4 5\n```\n\n### 输出样例:\n\n```out\n17.50\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name':'变量和数据类型','description':'学习如何声明变量，并了解不同的数据类型。'}, {'name':'运算符','description':'学习如何使用不同的运算符进行数学运算。'}, {'name':'条件语句','description':'学习如何使用条件语句进行逻辑判断。'}, {'name':'循环语句','description':'学习如何使用循环语句进行重复操作。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的遍历和操作。'}, {'name':'指针','description':'学习如何声明和使用指针，以及指针的运算和指针与数组的关系。'}, {'name':'字符串','description':'学习如何声明和使用字符串，以及字符串的操作和字符串与字符数组的关系。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件，以及文件的读写位置和文件指针的操作。'}]"
    },
    {
        "sortId": 238,
        "id": "1548501014603882496",
        "title": "FP13-直角三角形的斜边长",
        "content": "输入一个直角三角形的两条直角边的长度，计算并输出该直角三角形的斜边长。\n\n### 输入格式:\n\n输入在一行中给出2个绝对值不超过1000的浮点数。\n\n### 输出格式:\n\n对每一组输入，在一行中输出斜边长，小数点后面保留1位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3 4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5.0\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'直角三角形斜边计算'，'description':'输入直角三角形的两条直角边的长度，计算并输出该直角三角形的斜边长。'}]"
    },
    {
        "sortId": 239,
        "id": "1548499536602456064",
        "title": "FP12-温度转换",
        "content": "摄氏温度C与华氏温度F的转换公式是：$$F=(9/5)C+32$$。编写程序，任意输入摄氏温度C，将其转换成华氏温度F，输出转换后的华氏温度。\n\n### 输入格式:\n\n输入在一行中给出1个绝对值不超过1000的整型摄氏温度值。\n\n### 输出格式:\n\n对每一组输入，在一行中输出华氏温度值，小数点后面保留2位。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n32\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nf=89.60\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量与数据类型'，'description':'C语言中的变量用于存储数据，数据类型决定了变量可以存储的数据的种类和范围。在本题中，需要使用整型变量来存储摄氏温度的值。'}，{'name':'算术运算'，'description':'C语言中的算术运算包括加法、减法、乘法和除法等。在本题中，需要使用乘法和加法运算来进行温度的转换。'}]"
    },
    {
        "sortId": 240,
        "id": "1548497144519577600",
        "title": "FP11-输出日期",
        "content": "任意输入三个整数，分别表示日期的日、月、年，按规定格式输出其对应的日期。\n\n### 输入格式:\n\n输入在一行中给出3个整数，其间用空格分开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出转换的日期。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2021 9 8\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n2021年| 9月| 8日\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从用户输入获取数据，并将结果输出到屏幕上。'}, {'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name': '运算符', 'description': '学习C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '条件语句', 'description': '学习如何使用条件语句（if-else语句）进行条件判断和分支控制。'}, {'name': '循环语句', 'description': '学习如何使用循环语句（for循环、while循环）进行重复执行某段代码。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的基本操作。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的基本操作。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件的基本操作。'}]"
    },
    {
        "sortId": 241,
        "id": "1548495634159104000",
        "title": "FP10-交换两个数的值",
        "content": "11. 任意输入两个浮点数，交换它们的值，输出交换以后的结果。\n\n### 输入格式:\n\n输入在一行中给出2个绝对值不超过1000的浮点数，其间用空格分开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出交换后的两个数，小数点后面保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2.4 5.6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nAfter exchange:x1=5.60,x2=2.40\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量交换', 'description': '通过使用临时变量，将两个变量的值进行交换。'}]"
    },
    {
        "sortId": 242,
        "id": "1548493833993175040",
        "title": "FP9-大小写字母转换",
        "content": "任意输入一个大写字母，输出其对应的小写字母。\n\n### 输入格式:\n\n输入在一行中给出1个大写字母。\n\n### 输出格式:\n\n对每一组输入，在一行中输出小写字母。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nA\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nA is changed to a.\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符转换','description':'本题主要涉及字符的转换操作，需要将大写字母转换为小写字母。可以使用ASCII码进行转换，将大写字母的ASCII码加上32即可得到对应的小写字母的ASCII码，然后再将其转换为字符即可。'}]"
    },
    {
        "sortId": 243,
        "id": "1548490013447811072",
        "title": "FP8-三个组成一个",
        "content": "输入三个一位整数（0~9之间），输出由其组成的一个整数。例如：输入整数2,4,7，输出247。\n\n### 输入格式:\n\n输入在一行中给出3个整数，其间用1个空格分开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出一个计算结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1 3 5 is changed to 135.\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 25,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数输入输出','description':'本题主要涉及到C语言中的输入输出操作。通过使用scanf函数读取输入的整数，然后使用printf函数输出结果。'}]"
    },
    {
        "sortId": 244,
        "id": "1548487703938191360",
        "title": "FP7-ASCII码对应的字符",
        "content": "任意输入一个ASC II码，输出其对应的字符。\n\n### 输入格式:\n\n输入在一行中给出1个不超过255的正整数。\n\n### 输出格式:\n\n对每一组输入，在一行中输出结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n99\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nc\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'ASCII码转换', 'description': '教学如何将ASCII码转换为对应的字符。'}]"
    },
    {
        "sortId": 245,
        "id": "1548486612806787072",
        "title": "FP6-三个整数的计算",
        "content": "任意输入三个整数，计算它们的和，以及这三个数的平均值，输出计算结果。\n\n### 输入格式:\n\n输入在一行中给出3个绝对值不超过1000的整数，其间用空格分开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出和及平均值，其间用1个空格分开，平均值保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3 5 7\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\naverage=5.00 sum=15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如何从标准输入中读取数据，并将结果输出到标准输出中。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法、减法、乘法、除法等。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和定义函数，以及函数的调用和返回值。'}, {'name':'格式化输入输出','description':'学习如何使用格式化字符串来进行输入和输出操作。'}, {'name':'算术运算','description':'学习如何进行算术运算，如加法、减法、乘法、除法等。'}, {'name':'类型转换','description':'学习如何进行不同类型之间的转换，如整数和浮点数之间的转换。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'输入输出','description':'学习如"
    },
    {
        "sortId": 246,
        "id": "1548483869123792896",
        "title": "FP5-整数反序 ",
        "content": "从键盘输入一个4位正整数，将其以反序输出，例如输入1234，输出4321。\n\n### 输入格式:\n\n输入在一行中给出1个1000-9999之间的正整数。\n\n### 输出格式:\n\n对每一组输入，在一行中输出整数反序的结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1235\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1235 is changed to:5321\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何从键盘输入一个整数，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '教学如何定义和使用变量来存储数据。'}, {'name': '循环', 'description': '教学如何使用循环结构来反序输出一个整数。'}, {'name': '条件判断', 'description': '教学如何使用条件判断语句来判断输入的整数是否在指定范围内。'}]"
    },
    {
        "sortId": 247,
        "id": "1548481145481183232",
        "title": "FP4-简单字符串输出",
        "content": "编写程序，使程序产生如下的输出。\nFor he's a jolly good fellow!\nWhich nobody can deny!\n\n### 输入格式:\n\n无输入\n\n### 输出格式:\n\n最后一行输入的末尾不换行。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nFor he's a jolly good fellow!\nWhich nobody can deny!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'使用printf函数进行输出'}]"
    },
    {
        "sortId": 248,
        "id": "1548479406958960640",
        "title": "FP3-(x-10)的三次方",
        "content": "输入任意一个整数$$x$$，计算并输出$$y=(x-10)^{3}$$的值。\n\n### 输入格式:\n\n输入在一行中给出1个绝对值不超过$$2^{32}$$的整数。\n\n### 输出格式:\n\n对每一组输入，在一行中输出一个计算结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n30\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n8000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本运算','description':'本题需要进行整数的减法和乘方运算，需要学生掌握基本的运算符的使用。'}]"
    },
    {
        "sortId": 249,
        "id": "1548474655894650880",
        "title": "FP2-课程分数的平均值",
        "content": "从键盘输入一个学生五门课的成绩分数，分数为0-100之间的整数。计算并输出该学生的平均分。\n\n### 输入格式:\n\n输入在一行中给出5门课程的分数，每个分数之间用空格分开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出分数的平均值，小数点后面保留两位。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n70 80 94 66 84\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n78.80\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入和输出结果'}, {'name':'变量和数据类型','description':'学习如何定义变量和使用不同的数据类型'}, {'name':'运算符','description':'学习如何使用算术运算符和赋值运算符'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的流程'}, {'name':'数组','description':'学习如何定义和使用数组'}, {'name':'函数','description':'学习如何定义和调用函数'}, {'name':'字符串','description':'学习如何定义和操作字符串'}, {'name':'指针','description':'学习如何定义和使用指针'}, {'name':'文件操作','description':'学习如何读写文件'}, {'name':'结构体','description':'学习如何定义和使用结构体'}, {'name':'动态内存分配','description':'学习如何使用动态内存分配函数'}]"
    },
    {
        "sortId": 250,
        "id": "1548468978749001728",
        "title": "FP1-三个整数的平均值和乘积",
        "content": "编写程序：从键盘任意输入三个整数，计算并输出它们的平均值，以及这三个整数的乘积。平均值的小数点后面保留2位输出。\n\n### 输入格式:\n\n输入：在一行中输入3个绝对值不超过1000的非0整数。\n\n### 输出格式:\n\n对每一组输入，在一行中输出3个整数的平均值，和3个整数的乘积，其间用一个空格分开。\n\n### 输入样例:\n\n例如：\n\n```in\n4 5 7\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5.33 140\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name':'变量和数据类型','description':'学习如何声明变量，并了解C语言中的基本数据类型。'}, {'name':'算术运算符','description':'学习如何使用算术运算符进行数值计算。'}, {'name':'格式化输出','description':'学习如何使用格式化输出函数将结果按照指定的格式输出。'}, {'name':'运算符优先级','description':'学习运算符的优先级，以正确计算表达式的值。'}, {'name':'条件语句','description':'学习如何使用条件语句根据不同的条件执行不同的代码块。'}, {'name':'循环语句','description':'学习如何使用循环语句重复执行一段代码块。'}, {'name':'数组','description':'学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值。'}, {'name':'指针','description':'学习如何声明和使用指针来操作内存中的数据。'}, {'name':'字符串','description':'学习如何声明和使用字符串，以及字符串的常见操作。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件，以及文件指针的使用。'}]"
    },
    {
        "sortId": 251,
        "id": "1544515952300515328",
        "title": "目标点1：程序改错，对应行填写改错后完整的一行代码。",
        "content": "目标点1：程序改错，对应行填写改错后完整的一行代码。\n输入两个整数，计算其和值并输出完整的数学表达式。\n```c\n#include<stdio.h>\nint main()\n{\n\tint a,b,sum;\n\tscanf(\"%d,%d\",a,b);         \n\tsum=a+b;\n\tprintf(\"%d+%d=%d\",sum); \t\n\treturn 0;\n}\n```",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出函数', 'description': '输入输出函数是C语言中常用的函数，用于从键盘上读取输入数据和向屏幕上输出结果。常用的输入函数有scanf()，常用的输出函数有printf()。在本题中，需要使用scanf()函数从键盘上读取两个整数，使用printf()函数向屏幕上输出完整的数学表达式。'}, {'name': '变量声明和定义', 'description': '在C语言中，变量需要先声明后使用。在本题中，需要声明并定义整型变量a、b和sum，分别用于存储输入的两个整数和它们的和。'}, {'name': '格式化输出', 'description': '在C语言中，可以使用printf()函数进行格式化输出。在本题中，需要使用printf()函数输出完整的数学表达式，使用%d占位符表示整数类型的变量。'}, {'name': '格式化输入', 'description': '在C语言中，可以使用scanf()函数进行格式化输入。在本题中，需要使用scanf()函数从键盘上读取两个整数，使用%d占位符表示整数类型的变量。'}]"
    },
    {
        "sortId": 252,
        "id": "1544514063513153536",
        "title": "目标点1：程序分析并写出运行结果",
        "content": "目标点1：程序分析并写出运行结果\n```c\n#include<stdio.h>\nint main()\n{ \n\tint n=0, m=1, x=2;\n\tif(!n)x++;\n\tif(m) x+=2;\n\tprintf(\"x=%d\\n\",x);\n\treturn 0;\n}\n```\n以上程序运行结果为:",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是if(condition) statement，其中condition是一个表达式，如果该表达式的值为真，则执行statement中的代码块。'}]"
    },
    {
        "sortId": 253,
        "id": "1544513530291273728",
        "title": "目标点1：程序分析并写出运行结果",
        "content": "\n目标点1：程序分析并写出运行结果\n```c\n#include<stdio.h>\nint main()\n{\n\tint a=10,b=3,c;\n\tc=a%b;\n\tprintf(\"Take %d from %d and the remainder is %d\",b,a,c);\n\treturn 0;\n}\n```\n以上程序运行结果为:\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '取余运算符', 'description': '取余运算符（%）用于计算两个整数相除后的余数。在C语言中，取余运算符的结果的符号与被除数的符号相同。'}]"
    },
    {
        "sortId": 254,
        "id": "1534241837807140864",
        "title": "判断素数",
        "content": "以下程序输入一个整数m，利用func函数判断是否为素数，如果是打印yes，不是打印no。\n\n```c++\n#include <stdio.h>\nvoid func(int m)\n{\n\tint i;\n\t\n\tfor(;i<=m-1;i++)\n\t{\n\t\tif()\n\t\t\tbreak;\n\t}\n\t\n\tif()\n\t\tprintf(\"yes\\n\");\n\telse\n\t\tprintf(\"no\\n\");\t\t\n}\n\nint main()\n{\n\tint m,i;\n\t\n\tscanf(\"\",&m);\n\tfunc();\n}\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，本题中使用for循环语句进行遍历判断。'}, {'name':'条件语句'，'description':'条件语句用于根据条件判断执行不同的代码，本题中使用if语句进行判断。'}, {'name':'函数'，'description':'函数是一段封装了特定功能的代码块，本题中使用func函数进行判断是否为素数。'}, {'name':'输入输出'，'description':'输入输出用于与用户进行交互，本题中使用scanf函数进行输入，printf函数进行输出。'}, {'name':'变量'，'description':'变量用于存储数据，本题中使用m和i两个变量分别存储输入的整数和循环变量。'}]"
    },
    {
        "sortId": 255,
        "id": "1534223514734268416",
        "title": "统计整数",
        "content": "键入10个整数，统计其中正数(pos)、负数(neg)和零（zero）的个数并将三者输出。\n\n```c++\n#include <stdio.h>\nint pos=0,neg=0,zero=0; \nvoid func(int num)\n{\n\tif(num>0)\n\t\tpos++;\n\telse if()\n\t\tneg++;\n\telse\n\t\t;\n}\n\nint main()\n{\n\tint i,a[10];\n\t\n\tfor(i=0;;i++)\n\t{\n\t\tscanf(\"%d\",&a[i]);\n\t\tfunc();\n\t}\n\t\n\tprintf(\"pos=%d,neg=%d,zero=%d\\n\",);\n} \n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量声明和初始化'，'description':'在程序中声明和初始化变量，以存储数据。'}, {'name':'条件语句'，'description':'使用条件语句根据不同的条件执行不同的代码块。'}, {'name':'循环语句'，'description':'使用循环语句重复执行一段代码块。'}, {'name':'函数定义和调用'，'description':'定义函数以封装一段可重复使用的代码，并在需要时调用该函数。'}, {'name':'输入输出'，'description':'使用输入输出函数从用户处获取输入并将结果输出。'}]"
    },
    {
        "sortId": 256,
        "id": "1533771073626554368",
        "title": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（ ）。",
        "content": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了算术运算符和关系运算符。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与运算、或运算和非运算。本题涉及到了或运算。'}, {'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量，本题涉及到了赋值运算符。'}]"
    },
    {
        "sortId": 257,
        "id": "1533770570666577920",
        "title": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（ ）。",
        "content": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '算术运算符', 'description': '算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，结果为整数商。'}]"
    },
    {
        "sortId": 258,
        "id": "1533766243151482880",
        "title": "以下运算符优先级按从高到低排列正确的是（ ）。",
        "content": "以下运算符优先级按从高到低排列正确的是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级是指在表达式中，不同运算符的执行顺序。了解运算符优先级可以帮助学生正确理解和编写复杂的表达式。'}]"
    },
    {
        "sortId": 259,
        "id": "1533765411630710784",
        "title": "scanf 函数输入整数时可使用（ ）格式限定符。",
        "content": "scanf 函数输入整数时可使用（ ）格式限定符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式限定符', 'description': '格式限定符用于指定输入或输出的数据类型和格式。在scanf函数中，可以使用%d格式限定符来输入整数。'}]"
    },
    {
        "sortId": 260,
        "id": "1533764383313203200",
        "title": "以下不正确的说法是（ ）。",
        "content": "以下不正确的说法是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言基础知识', 'description': '教学内容包括C语言的基本语法、数据类型、运算符、控制语句等基础知识。'}, {'name': '逻辑运算符', 'description': '教学内容包括逻辑运算符的使用方法和逻辑表达式的求值规则。'}, {'name': '条件语句', 'description': '教学内容包括if语句和switch语句的使用方法和注意事项。'}, {'name': '循环语句', 'description': '教学内容包括for循环、while循环和do-while循环的使用方法和循环控制语句的应用。'}, {'name': '数组', 'description': '教学内容包括数组的定义、初始化、访问和操作等基本操作。'}, {'name': '指针', 'description': '教学内容包括指针的定义、指针运算、指针与数组的关系等基本概念和操作。'}, {'name': '函数', 'description': '教学内容包括函数的定义、函数参数的传递、函数返回值的使用等基本概念和操作。'}, {'name': '字符串', 'description': '教学内容包括字符串的定义、字符串处理函数的使用等基本概念和操作。'}, {'name': '结构体', 'description': '教学内容包括结构体的定义、结构体成员的访问、结构体数组的使用等基本概念和操作。'}, {'name': '文件操作', 'description': '教学内容包括文件的打开、读写、关闭等基本操作和文件指针的使用。'}]"
    },
    {
        "sortId": 261,
        "id": "1533737134627209216",
        "title": "若变量c为char类型，能正确判断出c为小写字母的表达式是（ ）。",
        "content": "若变量c为char类型，能正确判断出c为小写字母的表达式是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'char类型','description':'char类型用于表示字符，包括大小写字母、数字和特殊字符。'}, {'name':'小写字母判断','description':'小写字母的ASCII码范围是97~122，可以通过判断c的ASCII码是否在该范围内来判断c是否为小写字母。'}]"
    },
    {
        "sortId": 262,
        "id": "1533736783220015104",
        "title": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（ ）。",
        "content": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了算术运算符和关系运算符。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与运算、或运算和非运算。本题涉及到了或运算。'}, {'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量，本题涉及到了赋值运算符。'}]"
    },
    {
        "sortId": 263,
        "id": "1533732347257012224",
        "title": "从键盘上输入四个整数a,b,c,d，输出其中最大者。",
        "content": "从键盘上输入四个整数a,b,c,d，输出其中最大者。\n\n### 输入格式:\n\na,b,c,d。例如：4,5,7,1\n\n### 输出格式:\n\n最大值是XX。例如：最大值是7\n\n### 输入样例:\n例如：\n\n```in\n4,5,7,1\n```\n\n### 输出样例:\n\n例如：\n\n```out\n最大值是7\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是用来存储数据的内存位置，可以通过变量名来访问和操作存储在内存中的数据。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用标准库函数scanf和printf来实现输入和输出操作。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在C语言中，可以使用if语句来实现条件判断，if语句的语法为if (条件) {代码块}，当条件为真时，执行代码块中的语句。'}, {'name': '循环语句', 'description': '循环语句用于重复执行一段代码块，直到满足退出条件为止。在C语言中，可以使用while循环、do-while循环和for循环来实现不同类型的循环。循环语句的语法为while (条件) {代码块}、do {代码块} while (条件)和for (初始化; 条件; 更新) {代码块}。'}, {'name': '数组', 'description': '数组是一种用来存储多个相同类型数据的集合，可以通过下标来访问和操作数组中的元素。在C语言中，数组的声明需要指定数组的类型和大小，数组的下标从0开始。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行函数。在C语言中，函数需要先声明后使用，声明函数时需要指定函数的返回类型、函数名和参数列表。函数可以返回一个值，也可以不返回任何值。'}, {'name': '变量作用域', 'description': '变量作用域指的是变量在程序中的可见范围。在C语言中，变量可以有全局作用域和局部作用域。全局变量在整个程序中都可见，局部变量只在定义它的代码块中可见。'}, {'name': '指针', 'description': '指针是一种特殊的变量，用来存储内存地址。通过指针可以访问和操作内存中的数据。在C语言中，可以使用指针来实现对变量的间接访问和操作。指针的声明需要指定指针的类型和名称，可以使用取地址运算符&来获取变量的地址，使用解引用运算符*来访问指针指向的内存中的数据。'}, {'name': '运算符', 'description': '运算符是用来进行特定操作的符号或关键字。在C语言中，常见的运算符有算术运算符、关系运算符、逻辑运算符、赋值运算符、位运算符等。运算符可以用来进行数值计算、比较大小、判断条件等操作。'}, {'name': '条件运算符', 'description': '条件运算符是一种特殊的运算符，用来根据条件的真假来选择不同的值。在C语言中，条件运算符的语法为条件 ? 值1 : 值2，当条件为真时，选择值1，否则选择值2。'}, {'name': '类型转换', 'description': '类型转换是指将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符来实现类型转换。类型转换可能会导致数据精度的损失或溢出，需要注意数据类型的兼容性和转换的合理性。'}, {'name': '字符串', 'description': '字符串是一种用来表示文本的数据类型，由多个字符组成。在C语言中，字符串使用字符数组来存储，字符串的末尾需要添加一个空字符\\0作为结束标志。可以使用双引号将字符串括起来，也可以使用字符数组来表示字符串。'}, {'name': '文件操作', 'description': '文件操作是指对计算机文件进行读取和写入的过程。在C语言中，可以使用标准库函数来实现文件的打开、关闭、读取和写入操作。文件操作需要指定文件的路径和打开模式，可以读取和写入不同类型的数据。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起。在C语言中，可以使用struct关键字来定义结构体，结构体的成员可以是不同类型的变量。可以通过结构体变量来访问和操作结构体中的成员。'}, {'name': '指针运算', 'description': '指针运算是指对指针进行加减运算的过程。在C语言中，可以对指针进行加法运算和减法运算，指针的加法运算会根据指针的类型自动进行偏移，指针的减法运算会计算两个指针之间的元素个数。指针运算可以用来实现对数组和字符串的遍历和访问。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行时根据需要分配和释放内存的过程。在C语言中，可以使用标准库函数malloc和free来实现动态内存分配和释放。动态内存分配可以用来解决程序中内存不足或浪费的问题，需要注意及时释放已分配的内存，避免内存泄漏。'}, {'name': '递归', 'description': '递归是指一个函数调用自身的过程。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数需要定义递归的终止条件和递归的调用过程。递归函数的调用过程会形成一个函数调用栈，需要注意递归的深度和内存的使用。'}, {'name': '预处理指令', 'description': '预处理指令是指在编译过程中对源代码进行预处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等操作。预处理指令以#开头，不会被编译器直接执行，而是在编译之前进行处理。'}, {'name': '位运算', 'description': '位运算是指对二进制数进行按位操作的运算。在C语言中，可以使用位运算符来进行位与、位或、位异或、位取反等操作。位运算可以用来进行位操作、位掩码、位标志等操作。'}, {'name': '枚举', 'description': '枚举是一种特殊的数据类型，用来定义一组具有相同属性的常量。在C语言中，可以使用enum关键字来定义枚举类型，枚举类型的值可以是预定义的常量。枚举类型可以用来表示一组相关的取值范围，提高程序的可读性和可维护性。'}, {'name': '错误处理', 'description': '错误处理是指在程序运行过程中处理可能出现的错误和异常情况。在C语言中，可以使用错误码、异常处理和错误处理函数等方式来处理错误。错误处理需要根据具体情况选择合适的处理方式，避免程序崩溃或产生不可预料的结果。'}, {'name': '多文件编程', 'description': '多文件编程是指将程序分成多个文件进行编写和组织的方式。在C语言中，可以使用头文件和源文件来实现多文件编程，头文件用于声明函数和变量的接口，源文件用于实现函数和变量的具体代码。多文件编程可以提高代码的可重用性和可维护性，方便团队协作和模块化开发。'}, {'name': '数据结构', 'description': '数据结构是一种组织和存储数据的方式，可以用来解决特定问题的数据组织和操作。在C语言中，可以使用数组、链表、栈、队列、树、图等数据结构来实现不同类型的数据存储和操作。数据结构可以用来提高程序的效率和性能，减少内存的使用和浪费。'}, {'name': '算法', 'description': '算法是一种解决问题的方法和步骤，可以用来实现特定功能的计算过程。在C语言中，可以使用不同的算法来解决不同类型的问题，如排序、查找、图算法等。算法的选择和设计需要考虑问题的规模、时间复杂度和空间复杂度等因素，以及具体问题的特点和要求。'}, {'name': '库函数', 'description': '库函数是指由编程语言或操作系统提供的已经实现的函数，可以直接调用和使用。在C语言中，可以使用标准库函数和第三方库函数来实现各种功能，如数学函数、字符串函数、文件函数等。库函数可以提高程序的开发效率和代码的可重用性，避免重复编写相同的代码。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素都是指针。在C语言中，可以使用指针数组来存储多个指针，指针数组的元素可以是不同类型的指针。指针数组可以用来存储和操作多个指针，方便对多个变量或数据进行处理。'}, {'name': '多维数组', 'description': '多维数组是一种数组，其中的元素也是数组。在C语言中，可以使用多维数组来存储和操作多维数据，多维数组的维度可以是任意的。多维数组可以用来表示矩阵、图像等复杂的数据结构，方便对多维数据进行处理和计算。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行各种操作和处理的过程。在C语言中，可以使用字符串函数和字符串操作符来实现字符串的拼接、复制、比较、查找等操作。字符串处理可以用来解决字符串相关的问题，如字符串匹配、字符串替换等。'}, {'name': '排序算法', 'description': '排序算法是指将一组数据按照特定的顺序进行排列的算法。在C语言中，可以使用不同的排序算法来对数组或链表进行排序，常见的排序算法有冒泡排序、插入排序、选择排序、快速排序、归并排序等。排序算法的选择和实现需要考虑数据的规模和性能的要求。'}, {'name': '查找算法', 'description': '查找算法是指在一组数据中查找特定元素的算法。在C语言中，可以使用不同的查找算法来在数组或链表中查找指定的元素，常见的查找算法有线性查找、二分查找、哈希查找等。查找算法的选择和实现需要考虑数据的规模和性能的要求。'}, {'name': '链表', 'description': '链表是一种动态数据结构，可以在运行时动态分配和释放内存。在C语言中，可以使用链表来存储和操作不同类型的数据，链表的每个节点包含一个数据元素和一个指向下一个节点的指针。链表可以用来解决插入和删除元素的效率问题，但访问和查找元素的效率较低。'}, {'name': '栈', 'description': '栈是一种特殊的数据结构，具有后进先出（LIFO）的特点。在C语言中，可以使用数组或链表来实现栈，栈的操作包括入栈和出栈。栈可以用来解决递归调用、表达式求值、括号匹配等问题，也可以用来实现函数调用和内存管理等功能。'}, {'name': '队列', 'description': '队列是一种特殊的数据结构，具有先进先出（FIFO）的特点。在C语言中，可以使用数组或链表来实现队列，队列的操作包括入队和出队。队列可以用来解决任务调度、消息传递、缓冲区管理等问题，也可以用来实现广度优先搜索和图的遍历等算法。'}, {'name': '树', 'description': '树是一种非线性的数据结构，具有层次关系的特点。在C语言中，可以使用指针和结构体来实现树，树的每个节点包含一个数据元素和多个指向子节点的指针。树可以用来解决层次结构的问题，如文件系统、组织结构等，也可以用来实现二叉搜索树和平衡二叉树等数据结构。'}, {'name': '图', 'description': '图是一种非线性的数据结构，由节点和边组成。在C语言中，可以使用邻接矩阵或邻接表来表示图，图的节点可以是不同类型的数据，边表示节点之间的关系。图可以用来解决网络连接、路径搜索、最短路径等问题，也可以用来实现图的遍历和拓扑排序等算法。'}, {'name': '文件操作', 'description': '文件操作是指对计算机文件进行读取和写入的过程。在C语言中，可以使用标准库函数来实现文件的打开、关闭、读取和写入操作。文件操作需要指定文件的路径和打开模式，可以读取和写入不同类型的数据。'}, {'name': '指针', 'description': '指针是一种特殊的变量，用来存储内存地址。通过指针可以访问和操作内存中的数据。在C语言中，可以使用指针来实现对变量的间接访问和操作。指针的声明需要指定指针的类型和名称，可以使用取地址运算符&"
    },
    {
        "sortId": 264,
        "id": "1533728457283321856",
        "title": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（ ）。",
        "content": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '逻辑关系表达式', 'description': '逻辑关系表达式用于表示不同变量之间的关系，如大于、小于、等于等。在C语言中，可以使用比较运算符（如<、>、<=、>=、==、!=）来表示逻辑关系。对于题目中的逻辑关系“10≤x≤20”，可以使用逻辑与运算符（&&）来连接两个比较表达式，即“10<=x && x<=20”。'}]"
    },
    {
        "sortId": 265,
        "id": "1533725252835049472",
        "title": "putchar()函数的功能是输出（ ）。",
        "content": "putchar()函数的功能是输出（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'putchar()函数', 'description': 'putchar()函数是C语言中的一个输出函数，用于将一个字符输出到标准输出设备（通常是显示器）。它接受一个字符作为参数，并将该字符输出到屏幕上。'}]"
    },
    {
        "sortId": 266,
        "id": "1533724889717374976",
        "title": "C语言中的基本数据类型包括（）。",
        "content": "C语言中的基本数据类型包括（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型和指针型。'}]"
    },
    {
        "sortId": 267,
        "id": "1532723090776625152",
        "title": "写出下面程序的运行结果。",
        "content": "写出下面程序的运行结果。\n```c\n#include <stdio.h>\nint main()\n{\n\tint a[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n\tint *p = a, sum = 0;\n\t\n\tfor ( ; p < a + 10; p++)\n\t{\n\t\tsum += *p++;\n\t}\n\tprintf(\"sum=%d\\n\", sum);\n\t\n\treturn 0;\n}\n```\n输出结果为：",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'指针','description':'指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，我们可以直接访问和修改变量的值，还可以动态地分配内存空间。在本题中，通过指针p遍历数组a，并使用*p++来访问数组元素的值。'}, {'name':'数组','description':'数组是一种存储相同类型数据的集合，它可以通过下标来访问和修改其中的元素。在本题中，数组a存储了10个整数，通过指针p遍历数组并累加元素的值。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构，它可以根据条件来控制代码的执行次数。在本题中，使用for循环来遍历数组a，并累加元素的值。'}, {'name':'运算符','description':'运算符是用于执行特定操作的符号，它可以对变量和常量进行运算。在本题中，使用+=运算符来累加元素的值，使用++运算符来移动指针p的位置。'}, {'name':'输出','description':'输出是将程序的结果显示在屏幕上或者写入文件中的过程。在本题中，使用printf函数来输出累加的结果。'}]"
    },
    {
        "sortId": 268,
        "id": "1531481690080788480",
        "title": "华氏温度转换为摄氏温度",
        "content": "已知华氏温度转换为摄氏温度的公式如下： \n      C=(F-32) * 5/9\n其中，C 为摄氏温度，F 为华氏温度，\n编程实现将任意输入的华氏温度值转换成摄氏温度值输出。（小数点后保留 2 位）\n\n### 输入格式:\n\n华氏温度:XX。例如：华氏温度:98\n\n### 输出格式:\n\n转换为摄氏温度为:XX（保留两位小数）。例如：转换为摄氏温度为:36.67\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n华氏温度:98\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n转换为摄氏温度为:36.67\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'华氏温度转摄氏温度', 'description':'已知华氏温度转换为摄氏温度的公式如下：C=(F-32) * 5/9，编程实现将任意输入的华氏温度值转换成摄氏温度值输出。（小数点后保留 2 位）'}]"
    },
    {
        "sortId": 269,
        "id": "1531446505817739264",
        "title": "编写一个程序，其功能为：从键盘输入一元二次方程ax2+bx+c=0（a!=0）的各项系数a、b、c，计算判别式d=b*b-4ac的值。",
        "content": "编写一个程序，其功能为：从键盘输入一元二次方程ax$$2$$+bx+c=0（a!=0）的各项系数a、b、c，计算判别式d=b*b-4ac的值。\n\n### 输入格式:\n\na:a的值;b:b的值;c:c的值。\n例如：a:4;b:2;c:1.5\n\n### 输出格式:\n\n判别式的值为:XX。\n例如：判别式的值为:4.00\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\na:4;b:2;c:1.5\n```\n\n### 输出样例:\n\n例如：\n\n```out\n判别式的值为:-20.00\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '一元二次方程', 'description': '教学描述：一元二次方程是指形如ax^2+bx+c=0的方程，其中a、b、c为已知系数，x为未知数。在C语言中，可以通过输入a、b、c的值，计算出一元二次方程的判别式d=b*b-4ac的值。'}]"
    },
    {
        "sortId": 270,
        "id": "1531201696343511040",
        "title": "已知直线方程y=kx+3，输入y以及k,求x",
        "content": "已知直线方程y=kx+3，输入y以及k,求x。\n\n### 输入格式:\n\ny:y值;k:k值\n例如：y:5.2;k:3\n\n### 输出格式:\n\nx:x值\n保留两位小数。\n例如：x:0.73\n\n### 输入样例:\n\n例如：\n\n```in\ny:5.2;k:3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nx:0.73\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '直线方程求解', 'description': '教学目标：通过已知直线方程y=kx+3，输入y以及k，求解x。\\n教学内容：介绍直线方程的一般形式，讲解如何根据已知的y和k值求解x。\\n教学步骤：\\n1. 引导学生理解直线方程的一般形式y=kx+3。\\n2. 解释如何根据已知的y和k值求解x。\\n3. 给出具体的例子进行演示，让学生掌握求解x的方法。\\n4. 练习习题，让学生独立完成直线方程求解的练习。\\n5. 总结本节课的内容，强化学生对直线方程求解的理解和应用能力。'}]"
    },
    {
        "sortId": 271,
        "id": "1531196827566063616",
        "title": "输入一个字符ch，然后输出与它前后相邻的两个字符",
        "content": "输入一个字符ch，然后输出与它前后相邻的两个字符\n\n### 输入格式:\n\n输入一个字符ch，例如:\nB\n\n### 输出格式:\n\n输出与它前后相邻的两个字符。例如：AC\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nB\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nAC\n\n```\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n8\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n79\n\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符输入与输出'，'description':'本题涉及字符的输入与输出，通过scanf函数接收一个字符，然后通过printf函数输出与该字符前后相邻的两个字符。'}]"
    },
    {
        "sortId": 272,
        "id": "1530188808820609024",
        "title": "若将int、long、float等类型的数据进行混合运算，其结果的数据类型是（ ）。",
        "content": "若将int、long、float等类型的数据进行混合运算，其结果的数据类型是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，当不同类型的数据进行混合运算时，会自动进行数据类型转换，转换规则由C语言的类型转换规则决定。'}]"
    },
    {
        "sortId": 273,
        "id": "1530068771518513152",
        "title": "输入两个整数a、b，逗号隔开，交换它们的值后输出。",
        "content": "输入两个整数a、b，逗号隔开，交换它们的值后输出。\n输入格式:\n\n### 输入格式:\n\n输入两个整数，逗号隔开。例如：5,3\n\n### 输出格式:\n\n例如：a:3;b:5\n\n### 输入样例:\n```in\n5,3\n```\n### 输出样例:\n例如：\n\n```out\na:3;b:5\n\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'通过使用临时变量，交换两个变量的值。'}]"
    },
    {
        "sortId": 274,
        "id": "1530029773064486912",
        "title": "加密器，先后输入一个大写字母和两个小写字母，将其加密（小写字母转换为对应的大写字母，大写字母转换为对应的小写字母）后输出",
        "content": "加密器，先后输入一个大写字母和两个小写字母，将其加密（小写字母转换为对应的大写字母，大写字母转换为对应的小写字母）后输出。\n\n### 输入格式:\n\n先后输入一个大写字母和两个小写字母。例如：Acf\n\n### 输出格式:\n\n将其加密（小写字母转换为对应的大写字母，大写字母转换为对应的小写字母）后输出。例如：加密后的结果是：aCF\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nAcf\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n加密后的结果是：aCF\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括整型、浮点型、字符型等，学生需要了解各种数据类型的定义和使用方法。'}, {'name':'输入输出','description':'学生需要学会使用scanf和printf函数进行输入输出操作。'}, {'name':'运算符','description':'学生需要了解C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'条件语句','description':'学生需要学会使用if语句进行条件判断和分支控制。'}, {'name':'循环语句','description':'学生需要学会使用for循环和while循环进行重复执行。'}, {'name':'字符处理','description':'学生需要学会使用字符处理函数，如toupper和tolower函数进行字符大小写转换。'}]"
    },
    {
        "sortId": 275,
        "id": "1530023841983086592",
        "title": "输入一个三位数的正整数，然后求该数的3个数字之和。",
        "content": "输入一个三位数的正整数，然后求该数的3个数字之和。\n\n### 输入格式:\n\n输入一个三位数的正整数。例如：513\n\n### 输出格式:\n\n输出 这个数的3个数字之和。例如：513的3个数字之和是9\n\n### 输入样例:\n\n例如：\n\n```in\n513\n```\n\n### 输出样例:\n\n例如：\n\n```out\n513的3个数字之和是9\n\n```\n\n### 输入样例:\n\n例如：\n\n```in\n103\n```\n\n### 输出样例:\n\n例如：\n\n```out\n103的3个数字之和是4\n\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从用户输入获取数据，并将结果输出给用户。'}, {'name':'变量','description':'学习如何声明和使用变量来存储数据。'}, {'name':'运算符','description':'学习如何使用算术运算符来进行数值计算。'}, {'name':'控制流','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、浮点数和字符，并了解它们的特点和用法。'}, {'name':'字符串处理','description':'学习如何处理字符串，包括字符串的输入、输出和操作。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name':'数组','description':'学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name':'指针','description':'学习如何声明和使用指针来操作内存中的数据。'}, {'name':'文件操作','description':'学习如何打开、读取和写入文件，以及文件指针的使用。'}]"
    },
    {
        "sortId": 276,
        "id": "1530000145390227456",
        "title": "求并联电阻的值",
        "content": "已知电阻R1和R2并联，并联电阻R与R1和R2的关系式为1/R=1/R1+1/R2，要求从键盘上输入R1和R2的值，计算输出R。\n\n### 输入格式:\n\n输入R1和R2的值，空格隔开。例如：4 5\n\n![image.png](~/4927c50c-a045-4e69-b02f-f35c50de408b.png)\n\n### 输出格式:\n\n输出 电阻R1和R2的并联电阻为R ，结果保留两位小数 例如：电阻4.00和5.00的并联电阻为2.22\n\n\n\n![image.png](~/54d32813-e8af-45ba-9475-53cb5b6137aa.png)\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4 5\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n电阻4.00和5.00的并联电阻为2.22\n\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n5 10\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n电阻5.00和10.00的并联电阻为3.33\n\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'并联电阻计算','description':'根据已知电阻R1和R2的值，计算并联电阻R的值。'}]"
    },
    {
        "sortId": 277,
        "id": "1529840769216008192",
        "title": "若x、y都是int型变量，x、y均有值，正确的输出函数调用为（  ）",
        "content": "若x、y都是int型变量，x、y均有值，正确的输出函数调用为（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'函数调用','description':'函数调用是C语言中常用的一种语法结构，通过函数调用可以执行特定的代码块。在本题中，需要选择正确的函数调用来输出特定的结果。'}]"
    },
    {
        "sortId": 278,
        "id": "1529840578865889280",
        "title": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（   ）",
        "content": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑关系表达式'，'description':'逻辑关系表达式是C语言中用来表示逻辑关系的一种表达式，通过使用逻辑运算符和比较运算符来判断两个或多个表达式之间的关系。在这道题中，需要使用比较运算符“≤”来表示“10≤x≤20”的逻辑关系。'}]"
    },
    {
        "sortId": 279,
        "id": "1529840392525561856",
        "title": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（  ）",
        "content": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，即将两个整数相除并返回结果的整数部分。'}]"
    },
    {
        "sortId": 280,
        "id": "1529840151302737920",
        "title": "若有变量定义：char c; int i; double x;则表达式c+5*i-x的最终计算结果为（  ）类型。",
        "content": "若有变量定义：char c; int i; double x;则表达式c+5*i-x的最终计算结果为（  ）类型。\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量类型转换'，'description':'在C语言中，不同类型的变量进行运算时，会发生自动类型转换。本题中，表达式c+5*i-x涉及到了char、int和double类型的变量，因此需要了解不同类型之间的转换规则，以确定最终计算结果的类型。'}]"
    },
    {
        "sortId": 281,
        "id": "1529839289864011776",
        "title": "以下库函数中，（  ）是格式输出函数",
        "content": "以下库函数中，（  ）是格式输出函数\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式输出函数'，'description':'格式输出函数是C语言中用于将数据按照指定的格式输出的函数。常见的格式输出函数有printf()、sprintf()、fprintf()等。'}]"
    },
    {
        "sortId": 282,
        "id": "1529839075870625792",
        "title": "一个C程序的执行是从（  ）",
        "content": "一个C程序的执行是从（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'程序执行流程','description':'程序的执行是从main函数开始的，main函数是C程序的入口函数，程序会按照顺序执行main函数中的语句。'}]"
    },
    {
        "sortId": 283,
        "id": "1529838614929178624",
        "title": "C 语言是（   ）的程序设计语言",
        "content": "C 语言是（   ）的程序设计语言\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'C语言是一种通用的程序设计语言，广泛应用于系统软件和应用软件的开发。'}]"
    },
    {
        "sortId": 284,
        "id": "1529838386960371712",
        "title": "以下正确的变量名是（   ）",
        "content": "以下正确的变量名是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量命名规则'，'description':'变量名必须以字母或下划线开头，后面可以是字母、数字或下划线。'}]"
    },
    {
        "sortId": 285,
        "id": "1529838071242522624",
        "title": "若有定义：float x=3.5;int z=8;则表达式 x+z%3/4 的值为（ ）",
        "content": "若有定义：float x=3.5;int z=8;则表达式 x+z%3/4 的值为（ ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在表达式 x+z%3/4 中，% 和 / 的优先级高于 +，因此先计算 z%3/4，再与 x 相加。'}]"
    },
    {
        "sortId": 286,
        "id": "1529837809794797568",
        "title": "已知 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是（   ）",
        "content": "已知 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数的使用'，'description':'scanf函数用于从标准输入流中读取数据，并将其存储到指定的变量中。在本题中，正确的函数调用是scanf(\"%lf\", &a)。其中，%lf是格式控制符，用于读取一个双精度浮点数，并将其存储到变量a中。'}]"
    },
    {
        "sortId": 287,
        "id": "1529837512921956352",
        "title": "putchar()函数的功能是向终端输出（   ）",
        "content": "putchar()函数的功能是向终端输出（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'putchar()函数','description':'putchar()函数的功能是向终端输出一个字符。'}]"
    },
    {
        "sortId": 288,
        "id": "1529836927564894208",
        "title": "以下正确的浮点数是（  ）",
        "content": "以下正确的浮点数是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数','description':'浮点数是一种用于表示带有小数部分的数值的数据类型。在C语言中，浮点数可以使用float、double和long double三种类型来表示。'}]"
    },
    {
        "sortId": 289,
        "id": "1529836668172353536",
        "title": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（   ）",
        "content": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了算术运算符和关系运算符。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与运算、或运算和非运算。本题涉及到了或运算。'}, {'name':'变量定义和赋值','description':'变量定义和赋值是C语言中用于声明和初始化变量的操作。本题涉及到了变量的定义和赋值。'}]"
    },
    {
        "sortId": 290,
        "id": "1529836056407937024",
        "title": "以下运算符优先级按从高到低排列正确的是（  ）",
        "content": "以下运算符优先级按从高到低排列正确的是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级是指在一个表达式中，各个运算符的执行顺序。了解运算符优先级可以帮助学生正确理解表达式的计算过程，避免出现错误的结果。'}]"
    },
    {
        "sortId": 291,
        "id": "1529835859292422144",
        "title": "已知程序要使用函数printf，则程序必须包含头文件（  ）",
        "content": "已知程序要使用函数printf，则程序必须包含头文件（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'头文件的包含'，'description':'头文件的包含是C语言程序中必不可少的一部分，它用于引入其他文件中定义的函数和变量。在使用函数printf时，必须包含头文件stdio.h，以便在程序中正确地使用printf函数。'}]"
    },
    {
        "sortId": 292,
        "id": "1529835631617216512",
        "title": "C语言中的基本数据类型包括（  ）",
        "content": "C语言中的基本数据类型包括（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等。'}]"
    },
    {
        "sortId": 293,
        "id": "1529830501056483328",
        "title": "语句a=(3/4)+3%2;运行后，a的值为（  ）",
        "content": "语句a=(3/4)+3%2;运行后，a的值为（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，需要了解加法运算符和取余运算符的优先级高于除法运算符，所以先进行3%2的取余运算，结果为1，然后再进行3/4的除法运算，结果为0，最后将1和0相加，得到a的值为1。'}]"
    },
    {
        "sortId": 294,
        "id": "1529830284684922880",
        "title": "putchar()函数的功能是输出（  ）",
        "content": "putchar()函数的功能是输出（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'putchar()函数','description':'putchar()函数用于输出一个字符到标准输出设备（通常是屏幕）。'}]"
    },
    {
        "sortId": 295,
        "id": "1529830104069816320",
        "title": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（   ）",
        "content": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了算术运算符和关系运算符。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与运算、或运算和非运算。本题涉及到了或运算。'}, {'name':'变量定义和赋值','description':'变量定义和赋值是C语言中用于声明和初始化变量的操作。本题涉及到了变量的定义和赋值。'}]"
    },
    {
        "sortId": 296,
        "id": "1529829860489793536",
        "title": "若有定义：int x=3,y=4,z=5;则值为0的表达式是（  ）",
        "content": "若有定义：int x=3,y=4,z=5;则值为0的表达式是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。在本题中，需要了解算术运算符的优先级和结合性，以及逻辑运算符的短路特性。'}]"
    },
    {
        "sortId": 297,
        "id": "1529829580062838784",
        "title": "若x、y都是int型变量，x、y均有值，正确的输出函数调用为（   ）",
        "content": "若x、y都是int型变量，x、y均有值，正确的输出函数调用为（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'函数调用','description':'函数调用是C语言中常用的一种操作，通过调用函数可以执行特定的功能。在本题中，需要选择正确的函数调用来输出结果。'}]"
    },
    {
        "sortId": 298,
        "id": "1529829372847427584",
        "title": "下列四组选项中，正确的C语言标识符是。（  ）",
        "content": "下列四组选项中，正确的C语言标识符是。（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言标识符'，'description':'C语言标识符是用来命名变量、函数、数组等程序实体的名称，它由字母、数字和下划线组成，且必须以字母或下划线开头。'}]"
    },
    {
        "sortId": 299,
        "id": "1529829170786844672",
        "title": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（   ）",
        "content": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑关系表达式'，'description':'逻辑关系表达式是C语言中用来表示逻辑关系的一种表达式，通过使用逻辑运算符和比较运算符来判断两个或多个表达式之间的关系。在这道题中，需要使用比较运算符“≤”来表示“10≤x≤20”的逻辑关系。'}]"
    },
    {
        "sortId": 300,
        "id": "1529828929283002368",
        "title": "以下运算符优先级按从高到低排列正确的是（   ）",
        "content": "以下运算符优先级按从高到低排列正确的是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，运算符优先级从高到低依次为：括号运算符、一元运算符、乘除取余运算符、加减运算符、关系运算符、逻辑运算符、赋值运算符。'}]"
    },
    {
        "sortId": 301,
        "id": "1529828620137631744",
        "title": "已知程序要使用函数getchar，则程序必须包含头文件（   ）",
        "content": "已知程序要使用函数getchar，则程序必须包含头文件（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'头文件的包含','description':'头文件的包含是C语言中常用的一种方式，通过包含头文件可以引入所需的函数和变量声明，使得程序能够正确地使用这些函数和变量。在使用函数getchar时，需要包含头文件<stdio.h>，该头文件中包含了getchar函数的声明。'}]"
    },
    {
        "sortId": 302,
        "id": "1529828302947581952",
        "title": "通常，C 语句末尾以 （   ） 结束",
        "content": "通常，C 语句末尾以 （   ） 结束",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'语句结束符号'，'description':'C语言中，语句通常以分号（;）作为结束符号。'}]"
    },
    {
        "sortId": 303,
        "id": "1529828027876757504",
        "title": "C 语言是（   ）的程序设计语言",
        "content": "C 语言是（   ）的程序设计语言\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'C语言是一种通用的程序设计语言，广泛应用于系统软件和应用软件的开发。'}]"
    },
    {
        "sortId": 304,
        "id": "1529827812423733248",
        "title": "scanf 函数输入整数时可使用（  ）格式限定符",
        "content": "scanf 函数输入整数时可使用（  ）格式限定符\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式限定符','description':'格式限定符是用来指定输入或输出的数据类型和格式的特殊字符。在scanf函数中，可以使用%d格式限定符来输入整数。'}]"
    },
    {
        "sortId": 305,
        "id": "1529827614385475584",
        "title": "C语言中，运算对象必须是整型数的运算符是（   ）",
        "content": "C语言中，运算对象必须是整型数的运算符是（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整型数运算符'，'description':'整型数运算符是指在C语言中，运算对象必须是整型数的运算符。这些运算符包括加法运算符（+），减法运算符（-），乘法运算符（*），除法运算符（/），取余运算符（%）等。'}]"
    },
    {
        "sortId": 306,
        "id": "1529827356146384896",
        "title": "C语言中的基本数据类型包括（   ）",
        "content": "C语言中的基本数据类型包括（   ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型和布尔型。'}]"
    },
    {
        "sortId": 307,
        "id": "1529827074209464320",
        "title": "以下能正确定义整型变量a，b和c并为它们赋初值10的语句是（  ）",
        "content": "以下能正确定义整型变量a，b和c并为它们赋初值10的语句是（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和赋值'，'description':'变量定义和赋值是C语言程序设计中的基础知识点，通过定义和赋值可以创建并初始化变量。在这道题中，需要正确定义整型变量a、b和c，并为它们赋初值10。'}]"
    },
    {
        "sortId": 308,
        "id": "1529826189664292864",
        "title": "一个C程序的执行是从（  ）",
        "content": "1、一个C程序的执行是从（  ）\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'程序执行流程'，'description':'程序执行流程指的是一个C程序从开始到结束的执行过程。在C语言中，程序的执行是从main函数开始的。'}]"
    },
    {
        "sortId": 309,
        "id": "1528942989614235648",
        "title": "sdut-C语言实验 -交换两个整数的值",
        "content": "交换两个变量的值，由终端输入两个整数给变量x、y，然后交换x和y的值后，输出x和y。\n### 输入格式:\n\n从键盘输入两个整数变量x和y；\n\n### 输出格式:\n\n在交换x、y的值后将x和y输出！\n\n### 输入样例:\n\n\n```in\n4 6\n```\n\n### 输出样例:\n\n\n```out\n6 4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'通过输入两个整数变量x和y，交换它们的值后输出。'}]"
    },
    {
        "sortId": 310,
        "id": "1528650279044952064",
        "title": "C程序执行时，总是从(   )函数开始执行?",
        "content": "C程序执行时，总是从(   )函数开始执行?",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'main函数', 'description': 'main函数是C程序执行时的入口函数，程序总是从main函数开始执行。'}]"
    },
    {
        "sortId": 311,
        "id": "1527926297916260352",
        "title": "三位整数的各位数字",
        "content": "本题要求编写程序，输出一个三位整数的个位数字、十位数字和百位数字的值。\n\n\n### 输入格式:\n\n输入一个三位的整数。比如：\n152\n\n### 输出格式:\n\n按照以下格式输出：\n152 = 个位数字 + 十位数字10 + 百位数字100\n\n\n\n### 输入样例1:\n\n```in\n152\n```\n\n152\n\n### 输出样例1:\n\n```out\n152 = 2 + 5*10 + 1*100\n```\n\n### 输入样例2:\n\n\n```in\n489\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n489 = 9 + 8*10 + 4*100\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数运算','description':'本知识点主要涉及整数的基本运算，包括加法、减法、乘法和除法等。'}, {'name':'变量赋值','description':'本知识点主要涉及变量的定义和赋值操作，包括整数变量和字符变量的赋值。'}, {'name':'格式化输出','description':'本知识点主要涉及使用printf函数进行格式化输出，包括输出整数、字符和字符串等。'}, {'name':'运算符优先级','description':'本知识点主要涉及运算符的优先级，包括算术运算符、关系运算符和逻辑运算符等。'}, {'name':'条件语句','description':'本知识点主要涉及条件语句的使用，包括if语句和switch语句等。'}, {'name':'循环语句','description':'本知识点主要涉及循环语句的使用，包括for循环、while循环和do-while循环等。'}, {'name':'数组','description':'本知识点主要涉及数组的定义和使用，包括一维数组和多维数组等。'}, {'name':'函数','description':'本知识点主要涉及函数的定义和调用，包括函数的参数传递和返回值等。'}, {'name':'指针','description':'本知识点主要涉及指针的定义和使用，包括指针的运算和指针与数组的关系等。'}, {'name':'文件操作','description':'本知识点主要涉及文件的打开、读写和关闭等操作，包括文本文件和二进制文件的处理等。'}]"
    },
    {
        "sortId": 312,
        "id": "1522415485348610048",
        "title": "GPS测绘中度分秒转换",
        "content": "在测绘中，获取经度和纬度信息的时候，可以是**度分秒**格式，也可以是**小数点**格式。例如一个北纬的纬度信息，30°41′52.37″ ，可以转换为 30.697881。\n\n规则：\n(1)度和分都是整数，秒可以含有小数。将用户输入的第一个整数，加上第二个整数除以60，再加上第三个浮点数除以3600，就是最终结果。\n\n(2)在输出结果时，保留6位小数。\n\n(3)题目假定用户输入的数据，一定是合法的数据。\n\n### 输入格式:\n\n三个数值，数之间用空格分开。\n\n### 输出格式:\n\n见输出样例。\n\n### 输入样例:\n\n两个整数后，跟上一个小数。数据之间用空格分开。三个数分别代表度、分、秒。\n\n```in\n30 41 52.37\n```\n\n### 输出样例:\n输出经纬度信息的小数点格式，保留6位小数。\n注意等号的前后有且仅有一个空格，建议复制下面输出到你的代码中，再进行修改。\n```out\n30°41′52.37″ = 30.697881\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1199542721402277888",
                        "name": "C#程序设计",
                        "isLeaf": false,
                        "enName": "C# Programming"
                    },
                    {
                        "id": "1199542781913501696",
                        "name": "数据类型和表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "1199543011039940608",
                        "name": "基本数据类型",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "172",
                        "name": "Java程序设计",
                        "isLeaf": false,
                        "enName": "Java Programming"
                    },
                    {
                        "id": "173",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "175",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '度分秒转小数点', 'description': '在测绘中，获取经度和纬度信息的时候，可以是度分秒格式，也可以是小数点格式。例如一个北纬的纬度信息，30°41′52.37″ ，可以转换为 30.697881。规则：(1)度和分都是整数，秒可以含有小数。将用户输入的第一个整数，加上第二个整数除以60，再加上第三个浮点数除以3600，就是最终结果。(2)在输出结果时，保留6位小数。(3)题目假定用户输入的数据，一定是合法的数据。输入格式:三个数值，数之间用空格分开。输出格式:见输出样例。'}]"
    },
    {
        "sortId": 313,
        "id": "1521106230418952192",
        "title": "最简单的天气预报",
        "content": "天气预报的基本原理是收集当前和历史气象数据（气温、湿度等等），根据气象学的模型预测未来天气的变化。编写程序输入昨天的平均气温t1、平均湿度h1和天气w1；再输入今天早上8点的气温t2和湿度h2。\n1. 根据公式e=(|h2-h1|+|t2-t1|)/200计算并输出今天和昨天的天气误差e；\n2. 预测今天可能的天气w2。预测依据是：\n（1）如果h2>90, 则是雨天；\n（2）如果e<0.2, 今天的天气和昨天一样；\n（3）其他情况输出晴天。\n\n### 输入格式:\n\n第一行输入昨天的平均气温、平均湿度和天气情况（数据中间用空格隔开）；第二行输入今天早上8点的气温和平均湿度（数据中间用空格隔开）；\t其中气温是整数（摄氏度-50-50度），湿度是整数（0-100），天气情况是1（sunny 晴天）、2（cloudy 阴天）、3（rainy 雨天）中的一种。\n\n### 输出格式:\n\n输出昨天和今天的气象误差e（保留2位小数），并预测今天的天气情况。如果输入超出可能的范围（气温不在-50到50度，湿度不在0-100范围内，天气不在1，2，3范围内），输出“error” \n\n### 输入样例:\n\n```in\n15  35  2\n18  36  \n```\n\n### 输出样例:\n\n```out\ne=0.02\ntoday weather:cloudy\n```\n\n### 输入样例:\n\n```in\n36 50 3\n23 92\n```\n\n### 输出样例:\n\n```out\ne=0.28\ntoday weather:rainy\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '教学内容包括变量的定义和声明，数据类型的分类和使用。'}, {'name': '输入输出', 'description': '教学内容包括使用scanf函数进行输入，使用printf函数进行输出。'}, {'name': '条件语句', 'description': '教学内容包括if语句的使用，根据条件进行不同的操作。'}, {'name': '数学运算', 'description': '教学内容包括数学运算符的使用，如加减乘除等。'}, {'name': '逻辑运算', 'description': '教学内容包括逻辑运算符的使用，如与或非等。'}, {'name': '字符串处理', 'description': '教学内容包括字符串的定义和操作，如字符串的拼接、比较等。'}, {'name': '错误处理', 'description': '教学内容包括错误处理的方法，如输入超出范围时的处理。'}]"
    },
    {
        "sortId": 314,
        "id": "1521093429185052672",
        "title": "气象数据的格式化输出",
        "content": "天气预报的基本原理是收集当前和历史气象数据（气温、湿度等等），根据气象学的模型预测未来天气的变化。编写程序输入昨天的平均气温、平均湿度和天气，并输出这些信息。\n\n### 输入格式:\n\n输入昨天的平均气温、平均湿度和天气。其中气温是整数（摄氏-50到50度），湿度也是整数（0-100），天气是1（sunny 晴天）、2（cloudy 阴天）、3（rainy 雨天）中的一种。输入数据中间用空格隔开。\n\n### 输出格式:\n\n按行输出天气信息，如果输入超出范围（气温不在-50到50度，湿度不在0-100范围内，天气不是1，2，3中间的一种），输出error。\n\n### 输入样例:\n\n```in\n12  15  3\n```\n\n### 输出样例:\n\n```out\ntemperature:12\nhumidity:15\nweather:rainy\n```\n\n### 输入样例:\n\n```in\n10  120  1\n```\n\n### 输出样例:\n\n```out\nerror\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从用户输入获取数据，并将结果输出到屏幕上。'}, {'name':'条件语句','description':'学习如何使用条件语句来判断输入是否符合要求，并根据条件进行相应的处理。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、字符、字符串等，并了解它们的特点和用法。'}, {'name':'运算符','description':'学习不同的运算符，如算术运算符、关系运算符、逻辑运算符等，并了解它们的优先级和用法。'}, {'name':'错误处理','description':'学习如何处理输入错误的情况，如输入超出范围的数据，输出错误信息。'}]"
    },
    {
        "sortId": 315,
        "id": "1521090058155814912",
        "title": "气象数据的简单输出",
        "content": "天气预报的基本原理是：收集当前和历史气象数据（气温、湿度等等），根据气象学的模型预测未来天气的变化。编写程序输入昨天的平均气温和平均湿度，并输出这些信息。\n\n### 输入格式:\n\n输入昨天的平均气温和平均湿度。其中气温是整数（摄氏-50到50度），湿度也是整数（0-100），中间用空格隔开。\n\n### 输出格式:\n\n按固定格式分行输出昨天的平均气温和湿度。\n\n### 输入样例:\n\n```in\n36  91  \n```\n\n### 输出样例:\n\n```out\ntemperature:36\nhumidity:91\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从用户输入获取数据，并将结果输出到屏幕上。'}, {'name':'变量','description':'学习如何声明和使用变量来存储数据。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、浮点数和字符串，并了解它们的特点和用法。'}, {'name':'运算符','description':'学习如何使用运算符进行数学运算和逻辑运算。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'循环语句','description':'学习如何使用循环语句来重复执行一段代码块。'}, {'name':'字符串处理','description':'学习如何处理字符串，包括字符串的拼接、截取和替换等操作。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name':'数组','description':'学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name':'文件操作','description':'学习如何打开、读取和写入文件，以及文件指针的使用。'}, {'name':'错误处理','description':'学习如何处理程序中可能出现的错误，包括输入错误和运行时错误等。'}]"
    },
    {
        "sortId": 316,
        "id": "1510914756020895744",
        "title": "已知int a='R'; 则正确的表达式是。",
        "content": "已知int a='R'; 则正确的表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符类型', 'description': '字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用单引号括起来的字符表示，例如\\'R\\'。'}]"
    },
    {
        "sortId": 317,
        "id": "1510914491251261440",
        "title": "已知double a=5.2; 则正确的赋值表达式是。",
        "content": "已知double a=5.2; 则正确的赋值表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '赋值表达式', 'description': '赋值表达式用于将一个值赋给变量。在C语言中，赋值表达式使用等号（=）进行赋值操作。正确的赋值表达式是将一个值赋给一个变量，例如将5.2赋给变量a的表达式应为a = 5.2。'}]"
    },
    {
        "sortId": 318,
        "id": "1510914249328627712",
        "title": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是。",
        "content": "若有定义：int a=5,b=2,c=1;则表达式a-b<c||b==c的值是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行各种运算操作的符号，包括算术运算、关系运算、逻辑运算等。本题涉及到了算术运算符（减法、等于）、关系运算符（小于、等于）和逻辑运算符（或）。'}, {'name':'数据类型','description':'数据类型是用来定义变量的属性，包括整型、浮点型、字符型等。本题涉及到了整型变量的定义和赋值。'}, {'name':'逻辑运算','description':'逻辑运算是用来进行逻辑判断的运算，包括与、或、非等。本题涉及到了逻辑或运算。'}]"
    },
    {
        "sortId": 319,
        "id": "1510914078858903552",
        "title": "若有定义：int x=3,y=4,z=5;则值为0的表达式是。",
        "content": "若有定义：int x=3,y=4,z=5;则值为0的表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行各种数学和逻辑运算的符号，包括算术运算符、关系运算符、逻辑运算符等。在C语言中，常见的运算符有加法运算符、减法运算符、乘法运算符、除法运算符等。'}]"
    },
    {
        "sortId": 320,
        "id": "1510913643071344640",
        "title": "若希望当a的值为奇数时,表达式的值为\"真\",a的值为偶数时,表达式的值为\"假\"。则不能满足要求的表达式是。",
        "content": "若希望当a的值为奇数时,表达式的值为\"真\",a的值为偶数时,表达式的值为\"假\"。则不能满足要求的表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if-else语句来实现。'}]"
    },
    {
        "sortId": 321,
        "id": "1510913378716319744",
        "title": "若有定义:int x=3,y=4;则表达式 !x||y 的值为。",
        "content": "若有定义:int x=3,y=4;则表达式 !x||y 的值为。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '逻辑运算符', 'description': '逻辑运算符用于对表达式进行逻辑运算，常见的逻辑运算符有与（&&）、或（||）和非（!）。在本题中，表达式 !x||y 使用了逻辑非运算符（!）和逻辑或运算符（||）。逻辑非运算符用于取反操作，将真变为假，将假变为真。逻辑或运算符用于判断两个表达式中至少有一个为真时整个表达式为真。根据运算符的优先级，逻辑非运算符的优先级高于逻辑或运算符，所以先对 x 进行取反操作，得到假（0），然后再与 y 进行逻辑或运算，得到真（1）。所以表达式 !x||y 的值为真（1）。'}]"
    },
    {
        "sortId": 322,
        "id": "1510911485130448896",
        "title": "假定w、x、y、z、m均为int型变量，有如下程序段：",
        "content": "假定w、x、y、z、m均为int型变量，有如下程序段：\nw=1;x=2;y=3;z=4;\nm=(w<x)?w:x;\nm=(m<y)?m:y;\nm=(m<z)?m:z;\n则该程序执行后，m的值是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件运算符'，'description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假来选择不同的值进行赋值或计算。在给定的程序段中，条件运算符被用于比较变量的值，并选择较小的值赋给变量m。'}]"
    },
    {
        "sortId": 323,
        "id": "1510910483845226496",
        "title": "有以下程序段",
        "content": "有以下程序段\nint k=0,a=1,b=2,c=3;\nk=a<b?b:a;\nk=k>c?k:b;\n执行该程序段后，k的值是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件运算符'，'description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假选择不同的值。在该程序段中，使用了条件运算符来比较a和b的大小，并将较小的值赋给k。'}]"
    },
    {
        "sortId": 324,
        "id": "1510909408522149888",
        "title": "若整型变量a、b、c、d中的值依次为：1、4、3、2。则条件表达式 a<b?a:c<d?c:d 的值是。",
        "content": "若整型变量a、b、c、d中的值依次为：1、4、3、2。则条件表达式 a<b?a:c<d?c:d 的值是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件表达式', 'description': '条件表达式是一种特殊的表达式，它根据条件的真假来选择执行不同的代码块。在C语言中，条件表达式通常使用三元运算符（?:）来表示，格式为：条件表达式 ? 表达式1 : 表达式2。当条件表达式为真时，返回表达式1的值；当条件表达式为假时，返回表达式2的值。在本题中，条件表达式 a<b?a:c<d?c:d 的值将根据 a<b 和 c<d 的真假来选择返回 a 或 c 的值。'}]"
    },
    {
        "sortId": 325,
        "id": "1510909242058612736",
        "title": "以下程序的输出结果是。",
        "content": "以下程序的输出结果是。\nmain()\n{ int a=5,b=4,c=6,d; \nprintf(\"%d\\n\",d=a>b?(a>c?a:c):(b));\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件运算符'，'description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假来选择不同的值进行赋值或输出。在上述程序中，条件运算符被用于比较a、b和c的大小，并根据结果选择最大的值赋给变量d。'}]"
    },
    {
        "sortId": 326,
        "id": "1510908937317482496",
        "title": "有如下程序段",
        "content": "有如下程序段\nint a=14,b=15,x;\nchar c='A';\nx=(a&&b)&&(c<'B');\n执行该程序段后，x的值为\n。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符','description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有&&（逻辑与）、||（逻辑或）和！（逻辑非）。在C语言中，逻辑运算符的运算结果为真（非零）或假（0）。在本题中，使用了逻辑与运算符&&来判断a和b的值是否都为真，以及逻辑与运算符&&来判断c的ASCII码是否小于字符'B'的ASCII码。'}]"
    },
    {
        "sortId": 327,
        "id": "1510908647012925440",
        "title": "设有定义：int a=2,b=3,c=4;，则以下选项中值为0的表达式是。",
        "content": "设有定义：int a=2,b=3,c=4;，则以下选项中值为0的表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在表达式中，先执行优先级高的运算符，再执行优先级低的运算符。本题中需要了解各个运算符的优先级，以确定哪个表达式的值为0。'}]"
    },
    {
        "sortId": 328,
        "id": "1510908304921296896",
        "title": "有如下程序",
        "content": "有如下程序\nmain()\n{\nint a=1,b=2,m=0,n=0,k;\nk=(n=b>a)||(m=a<b);\nprintf(\"%d,%d\\n\",k,m);\n}\n程序运行后的输出结果是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符','description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）。在C语言中，逻辑运算符的运算结果为真（非零）或假（0）。本题中的程序使用了逻辑或运算符（||），它的运算规则是：如果第一个表达式为真，则不再计算第二个表达式，直接返回真；如果第一个表达式为假，则计算第二个表达式，返回第二个表达式的值。因此，k的值为1，m的值为0。'}]"
    },
    {
        "sortId": 329,
        "id": "1510908073538322432",
        "title": "能正确表示逻辑关系：“a≥10 或 a≤0”的C语言表达式是。",
        "content": "能正确表示逻辑关系：“a≥10 或 a≤0”的C语言表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对多个条件进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）和非（！）。在本题中，需要学生理解逻辑关系“a≥10 或 a≤0”的表示方法，即使用逻辑或运算符（||）将两个条件连接起来。'}]"
    },
    {
        "sortId": 330,
        "id": "1510907835922612224",
        "title": "若变量c为char类型，能正确判断出c为小写字母的表达式是。",
        "content": "若变量c为char类型，能正确判断出c为小写字母的表达式是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'char类型','description':'char类型是C语言中用来表示字符的数据类型，它占用一个字节的内存空间。在C语言中，字符常量用单引号括起来，例如'a'、'b'等。'}，{'name':'小写字母判断','description':'在C语言中，可以使用ASCII码来判断一个字符是否为小写字母。小写字母的ASCII码范围是97~122，因此可以使用条件表达式(c >= 'a' && c <= 'z')来判断变量c是否为小写字母。'}]"
    },
    {
        "sortId": 331,
        "id": "1510907552723206144",
        "title": "设a、b、c、d、m、n均为int型变量，且a=5、b=6、c=7、d=8、m=2、n=2，则逻辑表达式(m=a>b)&&(n=",
        "content": "设a、b、c、d、m、n均为int型变量，且a=5、b=6、c=7、d=8、m=2、n=2，则逻辑表达式(m=a>b)&&(n=c>d)运算后，n的值为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑表达式','description':'逻辑表达式是由逻辑运算符连接起来的表达式，用于判断条件的真假。逻辑运算符包括与（&&）、或（||）、非（!）等。逻辑表达式的运算结果为真（非零）或假（0）。在C语言中，逻辑表达式常用于条件语句和循环语句中，用于控制程序的流程。'}]"
    },
    {
        "sortId": 332,
        "id": "1510907224439005184",
        "title": "以下程序的输出结果是。",
        "content": "以下程序的输出结果是。\nmain()\n{ int a=4,b=5,c=0,d;\n  d=!a&&!b||!c;\n  printf(\"%d\\n\",d);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对多个条件进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）等。本题涉及到逻辑与（&&）、逻辑非（!）运算符的使用。'}]"
    },
    {
        "sortId": 333,
        "id": "1510522990864830464",
        "title": "种钻石",
        "content": "\n![d.jpg](~/483c129d-c67a-4893-ab74-e2fa1453180e.jpg)\n\n\n2019年10月29日，中央电视台专题报道，中国科学院在培育钻石领域，取得科技突破。科学家们用金刚石的籽晶片作为种子，利用甲烷气体在能量作用下形成碳的等离子体，慢慢地沉积到钻石种子上，一周“种”出了一颗 1 克拉大小的钻石。\n\n本题给出钻石的需求量和人工培育钻石的速度，请你计算出货需要的时间。\n\n### 输入格式：\n\n输入在一行中给出钻石的需求量 $$N$$（不超过 $$10^7$$ 的正整数，以`微克拉`为单位）和人工培育钻石的速度 $$v$$（$$1\\le v \\le 200$$，以`微克拉/天`为单位的整数）。\n\n### 输出格式：\n\n在一行中输出培育 $$N$$ 微克拉钻石需要的整数天数。不到一天的时间不算在内。\n\n### 输入样例：\n```in\n102000 130\n```\n\n### 输出样例：\n```out\n784\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '介绍C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '介绍C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '输入输出', 'description': '介绍C语言中的输入输出函数，包括scanf和printf等。'}, {'name': '条件语句', 'description': '介绍C语言中的条件语句，包括if语句和switch语句等。'}, {'name': '循环语句', 'description': '介绍C语言中的循环语句，包括for循环、while循环和do-while循环等。'}, {'name': '数组', 'description': '介绍C语言中的数组，包括一维数组和多维数组等。'}, {'name': '函数', 'description': '介绍C语言中的函数，包括函数的定义、函数的调用和函数的参数传递等。'}, {'name': '指针', 'description': '介绍C语言中的指针，包括指针的定义、指针的运算和指针的应用等。'}, {'name': '结构体', 'description': '介绍C语言中的结构体，包括结构体的定义、结构体的成员和结构体的应用等。'}, {'name': '文件操作', 'description': '介绍C语言中的文件操作，包括文件的打开、文件的读写和文件的关闭等。'}, {'name': '程序设计', 'description': '介绍C语言程序设计的基本思路和方法，包括问题分析、算法设计和程序实现等。'}]"
    },
    {
        "sortId": 334,
        "id": "1510521094363512832",
        "title": "今天我要赢",
        "content": "2018 年我们曾经出过一题，是输出“2018 我们要赢”。今年是 2022 年，你要输出的句子变成了“我要赢！就在今天！”然后以比赛当天的日期落款。\n\n### 输入格式：\n\n本题没有输入。\n\n### 输出格式：\n\n输出分 2 行。在第一行中输出 `I'm gonna win! Today!`，在第二行中用 `年年年年-月月-日日` 的格式输出比赛当天的日期。已知比赛的前一天是 `2022-04-22`。\n\n### 输入样例：\n```in\n无\n```\n\n### 输出样例（第二行的内容要你自己想一想，这里不给出）：\n```out\nI'm gonna win! Today!\n这一行的内容我不告诉你…… 你要自己输出正确的日期呀~\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'教学如何使用printf函数进行基本的输出操作'},{'name':'变量赋值','description':'教学如何使用赋值语句将值赋给变量'},{'name':'字符串拼接','description':'教学如何使用字符串拼接操作符将多个字符串连接起来'},{'name':'日期格式化','description':'教学如何使用printf函数的格式化输出功能将日期格式化为指定格式'}]"
    },
    {
        "sortId": 335,
        "id": "1508657798840528896",
        "title": "对于如下程序段，写出程序的运行结果：",
        "content": " 对于如下程序段，写出程序的运行结果：\n ```c\n#include <stdio.h>\nint main()\n{\n\tint a, b = 23, c = 1, d;\n\ta = (b++, d = c++, c += d = b);\n\tprintf (\"a=%d,b=%d,c=%d,d=%d\\n\", a, b, c, d);\n\treturn 0;\n}\n```\n程序的运行结果：",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逗号运算符'，'description':'逗号运算符是C语言中的一种运算符，它用于连接两个表达式，并返回右侧表达式的值。在上述程序中，逗号运算符被用于多个地方，包括b++，d = c++，c += d = b。逗号运算符的运算顺序是从左到右，所以在这个程序中，b++会先执行，然后d = c++，最后c += d = b。'}，{'name':'赋值运算符'，'description':'赋值运算符是C语言中的一种运算符，用于将右侧表达式的值赋给左侧的变量。在上述程序中，赋值运算符被用于多个地方，包括b = 23，c = 1，d = c++，c += d = b。赋值运算符的运算顺序是从右到左，所以在这个程序中，b = 23会先执行，然后c = 1，再执行d = c++，最后执行c += d = b。'}，{'name':'自增运算符'，'description':'自增运算符是C语言中的一种运算符，用于将变量的值增加1。在上述程序中，自增运算符被用于b++和c++。自增运算符有两种形式，前缀形式和后缀形式，前缀形式会先将变量的值增加1，然后返回增加后的值，后缀形式会先返回变量的值，然后再将变量的值增加1。在这个程序中，b++和c++都是后缀形式，所以b++会先返回b的值，然后再将b的值增加1，c++也是同样的道理。'}，{'name':'格式化输出'，'description':'格式化输出是C语言中的一种输出方式，通过使用特定的格式控制符，可以将变量的值按照指定的格式输出。在上述程序中，使用了格式化输出函数printf，通过指定格式控制符%d，可以将变量的值以十进制整数的形式输出。在这个程序中，使用了printf函数输出了变量a、b、c、d的值。'}]"
    },
    {
        "sortId": 336,
        "id": "1507993371308929024",
        "title": "首尾数",
        "content": "输入一个整数，判断该整数的第一位和最后一位是否相同。\n\n### 输入格式:\n\n一个整数。\n\n### 输出格式:\n\n一个字符串，表示是否相同，相同，输出Yes，不同输出No。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2352\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nYes\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'判断整数的第一位和最后一位是否相同'，'description':'本题主要涉及到整数的输入和输出，以及判断整数的第一位和最后一位是否相同的逻辑判断。'}]"
    },
    {
        "sortId": 337,
        "id": "1506847212546048000",
        "title": "若有定义：int x=256;  则执行语句printf（“%x”,x); 的结果是：",
        "content": "若有定义：int x=256;  则执行语句printf（“%x”,x); 的结果是：",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'在C语言中，不同数据类型之间的转换是常见的操作。在本题中，int类型的变量x被赋值为256，而printf函数中的格式控制符\"%x\"表示以十六进制形式输出整数。因此，执行语句printf(\"%x\",x)会将变量x的值以十六进制形式输出，结果为100。'}]"
    },
    {
        "sortId": 338,
        "id": "1506444920754552832",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\nmain()\n{\n\t\tint x=10,y=10;\n\t\tprintf(\"%d %d\\n\",x--,--y);\n}\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级'，'description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，递增和递减运算符的优先级比算术运算符低，且递增和递减运算符的结合性是从右到左。在给定的代码中，x--和--y都是递减运算符，但是x--是后缀递减运算符，它会先使用x的值再将x减1，而--y是前缀递减运算符，它会先将y减1再使用y的值。因此，printf函数的参数中，x--会先输出10，然后x的值变为9，--y会先将y减1变为9，然后输出9。所以程序的输出结果是10 9。'}]"
    },
    {
        "sortId": 339,
        "id": "1506442026516951040",
        "title": "以下程序的运行结果是",
        "content": "以下程序的运行结果是\n main()\n{\n  int a=65;\n  char c='A';\n  printf(\"%x,%d\",a,c);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'在C语言中，不同数据类型之间的转换是一种常见的操作。在给定的程序中，变量a的类型为int，变量c的类型为char。在printf函数中，%x用于以十六进制形式输出整数，%d用于以十进制形式输出整数。由于%c是用于输出字符的格式控制符，所以在输出时，变量c会被转换为对应的ASCII码值。因此，程序的运行结果是41,65。'}]"
    },
    {
        "sortId": 340,
        "id": "1506441727963578368",
        "title": "putchar()函数的功能是向终端输出",
        "content": "putchar()函数的功能是向终端输出",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'putchar()函数', 'description': 'putchar()函数是C语言中的一个输出函数，用于向终端输出一个字符。它接受一个字符作为参数，并将该字符输出到标准输出设备（通常是终端）。该函数在stdio.h头文件中声明，使用时需要包含该头文件。putchar()函数返回一个整数值，表示成功输出的字符的ASCII码值。'}]"
    },
    {
        "sortId": 341,
        "id": "1506441067528470528",
        "title": "已有如下定义和输入语句：",
        "content": "已有如下定义和输入语句：\nint a,b;\nscanf(\"%d,%d\",&a,&b);\n若要求a、b的值分别为10和20，正确的数据输入是\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数是C语言中用于从标准输入流中读取数据的函数。它可以根据指定的格式字符串将输入的数据赋值给相应的变量。在本题中，scanf函数的格式字符串为\"%d,%d\"，表示要读取两个整数，并且这两个整数之间用逗号隔开。正确的数据输入应该是\"10,20\"，即输入10和20，并用逗号隔开。'}]"
    },
    {
        "sortId": 342,
        "id": "1506440811189387264",
        "title": "已有如下定义和输入语句，",
        "content": "已有如下定义和输入语句，\nint a; char c1,c2;\nscanf(\"%d%c%c\",&a,&c1,&c2);\n若要求a、c1、c2的值分别为10、A和B，正确的数据输入是\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数是C语言中用于从标准输入流中读取数据的函数。它可以根据指定的格式字符串将输入的数据赋值给相应的变量。在本题中，使用了%d%c%c格式字符串来读取一个整数和两个字符。'}]"
    },
    {
        "sortId": 343,
        "id": "1506440535760715776",
        "title": "已知 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是",
        "content": "已知 double a;使用scanf()函数输入一个数值给变量a,正确的函数调用是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'scanf函数', 'description': 'scanf函数是C语言中用于从标准输入流中读取数据的函数。它可以根据指定的格式字符串将输入的数据赋值给相应的变量。在本题中，正确的函数调用是scanf(\"%lf\", &a)，其中%lf表示读取一个双精度浮点数，并将其赋值给变量a。'}]"
    },
    {
        "sortId": 344,
        "id": "1506440079160393728",
        "title": "语句a=(3/4)+3%2;运行后，a的值为",
        "content": "语句a=(3/4)+3%2;运行后，a的值为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级和结合性'，'description':'运算符优先级和结合性是指在表达式中，不同运算符的执行顺序和组合方式。在C语言中，运算符优先级和结合性决定了表达式的计算顺序和结果。在这道题中，需要了解除法运算符和取余运算符的优先级和结合性，以及赋值运算符的执行顺序。'}]"
    },
    {
        "sortId": 345,
        "id": "1506439888545984512",
        "title": "下列程序执行后的输出结果是",
        "content": "下列程序执行后的输出结果是\n```{c}\nmain()\n{\n\tint x='f';\n\tprintf(\"%c \\n\",'A'+(x-'a'+1));\n}\n```",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符类型', 'description': '字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用单引号括起来的字符表示，例如\\'A\\'和\\'f\\'。'}, {'name': '整数类型', 'description': '整数类型是C语言中的一种基本数据类型，用于表示整数。在C语言中，整数类型包括有符号整数和无符号整数，可以使用关键字int和unsigned来声明整数类型的变量。'}, {'name': '字符转换', 'description': '字符转换是C语言中的一种常见操作，用于将字符类型转换为整数类型。在C语言中，字符类型的字符在内存中以ASCII码的形式存储，可以通过将字符类型的字符与整数类型的整数进行运算来进行字符转换。'}, {'name': '格式化输出', 'description': '格式化输出是C语言中的一种常见操作，用于按照指定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数进行格式化输出，通过在输出字符串中使用占位符来指定输出的格式，例如%c表示输出一个字符。'}]"
    },
    {
        "sortId": 346,
        "id": "1506438950431174656",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\nmain()\n{ char c='z';\n  printf(\"%c\",c-25);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符类型', 'description': '字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用char关键字进行声明。字符类型的取值范围是-128到127，可以用单引号括起来的字符字面量来表示。在本题中，程序中声明了一个字符变量c，并将其赋值为字母z。'}, {'name': 'printf函数', 'description': 'printf函数是C语言中用于输出格式化字符串的函数。它可以根据指定的格式将数据输出到标准输出设备（通常是显示器）。在本题中，使用了printf函数来输出字符c-25的结果。'}]"
    },
    {
        "sortId": 347,
        "id": "1506438703663562752",
        "title": "数字字符 0 的ASCII值为48，若有以下程序",
        "content": "数字字符 0 的ASCII值为48，若有以下程序\nmain()\n{\n\tchar a='1',b='2';\n\tprintf(\"%c,\",b++);\n\tprintf(\"%d\\n\",b-a);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'ASCII码','description':'ASCII码是一种将字符映射为数字的编码方式，每个字符对应一个唯一的数字值。在C语言中，可以使用字符类型变量来存储字符，并使用ASCII码进行字符的处理和操作。'}]"
    },
    {
        "sortId": 348,
        "id": "1506438360835047424",
        "title": "若有以下定义和语句",
        "content": "若有以下定义和语句\nchar c1='b',c2='e';\nprintf(\"%d,%c\\n\",c2-c1,c2-'a'+'A');\n则输出结果是\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型和ASCII码','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。ASCII码是一种字符编码标准，用于将字符映射为整数。在C语言中，字符类型的变量可以进行算术运算，例如两个字符相减得到它们在ASCII码表中的差值。字符类型的变量也可以与整数进行运算，例如将字符与一个整数相加或相减，可以得到与该字符在ASCII码表中相对应的另一个字符。本题中，c2-c1得到的是字符'e'与字符'b'在ASCII码表中的差值，即4；c2-'a'+'A'得到的是字符'e'与字符'a'在ASCII码表中的差值加上字符'A'在ASCII码表中的值，即4+65=69。所以最终输出结果是4, E。'}]"
    },
    {
        "sortId": 349,
        "id": "1506437960495808512",
        "title": "有定义语句：int x,y;，若要通过scanf(\"%d,%d\",&x,&y);语句使变量x得到数据11，变量y得到数值12，下",
        "content": "有定义语句：int x,y;，若要通过scanf(\"%d,%d\",&x,&y);语句使变量x得到数据11，变量y得到数值12，下面四组输入形式中，错误的是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数是C语言中用于从标准输入流中读取数据的函数，通过指定格式字符串来读取不同类型的数据。在本题中，通过scanf(\"%d,%d\",&x,&y)语句可以使变量x得到数据11，变量y得到数据12。'}]"
    },
    {
        "sortId": 350,
        "id": "1506437685166227456",
        "title": "若要求从键盘读入含有空格字符的字符串，应使用函数",
        "content": "若要求从键盘读入含有空格字符的字符串，应使用函数",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符串输入','description':'字符串输入是C语言中常见的操作之一，用于从键盘读入含有空格字符的字符串。在C语言中，可以使用函数fgets()来实现字符串输入操作。fgets()函数可以读取一行字符串，包括空格字符，并将其存储到指定的字符数组中。'}]"
    },
    {
        "sortId": 351,
        "id": "1506437455753265152",
        "title": "有以下程序，当运行时输入：a <回车> 后，以下叙述正确的是",
        "content": "有以下程序，当运行时输入：a <回车> 后，以下叙述正确的是\n#include <stdio.h>\nmain()\n{ char c1='2',c2='3';\n\tc1=getchar();\n\tc2=getchar();\n\tputchar(c1);\n\tputchar(c2);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出函数','description':'输入输出函数是C语言中用于进行输入和输出操作的函数，包括getchar()和putchar()函数。getchar()函数用于从标准输入流中读取一个字符，putchar()函数用于将一个字符输出到标准输出流中。'}]"
    },
    {
        "sortId": 352,
        "id": "1506436700645638144",
        "title": "有以下程序,执行后输出结果是",
        "content": "有以下程序,执行后输出结果是\nmain( )\n{ int x=102,y=012;\n  printf(\"%2d,%2d\\n\",x,y);\n} \n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数表示','description':'整数可以用十进制、八进制、十六进制表示，其中十进制表示以0-9的数字开头，八进制表示以0开头，十六进制表示以0x或0X开头。在本题中，x的值为102，y的值为012，分别表示十进制的102和八进制的12。'}，{'name':'printf函数','description':'printf函数是C语言中用于输出的函数，可以输出各种类型的数据。在本题中，使用了printf函数来输出x和y的值，其中\"%2d,%2d\"是格式控制字符串，表示输出两个整数，并且每个整数占两个字符的宽度。'}]"
    },
    {
        "sortId": 353,
        "id": "1506436267515260928",
        "title": "已知字母A的ASCII码为十进制的65，下面程序的输出是",
        "content": "已知字母A的ASCII码为十进制的65，下面程序的输出是\nmain()\n{\nchar ch1,ch2;\nch1='A'+'5'-'3';\nch2='A'+'6'-'3';\nprintf(\"%d,%c\\n\",ch1,ch2);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'ASCII码转换'，'description':'ASCII码是一种将字符映射为数字的编码方式，通过ASCII码可以实现字符与数字之间的转换。本题涉及到了字符的加减运算，需要了解字符的ASCII码值以及字符与数字之间的转换规则。'}]"
    },
    {
        "sortId": 354,
        "id": "1506436021998862336",
        "title": "有以下程序,程序运行后的输出结果是",
        "content": "有以下程序,程序运行后的输出结果是\nmain()\n{\nint m=0256,n=256;\nprintf(\"%o %o\\n\",m,n);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '进制转换', 'description': '进制转换是C语言中的基础知识点之一。在C语言中，可以使用不同的格式符来输出不同进制的数值。在给定的程序中，使用了\"%o\"格式符来输出八进制数值。'}]"
    },
    {
        "sortId": 355,
        "id": "1506435757522829312",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\nmain( )\n{\nint k=17;\nprintf(\"%d,%o,%x \\n\",k,k,k);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念之一，用于定义变量的类型和大小。在C语言中，int类型用于表示整数，%d用于输出十进制整数，%o用于输出八进制整数，%x用于输出十六进制整数。'}, {'name': '变量定义和初始化', 'description': '变量定义和初始化是C语言中的基本操作之一，用于声明变量并给变量赋初值。在给变量k赋值时，使用等号将17赋给k。'}, {'name': '输出格式控制', 'description': '输出格式控制是C语言中的基本操作之一，用于控制输出的格式。在printf函数中，%d用于输出十进制整数，%o用于输出八进制整数，%x用于输出十六进制整数。'}]"
    },
    {
        "sortId": 356,
        "id": "1506435506945339392",
        "title": "若有以下定义和语句:int u=010,v=0x10,w=10;printf(\"%d,%d,%d\\n\",u,v,w);则输出结果",
        "content": "若有以下定义和语句:int u=010,v=0x10,w=10;printf(\"%d,%d,%d\\n\",u,v,w);则输出结果是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数表示','description':'整数可以使用不同的进制表示，如十进制、八进制和十六进制。在C语言中，整数常量可以使用0开头表示八进制数，使用0x开头表示十六进制数。本题中的u=010表示八进制数10，v=0x10表示十六进制数16，w=10表示十进制数10。'}]"
    },
    {
        "sortId": 357,
        "id": "1506434762231267328",
        "title": "若有定义：int b=7; float a=2.5,c=4.7;则表达式a+(b/2*(int)(a+c)/2)%4的值是",
        "content": "若有定义：int b=7; float a=2.5,c=4.7;则表达式a+(b/2*(int)(a+c)/2)%4的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，数据类型转换可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'运算符优先级'，'description':'运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，运算符优先级是由编译器定义的，不同的运算符有不同的优先级。在本题中，表达式中涉及到了多个运算符，包括加法、除法、乘法、取余等运算符。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'类型转换'，'description':'类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，类型转换可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'算术运算符'，'description':'算术运算符是用来进行基本的数学运算的符号。在C语言中，常见的算术运算符包括加法、减法、乘法、除法和取余等。在本题中，表达式中涉及到了加法、除法、乘法和取余等算术运算符。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型运算'，'description':'整型运算是指对整数进行基本的数学运算的过程。在C语言中，整型运算可以使用加法、减法、乘法、除法和取余等运算符来实现。在本题中，表达式中涉及到了整型运算，包括整数除法和取余运算。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'取余运算'，'description':'取余运算是指对两个数进行除法运算后，得到除法的余数。在C语言中，取余运算使用%符号表示。在本题中，表达式中涉及到了取余运算，即(b/2*(int)(a+c)/2)%4。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'强制类型转换'，'description':'强制类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，强制类型转换可以通过在表达式中使用类型转换运算符来实现。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。'},\n{'name':'浮点数运算'，'description':'浮点数运算是指对浮点数进行基本的数学运算的过程。在C语言中，浮点数运算可以使用加法、减法、乘法和除法等运算符来实现。在本题中，表达式中涉及到了浮点数运算，包括浮点数加法和整数除法。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整数运算'，'description':'整数运算是指对整数进行基本的数学运算的过程。在C语言中，整数运算可以使用加法、减法、乘法、除法和取余等运算符来实现。在本题中，表达式中涉及到了整数运算，包括整数除法和取余运算。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'变量定义和赋值'，'description':'变量定义和赋值是指在程序中声明变量并为其赋予初值的过程。在C语言中，变量定义和赋值可以分开进行，也可以合并在一起进行。在本题中，变量b、a和c的定义和赋值分别为int b=7; float a=2.5,c=4.7;。变量定义和赋值是C语言程序中常见的操作，用于存储和处理数据。'},\n{'name':'浮点数转整型'，'description':'浮点数转整型是指将浮点数的值转换为整型的过程。在C语言中，浮点数转整型可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'整型转浮点数'，'description':'整型转浮点数是指将整型的值转换为浮点数的过程。在C语言中，整型转浮点数可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'整数除法'，'description':'整数除法是指对两个整数进行除法运算后，得到除法的商。在C语言中，整数除法使用/符号表示。在本题中，表达式中涉及到了整数除法，即b/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数加法'，'description':'浮点数加法是指对两个浮点数进行加法运算的过程。在C语言中，浮点数加法使用+符号表示。在本题中，表达式中涉及到了浮点数加法，即a+(b/2*(int)(a+c)/2)。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型加法'，'description':'整型加法是指对两个整数进行加法运算的过程。在C语言中，整型加法使用+符号表示。在本题中，表达式中涉及到了整型加法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型取余'，'description':'整型取余是指对两个整数进行除法运算后，得到除法的余数。在C语言中，整型取余使用%符号表示。在本题中，表达式中涉及到了整型取余，即(b/2*(int)(a+c)/2)%4。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数除法'，'description':'浮点数除法是指对两个浮点数进行除法运算后，得到除法的商。在C语言中，浮点数除法使用/符号表示。在本题中，表达式中涉及到了浮点数除法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数取余'，'description':'浮点数取余是指对两个浮点数进行除法运算后，得到除法的余数。在C语言中，浮点数取余使用%符号表示。在本题中，表达式中涉及到了浮点数取余，即(a+(b/2*(int)(a+c)/2))%4。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数转整数'，'description':'浮点数转整数是指将浮点数的值转换为整型的过程。在C语言中，浮点数转整数可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'整型转浮点数'，'description':'整型转浮点数是指将整型的值转换为浮点数的过程。在C语言中，整型转浮点数可以通过强制类型转换来实现。强制类型转换可以改变数据的存储方式和解释方式，从而实现不同数据类型之间的相互转换。在本题中，(int)(a+c)就是将浮点数a和c的和转换为整型。'},\n{'name':'整型乘法'，'description':'整型乘法是指对两个整数进行乘法运算的过程。在C语言中，整型乘法使用*符号表示。在本题中，表达式中涉及到了整型乘法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数乘法'，'description':'浮点数乘法是指对两个浮点数进行乘法运算的过程。在C语言中，浮点数乘法使用*符号表示。在本题中，表达式中涉及到了浮点数乘法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数除法'，'description':'浮点数除法是指对两个浮点数进行除法运算后，得到除法的商。在C语言中，浮点数除法使用/符号表示。在本题中，表达式中涉及到了浮点数除法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型除法'，'description':'整型除法是指对两个整数进行除法运算后，得到除法的商。在C语言中，整型除法使用/符号表示。在本题中，表达式中涉及到了整型除法，即b/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数加法'，'description':'浮点数加法是指对两个浮点数进行加法运算的过程。在C语言中，浮点数加法使用+符号表示。在本题中，表达式中涉及到了浮点数加法，即a+(b/2*(int)(a+c)/2)。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型加法'，'description':'整型加法是指对两个整数进行加法运算的过程。在C语言中，整型加法使用+符号表示。在本题中，表达式中涉及到了整型加法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型除法'，'description':'整型除法是指对两个整数进行除法运算后，得到除法的商。在C语言中，整型除法使用/符号表示。在本题中，表达式中涉及到了整型除法，即b/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'整型乘法'，'description':'整型乘法是指对两个整数进行乘法运算的过程。在C语言中，整型乘法使用*符号表示。在本题中，表达式中涉及到了整型乘法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数乘法'，'description':'浮点数乘法是指对两个浮点数进行乘法运算的过程。在C语言中，浮点数乘法使用*符号表示。在本题中，表达式中涉及到了浮点数乘法，即b/2*(int)(a+c)/2。根据C语言的运算符优先级规则，可以确定表达式的计算顺序，从而得到最终的结果。'},\n{'name':'浮点数除法'，'description':'浮点数除法是指对两个浮点数进行除法运算后，得到除法的商。在C语言中，浮点数除法使用/符号表示。在本题中，表达式中涉及到了浮点数除法，即b/2*(int)(a+c)/2。根据C语"
    },
    {
        "sortId": 358,
        "id": "1506434370813243392",
        "title": "若有定义：int a=2,b=3; float x=3.5,y=2.5;则表达式(float)(a+b)/2+(int)x%(i",
        "content": "若有定义：int a=2,b=3; float x=3.5,y=2.5;则表达式(float)(a+b)/2+(int)x%(int)y的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是将一个数据类型的值转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符来进行数据类型转换。本题涉及到了将整型值转换为浮点型值，以及将浮点型值转换为整型值。'}，{'name':'算术运算符'，'description':'算术运算符用于执行基本的算术运算，包括加法、减法、乘法、除法和取余等。本题涉及到了加法、除法和取余运算符。'}]"
    },
    {
        "sortId": 359,
        "id": "1506434016772112384",
        "title": "若有定义：float x=3.5;int z=8;则表达式 x+z%3/4 的值为",
        "content": "若有定义：float x=3.5;int z=8;则表达式 x+z%3/4 的值为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的计算顺序。在表达式 x+z%3/4 中，% 和 / 运算符的优先级高于 + 运算符，因此先计算 z%3/4，再与 x 相加。'}]"
    },
    {
        "sortId": 360,
        "id": "1506433685669490688",
        "title": "若有定义：int a=6,b=2;char c1='a',c2='b';则表达式a+b%5+c2-c1的值是",
        "content": "若有定义：int a=6,b=2;char c1='a',c2='b';则表达式a+b%5+c2-c1的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级决定了表达式中各个运算符的执行顺序。在表达式a+b%5+c2-c1中，%运算符的优先级高于+和-运算符，所以先计算b%5，然后再进行加法和减法运算。'}, {'name': '数据类型转换', 'description': '在表达式中，不同数据类型的操作数可能需要进行类型转换。在表达式a+b%5+c2-c1中，整数类型的操作数a、b和字符类型的操作数c1、c2会进行隐式类型转换，将字符类型转换为对应的ASCII码值进行计算。'}, {'name': '变量定义和赋值', 'description': '在题目中给出了变量的定义和赋值操作，学生需要理解变量的概念，以及如何进行变量的定义和赋值操作。'}]"
    },
    {
        "sortId": 361,
        "id": "1506433453699313664",
        "title": "下面叙述正确的是",
        "content": "下面叙述正确的是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'数据类型是C语言中的基本概念之一，用于定义变量的类型和范围。在C语言中，常见的数据类型包括整型、浮点型、字符型等。了解数据类型的概念和使用方法是学习C语言的基础。'},\n{'name':'运算符'，'description':'运算符是C语言中用于进行各种运算操作的符号。常见的运算符包括算术运算符、关系运算符、逻辑运算符等。了解运算符的种类和使用规则是学习C语言的重要内容。'},\n{'name':'控制语句'，'description':'控制语句是C语言中用于控制程序流程的语句。常见的控制语句包括条件语句、循环语句、跳转语句等。掌握控制语句的使用方法可以实现程序的灵活控制和流程控制。'},\n{'name':'数组'，'description':'数组是C语言中用于存储多个相同类型数据的集合。了解数组的定义、初始化、访问和操作方法是学习C语言的重要内容。'},\n{'name':'函数'，'description':'函数是C语言中用于封装一段可重复使用的代码的机制。了解函数的定义、调用、参数传递和返回值等概念和使用方法是学习C语言的关键。'},\n{'name':'指针'，'description':'指针是C语言中用于处理内存地址的变量。了解指针的定义、初始化、指针运算和指针与数组的关系等概念和使用方法是学习C语言的难点之一。'},\n{'name':'字符串'，'description':'字符串是C语言中用于表示文本的数据类型。了解字符串的定义、初始化、操作和常见的字符串处理函数是学习C语言的重要内容。'},\n{'name':'文件操作'，'description':'文件操作是C语言中用于读写文件的操作。了解文件的打开、关闭、读写和文件指针等概念和使用方法是学习C语言的扩展内容。'}]"
    },
    {
        "sortId": 362,
        "id": "1506433089148567552",
        "title": "设double型变量a,b,c,d均有值;对代数式(3ad)/(bc)，不正确的C语言表达式是",
        "content": "设double型变量a,b,c,d均有值;对代数式(3ad)/(bc)，不正确的C语言表达式是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中有多种数据类型，包括整型、浮点型、字符型等。在本题中，涉及到了double型变量的使用。'}, {'name':'算术运算符','description':'C语言中的算术运算符包括加法、减法、乘法、除法等。在本题中，涉及到了乘法运算符。'}, {'name':'变量赋值','description':'C语言中使用赋值运算符将一个值赋给变量。在本题中，涉及到了将变量赋值给代数式的操作。'}, {'name':'运算符优先级','description':'C语言中的运算符有不同的优先级，需要根据运算符优先级规则进行计算。在本题中，涉及到了乘法运算符的优先级。'}]"
    },
    {
        "sortId": 363,
        "id": "1506432549864550400",
        "title": "若有定义：int a,b; double x，则以下不符合C语言语法的表达式是",
        "content": "若有定义：int a=2,b=3; double x=7，则以下不符合C语言语法的表达式是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量定义和赋值', 'description': '在C语言中，变量的定义和赋值是基本的操作。通过定义变量并赋予初始值，可以在程序中存储和操作数据。'}, {'name': '数据类型', 'description': 'C语言中有多种数据类型，包括整型、浮点型、字符型等。了解不同数据类型的特点和使用方法是编写C程序的基础。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子，用于进行各种计算和逻辑操作。在C语言中，了解表达式的语法和运算规则是编写正确的程序的关键。'}, {'name': '语法错误', 'description': '在C语言中，语法错误是指程序中违反了C语言的语法规则。了解常见的语法错误和如何避免它们是编写正确的程序的重要一步。'}]"
    },
    {
        "sortId": 364,
        "id": "1506432290635661312",
        "title": "若有定义：int a; 则语句a=(3 * 4)+ 2 % 3;运行后，a的值为",
        "content": "若有定义：int a; 则语句a=(3 * 4)+ 2 % 3;运行后，a的值为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，需要了解加法、乘法和取模运算符的优先级，以及它们在表达式中的结合性。'}]"
    },
    {
        "sortId": 365,
        "id": "1506432079620227072",
        "title": "语句x=(a=3,b=++a);运行后，x、a、b的值依次为",
        "content": "语句x=(a=3,b=++a);运行后，x、a、b的值依次为",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量，语句x=(a=3,b=++a);中的赋值运算符将3赋给a，然后将++a的值赋给b，最后将b的值赋给x。'}，{'name':'逗号运算符','description':'逗号运算符用于将多个表达式连接起来，按顺序执行，并返回最后一个表达式的值。语句x=(a=3,b=++a);中的逗号运算符用于连接a=3和++a，先执行a=3，然后执行++a，最后返回++a的值。'}，{'name':'自增运算符','description':'自增运算符用于将变量的值增加1，语句x=(a=3,b=++a);中的++a将a的值增加1，然后将增加后的值赋给b。'}]"
    },
    {
        "sortId": 366,
        "id": "1506431618104180736",
        "title": "以下程序的输出结果是",
        "content": "以下程序的输出结果是\n#include<stdio.h>\n main()\n{\n int i=10,j=10;\n printf(\"%d,%d\\n\",++i,j--);\n}\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。本题涉及到了自增运算符++和自减运算符--的使用。'}, {'name': '格式化输出', 'description': '格式化输出是C语言中用于按照指定的格式输出数据的方法。本题使用了printf函数进行输出，其中%d是用于输出整数的格式控制符。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型，可以通过赋值操作来改变变量的值。本题涉及到了整型变量的声明和赋值操作。'}, {'name': '主函数', 'description': '主函数是C语言程序的入口函数，程序从主函数开始执行。本题中的main函数是一个无参数无返回值的主函数。'}]"
    },
    {
        "sortId": 367,
        "id": "1506431043557146624",
        "title": "设有如下定义:int x=10,y=3,z;则语句printf(\"%d\\n\",z=(x%y,x/y));的输出结果是",
        "content": "设有如下定义:int x=10,y=3,z;则语句printf(\"%d\\n\",z=(x%y,x/y));的输出结果是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，逗号运算符的优先级较低，所以先执行了除法运算，然后再执行了赋值运算。'}]"
    },
    {
        "sortId": 368,
        "id": "1506430770856083456",
        "title": "C语言中运算对象必须是整型的运算符是",
        "content": "C语言中运算对象必须是整型的运算符是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整型运算符'，'description':'C语言中运算对象必须是整型的运算符'}]"
    },
    {
        "sortId": 369,
        "id": "1506430391391825920",
        "title": "若已定义x和y为double类型，则表达式x=1,y=x+3/2的值是",
        "content": "若已定义x和y为double类型，则表达式x=1,y=x+3/2的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中有多种数据类型，包括整型、浮点型等。在本题中，x和y被定义为double类型，表示它们是浮点型变量。'}，{'name':'运算符','description':'C语言中有多种运算符，包括算术运算符、赋值运算符等。在本题中，表达式x=1,y=x+3/2中涉及到了算术运算符和赋值运算符。'}]"
    },
    {
        "sortId": 370,
        "id": "1506430088403763200",
        "title": "设有定义：float a=2,b=4,h=3;,以下C语言表达式与代数式 1/2((a+b)h) 计算结果不相符的是",
        "content": "设有定义：float a=2,b=4,h=3;,以下C语言表达式与代数式 1/2((a+b)h) 计算结果不相符的是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的计算顺序。在C语言中，乘法和除法的优先级高于加法和减法，所以表达式1/2((a+b)h)会先计算(a+b)h，然后再除以2，与代数式1/2((a+b)h)的计算顺序不一致。'}]"
    },
    {
        "sortId": 371,
        "id": "1506258411612291072",
        "title": "表达式3.6-5/2+1.2+5%2的值是",
        "content": "表达式3.6-5/2+1.2+5%2的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法、除法和取余运算。在C语言中，算术运算符的优先级是由高到低依次为：乘法和除法，加法和减法，取余运算。在表达式3.6-5/2+1.2+5%2中，先进行除法运算5/2，结果为2，然后进行取余运算5%2，结果为1，接着进行加法和减法运算，最后得到表达式的值为3.6-2+1.2+1=4.8。'}]"
    },
    {
        "sortId": 372,
        "id": "1506258039841767424",
        "title": "设变量x为float型且已赋值，则以下语句中能将x中的数值保留到小数点后两位，并将第三位四舍五入的是",
        "content": "设变量x为float型且已赋值，则以下语句中能将x中的数值保留到小数点后两位，并将第三位四舍五入的是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数格式化输出'，'description':'浮点数格式化输出是指将浮点数按照指定的格式输出，包括保留小数位数和四舍五入等操作。在C语言中，可以使用printf函数的格式化输出来实现浮点数的格式化输出。'}]"
    },
    {
        "sortId": 373,
        "id": "1506257769488203776",
        "title": "若变量已正确定义并赋值，下面符合C语言语法的表达式是",
        "content": "若变量已正确定义并赋值，下面符合C语言语法的表达式是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和赋值'，'description':'C语言中，变量的定义和赋值是基本的语法要素之一。通过定义变量并给其赋值，可以在程序中存储和操作数据。'}]"
    },
    {
        "sortId": 374,
        "id": "1506257386078486528",
        "title": "若有定义：int a=8,b=5,c;,执行语句c=a/b+0.4;后，c的值是",
        "content": "若有定义：int a=8,b=5,c;,执行语句c=a/b+0.4;后，c的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数除法运算'，'description':'整数除法运算是指两个整数相除得到的结果仍为整数，即舍弃小数部分，只保留整数部分。在C语言中，整数除法运算使用除号（/）进行计算。当两个整数相除时，如果除不尽，则舍弃小数部分，只保留整数部分。'}]"
    },
    {
        "sortId": 375,
        "id": "1506257070079623168",
        "title": "以下变量x、y、z均为double类型且已正确赋值，不能正确表示数字式子x/(y*z)的C语言表达式是",
        "content": "以下变量x、y、z均为double类型且已正确赋值，不能正确表示数字式子x/(y*z)的C语言表达式是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，除法运算符（/）的优先级高于乘法运算符（*），所以正确的C语言表达式是x / (y * z)。'}]"
    },
    {
        "sortId": 376,
        "id": "1506256795801501696",
        "title": "设int a=12，则执行完语句a+=a-=a*a后，a的值是",
        "content": "设int a=12，则执行完语句a+=a-=a*a后，a的值是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符', 'description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符有多种形式，如+=、-=、*=等。本题中使用了+=和-=运算符。'}, {'name':'运算符优先级', 'description':'在C语言中，不同的运算符有不同的优先级。在本题中，+=和-=运算符的优先级高于乘法运算符*。'}, {'name':'表达式求值顺序', 'description':'在C语言中，表达式的求值顺序是从左到右。在本题中，先执行a-=a*a，再执行a+=a-=a*a。'}]"
    },
    {
        "sortId": 377,
        "id": "1506255810056175616",
        "title": "以下正确的浮点数是",
        "content": "以下正确的浮点数是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '浮点数表示', 'description': '教学描述：浮点数是一种用于表示带有小数部分的数值的数据类型。在C语言中，浮点数可以使用float、double和long double三种类型来表示。浮点数的表示方式包括科学计数法和定点表示法。学生需要了解浮点数的表示方式以及在C语言中如何声明和使用浮点数变量。'}]"
    },
    {
        "sortId": 378,
        "id": "1506255121143054336",
        "title": "以下正确的变量名是",
        "content": "以下正确的变量名是",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量命名规则'，'description':'变量名必须以字母或下划线开头，后面可以是字母、数字或下划线。变量名不能是C语言的关键字。'}, {'name':'标识符'，'description':'标识符是用来标识变量、函数、数组等的名称。在C语言中，标识符是由字母、数字和下划线组成的。'}, {'name':'关键字'，'description':'关键字是C语言中具有特殊含义的单词，不能作为标识符使用。例如，int、float、if等都是C语言的关键字。'}, {'name':'变量类型'，'description':'C语言中有多种变量类型，包括整型、浮点型、字符型等。不同的变量类型在内存中占用的空间大小和表示范围不同。'}, {'name':'正确的变量名'，'description':'正确的变量名是符合C语言命名规则的标识符。在给变量命名时，应该遵循命名规范，使变量名具有可读性和表达力。'}]"
    },
    {
        "sortId": 379,
        "id": "1506254475283152896",
        "title": "设有说明语句：char a='\\x41';则变量a。",
        "content": "设有说明语句：char a='\\x41';则变量a。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符型变量', 'description': '字符型变量用于存储单个字符，可以使用单引号括起来，例如char a;'}]"
    },
    {
        "sortId": 380,
        "id": "1506238682666123264",
        "title": "a+b（多实例测试1）",
        "content": "计算A+B\n### 输入格式:\n\n输入第1行为一个整数n(1≤n≤10)，代表测试的组数。\n下面有n组测试数据，每组1行，为2个整数，为A, B。\n```\n 参考1：\n scanf(\"%d\",&n);\n for(i=1;i<=n;i++)\n{\n        scanf(\"%d %d\",&a,&b);\n        sum=a+b;\n        printf(\"%d\\n\",sum);\n}\n参考2：\n scanf(\"%d\",&n);\n while(n--)\n{\n        scanf(\"%d %d\",&a,&b);\n        sum=a+b;\n        printf(\"%d\\n\",sum);\n}\n\n```\n\n说明：\n* 你的程序在DevCpp等编译器运行的时候，输入输出是“混”在一个显示窗口的，所以，运行时你看到的跟要求的看起来会不太一样。\n* 真相是，输入和输出是分成两个“设备文件”的。它们基本上不像你们在电脑上运行时看到的那样，它们是各自“安好”，独立存在的。\n* 所以不要纠结于你在电脑上运行看起来的布局和OJ上题目的要求有点不太一样，因为电脑上的显示是“混排”的，OJ上是分开的。只要输入、输出部分各自互相对上了即可。\n\n### 输出格式:\n\n对每行输入，输出A+B的值，单独占一行。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n1 2\n3 4\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3\n7\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用scanf和printf函数进行输入输出操作。'}, {'name':'循环结构','description':'学习如何使用for循环和while循环进行重复操作。'}, {'name':'变量和赋值','description':'学习如何声明变量和给变量赋值。'}, {'name':'算术运算','description':'学习如何进行加法运算。'}]"
    },
    {
        "sortId": 381,
        "id": "1506113186821246976",
        "title": "在C语言中，不正确的int类型的常量是。",
        "content": "在C语言中，不正确的int类型的常量是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'int类型的常量','description':'在C语言中，int类型的常量是指整数常量，可以是正整数、负整数或零。'}]"
    },
    {
        "sortId": 382,
        "id": "1506112691679932416",
        "title": "以下不合法的用户标识符是。",
        "content": "以下不合法的用户标识符是。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'合法的用户标识符','description':'合法的用户标识符是由字母、数字和下划线组成的，且不能以数字开头。'}, {'name':'不合法的用户标识符','description':'不合法的用户标识符包括以数字开头的标识符，以及包含特殊字符的标识符。'}]"
    },
    {
        "sortId": 383,
        "id": "1505447320263077888",
        "title": "抽奖",
        "content": "京东每天都有抽京豆活动，奖项设置如图，假设抽奖机会足够多，至少抽奖多少次才会有m次的抽奖结果一样？\n\n![B.png](~/0ff1350d-95a1-4665-8f34-4384aaa9eac2.png)\n\n\n### 输入格式:\n\n输入为一个正整数m(1≤m≤2*10$$^9$$) ，意思已经在题目中给定。\n\n### 输出格式:\n\n输出为一个正整数，即至少抽奖次数。\n\n### 输入样例:\n\n\n\n```in\n2\n```\n\n### 输出样例:\n\n\n\n```out\n9\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来模拟抽奖的过程，直到抽奖结果出现m次一样的情况。'}]"
    },
    {
        "sortId": 384,
        "id": "1505446068800204800",
        "title": "翊飞冲天",
        "content": "2022年2月7日，奥会单板滑雪男子坡面障碍技巧决赛中，苏翊鸣在“雪长城”造型的场地上不断挑战高难度，翻出1800，以一枚银牌创造了中国队在该项目上的冬奥历史最佳成绩。2月15日，在北京冬奥会单板滑雪大跳台比赛中，即将年满18周岁的小将苏翊鸣决赛前两轮以完美的发挥奠定胜局，以182.5的高分再夺一枚金牌，成为我国历史上最年轻的冬奥会冠军。\n\n2月18日，苏翊鸣迎来了18岁生日。北京冬奥会拿下1金1银，苏翊鸣算是收到了一份超完美的成人礼。真是“翊飞冲天创历史，年轻就要无极限！”\n![A.jpg](~/2911ffed-59df-4f5a-b55f-e7b75b6a8960.jpg)\n\n本题非常简单，请你用汉语拼音输出“翊飞冲天”。\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n在一行中按照样例输出，以惊叹号结尾。\n### 输入样例:\n\n\n\n```in\n无\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nYi Fei Chong Tian!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'输出语句'，'description':'C语言中的输出语句，用于将结果输出到屏幕上。'}, {'name':'字符串处理'，'description':'C语言中的字符串处理，包括字符串的定义、赋值、拼接等操作。'}, {'name':'循环结构'，'description':'C语言中的循环结构，包括for循环、while循环等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句、switch语句等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组、二维数组等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、调用、参数传递等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、读写、关闭等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的成员访问等。'}]"
    },
    {
        "sortId": 385,
        "id": "1503307934297763840",
        "title": "C语言标识符中，大小写字母是有区别的。",
        "content": "C语言标识符中，大小写字母是有区别的。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言标识符','description':'C语言标识符是用来命名变量、函数、数组等程序实体的名称。在C语言中，标识符是由字母、数字和下划线组成的，且必须以字母或下划线开头。大小写字母在C语言标识符中是有区别的，即大写字母和小写字母被视为不同的字符。'}]"
    },
    {
        "sortId": 386,
        "id": "1503307243058769920",
        "title": "C语言中的转义字符‘\\t’表示的功能是换行。",
        "content": "C语言中的转义字符‘\\t’表示的功能是换行。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些特殊的字符或者控制字符。在C语言中，转义字符以反斜杠（\\）开头，后面跟着一个或多个字符。转义字符‘\\t’表示的功能是在输出中插入一个制表符，用于在输出中产生水平制表的效果，而不是换行。'}]"
    },
    {
        "sortId": 387,
        "id": "1503307092835577856",
        "title": "在C语言中，单精度的浮点类型用double表示。",
        "content": "在C语言中，单精度的浮点类型用double表示。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '浮点类型', 'description': '浮点类型是C语言中用于表示小数的数据类型。C语言中有两种浮点类型：单精度浮点类型（float）和双精度浮点类型（double）。单精度浮点类型用于表示较小范围内的小数，而双精度浮点类型用于表示较大范围内的小数。在C语言中，单精度的浮点类型用float表示，而不是double。'}]"
    },
    {
        "sortId": 388,
        "id": "1502571153055277056",
        "title": "若有定义int a=100,b=50; 则条件表达式 a>b?a:b的值为 。",
        "content": "若有定义int a=100,b=50; 则条件表达式 a>b?a:b的值为 。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件表达式', 'description':'条件表达式是一种特殊的表达式，它根据条件的真假来选择执行不同的代码块。在C语言中，条件表达式的格式为：条件 ? 表达式1 : 表达式2。如果条件为真，则返回表达式1的值；如果条件为假，则返回表达式2的值。在给定的题目中，条件表达式 a>b?a:b 的值将根据 a 和 b 的大小关系来选择返回 a 或 b 的值。'}]"
    },
    {
        "sortId": 389,
        "id": "1502570501434830848",
        "title": "若有程序段： int a=0,b=2,c;  c= a>0 && ++b;执行完语句后，b的值为  。",
        "content": "若有程序段： int a=0,b=2,c;  c= a>0 && ++b;执行完语句后，b的值为  。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有&&（与）、||（或）、！（非）。在C语言中，逻辑运算符的结果为真（非零）或假（0）。在本题中，表达式a>0 && ++b中，a>0为真，++b会执行，因此c的值为1，b的值为3。'}]"
    },
    {
        "sortId": 390,
        "id": "1502569618609336320",
        "title": "表达式7>6>5的值是 。",
        "content": "表达式7>6>5的值是 。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，大于号（>）的优先级高于小于号（<），因此表达式7>6>5的值是1。'}]"
    },
    {
        "sortId": 391,
        "id": "1502568370116796416",
        "title": "若有int a=10; 则执行完表达式`a += a *= 5`后，a的值为 。",
        "content": "若有int a=10; 则执行完表达式`a += a *= 5`后，a的值为 。\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符'，'description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符有多种形式，包括=、+=、-=、*=、/=等。其中，+=表示将右边的值加到左边的变量上，并将结果赋给左边的变量。在本题中，表达式a += a *= 5表示先将a乘以5，然后将结果加到a上，最后将结果赋给a。'}]"
    },
    {
        "sortId": 392,
        "id": "1502567468514402304",
        "title": "C语言中的标识符只能由三种字符组成，它们是字母、 最和下划线。",
        "content": "C语言中的标识符只能由三种字符组成，它们是字母、 最和下划线。\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符', 'description':'C语言中的标识符是用来给变量、函数、数组等命名的，它只能由字母、数字和下划线组成，且必须以字母或下划线开头。'}]"
    },
    {
        "sortId": 393,
        "id": "1502563883759214592",
        "title": "有如下定义和语句：int a,b;  scanf(\"%d %d\",&a,&b); 若想让a的值为10，b的值为20，正确的数据输",
        "content": "有如下定义和语句：int a,b;  scanf(\"%d %d\",&a,&b); 若想让a的值为10，b的值为20，正确的数据输入方式为（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出函数','description':'输入输出函数是C语言中常用的函数，用于从键盘读取数据或向屏幕输出数据。其中，scanf函数用于从键盘读取数据，printf函数用于向屏幕输出数据。本题涉及到了scanf函数的使用，通过正确的格式化字符串，可以实现将输入的数据赋值给变量。'}]"
    },
    {
        "sortId": 394,
        "id": "1501680651345895424",
        "title": "判断闰年",
        "content": "已知能被 4 整除但不能被 100 整除或者能被 400 整除的年份是闰年。请编程判断一个年份是否是闰年。\n\n### 输入格式:\n\n输入在一行中给出一个年份 year，其范围在 [1900, 9999] 之间。\n\n### 输出格式:\n\n在一行中输出该年份是否闰年。\n\n### 输入样例 1:\n\n```in\n2020\n\n```\n\n### 输出样例 1:\n\n```out\n2020 is a leap year.\n\n```\n\n### 输入样例 2:\n\n```in\n1900\n\n```\n\n### 输出样例 2:\n\n```out\n1900 is not a leap year.\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件语句', 'description': '条件语句是一种根据条件判断来执行不同操作的语句。在C语言中，条件语句使用if-else语句来实现。if语句用于判断一个条件是否为真，如果为真则执行相应的代码块，否则执行else语句中的代码块。在本题中，需要使用条件语句判断给定的年份是否是闰年。'}, {'name': '算术运算符', 'description': '算术运算符是用于执行基本算术操作的运算符。在C语言中，常见的算术运算符包括加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等。在本题中，需要使用取余运算符（%）来判断年份是否能被4整除。'}, {'name': '逻辑运算符', 'description': '逻辑运算符用于对多个条件进行逻辑运算。在C语言中，常见的逻辑运算符包括与运算符（&&）、或运算符（||）、非运算符（!）等。在本题中，需要使用逻辑运算符来判断年份是否满足闰年的条件。'}, {'name': '输出语句', 'description': '输出语句用于将程序中的结果输出到屏幕上。在C语言中，常见的输出语句是printf函数。在本题中，需要使用printf函数将判断结果输出到屏幕上。'}]"
    },
    {
        "sortId": 395,
        "id": "1501126896456998912",
        "title": "关于枚举常量",
        "content": "关于枚举常量\n\n已知枚举常量定义如下：\n\n```\nenum COLOR { white, black = 100, red, blue, green = 300 };\n```\n\n则 blue 的值为 。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'枚举常量'，'description':'枚举常量是一种特殊的数据类型，用于定义一组具有离散取值的常量。在C语言中，枚举常量通过enum关键字进行定义，可以指定每个常量的值，如果没有指定值，则默认从0开始递增。在给定枚举常量定义的情况下，可以通过常量名来访问其对应的值。在上述题目中，枚举常量COLOR定义了white、black、red、blue和green五个常量，其中black的值为100，green的值为300，而blue的值则为101，因为它是在red的基础上递增1。'}]"
    },
    {
        "sortId": 396,
        "id": "1501111048589713408",
        "title": "关于变量定义和初始化",
        "content": "关于变量定义和初始化\n\n下列变量定义语句中，▁▁▁▁▁ 是错误的。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义和初始化'，'description':'变量定义和初始化是C语言中的基础知识点，它涉及到如何声明和定义变量以及如何给变量赋初值。在C语言中，变量定义语句的格式为：数据类型 变量名 = 初始值；其中，数据类型指定了变量的类型，变量名是变量的标识符，初始值是可选的。在变量定义语句中，变量名必须是唯一的，不能重复。在C语言中，变量定义语句中的初始值可以省略，此时变量的值是不确定的。在给变量赋初值时，可以使用常量、表达式或其他变量的值作为初始值。在C语言中，变量定义语句中的初始值必须与变量的类型相匹配，否则会导致编译错误。'}]"
    },
    {
        "sortId": 397,
        "id": "1501103461268328448",
        "title": "关于表达式(值的类型)",
        "content": "关于表达式\n\n表达式 19 / 3 * sqrt(4) + 'A' 的数据类型为 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'数据类型是C语言中的基本概念之一，用于表示不同类型的数据，包括整型、浮点型、字符型等。在表达式 19 / 3 * sqrt(4) + 'A' 中，需要确定表达式的数据类型。'}]"
    },
    {
        "sortId": 398,
        "id": "1501100832559599616",
        "title": "错误的标识符",
        "content": "下列符号中，▁▁▁▁▁ 是错误的 C/C++ 标识符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C/C++标识符','description':'C/C++标识符是用来命名变量、函数、类型等的名称，必须遵循一定的命名规则。本题考察学生对C/C++标识符的理解和识别能力。'}]"
    },
    {
        "sortId": 399,
        "id": "1501095452689436672",
        "title": "关于自增运算",
        "content": "关于自增运算\n\n若有变量定义 int a = 3, b = 2; 则表达式 ++a * b 的值为 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自增运算'，'description':'自增运算是C语言中的一种特殊运算符，用于将变量的值增加1。在表达式++a * b中，++a表示先将变量a的值增加1，然后再参与运算。因此，++a * b的值为4 * 2，即8。'}]"
    },
    {
        "sortId": 400,
        "id": "1500521764944482304",
        "title": "若有变量定义：char c; int i; double x;则表达式c+5`*`i-x的最终计算结果为（    ）类型。",
        "content": "若有变量定义：char c; int i; double x;则表达式`c+5*i-x`的最终计算结果为（    ）类型。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量类型','description':'变量类型是C语言中的基本概念，包括char、int、double等不同类型的变量。在表达式`c+5*i-x`中，c是char类型，i是int类型，x是double类型。'}，{'name':'表达式计算','description':'C语言中的表达式计算是指根据运算符的优先级和结合性，按照一定的规则对表达式进行计算。在表达式`c+5*i-x`中，先计算5*i，然后再计算c+5*i，最后再计算c+5*i-x。'}]"
    },
    {
        "sortId": 401,
        "id": "1500521242469253120",
        "title": "以下不能正确表示代数式",
        "content": "以下不能正确表示代数式\n![000.png](~/b196a3a9-b533-42df-aa3e-04ec0610f512.png)\n的C语言表达式是（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，不同的运算符有不同的优先级，需要根据优先级规则来确定表达式的计算顺序。在这道题中，需要了解C语言中各个运算符的优先级，以正确选择能够正确表示代数式的C语言表达式。'}]"
    },
    {
        "sortId": 402,
        "id": "1500519304788885504",
        "title": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（    ）。",
        "content": "能正确表示逻辑关系：“10≤x≤20” 的C语言表达式是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑关系表达式'，'description':'逻辑关系表达式是C语言中用来表示逻辑关系的一种表达式，可以用来判断两个或多个变量之间的关系。在这道题中，要求能正确表示逻辑关系“10≤x≤20”，需要使用逻辑运算符“&&”来连接两个条件表达式，即“x>=10 && x<=20”。'}]"
    },
    {
        "sortId": 403,
        "id": "1500518916099317760",
        "title": "设m是int型变量，则执行表达式：m=(5,6,7)后，m的值为（    ）。",
        "content": "设m是int型变量，则执行表达式：m=(5,6,7)后，m的值为（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逗号运算符'，'description':'逗号运算符是C语言中的一种运算符，它用于连接多个表达式，并返回最后一个表达式的值。在这个题目中，表达式(5,6,7)会先计算5，然后计算6，最后计算7，并返回7作为整个表达式的值。因此，m的值为7。'}]"
    },
    {
        "sortId": 404,
        "id": "1500517963295277056",
        "title": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（    ）。",
        "content": "在C语言中，若有定义int m=9; 则表达式m/2的结果是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，即将两个整数相除并返回结果的整数部分。'}]"
    },
    {
        "sortId": 405,
        "id": "1500517571001192448",
        "title": "以下选项中正确的定义语句是（    ）。",
        "content": "以下选项中正确的定义语句是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义'，'description':'变量定义是指在程序中声明一个变量并为其分配内存空间的过程。在C语言中，变量定义的语法格式为：数据类型 变量名；'}]"
    },
    {
        "sortId": 406,
        "id": "1500517059067027456",
        "title": "以下标识符中，不合法的是（    ）。",
        "content": "以下标识符中，不合法的是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符的命名规则'，'description':'讲解C语言中标识符的命名规则，包括合法的命名规则和不合法的命名规则。'}]"
    },
    {
        "sortId": 407,
        "id": "1500516346446389248",
        "title": "以下库函数中，（    ）是格式输出函数。",
        "content": "以下库函数中，（    ）是格式输出函数。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式输出函数'，'description':'格式输出函数用于按照指定的格式将数据输出到屏幕或文件中。常见的格式输出函数有printf()、sprintf()和fprintf()等。'}]"
    },
    {
        "sortId": 408,
        "id": "1500501028515221504",
        "title": "关于条件运算",
        "content": "关于条件运算\n\n若有变量定义 int a = 1, b = 2, c = 3, d = 4; 则表达式 a < b ? a : b < c ? b : c < d ? c : d 的值为 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件运算符','description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假来选择不同的值。它的语法形式为：表达式1 ? 表达式2 : 表达式3，如果表达式1的值为真，则整个条件运算符的值为表达式2的值，否则为表达式3的值。在这道题目中，需要理解条件运算符的优先级和结合性，以及根据给定的变量值来计算表达式的结果。'}]"
    },
    {
        "sortId": 409,
        "id": "1500491177839955968",
        "title": "判断大写字母",
        "content": "判断大写字母\n\n判断字符变量 x 是否为大写字母，应使用表达式 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在判断字符变量是否为大写字母时，可以使用字符类型的相关知识点。'}, {'name':'条件语句','description':'条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在判断字符变量是否为大写字母时，可以使用条件语句来判断字符的ASCII码是否在大写字母的范围内。'}, {'name':'ASCII码','description':'ASCII码是一种用于表示字符的编码方式，每个字符都对应一个唯一的ASCII码。在判断字符变量是否为大写字母时，可以使用ASCII码来判断字符的范围。'}]"
    },
    {
        "sortId": 410,
        "id": "1500487507081564160",
        "title": "关于复合赋值",
        "content": "关于复合赋值\n\n若有变量定义 int n = 11, i = 4; 则执行语句 n %= i + 1; 后 n 的值是 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '复合赋值', 'description': '复合赋值是一种简化赋值操作的方式，可以将运算符和赋值操作合并在一起。在C语言中，常见的复合赋值运算符有+=、-=、*=、/=、%=等。通过使用复合赋值运算符，可以简化代码并提高效率。在本题中，涉及到了复合赋值运算符%=的使用。'}]"
    },
    {
        "sortId": 411,
        "id": "1500433976714727424",
        "title": "正确的标识符",
        "content": "下列符号中，▁▁▁▁▁ 是正确的 C/C++ 标识符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C/C++标识符','description':'C/C++标识符是用来命名变量、函数、类等程序实体的名称，必须遵循一定的命名规则。'}]"
    },
    {
        "sortId": 412,
        "id": "1500432216169816064",
        "title": "关于字符常量",
        "content": "关于字符常量\n\n下列关于字符常量的说法中，▁▁▁▁▁ 是错误的。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符常量'，'description':'字符常量是指用单引号括起来的单个字符，可以是字母、数字、特殊字符等。在C语言中，字符常量是一个整数值，对应于字符在字符集中的编码值。'}]"
    },
    {
        "sortId": 413,
        "id": "1500427747506393088",
        "title": "关于枚举常量",
        "content": "关于枚举常量\n\n已知枚举常量定义如下：\n\n```\nenum TOKEN { name, number, plus = 5, miuus, print = 10 };\n```\n\n则下列叙述中 ▁▁▁▁▁ 是错误的。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'枚举常量'，'description':'枚举常量是一种特殊的数据类型，它允许程序员定义一组命名的常量。枚举常量在C语言中用enum关键字来定义，可以为每个枚举常量指定一个值，如果没有指定值，则默认从0开始递增。枚举常量可以用于表示一组相关的常量，比如星期几、月份等。在本题中，已知枚举常量的定义，需要理解枚举常量的取值范围和默认递增规则，以判断下列叙述中哪个是错误的。'}]"
    },
    {
        "sortId": 414,
        "id": "1500401659107479552",
        "title": "合法的实型常量",
        "content": "合法的实型常量\n\n▁▁▁▁▁ 是合法的 C/C++ 实型常量。\n",
        "type": "MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实型常量'，'description':'实型常量是C语言中的一种数据类型，用于表示实数。在C语言中，合法的实型常量包括整数常量、浮点数常量和指数形式的常量。实型常量可以用于进行数值计算和存储实数数据。'}]"
    },
    {
        "sortId": 415,
        "id": "1500393114295209984",
        "title": "非法的实型常量",
        "content": "非法的实型常量\n\n▁▁▁▁▁ 不是合法的 C/C++ 实型常量。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实型常量','description':'实型常量是指在C语言中表示实数的常量，包括浮点数和双精度浮点数。在C语言中，实型常量的表示方式有多种，如十进制表示、科学计数法表示等。实型常量在C语言中的表示方式必须符合一定的规则，否则会被认为是非法的实型常量。'}]"
    },
    {
        "sortId": 416,
        "id": "1499983876420444160",
        "title": "关于固定值(常量)",
        "content": "关于固定值\n\n在程序中固定不变的值称为 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'常量'，'description':'在程序中固定不变的值称为常量。常量可以是整数、浮点数、字符或字符串。在C语言中，常量可以使用关键字const来声明。'}]"
    },
    {
        "sortId": 417,
        "id": "1499977995635527680",
        "title": "错误的标识符",
        "content": "下列符号中，▁▁▁▁▁ 不能作为 C/C++ 标识符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "92",
                        "name": "C++程序设计",
                        "isLeaf": false,
                        "enName": "C++ Programming"
                    },
                    {
                        "id": "93",
                        "name": "C++基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "96",
                        "name": "其它",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C/C++标识符的规则'，'description':'C/C++标识符是用来表示变量、函数、类等各种实体的名称。它由字母、数字和下划线组成，且必须以字母或下划线开头。标识符的长度没有限制，但是只有前31个字符有效。在C/C++中，有一些保留字是不能作为标识符的，比如int、for、if等。除了保留字之外，还有一些特殊符号也不能作为标识符，比如空格、运算符、括号等。本题中的▁▁▁▁▁就是一个特殊符号，不能作为C/C++标识符。'}]"
    },
    {
        "sortId": 418,
        "id": "1498265820655960064",
        "title": "烤地瓜",
        "content": "B站上有一个名为《当萌娃说以后要当烤地瓜老板，妈妈的暖心回答，让网友纷纷点赞》的视频，视频对话如下：\n\n&emsp;萌娃：那我考上清华呢\n\n&emsp;妈妈：那麻麻会为你很骄傲呀\n\n&emsp;萌娃：考上了北大呢\n\n&emsp;妈妈：也会很骄傲的\n\n&emsp;萌娃：那我考上地瓜呢\n\n&emsp;妈妈：啊!!?考上了地瓜呢？考上了地瓜，如果你把地瓜烤的又香又软又甜又美味的话，我觉得也是可以的，也会为你骄傲的！\n\n&emsp;…………\n\n琳看完这条视频后深深感动并决定安排烤地瓜。\n\n\n\n\n![烤地瓜.png](~/7885b92e-316e-483e-b502-ee3329155a44.png)\n\n\n\n\n\n&emsp;在快乐的北街这里有好几家烤地瓜店，而每一家店都有相应的评分`N`（**评分为一个正整数**），琳认为这些评分不是自己评的，所以不具有很大的参考价值，于是她想到一个办法：**列出已给评分的所有真因子（一个数的真因子为不包含它本身的其他正因子），将其中的质因子划去，再对剩下的因子相加求和，这个求和得到的结果即为琳对这个地瓜店的真实评分。**\n\n琳现在太想吃烤地瓜了，但是不想去计算地瓜店的真实评分，同时也不愿意随便找一家地瓜店，刚好你在旁边，你很想帮助她，于是你为琳编写了一个程序来计算地瓜店的真实评分。\n\n\n### 输入格式:\n在一行中给出一个正整数`N`（10<=`N`<=10000），表示一个地瓜店的评分。\n### 输出格式:\n在一行中输出对于琳来说的真实评分。\n### 输入样例1:\n```in\n16\n```\n### 输出样例1:\n```out\n13\n```\n### 样例解释1:\n整数16的真因子有1,2,4,8，其中只有2为质因子，所以16对应的真实评分为1+4+8=13。\n### 输入样例2:\n```in\n17\n```\n### 输出样例2:\n```out\n1\n```\n### 样例解释2:\n整数17的真因子只有1，所以17对应的真实评分为1。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '质因子', 'description': '质因子是指一个数的真因子中的质数因子。'}, {'name': '真因子', 'description': '真因子是指一个数的所有因子中不包含它本身的其他正因子。'}, {'name': '循环结构', 'description': '循环结构是指在程序中重复执行某一段代码的结构。'}, {'name': '条件语句', 'description': '条件语句是指根据条件的真假来执行不同的代码块的结构。'}, {'name': '变量', 'description': '变量是指用来存储数据的一种数据类型。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交互的过程。'}, {'name': '运算符', 'description': '运算符是指用来进行数学运算或逻辑运算的符号。'}, {'name': '数据类型', 'description': '数据类型是指变量所能存储的数据的种类。'}, {'name': '函数', 'description': '函数是指一段完成特定任务的代码块，可以被多次调用。'}, {'name': '数组', 'description': '数组是指一组相同类型的数据的集合，可以通过索引访问其中的元素。'}, {'name': '指针', 'description': '指针是指存储变量地址的变量，可以通过指针来访问和修改变量的值。'}, {'name': '字符串', 'description': '字符串是指由字符组成的序列，用来表示文本。'}, {'name': '文件操作', 'description': '文件操作是指对计算机文件进行读取、写入、修改等操作的过程。'}, {'name': '结构体', 'description': '结构体是指将多个不同类型的数据组合在一起形成的新的数据类型。'}, {'name': '指针运算', 'description': '指针运算是指对指针进行加减运算来实现对内存的访问。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行过程中根据需要动态地分配和释放内存空间。'}, {'name': '递归', 'description': '递归是指一个函数调用自身的过程。'}, {'name': '排序算法', 'description': '排序算法是指将一组数据按照特定的顺序进行排列的算法。'}, {'name': '查找算法', 'description': '查找算法是指在一组数据中查找指定元素的算法。'}, {'name': '数据结构', 'description': '数据结构是指组织和存储数据的方式，包括线性结构、树结构、图结构等。'}, {'name': '算法复杂度', 'description': '算法复杂度是指衡量算法执行效率的指标，包括时间复杂度和空间复杂度。'}, {'name': '位运算', 'description': '位运算是指对二进制数进行按位操作的运算。'}, {'name': '指针数组', 'description': '指针数组是指数组中的元素为指针类型的数组。'}, {'name': '多维数组', 'description': '多维数组是指数组中的元素为数组类型的数组。'}, {'name': '预处理指令', 'description': '预处理指令是指在编译之前对源代码进行处理的指令。'}, {'name': '宏定义', 'description': '宏定义是指用一个标识符来表示一段代码，编译时会将该标识符替换为对应的代码。'}, {'name': '文件包含', 'description': '文件包含是指在源代码中引入其他文件的内容。'}, {'name': '指针函数', 'description': '指针函数是指返回值为指针类型的函数。'}, {'name': '结构体指针', 'description': '结构体指针是指指向结构体变量的指针。'}, {'name': '链表', 'description': '链表是指通过指针将一组数据按照特定顺序连接起来的数据结构。'}, {'name': '栈', 'description': '栈是指一种具有特定操作顺序的线性数据结构，后进先出。'}, {'name': '队列', 'description': '队列是指一种具有特定操作顺序的线性数据结构，先进先出。'}, {'name': '树', 'description': '树是指一种具有层次结构的数据结构，由节点和边组成。'}, {'name': '图', 'description': '图是指由节点和边组成的一种非线性数据结构。'}, {'name': '递归函数', 'description': '递归函数是指在函数内部调用自身的函数。'}, {'name': '指针参数', 'description': '指针参数是指函数的参数为指针类型的参数。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行各种操作，如拼接、截取、替换等。'}, {'name': '文件读写', 'description': '文件读写是指对计算机文件进行读取和写入操作。'}, {'name': '错误处理', 'description': '错误处理是指在程序中对可能出现的错误进行处理的过程。'}, {'name': '模块化编程', 'description': '模块化编程是指将程序分解为多个模块，每个模块负责完成特定的功能。'}, {'name': '指针操作', 'description': '指针操作是指对指针进行赋值、取值、比较等操作。'}, {'name': '文件指针', 'description': '文件指针是指用来指示文件位置的指针。'}, {'name': '二叉树', 'description': '二叉树是指每个节点最多有两个子节点的树。'}, {'name': '哈希表', 'description': '哈希表是指通过哈希函数将关键字映射到存储位置的数据结构。'}, {'name': '堆', 'description': '堆是指一种特殊的树形数据结构，满足堆序性质。'}, {'name': '图算法', 'description': '图算法是指在图上进行各种操作和计算的算法。'}, {'name': '动态规划', 'description': '动态规划是指通过将问题分解为子问题来求解的一种算法思想。'}, {'name': '回溯算法', 'description': '回溯算法是指通过试探和回溯的方式来求解问题的算法。'}, {'name': '贪心算法', 'description': '贪心算法是指通过每一步选择局部最优解来求解整体最优解的算法。'}, {'name': '分治算法', 'description': '分治算法是指将问题分解为多个子问题来求解的一种算法思想。'}, {'name': '搜索算法', 'description': '搜索算法是指通过遍历问题的解空间来求解问题的算法。'}, {'name': '排序算法', 'description': '排序算法是指将一组数据按照特定的顺序进行排列的算法。'}, {'name': '查找算法', 'description': '查找算法是指在一组数据中查找指定元素的算法。'}, {'name': '数据结构', 'description': '数据结构是指组织和存储数据的方式，包括线性结构、树结构、图结构等。'}, {'name': '算法复杂度', 'description': '算法复杂度是指衡量算法执行效率的指标，包括时间复杂度和空间复杂度。'}, {'name': '位运算', 'description': '位运算是指对二进制数进行按位操作的运算。'}, {'name': '指针数组', 'description': '指针数组是指数组中的元素为指针类型的数组。'}, {'name': '多维数组', 'description': '多维数组是指数组中的元素为数组类型的数组。'}, {'name': '预处理指令', 'description': '预处理指令是指在编译之前对源代码进行处理的指令。'}, {'name': '宏定义', 'description': '宏定义是指用一个标识符来表示一段代码，编译时会将该标识符替换为对应的代码。'}, {'name': '文件包含', 'description': '文件包含是指在源代码中引入其他文件的内容。'}, {'name': '指针函数', 'description': '指针函数是指返回值为指针类型的函数。'}, {'name': '结构体指针', 'description': '结构体指针是指指向结构体变量的指针。'}, {'name': '链表', 'description': '链表是指通过指针将一组数据按照特定顺序连接起来的数据结构。'}, {'name': '栈', 'description': '栈是指一种具有特定操作顺序的线性数据结构，后进先出。'}, {'name': '队列', 'description': '队列是指一种具有特定操作顺序的线性数据结构，先进先出。'}, {'name': '树', 'description': '树是指一种具有层次结构的数据结构，由节点和边组成。'}, {'name': '图', 'description': '图是指由节点和边组成的一种非线性数据结构。'}, {'name': '递归函数', 'description': '递归函数是指在函数内部调用自身的函数。'}, {'name': '指针参数', 'description': '指针参数是指函数的参数为指针类型的参数。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行各种操作，如拼接、截取、替换等。'}, {'name': '文件读写', 'description': '文件读写是指对计算机文件进行读取和写入操作。'}, {'name': '错误处理', 'description': '错误处理是指在程序中对可能出现的错误进行处理的过程。'}, {'name': '模块化编程', 'description': '模块化编程是指将程序分解为多个模块，每个模块负责完成特定的功能。'}, {'name': '指针操作', 'description': '指针操作是指对指针进行赋值、取值、比较等操作。'}, {'name': '文件指针', 'description': '文件指针是指用来指示文件位置的指针。'}, {'name': '二叉树', 'description': '二叉树是指每个节点最多有两个子节点的树。'}, {'name': '哈希表', 'description': '哈希表是指通过哈希函数将关键字映射到存储位置的数据结构。'}, {'name': '堆', 'description': '堆是指一种特殊的树形数据结构，满足堆序性质。'}, {'name': '图算法', 'description': '图算法是指在图上进行各种操作和计算的算法。'}, {'name': '动态规划', 'description': '动态规划是指通过将问题分解为子问题来求解的一种算法思想。'}, {'name': '回溯算法', 'description': '回溯算法是指通过试探和回溯的方式来求解问题的算法。'}, {'name': '贪心算法', 'description': '贪心算法是指通过每一步选择局部最优解来求解整体最优解的算法。'}, {'name': '分治算法', 'description': '分治算法是指将问题分解为多个子问题来求解的一种算法思想。'}, {'name': '搜索算法', 'description': '搜索"
    },
    {
        "sortId": 419,
        "id": "1497845736300220416",
        "title": "两个数交换",
        "content": "试编写一个程序，从键盘输入变量x和y的值，将它们打印（显示到屏幕）出来；然后将二者的值进行交换，并打印交换后的x、y值。例如，x和y的输入值分别是1和2，交换后，x的值为2而y的值为1。\n提示：要将变量x和y的值交换，应定义并使用临时变量temp：先将x的值存放到临时变量temp中，然后将y的值存放到x中，最后将temp中的值存放到y中。\n\n### 输入格式:\n\n\"%d%d\"\n\n### 输出格式:\n\n\"%d %d\"\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n2 1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'本题考察了变量的定义和赋值，以及使用临时变量进行变量交换的方法。学生需要了解变量的概念，以及如何通过键盘输入变量的值，并将其打印到屏幕上。同时，学生还需要掌握使用临时变量进行变量交换的方法，即先将一个变量的值存放到临时变量中，然后将另一个变量的值存放到第一个变量中，最后将临时变量中的值存放到第二个变量中。'}]"
    },
    {
        "sortId": 420,
        "id": "1497810713643716608",
        "title": "日期差",
        "content": "&emsp;pltdhll特别喜欢的日期是6月15日，因为这是一年中最中间的一天（pltdhll认为6是12的一半，15是30的一半，所以6月15日是一年最中间的一天）。\n\n&emsp;同时他也有其他喜欢的日期，比如2022年3月19日也就是今天，因为这是成都信息工程大学第一届团体程序设计天梯赛校赛的举办时间。\n\n&emsp;他突然想知道某个日期和今天相差的天数，但是手算太麻烦了，写代码的话他感觉代码量太多了，刚好今天遇见了正在看题干的你，想请你帮他完成这个程序。有些日期太久远了，所以你只需要保证你的程序在1905年初（1905年01月01日）到2995年底（2995年12月31日）的正确性即可。\n\n&emsp;你的程序只要计算出pltdhll给你的日期与今天相差的天数，然后给出相应的提示语句即可。\n\n&emsp;注意，今天是`2022`年`3`月`19`日！\n\n&emsp;注意，今天是`2022`年`3`月`19`日！\n\n&emsp;注意，今天是`2022`年`3`月`19`日！\n\n提示：闰年是公历中的名词，分为普通闰年和世纪闰年。公历年份是4的倍数的，且不是100的倍数，为普通闰年；公历年份是整百数的，必须是400的倍数才是世纪闰年。\n### 输入格式:\n在一行中给出一个八位数的日期，其格式为`yyyymmdd`，`yyyy`表示年，`mm`表示月，`dd`表示天。\n\n题目保证所给日期在1905年初（**1905年01月01日**）到2995年底（**2995年12月31日**）之间。\n\n### 输出格式:\n根据下面提示以及相差的天数打印出相应的内容。\n\n&emsp;若所给日期在今天之前，则输出`guo qv xx tian`,其中`xx`表示相差天数。\n\n&emsp;若所给日期在今天之后，则输出`hai you xx tian`,其中`xx`表示相差天数。\n\n&emsp;若所给日期就是今天，则输出`jiu shi jin tian!`\n\n### 输入样例1:\n```in\n20220319\n```\n### 输出样例1:\n```out\njiu shi jin tian!\n```\n### 输入样例2:\n```in\n20220615\n```\n### 输出样例2:\n```out\nhai you 88 tian\n```\n### 输入样例3:\n```in\n20210615\n```\n### 输出样例3:\n```out\nguo qv 277 tian\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '日期计算', 'description': '根据给定的日期与今天的日期相比较，计算相差的天数，并根据相差天数输出相应的提示语句。'}]"
    },
    {
        "sortId": 421,
        "id": "1497522884217585664",
        "title": "拉格朗日中值定理",
        "content": "&emsp;拉格朗日中值定理又称拉氏定理，是微分学中的基本定理之一，它反映了可导函数在闭区间上的整体的平均变化率与区间内某点的局部变化率的关系。拉格朗日中值定理是罗尔中值定理的推广，同时也是柯西中值定理的特殊情形，是泰勒公式的弱形式。\n\n拉格朗日中值定理表述如下：\n\n&emsp;如果函数$$f(x)$$满足：\n\n&emsp;&emsp;(1) 在闭区间$$[a,b]$$上连续;\n\n&emsp;&emsp;(2) 在开区间$$(a,b)$$内可导；\n\n&emsp;那么在开区间$$(a,b)$$内至少有一点$$ε(a<ε<b)$$使等式$$f(b)-f(a)=f'(ε)(b-a)$$成立。\n\n\n精彩的大学生活体现在高等数学中，拉格朗日中值定理也是快乐的源泉之一。\n\n小周在学这个定理的时候意识到虽然这个定理很漂亮，但是这个点`ε`其实并不好找，于是向高数成绩特别好的你求助。\n\n为了方便你研究这个问题，小周贴心地令 $$f(x)=x^2$$ ,然后只告诉你`a`与`b`的值(`a`,`b`即为区间的左、右端点),你只需将点`ε`求出后输出即可。\n\n### 输入格式:\n\n输入在一行中给出两个整数，分别为`a`和`b`。其中，`a`表示区间的左端点，`b`表示区间的右端点。\n\n题目保证整数`a`，`b`均在`int`类型可表示范围内。\n\n### 输出格式:\n\n在一行中输出点`ε`的值。结果保留1位小数。\n\n### 输入样例:\n\n\n```in\n1 3\n```\n\n### 输出样例:\n\n```out\n2.0\n```\n### 样例解释:\n将$$a=1，b=3$$代入方程$$f(b)-f(a)=f'(ε)(b-a)$$，有$$3^2-1^2=2*ε*(3-1)⇒8=4*ε⇒ε=2.0$$，即$$ε=2.0$$",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '拉格朗日中值定理', 'description': '拉格朗日中值定理是微分学中的基本定理之一，它反映了可导函数在闭区间上的整体的平均变化率与区间内某点的局部变化率的关系。拉格朗日中值定理是罗尔中值定理的推广，同时也是柯西中值定理的特殊情形，是泰勒公式的弱形式。'}]"
    },
    {
        "sortId": 422,
        "id": "1497496341442109440",
        "title": "HELLO 2022CUIT-GPLT",
        "content": "\n![OIP-C.jpg](~/8f755fe9-e293-4443-943a-8b1e332d1705.jpg)\n\n&emsp;欢迎参加第一届“成都信息工程大学团体程序设计天梯赛”。\n\n&emsp;本题很简单，你只需要在一行中输出“HELLO 2022CUIT-GPLT”（不包含引号）即可。\n\n\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n```out\nHELLO 2022CUIT-GPLT\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '输出语句用于将程序中的结果显示在屏幕上，可以使用printf函数来实现。在C语言中，使用双引号括起来的字符串表示要输出的内容，可以包含普通字符和格式控制符。格式控制符用于指定输出的格式，例如%d表示输出整数，%f表示输出浮点数，%s表示输出字符串等。在本题中，要求输出字符串“HELLO 2022CUIT-GPLT”。'}]"
    },
    {
        "sortId": 423,
        "id": "1496768444169850880",
        "title": "出勤率几何",
        "content": "本题目要求读入2个整数A和B，其中A是应到人数，B是实到人数，请编程输出其出勤率（百分比形式，保留一位小数）。\n\n### 输入格式:\n在一行中给出2个不超过1000的非负整数A和B，以空格分隔，你可以假定这两个数据都是合理数据。\n\n### 输出格式:\n在一行中以\\出勤率=B/A=百分比%\\的形式输出出勤率（保留一位小数，除汉字外均为西文字符）。\n\n### 输入样例:\n```in\n76 71\n```\n\n### 输出样例:\n```out\n\\出勤率=71/76=93.4%\\\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'输入输出'，'description':'C语言中的输入和输出函数的使用方法。'}, {'name':'运算符'，'description':'C语言中的各种运算符的使用方法。'}, {'name':'条件语句'，'description':'C语言中的条件语句的使用方法。'}, {'name':'格式化输出'，'description':'C语言中的格式化输出函数的使用方法。'}, {'name':'类型转换'，'description':'C语言中的类型转换的概念和使用方法。'}, {'name':'控制语句'，'description':'C语言中的控制语句的使用方法。'}, {'name':'函数'，'description':'C语言中的函数的概念和使用方法。'}, {'name':'数组'，'description':'C语言中的数组的概念和使用方法。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法。'}, {'name':'字符串'，'description':'C语言中的字符串的概念和使用方法。'}, {'name':'文件操作'，'description':'C语言中的文件操作函数的使用方法。'}, {'name':'宏定义'，'description':'C语言中的宏定义的概念和使用方法。'}, {'name':'结构体'，'description':'C语言中的结构体的概念和使用方法。'}, {'name':'位运算'，'description':'C语言中的位运算的概念和使用方法。'}, {'name':'递归'，'description':'C语言中的递归的概念和使用方法。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配的概念和使用方法。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令的概念和使用方法。'}, {'name':'多文件编程'，'description':'C语言中的多文件编程的概念和使用方法。'}, {'name':'错误处理'，'description':'C语言中的错误处理的概念和使用方法。'}, {'name':'数据结构'，'description':'C语言中的数据结构的概念和使用方法。'}, {'name':'算法'，'description':'C语言中的算法的概念和使用方法。'}, {'name':'编程规范'，'description':'C语言中的编程规范和代码风格的要求。'}]"
    },
    {
        "sortId": 424,
        "id": "1495008928982183936",
        "title": "译码: 整数->字符(填空)",
        "content": "下面的程序输入整数 ( 0 ～ 9 )，输出对应的数字字符 ( '0' ～ '9' )。\n\n请在空白处填写适当内容完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tchar sym;\n\tint val;\n\tscanf(\" %d\", &val);\n\n\t____________\n\n\tprintf(\"%c\\n\", sym);\n\treturn 0;\n}\n```\n\n#### 输入格式\n> 数值\n\n#### 输出格式\n> 数字字符\n\n#### 输入样例\n```in\n5\n\n```\n#### 输出样例\n```out\n5\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用scanf函数进行输入和printf函数进行输出。'}]"
    },
    {
        "sortId": 425,
        "id": "1495006892165246976",
        "title": "译码: 字符->整数(填空)",
        "content": "下面的程序输入数字字符 ( '0' ～ '9' )，输出对应的整数 ( 0 ～ 9 )。\n\n请在空白处填写适当内容完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tchar sym;\n\tint val;\n\tscanf(\" %c\", &sym);\n\n\t____________\n\n\tprintf(\"%d\\n\", val);\n\treturn 0;\n}\n```\n\n#### 输入格式\n> 数字字符\n\n#### 输出格式\n> 数值\n\n#### 输入样例\n```in\n5\n\n```\n#### 输出样例\n```out\n5\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符转整数','description':'字符转整数是将字符表示的数字转换为对应的整数值。在C语言中，可以使用ASCII码表来实现字符转整数的功能。'}]"
    },
    {
        "sortId": 426,
        "id": "1494894802176376832",
        "title": "大写转小写(库函数)(填空)",
        "content": "下面的程序输入大写字母，输出对应的小写字母。\n\n请在空白处填写表达式完成该程序。\n\n```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main()\n{\n\tchar lower, upper;\n\tupper = getchar();\n\n\t__________\n\n\tputchar(lower);\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\nE\n\n```\n#### 输出样例\n```out\ne\n\n```\n\n---\n\n注：请使用 C 库函数。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'getchar()', 'description': 'getchar()函数用于从标准输入流中读取一个字符，并返回该字符的ASCII码值。'}, {'name': 'putchar()', 'description': 'putchar()函数用于将一个字符输出到标准输出流中。'}, {'name': 'ctype.h', 'description': 'ctype.h头文件中包含了一些用于字符处理的函数，如判断字符是否为字母、数字等。'}]"
    },
    {
        "sortId": 427,
        "id": "1494893215282429952",
        "title": "小写转大写(库函数)(填空)",
        "content": "下面的程序输入小写字母，输出对应的大写字母。\n\n请在空白处填写表达式完成该程序。\n\n```c\n#include <stdio.h>\n#include <ctype.h>\n\nint main()\n{\n\tchar lower, upper;\n\tlower = getchar();\n\n\t__________\n\n\tputchar(upper);\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\ne\n\n```\n#### 输出样例\n```out\nE\n\n```\n\n---\n\n注：请使用 C 库函数。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'getchar()', 'description': 'getchar()函数用于从标准输入流中读取一个字符，并返回该字符的ASCII码值。'}, {'name': 'putchar()', 'description': 'putchar()函数用于将一个字符输出到标准输出流中。'}, {'name': 'ctype.h', 'description': 'ctype.h头文件中包含了一些用于字符处理的函数，如判断字符的大小写、字母、数字等。'}]"
    },
    {
        "sortId": 428,
        "id": "1494890147900571648",
        "title": "大写转小写(表达式)(填空)",
        "content": "下面的程序输入大写字母，输出对应的小写字母。\n\n请在空白处填写表达式完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tchar lower, upper;\n\tupper = getchar();\n\n\t__________\n\n\tputchar(lower);\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\nE\n\n```\n#### 输出样例\n```out\ne\n\n```\n\n---\n\n注：请不要使用 C 库函数。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符类型', 'description': '字符类型是C语言中的一种基本数据类型，用于表示单个字符。在本题中，需要了解字符类型的基本操作，如字符的输入和输出。'}, {'name': '字符的大小写转换', 'description': '本题需要了解字符的大小写转换规则，即大写字母转换为小写字母。可以通过ASCII码表来实现大小写转换。'}]"
    },
    {
        "sortId": 429,
        "id": "1494889555906867200",
        "title": "小写转大写(表达式)(填空)",
        "content": "下面的程序输入小写字母，输出对应的大写字母。\n\n请在空白处填写表达式完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tchar lower, upper;\n\tlower = getchar();\n\n\t__________\n\n\tputchar(upper);\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\ne\n\n```\n#### 输出样例\n```out\nE\n\n```\n\n---\n\n注：请不要使用 C 库函数。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在本题中，需要使用字符类型来接收输入的小写字母和输出对应的大写字母。'},{'name':'字符的ASCII码','description':'在C语言中，每个字符都对应一个ASCII码。小写字母和大写字母的ASCII码之间有固定的关系，可以通过对小写字母的ASCII码进行适当的运算得到对应的大写字母的ASCII码。在本题中，需要使用字符的ASCII码来完成小写字母到大写字母的转换。'},{'name':'输入输出函数','description':'在C语言中，可以使用getchar函数从标准输入中读取一个字符，使用putchar函数将一个字符输出到标准输出中。在本题中，需要使用getchar函数接收输入的小写字母，使用putchar函数输出对应的大写字母。'}]"
    },
    {
        "sortId": 430,
        "id": "1494011399952465920",
        "title": "字符->ASCII码(填空)",
        "content": "下面的程序段输入字符，输出该字符的ASCII码。\n\n请在空白处填写适当内容，完成此程序。\n\n```c\nchar x;\nscanf(\"%c\", &x);\nprintf( __________ , x);\n```\n\n#### 输入样例\n```in\nd\n```\n\n#### 输出样例\n```out\n100\n\n```\n\n注：输出ASCII码后要换行。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'输入和输出是C语言程序中非常重要的部分。在这个例子中，使用了scanf函数从标准输入中读取一个字符，然后使用printf函数将该字符的ASCII码输出到标准输出。'}]"
    },
    {
        "sortId": 431,
        "id": "1493953429340225536",
        "title": "ASCII码->字符(填空)",
        "content": "下面的程序段输入字符的ASCII码，输出对应的字符。\n\n请在空白处填写适当内容，完成此程序。\n\n```c\nint x;\nscanf(\"%d\", &x);\nprintf( __________ , x);\n```\n\n#### 输入样例\n```in\n100\n\n```\n\n#### 输出样例\n```out\nd\n\n```\n\n注：输出字符后要换行。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'输入和输出是C语言程序中非常重要的部分。通过scanf函数可以从标准输入中读取数据，通过printf函数可以将数据输出到标准输出。在本题中，使用scanf函数读取一个整数，然后使用printf函数输出对应的字符。'}]"
    },
    {
        "sortId": 432,
        "id": "1493521651005206528",
        "title": "竹里馆(填空)",
        "content": "下面的程序在屏幕上显示王维的《竹里馆》诗。\n\n```\n独坐幽篁里，\n弹琴复长啸。\n深林人不知，\n明月来相照。\n```\n\n注：其中标点符号为中文全角符号。\n\n请在空白处填写一条语句(分4行)完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：只调用一次 printf 函数，将字符串分成 4 段，每行写一段，每段包含一行诗句。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n独坐幽篁里，\n弹琴复长啸。\n深林人不知，\n明月来相照。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'printf函数是C语言中用于输出信息的函数，可以将指定的字符串输出到屏幕上。在这道题目中，需要使用printf函数将诗句分成4段输出。'}]"
    },
    {
        "sortId": 433,
        "id": "1493038624793767936",
        "title": "星期几",
        "content": "我们约定（不是规定），整数0，1，……6，表示星期日，星期一……星期六，而整数7，8代表星期天和星期一（星期以7天为一个周期，循环发生），余类推，整数-1代表星期六（从星期天倒数第一天），整数-2代表星期五（从星期天倒数第二天），余类推，如此，-66代表的是星期几？（-66%7=-3：星期四）。   编写程序，输入两个整数，第一个整数代表今天的星期，第二个整数表示偏移量（正数向后偏移：多少天以后，负数向前偏移：多少天以前），要求分别打印出今天的星期以及偏移后的星期。\n\n### 输入格式:\n\n以空格分隔的两个整数（当前星期和偏移天数）。你可以假定输入的星期、偏移量、偏移以后的值均在整数范围内。\n\n### 输出格式:\n\n分别在两行输出两个整数：第一是行是当前的星期（应该是0到6中的一个）；第二行是偏移若干天后的星期（也应该是0到6中的某一个）。\n\n### 输入样例1:\n空格分隔的两个整数。例如：\n```in\n-66 88\n```\n\n### 输出样例1:\n\n分别在两行中输出两个星期（当前和偏移后的星期）。例如：\n\n```out\n4\n1\n```\n\n### 输入样例2:\n空格分隔的两个整数。例如：\n```in\n999 -1024\n```\n\n### 输出样例2:\n\n分别在两行中输出两个星期（当前和偏移后的星期）。例如：\n\n```out\n5\n3\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'取余运算','description':'取余运算是C语言中的一种运算符，用于求两个整数相除的余数。在本题中，可以使用取余运算来计算偏移后的星期。'}, {'name':'条件语句','description':'条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断偏移后的星期是正数还是负数，并进行相应的计算。'}, {'name':'输入输出','description':'输入输出是C语言中的一种基本操作，用于从用户处获取输入数据，并将结果输出给用户。在本题中，需要使用输入输出来获取当前星期和偏移天数，并将计算结果输出给用户。'}]"
    },
    {
        "sortId": 434,
        "id": "1491976520243625984",
        "title": "青蛙爬井",
        "content": "一只青蛙在 $$h$$ 米深的井底，它白天往上爬 $$a$$ 米，夜晚下滑 $$b$$ 米，这只青蛙用了 $$d$$ 天才从井中爬出。请编写程序，输入 $$h$$、$$a$$ 和 $$b$$，计算并输出 $$d$$ ？\n\n#### 输入格式\n> $$h, a, b \\ \\  (h \\geq a \\gt b \\gt 0)$$\n\n#### 输出格式\n> $$d$$\n\n#### 输入样例\n```in\n10 5 2\n\n```\n#### 输出样例\n```out\n3\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。在本题中，可以使用循环结构来模拟青蛙爬井的过程。'}，{'name':'条件判断'，'description':'条件判断是根据某个条件的真假来决定程序的执行路径。在本题中，可以使用条件判断来判断青蛙是否已经爬出井底。'}]"
    },
    {
        "sortId": 435,
        "id": "1489551016919367680",
        "title": "推算钟点",
        "content": "若告诉你现在的时间，请问过几分钟后是什么时间？\n\n请编写程序，输入现在的时间(小时数、分钟数)和所过的时间(分钟数)，计算并输出未来的时间(时、分)。\n\n#### 输入格式\n\n> 现在的时间(时:分)  \n> 所过的时间(分钟数)\n\n注：现在的时间，小时数在 0 ~ 23 范围内， 分钟数在 0 ~ 59 范围内。\n所过的时间，分钟数为自然数。\n\n#### 输出格式\n\n> 未来的时间(时:分)\n\n要求：小时数和分钟数均为 2 位数，若不足 2 位，则前面补零。\n\n#### 输入样例\n\n```in\n7:50\n15\n\n```\n\n#### 输出样例\n\n```out\n08:05\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'时间计算','description':'通过输入现在的时间和所过的时间，计算未来的时间。'}]"
    },
    {
        "sortId": 436,
        "id": "1489525206505828352",
        "title": "砝码称重",
        "content": "一只能称 100 克的天平，配有 50g、20g、10g、5g、2g 和 1g 的砝码若干。左边放重物，右边放砝码。请编写程序，输入物体的重量，输出使用砝码最少的方法。\n\n#### 输入格式\n> 物体的重量\n\n#### 输出格式\n> 按砝码重量由大到小的顺序输出各种砝码的数量(参见输出样例)\n\n#### 输入样例\n```in\n89\n\n```\n#### 输出样例\n```out\n50克: 1只\n20克: 1只\n10克: 1只\n 5克: 1只\n 2克: 2只\n 1克: 0只\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法'，'description':'C语言的基本语法，包括变量、数据类型、运算符、控制语句等'}, {'name':'循环结构'，'description':'C语言中的循环结构，包括for循环、while循环、do-while循环等'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句、switch语句等'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组、多维数组等'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用、函数的参数传递等'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算、指针的应用等'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的操作、字符串的输入输出等'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写、文件的关闭等'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的成员、结构体的应用等'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配，包括malloc函数、free函数等'}, {'name':'递归'，'description':'C语言中的递归，包括递归的定义、递归的应用等'}, {'name':'位运算'，'description':'C语言中的位运算，包括位与、位或、位异或等'}, {'name':'预处理指令'，'description':'C语言中的预处理指令，包括宏定义、条件编译等'}, {'name':'指针与数组'，'description':'C语言中指针与数组的关系，包括指针与一维数组、指针与多维数组等'}, {'name':'指针与字符串'，'description':'C语言中指针与字符串的关系，包括指针与字符串的操作、指针与字符串的输入输出等'}, {'name':'指针与函数'，'description':'C语言中指针与函数的关系，包括指针作为函数参数、指针作为函数返回值等'}, {'name':'结构体与指针'，'description':'C语言中结构体与指针的关系，包括指向结构体的指针、指针作为结构体成员等'}, {'name':'文件操作与指针'，'description':'C语言中文件操作与指针的关系，包括指针与文件的读写、指针与文件的定位等'}, {'name':'动态内存分配与指针'，'description':'C语言中动态内存分配与指针的关系，包括指针与动态内存的申请、指针与动态内存的释放等'}, {'name':'递归与指针'，'description':'C语言中递归与指针的关系，包括指针与递归的应用等'}, {'name':'位运算与指针'，'description':'C语言中位运算与指针的关系，包括指针与位运算的应用等'}, {'name':'预处理指令与指针'，'description':'C语言中预处理指令与指针的关系，包括指针与宏定义、指针与条件编译等'}]"
    },
    {
        "sortId": 437,
        "id": "1489506109626318848",
        "title": "求三位数的各位数字(填空)",
        "content": "下面的程序输入一个三位数 $$x$$，输出它的百位数字 $$a$$、十位数字 $$b$$ 和个位数字 $$c$$。\n\n请在空白处填写适当内容完成该程序。\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n\tint x, a, b, c;\n\tscanf(\"%d\", &x);\n\n\t/* 你提交的代码将被嵌在这里 */\n\n\tprintf(\"%d %d %d\\n\", a, b, c);\n\treturn 0;\n}\n```\n\n#### 输入格式\n> $$x$$ $$( 100 \\leq x \\leq 999 )$$\n\n#### 输出格式\n> $$a$$ $$b$$ $$c$$ $$(1 \\leq a \\leq 9, 0 \\leq b, c \\leq 9)$$\n\n#### 输入样例1\n\n```in\n365\n\n```\n#### 输出样例1\n\n```out\n3 6 5\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数用于从标准输入流中读取数据，并根据格式字符串的指定将数据存储到相应的变量中。在这道题中，使用scanf函数读取输入的三位数x。'}, {'name':'算术运算符','description':'算术运算符用于进行数值计算，包括加法、减法、乘法和除法等。在这道题中，可以使用算术运算符和取模运算符来计算百位、十位和个位数字。'}, {'name':'printf函数','description':'printf函数用于将数据输出到标准输出流中。在这道题中，使用printf函数将计算得到的百位、十位和个位数字输出。'}]"
    },
    {
        "sortId": 438,
        "id": "1489184898446852096",
        "title": "世界时间(填空)",
        "content": "下面的程序能输出现在的世界时间。\n\n请在空白处填写若干语句完成该程序。\n\n```c\n#include <stdio.h>\n#include <time.h>\n\nint main()\n{\n\ttime_t x;\n\tint zone, hour, minute, second;\n\tscanf(\"%d\", &zone);\n\n\t/* 你提交的代码将被嵌在这里 */\n\n\tprintf(\"%02d:%02d:%02d\\n\", hour, minute, second);\n\treturn 0;\n}\n```\n\n#### 输入格式\n> 时区号(-12 ~ 12)\n\n例：东 8 区为 8，西 5 区为 -5。\n\n#### 输出格式\n> 所在时区当前的实际时间(hh:mm:ss)\n\n#### 输入样例\n```in\n8\n\n```\n\n#### 输出样例\n```out\n10:20:45\n\n```\n\n注：输出样例只是描述了显示格式，具体时间数字应该是所在时区当前的实际时间。\n\n---\n\n提示：利用 C 库函数 time 可得到现在的时间，它是从格林威治时间1970年1月1日0时整到现在的总秒数。北京在东 8 区，比格林威治时间早8小时。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '本题需要使用scanf函数从标准输入读取时区号，使用printf函数将结果输出到标准输出。'}, {'name': '变量定义和赋值', 'description': '本题需要定义并初始化变量x、zone、hour、minute、second，其中x为time_t类型，zone为int类型，hour、minute、second为int类型。'}, {'name': '库函数', 'description': '本题需要使用time函数获取当前时间，并使用printf函数按照指定格式输出时间。'}, {'name': '格式化输出', 'description': '本题需要使用printf函数按照指定格式输出时间，格式化输出使用了\"%02d\"表示输出的整数占两位，不足两位时前面补0。'}]"
    },
    {
        "sortId": 439,
        "id": "1488543214382628864",
        "title": "关于标识符",
        "content": "关于标识符\n\nC 标识符由 ▁▁▁▁▁ 组成。\n",
        "type": "MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符','description':'C 标识符由 ▁▁▁▁▁ 组成。'}]"
    },
    {
        "sortId": 440,
        "id": "1487052395153534976",
        "title": "实数的运算",
        "content": "实数的运算\n\nC 支持的实数运算符包括 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实数的运算'，'description':'C语言支持的实数运算符包括加法、减法、乘法、除法等。'}]"
    },
    {
        "sortId": 441,
        "id": "1487051793850236928",
        "title": "整数的运算",
        "content": "C 支持的整数运算符包括 ▁▁▁▁▁。\n",
        "type": "MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数运算符'，'description':'C语言支持的整数运算符包括加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）、取余运算符（%）等。这些运算符可以用于对整数进行基本的算术运算。'}]"
    },
    {
        "sortId": 442,
        "id": "1486247873786941440",
        "title": "显示等腰三角形",
        "content": "显示等腰三角形\n\n请编写程序，输出下面的等腰三角形图形：\n\n```\n    *\n   ***\n  *****\n *******\n*********\n```\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n    *\n   ***\n  *****\n *******\n*********\n\n```\n\n提示：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制每行输出的空格和星号的数量。'},\n{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来确定每行输出的空格和星号的数量。'},\n{'name':'字符串输出'，'description':'字符串输出是C语言中的一种输出方式，用于将字符串打印到屏幕上。在本题中，可以使用字符串输出来输出每行的空格和星号。'},\n{'name':'嵌套循环'，'description':'嵌套循环是C语言中的一种循环结构，用于在循环内部再次执行另一个循环。在本题中，可以使用嵌套循环来控制每行输出的空格和星号的数量。'}]"
    },
    {
        "sortId": 443,
        "id": "1486243487203844096",
        "title": "Hello, world!",
        "content": "Kernighan 和 Ritchie 在《The C Programming Language》书里写下的第一个程序，输出下面的文字。\n\n```\nHello, world!\n```\n\n它也因此成了非常著名的程序。如果看到有人穿着印有这句话的文化衫，他很可能是酷爱 C 语言的程序员。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\nHello, world!\n\n```\n\n---\n\n注：行末没有多余的空白字符。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句'，'description':'输出语句用于将程序中的数据或文本显示在屏幕上。在C语言中，使用printf函数来实现输出。'}]"
    },
    {
        "sortId": 444,
        "id": "1485966324614582272",
        "title": "善学者尽其理(填空)",
        "content": "下面的程序将输出：\n\n```\n善学者尽其理，\n善行者究其难。\n```\n\n注：其中标点符号为中文全角符号。\n\n请在空白处填写一条语句(仅1行)完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：调用 printf 函数输出信息。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n善学者尽其理，\n善行者究其难。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数'，'description':'printf函数是C语言中用于输出信息的函数，可以将指定的内容打印到屏幕上。在本题中，需要使用printf函数输出指定的信息。'}]"
    },
    {
        "sortId": 445,
        "id": "1485962776210837504",
        "title": "学须静也(填空)",
        "content": "下面的程序将输出诸葛亮的名言：\n\n```\n夫学须静也，\n才须学也。\n非学无以广才，\n非志无以成学。\n```\n\n注：其中标点符号为中文全角符号。\n\n请在空白处填写一条语句(分4行)完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：只调用一次 printf 函数，将字符串分成 4 段，每行写一段，每段包含一行诗句。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n夫学须静也，\n才须学也。\n非学无以广才，\n非志无以成学。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'printf函数是C语言中用于输出信息的函数，可以将指定的字符串打印到屏幕上。在这道题中，我们可以使用printf函数将诗句分成4段，每段写一行。'}]"
    },
    {
        "sortId": 446,
        "id": "1485932086456504320",
        "title": "志不强者智不达(填空)",
        "content": "下面的程序将输出：\n\n```\n志不强者智不达，\n言不信者行不果。\n```\n\n注：其中标点符号为中文全角符号。\n\n请在空白处填写两条语句完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：调用 puts 函数输出信息。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n志不强者智不达，\n言不信者行不果。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'调用puts函数','description':'调用puts函数可以将字符串输出到标准输出设备上。'}]"
    },
    {
        "sortId": 447,
        "id": "1485836557100257280",
        "title": "学而不思则罔(填空)",
        "content": "下面的程序将输出：\n\n```\n学而不思则罔，\n思而不学则殆。\n```\n注：其中标点符号为中文全角符号。\n\n请在空白处填写两条语句完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：调用 printf 函数输出信息。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n学而不思则罔，\n思而不学则殆。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数'，'description':'printf函数是C语言中用于输出信息的函数，可以将指定的内容打印到屏幕上。在本题中，需要使用printf函数输出指定的信息。'}]"
    },
    {
        "sortId": 448,
        "id": "1485816385882820608",
        "title": "业精于勤荒于嬉(填空)",
        "content": "下面的程序将输出：\n\n```\n业精于勤荒于嬉，\n行成于思毁于随。\n```\n\n注：其中标点符号为中文全角符号。\n\n请在空白处填写两条语句完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：调用 puts 函数输出信息。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n业精于勤荒于嬉，\n行成于思毁于随。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'调用puts函数','description':'调用puts函数可以将字符串输出到标准输出设备上。'}]"
    },
    {
        "sortId": 449,
        "id": "1485812205470355456",
        "title": "一年之计在于春(填空)",
        "content": "下面的程序将输出：\n\n```\n一年之计在于春，\n一日之计在于晨。\n```\n注：其中标点符号为中文全角符号。\n\n请在空白处填写两条语句完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\t/* 你提交的代码将被嵌在这里 */\n\treturn 0;\n}\n```\n\n---\n\n要求：调用 printf 函数输出信息。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n一年之计在于春，\n一日之计在于晨。\n\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数'，'description':'printf函数是C语言中用于输出信息的函数，可以将指定的内容打印到屏幕上。在本题中，需要使用printf函数输出指定的信息。'}]"
    },
    {
        "sortId": 450,
        "id": "1477661736286928896",
        "title": "sdut-C语言实验-虎子分糖果",
        "content": "我们中国各个地区都有拜年的美好习俗，小朋友最喜欢走亲访友了，因为亲戚们会给准备很多糖果吃。虎子家也不例外，妈妈买了很多俄罗斯糖果准备给前来拜年的小朋友分。为了公平，给每个小朋友的糖果数一定得是一样的。\n\n假设虎子妈妈准备了m块俄罗斯糖果，来了n位小朋友，请问每个小朋友可以分到多少块糖？还剩多少块？\n\n### 输入格式:\n\n输入n和m，其中n>0,m>0。\n\n### 输出格式:\n\n输出每个小朋友分到的糖果数和剩余的糖果数。\n\n### 输入样例:\n\n\n\n```in\n3 31\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n10 1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是计算机程序中用于存储和表示数据的一种抽象概念。在C语言中，可以使用变量来存储和操作各种类型的数据，如整数、浮点数、字符等。在本题中，需要使用变量来存储输入的n和m，以及计算每个小朋友分到的糖果数和剩余的糖果数。'},\n {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在C语言中，可以使用算术运算符来进行算术运算。在本题中，需要使用算术运算符来计算每个小朋友分到的糖果数和剩余的糖果数。'},\n {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用输入输出函数来实现输入和输出操作。在本题中，需要使用输入函数来获取输入的n和m，以及使用输出函数来输出每个小朋友分到的糖果数和剩余的糖果数。'},\n {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块的语句。在C语言中，可以使用条件语句来实现根据条件进行分支选择的功能。在本题中，可以使用条件语句来判断是否能够平均分配糖果，并计算每个小朋友分到的糖果数和剩余的糖果数。'},\n {'name': '循环语句', 'description': '循环语句是重复执行某段代码块的语句。在C语言中，可以使用循环语句来实现重复执行某个操作的功能。在本题中，可以使用循环语句来计算每个小朋友分到的糖果数和剩余的糖果数，直到无法再平均分配为止。'}]"
    },
    {
        "sortId": 451,
        "id": "1477585245301751808",
        "title": "sdut-C语言实验-三位数整数的各位数字 ",
        "content": "本题要求编写程序，输入一个三位数的正整数，并输出它的个位数字、十位数字和百位数字的值。\n\n### 输入格式:\n\n请输入三位正整数，例如152。\n\n### 输出格式:\n\n按照以下格式输出：\n152 = 个位数字 + 十位数字*10 + 百位数字*100\n如不是三位数，输出“Please input a three digits number.”。\n### 输入样例1:\n\n```in\n125\n```\n\n### 输出样例1:\n\n```out\n125 = 5 + 2*10 + 1*100\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用输入输出函数进行数据的输入和输出操作。'}, {'name':'变量','description':'学习如何定义和使用变量来存储数据。'}, {'name':'运算符','description':'学习如何使用算术运算符进行数值计算。'}, {'name':'条件语句','description':'学习如何使用条件语句进行条件判断和分支控制。'}, {'name':'循环语句','description':'学习如何使用循环语句进行重复执行某段代码。'}, {'name':'字符串处理','description':'学习如何处理字符串类型的数据。'}]"
    },
    {
        "sortId": 452,
        "id": "1477263721638801408",
        "title": "C语言标识符中，大小写字母没有区别。",
        "content": "C语言标识符中，大小写字母没有区别。",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言标识符','description':'C语言标识符是用来命名变量、函数、数组等程序实体的名称。在C语言中，标识符是由字母、数字和下划线组成的，且必须以字母或下划线开头。大小写字母在C语言标识符中是有区别的，即大小写字母是不同的标识符。'}]"
    },
    {
        "sortId": 453,
        "id": "1477262017438560256",
        "title": "C语言中的转义字符‘\\n’表示的功能是换行。",
        "content": "C语言中的转义字符‘\\n’表示的功能是换行。 ",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些特殊的字符或者控制字符。在C语言中，转义字符以反斜杠（\\）开头，后面跟着一个或多个字符。例如，转义字符‘\\n’表示换行，当程序遇到‘\\n’时，会在输出中插入一个换行符。'}]"
    },
    {
        "sortId": 454,
        "id": "1477260725017755648",
        "title": "若有定义int a=5,b=10; 则条件表达式 a<b?a:b的值为 。",
        "content": "若有定义int a=5,b=10; 则条件表达式 a<b?a:b的值为 。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件表达式'，'description':'条件表达式是一种特殊的表达式，它根据条件的真假来选择执行不同的代码块。在C语言中，条件表达式的格式为：条件 ? 表达式1 : 表达式2。如果条件为真，则返回表达式1的值；如果条件为假，则返回表达式2的值。在给定的题目中，条件表达式 a<b?a:b 的值将根据 a 和 b 的大小关系来选择返回 a 或 b 的值。'}]"
    },
    {
        "sortId": 455,
        "id": "1477260202584190976",
        "title": "若有程序段：`int a=1,b=2,c;  c = a>0||++b;`",
        "content": "若有程序段：`int a=1,b=2,c;  c = a>0||++b;`\n执行完语句后，b的值为 。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有&&（与）、||（或）、！（非）。在C语言中，逻辑运算符的运算结果为真（非零）或假（0）。在本题中，表达式`a>0||++b`使用了逻辑或运算符||，当a>0为真时，整个表达式的结果为真，不再计算++b的值，因此b的值不会发生改变。'}]"
    },
    {
        "sortId": 456,
        "id": "1477258916509921280",
        "title": "表达式5>4>3的值是 。",
        "content": "表达式5>4>3的值是 。\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级'，'description':'运算符优先级是指在一个表达式中，不同的运算符按照一定的顺序进行计算的规则。在C语言中，比较运算符的优先级高于关系运算符，所以表达式5>4>3的值是1。'}]"
    },
    {
        "sortId": 457,
        "id": "1477256541572734976",
        "title": "若有int a=10; 则执行完表达式a+=a-= a*a后，a的值为。",
        "content": "若有int a=10; 则执行完表达式a+=a-= a*a后，a的值为。\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符有多种形式，如+=、-=、*=等。执行完表达式a+=a-= a*a后，a的值为。'}]"
    },
    {
        "sortId": 458,
        "id": "1477255614999625728",
        "title": "C语言中的标识符只能由三种字符组成，它们是字母、 和下划线。",
        "content": "C语言中的标识符只能由三种字符组成，它们是字母、 和下划线。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符', 'description':'C语言中的标识符是用来表示变量、函数、类型等名称的字符序列。标识符由字母、数字和下划线组成，且必须以字母或下划线开头。'}]"
    },
    {
        "sortId": 459,
        "id": "1476448125758091264",
        "title": "有如下定义和语句：int m,n;  scanf(\"m=%d,n=%d\",&m,&n); 若想让m的值为100，n的值为200，",
        "content": "有如下定义和语句：int m,n;  scanf(\"m=%d,n=%d\",&m,&n); 若想让m的值为100，n的值为200，正确的数据输入方式为（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出函数','description':'输入输出函数是C语言中常用的函数之一，用于从键盘读取数据或向屏幕输出数据。在本题中，scanf函数用于从键盘读取数据，将读取到的值赋给变量m和n。'}]"
    },
    {
        "sortId": 460,
        "id": "1476447392181059584",
        "title": "若有变量定义：char ch; int a; double x;则表达式ch-a*9+2*x的最终计算结果为（    ）类型。",
        "content": "若有变量定义：char ch; int a; double x;则表达式`ch-a*9+2*x`的最终计算结果为（    ）类型。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义与类型','description':'在C语言中，变量的定义需要指定变量的类型，包括char、int、double等。本题中的变量定义涉及到了char、int和double类型的变量。'}, {'name':'算术运算符','description':'C语言中的算术运算符包括加法运算符+、减法运算符-、乘法运算符*、除法运算符/等。本题中的表达式`ch-a*9+2*x`涉及到了加法运算符、减法运算符、乘法运算符和乘法运算符。'}, {'name':'运算符优先级','description':'C语言中的运算符有不同的优先级，优先级高的运算符先于优先级低的运算符进行计算。本题中的表达式`ch-a*9+2*x`涉及到了运算符优先级的问题，需要根据运算符的优先级来确定最终的计算结果。'}]"
    },
    {
        "sortId": 461,
        "id": "1476029104213000192",
        "title": "能正确表示逻辑关系：“x≥10或x≤0” 的C语言表达式是（    ）",
        "content": "能正确表示逻辑关系：“x≥10或x≤0” 的C语言表达式是（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于处理逻辑关系，包括与、或、非等操作。在C语言中，逻辑运算符包括&&（与）、||（或）、！（非）。本题涉及到逻辑关系的表示，需要学生理解逻辑运算符的使用。'}]"
    },
    {
        "sortId": 462,
        "id": "1476027033795493888",
        "title": "设m、a、b和c都是int型变量，则执行表达式：m=(a=1,b=2,c=3)后，m的值为（    ）",
        "content": "设m、a、b和c都是int型变量，则执行表达式：m=(a=1,b=2,c=3)后，m的值为（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符是=，它将右边的值赋给左边的变量。在表达式m=(a=1,b=2,c=3)中，赋值运算符先将1赋给变量a，然后将2赋给变量b，最后将3赋给变量c。最终，m的值为3，因为赋值运算符的结果是被赋的值。'}]"
    },
    {
        "sortId": 463,
        "id": "1475759472815226880",
        "title": "以下程序段的输出结果是：",
        "content": "以下程序段的输出是：\n\n```\n    int a = 20, b = 30;\n    int *p = &a;\n    printf(\"%d\\t\", *p);\n    p = &b;\n    *p = 50;\n    printf(\"%d\\n\", b);\n```",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，我们可以直接访问和修改变量的值，而不需要知道变量的名称。本题涉及到了指针的定义、指针的赋值、指针的解引用和指针的打印输出。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种基本概念。本题涉及到了变量的定义和变量的赋值。'}, {'name': 'printf函数', 'description': 'printf函数是C语言中用于打印输出的函数。本题涉及到了printf函数的使用，包括格式化输出和打印换行符。'}]"
    },
    {
        "sortId": 464,
        "id": "1475757282461523968",
        "title": "以下选项中，可以作为C语言合法标识符的是：",
        "content": "以下选项中，可以作为C语言合法标识符的是：",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言合法标识符', 'description': 'C语言合法标识符是用来表示变量、函数、数组等命名的符号。合法标识符必须以字母或下划线开头，后面可以是字母、数字或下划线。'}]"
    },
    {
        "sortId": 465,
        "id": "1474588227587944448",
        "title": "在C语言中，若有定义int a=5; 则表达式a/2的结果是（    ）",
        "content": "在C语言中，若有定义int a=5; 则表达式a/2的结果是（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，即将两个整数相除并返回结果的整数部分。对于表达式a/2，其中a为整数类型变量，结果为a除以2的整数部分。'}]"
    },
    {
        "sortId": 466,
        "id": "1474584496184111104",
        "title": "以下标识符中，不合法的是（    ）",
        "content": "以下标识符中，不合法的是（    ）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符的命名规则'，'description':'标识符的命名规则是指在C语言中，标识符的命名必须遵循一定的规则，包括以字母或下划线开头，后面可以是字母、数字或下划线等。'}]"
    },
    {
        "sortId": 467,
        "id": "1472860010254024704",
        "title": "位运算",
        "content": "输入两个无符号短整型数 a 和 b，输出 a 和 b 按位与、按位或、a 左移 b 位、a 右移 b 位、a 按位取反 的结果。\n\n### 输入格式:\n\n两个无符号短整型数 a 和 b\n\n### 输出格式:\n\n用格式控制符\"%hu\"输出 a 和 b 按位与的结果；\n\n用格式控制符\"%hu\"输出 a 和 b 按位或的结果；\n\n用格式控制符\"%hu\"输出 a 左移 b 位的结果；\n\n用格式控制符\"%hu\"输出 a 右移 b 位的结果；\n\n用格式控制符\"%hu\"输出 a 按位取反 的结果；\n\n用格式控制符\"%hd\"输出 a 按位取反 的结果。\n\n注意在所有计算过程中，a 和 b 的值不能改变。\n\n每个输出占1行。\n\n### 输入样例:\n\n```in\n8 3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n0\n11\n64\n1\n65527\n-9\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'按位与操作'，'description':'按位与操作是C语言中的一种位运算操作，用于将两个操作数的对应位进行逻辑与运算。按位与操作的结果是一个新的整数，其每一位都是两个操作数对应位进行与运算的结果。在本题中，需要输入两个无符号短整型数 a 和 b，然后使用按位与操作符\"&\"对它们进行按位与操作，最后用格式控制符\"%hu\"输出结果。'},\n{'name':'按位或操作'，'description':'按位或操作是C语言中的一种位运算操作，用于将两个操作数的对应位进行逻辑或运算。按位或操作的结果是一个新的整数，其每一位都是两个操作数对应位进行或运算的结果。在本题中，需要输入两个无符号短整型数 a 和 b，然后使用按位或操作符\"|\"对它们进行按位或操作，最后用格式控制符\"%hu\"输出结果。'},\n{'name':'左移操作'，'description':'左移操作是C语言中的一种位运算操作，用于将一个操作数的所有位向左移动指定的位数。左移操作的结果是一个新的整数，其每一位都是原操作数对应位左移指定位数后的结果。在本题中，需要输入两个无符号短整型数 a 和 b，然后使用左移操作符\"<<\"将 a 左移 b 位，最后用格式控制符\"%hu\"输出结果。'},\n{'name':'右移操作'，'description':'右移操作是C语言中的一种位运算操作，用于将一个操作数的所有位向右移动指定的位数。右移操作的结果是一个新的整数，其每一位都是原操作数对应位右移指定位数后的结果。在本题中，需要输入两个无符号短整型数 a 和 b，然后使用右移操作符\">>\"将 a 右移 b 位，最后用格式控制符\"%hu\"输出结果。'},\n{'name':'按位取反操作'，'description':'按位取反操作是C语言中的一种位运算操作，用于将一个操作数的每一位取反。按位取反操作的结果是一个新的整数，其每一位都是原操作数对应位取反后的结果。在本题中，需要输入一个无符号短整型数 a，然后使用按位取反操作符\"~\"对 a 进行按位取反操作，最后用格式控制符\"%hu\"输出结果。'},\n{'name':'按位取反操作'，'description':'按位取反操作是C语言中的一种位运算操作，用于将一个操作数的每一位取反。按位取反操作的结果是一个新的整数，其每一位都是原操作数对应位取反后的结果。在本题中，需要输入一个无符号短整型数 a，然后使用按位取反操作符\"~\"对 a 进行按位取反操作，最后用格式控制符\"%hd\"输出结果。'}]"
    },
    {
        "sortId": 468,
        "id": "1470681233256202240",
        "title": "与代数式",
        "content": "与代数式\n![abcd.png](~/2a4eebf8-457f-4cfe-b629-71328a935d2b.png)\n不等价的C语言表达式是( )",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级'，'description':'运算符优先级是指在一个表达式中，不同的运算符按照一定的顺序进行计算的规则。在C语言中，不同的运算符有不同的优先级，优先级高的运算符先于优先级低的运算符进行计算。在这道题中，要求判断哪个表达式与给定的代数式不等价，就需要了解C语言中各个运算符的优先级，以及它们在表达式中的计算顺序。'}]"
    },
    {
        "sortId": 469,
        "id": "1470288853192474624",
        "title": "约数",
        "content": "当整数$$a$$除以整数$$b$$($$b$$≠0)，除得的商正好是整数而没有余数时，称$$b$$是$$a$$的约数。给你两个正整数$$A$$和$$B$$, 如果$$B$$是$$A$$的约数，请打印输出$$A+B$$, 否则打印输出$$A-B$$。\n\n### 输入格式:\n\n输入包括两个正整数$$A$$和$$B$$（$$1 \\le B \\le A \\le 100$$）。\n\n### 输出格式:\n\n输出结果。\n\n### 输入样例1:\n\n```in\n12 4\n```\n\n### 输出样例1:\n\n```out\n16\n```\n\n### 输入样例2:\n\n```in\n20 8\n```\n\n### 输出样例2:\n\n```out\n12\n```\n\n### 输入样例3:\n\n```in\n1 1\n```\n\n### 输出样例3:\n\n```out\n2\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数除法','description':'整数除法是指两个整数相除得到的结果仍为整数，即没有余数。在C语言中，整数除法使用除号（/）进行运算。'}, {'name':'判断约数','description':'判断一个整数是否是另一个整数的约数，可以通过判断两个整数相除的余数是否为0来实现。如果余数为0，则说明第二个整数是第一个整数的约数。'}, {'name':'条件语句','description':'条件语句是根据某个条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是if (条件) {代码块}，其中条件为一个表达式，如果条件为真，则执行代码块中的代码，否则跳过代码块。'}, {'name':'输出语句','description':'输出语句用于将程序中的结果输出到屏幕上。在C语言中，输出语句使用printf函数来实现。printf函数的基本语法是printf(\"格式字符串\", 参数列表)，其中格式字符串用于指定输出的格式，参数列表为要输出的变量或常量。'}]"
    },
    {
        "sortId": 470,
        "id": "1468472243059359744",
        "title": "自守数",
        "content": "所谓自守数(也称守形数)，是指其平方数的低位部分恰为该数本身的自然数。\n例如：$$5^{2}$$  =25,而25 的低一位是5,因此 5 是自守数，还有$$76^{2}$$  =5776,而5776 的低二位是76,因此 76 是自守数，\n\n注：0 和 1 也算自守数。\n\n从键盘上输入正整数n的值（这里确保n的平方不超过int范围），请编写函数，计算[2,n]区间自守数的个数。\n\n##### 函数接口定义：\n```c++\nint IsAutomorphic(int x);\n```\n\n若 x 为自守数，则函数值为 1(真)，否则为 0(假)。\n\n##### 裁判测试程序：\n```c++\n\n#include <stdio.h>\n\nint IsAutomorphic(int x);\n\nint main()\n{\n    int n,i,num=0;\n    scanf(\"%d\", &n);\n    for(i=2;i<=n;i++)\n\t  if(IsAutomorphic( i))\n\t\t  num++;\n\tprintf(\"自守数个数为:%d\",num);\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n\n\n##### 输入样例：\n\n```in\n25\n```\n\n##### 输出样例：\n\n```out\n自守数个数为:3\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自守数','description':'自守数是指其平方数的低位部分恰为该数本身的自然数。'}]"
    },
    {
        "sortId": 471,
        "id": "1468466814229827584",
        "title": "计算和与平均值",
        "content": "本题目要求读入3个整数，计算并输出3个整数的和与平均值（平均值保留2位小数）。\n\n### 输入格式:\n\n输入3个整数，以空格分隔（题目保证数据在整数范围内）\n\n### 输出格式:\n\n 在一行中输出“sum=和,average=平均值”，和为整数，平均值保留2位小数，标点为英文逗号。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n23 -90 -50\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nsum=-117,average=-39.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 22,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'本题目要求读入3个整数，计算并输出3个整数的和与平均值（平均值保留2位小数）。输入格式为3个整数，以空格分隔，输出格式为“sum=和,average=平均值”，和为整数，平均值保留2位小数，标点为英文逗号。'}, {'name':'变量与运算','description':'本题目涉及到变量的定义和运算，需要将输入的整数保存到变量中，并进行加法运算和除法运算。'}, {'name':'格式化输出','description':'本题目要求输出的结果需要按照特定的格式进行输出，需要使用格式化输出函数将结果输出为指定的格式。'}, {'name':'数据类型','description':'本题目涉及到整数类型的数据，需要了解整数类型的范围和精度，以及整数类型的运算规则。'}, {'name':'算术运算','description':'本题目涉及到加法运算和除法运算，需要了解加法运算和除法运算的规则和注意事项。'}]"
    },
    {
        "sortId": 472,
        "id": "1468368584934576128",
        "title": "化球为正方体",
        "content": "将两块球形橡皮泥揉在一起，捏成一个正方体。请编程，完成下述功能：\n\n从键盘读入2个球形橡皮泥的直径，直径为浮点数；\n\n\n求正方体的边长，并保留两位小数输出;\n\n### 输入格式:\n\n第一个球的直径   第二个球的直径(中间用一个空格隔开)\n\n### 输出格式:\n\n输出正方体的边长，并保留两位小数输出;   具体格式见样例。\n\n### 输入样例:\n\n\n\n```in\n3.0 5.0\n```\n\n### 输出样例:\n\n\n```out\nlength of the side is:4.30.\n```\n提示：圆球的体积$$ V = 4/3 * π r^3$$",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是存储数据的一种方式，可以通过变量名来访问和操作数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备进行交互的方式。在C语言中，可以使用标准库函数scanf和printf来实现输入和输出操作。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，用于指定变量可以存储的数据的类型和范围。C语言中常见的数据类型包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '运算符是用于进行数学和逻辑运算的符号。C语言中常见的运算符包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子，用于进行计算和生成结果。在C语言中，可以使用表达式来进行各种数学和逻辑运算。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程，根据条件来选择不同的执行路径。C语言中常见的控制语句包括条件语句、循环语句和跳转语句。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行。在C语言中，可以使用函数来组织和重用代码，提高程序的可读性和可维护性。'}, {'name': '数学库函数', 'description': '数学库函数是C语言提供的用于数学计算的函数，可以进行各种数学运算，如求平方根、求绝对值、求三角函数等。在使用数学库函数之前，需要包含对应的头文件。'}, {'name': '浮点数运算', 'description': '浮点数运算是指对浮点数进行各种数学运算，如加法、减法、乘法、除法等。在C语言中，可以使用浮点数运算符来进行浮点数运算。'}, {'name': '格式化输出', 'description': '格式化输出是指按照指定的格式将数据输出到屏幕或文件中。在C语言中，可以使用printf函数来进行格式化输出，通过控制格式化字符串来指定输出的格式。'}]"
    },
    {
        "sortId": 473,
        "id": "1466039648946753536",
        "title": "计算火车速度(Input--Process--Output)",
        "content": "和谐号动车组CRH1、CRH2、CRH5在平直干轨上的加速度分别是0.5、0.406、0.6m/s²，CRH380AL的加速度是0.47m/s。编写一个程序，接收用户输入的**加速度a**(正实数)，以及加速的**时间t**(秒)，计算经过t秒后，列车的速度是多少，假定时间t一定是1到115之间的整数(含边界)。已知计算公式为：\n\n\n![at.jpg](~/1f6aa519-2998-460c-92b4-84b0c9d5708e.jpg)\n\n及转换关系为**1米/秒=3.6千米/小时**。\n\n### 输入格式:\n\n一个小数，一个整数。\n\n### 输出格式:\n\n见输出样例，**保留两位小数**，中间是有一个逗号。\n\n### 输入样例:\n\n两个数据，第一个是加速度a，第二个是时间t。\n\n```in\n0.5  100\n```\n\n### 输出样例:\n列车加速100秒后，速度为50.00米/秒，也就是180.00千米/小时。\n```out\n50.00m/s,180.00km/h\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。常见的数据类型有整型、浮点型、字符型等。在本题中，需要定义两个变量来存储加速度和时间。'},\n{'name':'运算符'，'description':'在C语言中，运算符用于进行各种数学和逻辑运算。本题中需要使用加法、乘法和除法运算符来计算列车的速度。'},\n{'name':'输入输出'，'description':'在C语言中，可以使用scanf函数来接收用户输入的数据，使用printf函数来输出结果。本题中需要使用scanf函数接收加速度和时间，使用printf函数输出列车的速度。'},\n{'name':'条件语句'，'description':'在C语言中，可以使用条件语句来根据不同的条件执行不同的代码块。本题中需要使用条件语句来判断时间是否在1到115之间的范围内。'},\n{'name':'格式化输出'，'description':'在C语言中，可以使用格式化输出来控制输出结果的格式。本题中需要使用格式化输出来保留两位小数，并在输出结果中添加逗号。'},\n{'name':'数学库函数'，'description':'在C语言中，可以使用数学库函数来进行数学运算。本题中需要使用数学库函数来进行平方根的计算。'}]"
    },
    {
        "sortId": 474,
        "id": "1463082369901461504",
        "title": "有以下程序段：",
        "content": "有以下程序段：\nint  x=3;\ndo\n{\n    printf(\"%5d\",x-=2);\n}while(!(--x));\n程序输出结果是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码，直到满足某个条件才停止循环。循环结构包括do-while循环、while循环和for循环。'}]"
    },
    {
        "sortId": 475,
        "id": "1459551215243980800",
        "title": "语句printf(“%5.2f”,4321.5678);的输出结果是（  ）。",
        "content": "语句printf(“%5.2f”,4321.5678);的输出结果是（  ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式化输出','description':'格式化输出是C语言中常用的输出方式，通过使用特定的格式控制符来控制输出的格式。在本题中，\"%5.2f\"表示输出一个浮点数，总宽度为5，小数点后保留2位。'}]"
    },
    {
        "sortId": 476,
        "id": "1459550545581506560",
        "title": "设a 为整型变量，不能正确表达数学关系：10<a<15的 C 语言表达式是（）。",
        "content": "设a 为整型变量，不能正确表达数学关系：10<a<15的 C 语言表达式是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '关系运算符', 'description': '关系运算符用于比较两个值的大小关系，常用的关系运算符有：>, <, >=, <=, ==, !=。在C语言中，10<a<15这样的表达式是错误的，应该使用逻辑运算符来连接两个关系表达式，正确的表达式应该是10<a && a<15。'}, {'name': '逻辑运算符', 'description': '逻辑运算符用于连接多个关系表达式，常用的逻辑运算符有：&&（与）、||（或）、！（非）。在C语言中，10<a<15这样的表达式是错误的，应该使用逻辑运算符来连接两个关系表达式，正确的表达式应该是10<a && a<15。'}]"
    },
    {
        "sortId": 477,
        "id": "1459550190114242560",
        "title": "x=3; y=x++;语句执行后，x 和 y 的值分别是（     ）。",
        "content": "x=3; y=x++;语句执行后，x 和 y 的值分别是（     ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自增运算符'，'description':'自增运算符是C语言中的一种特殊运算符，用于将变量的值加1。在表达式中，自增运算符可以放在变量的前面（前自增）或后面（后自增）。前自增运算符先将变量的值加1，然后返回加1后的值；后自增运算符先返回变量的值，然后将变量的值加1。在给变量赋值时，前自增运算符和后自增运算符的行为是不同的。'}]"
    },
    {
        "sortId": 478,
        "id": "1459540949244641280",
        "title": "若变量已经被正确定义，为表示“变量x和y都能被3整除”，应使用的C语言表达式是（ ）。",
        "content": "若变量已经被正确定义，为表示“变量x和y都能被3整除”，应使用的C语言表达式是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句用于根据给定的条件执行不同的代码块。在这个题目中，需要使用条件语句来判断变量x和y是否能被3整除。'}]"
    },
    {
        "sortId": 479,
        "id": "1459538385902465024",
        "title": "结构化程序设计所要求的基本结构不包括以下哪种基本结构（）",
        "content": "结构化程序设计所要求的基本结构不包括以下哪种基本结构（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本结构', 'description':'结构化程序设计所要求的基本结构包括顺序结构、选择结构和循环结构，不包括其他类型的结构。'}]"
    },
    {
        "sortId": 480,
        "id": "1459537654538420224",
        "title": "下列叙述中，不正确的是（         ）。",
        "content": "下列叙述中，不正确的是（         ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'C语言中有多种数据类型，包括整型、浮点型、字符型等。在程序设计中，选择合适的数据类型可以提高程序的效率和准确性。'},\n{'name':'运算符'，'description':'C语言中有多种运算符，包括算术运算符、关系运算符、逻辑运算符等。了解运算符的优先级和使用方法可以帮助学生编写正确的表达式和逻辑判断。'},\n{'name':'控制语句'，'description':'C语言中有多种控制语句，包括条件语句、循环语句等。掌握控制语句的使用可以帮助学生编写具有逻辑性和灵活性的程序。'},\n{'name':'数组'，'description':'数组是C语言中常用的数据结构，可以存储多个相同类型的数据。了解数组的定义、初始化和访问方法可以帮助学生处理大量数据。'},\n{'name':'函数'，'description':'函数是C语言中的重要概念，可以将程序分解为多个模块，提高代码的可读性和复用性。了解函数的定义、调用和参数传递可以帮助学生编写模块化的程序。'},\n{'name':'指针'，'description':'指针是C语言中的高级特性，可以直接访问内存中的数据。了解指针的定义、使用和指针运算可以帮助学生编写高效的程序。'},\n{'name':'字符串'，'description':'字符串是C语言中的特殊数据类型，用于存储字符序列。了解字符串的定义、初始化和操作方法可以帮助学生处理文本数据。'},\n{'name':'文件操作'，'description':'文件操作是C语言中常用的功能，可以读取和写入外部文件。了解文件的打开、关闭和读写方法可以帮助学生处理文件数据。'}]"
    },
    {
        "sortId": 481,
        "id": "1459535693924335616",
        "title": "以下不是C语言的特点的是（）。",
        "content": "以下不是C语言的特点的是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言特点', 'description': 'C语言是一种高级程序设计语言，具有以下特点：\\n1. 简洁高效：C语言的语法简洁，代码执行效率高。\\n2. 可移植性强：C语言编写的程序可以在不同的平台上运行。\\n3. 支持底层编程：C语言可以直接操作内存和硬件。\\n4. 面向过程：C语言是一种面向过程的编程语言。\\n5. 丰富的库函数：C语言提供了丰富的库函数，方便开发人员进行程序开发。\\n6. 可扩展性强：C语言支持函数和模块的封装，方便代码的复用和扩展。\\n7. 高效的指针操作：C语言中的指针操作灵活高效，可以进行内存管理和数据结构的操作。\\n8. 与汇编语言兼容：C语言可以与汇编语言进行混合编程，提高程序的执行效率。\\n9. 应用广泛：C语言被广泛应用于系统软件、嵌入式系统、游戏开发等领域。'}]"
    },
    {
        "sortId": 482,
        "id": "1456079670768058368",
        "title": "n个小朋友分糖果",
        "content": "为了培养小朋友们分享的意识，老师教小朋友做分糖果的游戏，把自己带的糖果分给其他小朋友。\n\n首先，全班 $n$ 个小朋友围成一个大圆圈，按排列顺序依次给他们编号 $1,2, \\ldots, n$。然后，从 $1$ 号小朋友开始，将自己的糖果平均分成三份（如果有多余的糖果则立即吃掉），自己保留一份，其余两份分别分给与他相邻的两个小朋友。接下来按照编号顺序，$2$ 号，$3$ 号，$4$ 号，$\\ldots$，直到 $n$ 号小朋友都这样做。\n\n问经过一轮分糖果游戏，每个小朋友手上分别有多少个糖果？\n\n\n### 输入格式:\n\n第一行为小朋友人数 $n$，保证 $3 \\le n \\le 30$。  \n第二行为空格隔开的 $n$ 个正整数，依次表示游戏开始时按编号从 $1$ 到 $n$ 的顺序每个小朋友手上的糖果数。\n\n### 输出格式:\n\n在一行中输出空格隔开的 $n$ 个整数，依次表示游戏结束时按编号从 $1$ 到 $n$ 的顺序每个小朋友手上的糖果数。\n\n### 输入样例:\n\n```in\n3\n3 3 3\n\n```\n\n### 输出样例:\n\n```out\n 3 2 1\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在这个题目中，循环结构用于模拟每个小朋友分糖果的过程。'}, {'name': '数组', 'description': '数组是C语言中的一种数据结构，用于存储多个相同类型的数据。在这个题目中，数组用于存储每个小朋友手上的糖果数。'}, {'name': '取余运算', 'description': '取余运算是C语言中的一种运算符，用于求两个数相除的余数。在这个题目中，取余运算用于计算每个小朋友分糖果后剩余的糖果数。'}]"
    },
    {
        "sortId": 483,
        "id": "1454596891672940544",
        "title": "成绩分析表",
        "content": "某大学全校都开设C语言课程，每学年结束都按成绩进行统计和分析。请编写程序，输入优秀、良好、中等、及格和不及格的人数，输出成绩分析表。\n\n#### 输入样例\n\n```in\n684 3290 7512 10958 37\n\n```\n\n#### 输出样例\n\n```out\nRank      Number  Ratio\n-----------------------\nExcellent    684   3.0%\nGood        3290  14.6%\nMedium      7512  33.4%\nPass       10958  48.7%\nFail          37   0.2%\n-----------------------\nTotal      22481 100.0%\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用输入输出函数进行数据的输入和输出操作。'}, {'name':'变量和数据类型','description':'学习如何声明变量和使用不同的数据类型来存储数据。'}, {'name':'运算符和表达式','description':'学习如何使用运算符和表达式进行数值计算和逻辑判断。'}, {'name':'控制语句','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何声明和使用数组来存储和处理多个相同类型的数据。'}, {'name':'函数','description':'学习如何声明和调用函数来实现代码的模块化和重用。'}, {'name':'字符串','description':'学习如何声明和操作字符串类型的数据。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件来进行文件的输入输出操作。'}]"
    },
    {
        "sortId": 484,
        "id": "1454029784124428288",
        "title": "求圆的周长和面积",
        "content": "使用宏定义定义π的值（定义为3.14159），编程计算并输出圆的周长和面积。半径定义为实型，值由键盘输入。\n\n### 输入格式:\n输入一个圆的半径。\n\n### 输出格式:\n\n圆的周长和面积在不同行输出，均保留两位小数。参看输出样例。\n### 输入样例:\n\n\n\n```in\n3\n\n```\n\n### 输出样例:\n\n\n\n```out\ns=18.85\nv=28.27\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'宏定义', 'description':'宏定义是C语言中的一种预处理指令，用于定义常量或者简单的函数。在本题中，使用宏定义定义π的值为3.14159。'}, {'name':'变量输入', 'description':'变量输入是指从键盘或其他输入设备获取用户输入的值，并将其赋给变量。在本题中，需要从键盘输入圆的半径。'}, {'name':'变量输出', 'description':'变量输出是指将变量的值输出到屏幕或其他输出设备上。在本题中，需要将计算得到的圆的周长和面积输出到屏幕上。'}, {'name':'浮点数计算', 'description':'浮点数计算是指对浮点数进行数学运算，如加减乘除等。在本题中，需要使用输入的半径计算圆的周长和面积。'}, {'name':'格式化输出', 'description':'格式化输出是指按照一定的格式将数据输出到屏幕上。在本题中，需要将计算得到的圆的周长和面积保留两位小数后输出。'}]"
    },
    {
        "sortId": 485,
        "id": "1453196384928993280",
        "title": "sdut-C语言实验——温度转换",
        "content": "输入一个华氏温度，输出摄氏温度，其转换公式为：C=5(F-32)/9。\n\n### 输入格式:\n\n输入数据只有一个实数，即华氏温度。\n\n### 输出格式:\n\n输出数据只有一个，即摄氏温度，保留2位小数。\n\n### 输入样例:\n\n\n```in\n32.0\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n0.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 14,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是计算机内存中的一块存储空间，用于存储数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用scanf函数进行输入，使用printf函数进行输出。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，用于指定变量可以存储的数据的类型和范围。在C语言中，常见的数据类型包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '运算符是用于进行数学运算或逻辑运算的符号。在C语言中，常见的运算符包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的序列，用于进行计算和产生结果。在C语言中，可以使用表达式进行数学运算、逻辑运算等。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程，根据条件选择不同的执行路径。在C语言中，常见的控制语句包括条件语句、循环语句等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以重复使用。在C语言中，可以使用函数来组织代码、提高代码的复用性。'}, {'name': '转换', 'description': '转换是将一种数据类型转换为另一种数据类型的过程。在C语言中，可以使用强制类型转换和隐式类型转换来实现数据类型的转换。'}, {'name': '格式化输出', 'description': '格式化输出是指按照指定的格式将数据输出到屏幕或文件中。在C语言中，可以使用printf函数进行格式化输出，通过控制格式化字符串来指定输出的格式。'}, {'name': '运算优先级', 'description': '运算优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，运算符的优先级由高到低依次为括号运算符、一元运算符、乘除运算符、加减运算符、关系运算符、逻辑运算符。'}]"
    },
    {
        "sortId": 486,
        "id": "1453194287290454016",
        "title": "sdut-C语言实验——逆置正整数",
        "content": "输入一个三位正整数，将它反向输出。注意130逆置后是31。\n\n### 输入格式:\n\n3位正整数。\n\n### 输出格式:\n\n逆置后的正整数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n123\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n321\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从用户输入获取数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '运算符', 'description': '学习如何使用算术运算符进行数值计算。'}, {'name': '控制流', 'description': '学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，包括字符串的输入、输出和操作。'}]"
    },
    {
        "sortId": 487,
        "id": "1453192006507630592",
        "title": "sdut-C语言实验——A+B Problem",
        "content": "Calculate a + b.\n\n### 输入格式:\n\nTwo integer a, b (0 <= a, b <= 10).\n\n### 输出格式:\n\nOutput a + b.\n\n### 输入样例:\n\n\n```in\n1 2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等，学生需要了解各种数据类型的表示范围、存储方式以及常见的数据类型转换方法。'}, {'name':'输入输出'，'description':'学生需要了解如何使用scanf函数进行输入操作，以及如何使用printf函数进行输出操作。'}, {'name':'运算符'，'description':'学生需要了解C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等，并能够正确地使用这些运算符进行计算。'}, {'name':'条件语句'，'description':'学生需要了解C语言中的条件语句，包括if语句、switch语句等，并能够根据不同的条件执行相应的代码块。'}, {'name':'循环语句'，'description':'学生需要了解C语言中的循环语句，包括for循环、while循环、do-while循环等，并能够使用这些循环语句解决实际问题。'}, {'name':'函数'，'description':'学生需要了解C语言中的函数的定义和调用方法，以及函数的参数传递和返回值的使用。'}, {'name':'数组'，'description':'学生需要了解C语言中的数组的定义和使用方法，包括一维数组和多维数组，并能够使用数组解决实际问题。'}, {'name':'指针'，'description':'学生需要了解C语言中的指针的概念和使用方法，包括指针的定义、指针的运算以及指针和数组的关系。'}, {'name':'字符串'，'description':'学生需要了解C语言中的字符串的表示方法和常见的字符串操作函数，包括字符串的输入输出、字符串的比较和拼接等。'}, {'name':'结构体'，'description':'学生需要了解C语言中的结构体的定义和使用方法，包括结构体的成员访问、结构体的初始化和结构体数组的使用。'}]"
    },
    {
        "sortId": 488,
        "id": "1452944964233883648",
        "title": "若定义了x=1000，则表达式x++>1000?x+200:x+100的值为()",
        "content": "若定义了x=1000，则表达式x++>1000?x+200:x+100的值为()",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符', 'description': '运算符是用于执行特定操作的符号。本题涉及到了自增运算符（++）和三元运算符（?:）。自增运算符用于将变量的值增加1，三元运算符根据条件的真假选择不同的表达式进行计算。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假执行不同的代码块。本题中的三元运算符就是一种条件语句，根据x++>1000的结果选择不同的表达式进行计算。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子，用于进行计算和产生结果。本题中的表达式x++>1000?x+200:x+100用于判断x是否大于1000，并根据结果选择不同的表达式进行计算。'}]"
    },
    {
        "sortId": 489,
        "id": "1452020420220448768",
        "title": "劝学(竖版)",
        "content": "编写程序，在屏幕上显示著名书法家颜真卿的《劝学》诗。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n白 黑 正 三   颜 劝\n首 发 是 更   真 学\n方 不 男 灯   卿\n悔 知 儿 火\n读 勤 读 五\n书 学 书 更\n迟 早 时 鸡\n\n```\n\n实际显示效果如下：\n\n> ![题图.jpg](~/b8bb65c0-27b9-44fc-8106-c902c33fac1b.jpg)\n\n说明：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮。\n\n---\n\n提示：\n- 诗文中的空白均为半角空格；\n- 每行末尾都没有多余的空白。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'通过printf函数将字符串输出到屏幕上。'}, {'name':'字符串输出','description':'通过printf函数将多行字符串输出到屏幕上。'}, {'name':'字符输出','description':'通过printf函数将字符输出到屏幕上。'}, {'name':'格式化输出','description':'通过printf函数将变量的值按照指定的格式输出到屏幕上。'}, {'name':'转义字符','description':'通过printf函数输出包含转义字符的字符串。'}, {'name':'注释','description':'通过注释对代码进行说明。'}, {'name':'编译运行','description':'通过编译器将C语言程序编译成可执行文件，并运行程序。'}, {'name':'变量定义','description':'通过关键字定义变量，并为变量赋初值。'}, {'name':'数据类型','description':'介绍C语言中的基本数据类型，如整型、浮点型、字符型等。'}, {'name':'运算符','description':'介绍C语言中的算术运算符、关系运算符、逻辑运算符等。'}, {'name':'控制语句','description':'介绍C语言中的条件语句、循环语句等。'}, {'name':'数组','description':'介绍C语言中的数组，包括一维数组和多维数组。'}, {'name':'字符串','description':'介绍C语言中的字符串，包括字符串的定义、字符串的输入输出、字符串的操作等。'}, {'name':'函数','description':'介绍C语言中的函数，包括函数的定义、函数的调用、函数的参数传递等。'}, {'name':'指针','description':'介绍C语言中的指针，包括指针的定义、指针的运算、指针的应用等。'}, {'name':'结构体','description':'介绍C语言中的结构体，包括结构体的定义、结构体的成员、结构体的应用等。'}, {'name':'文件操作','description':'介绍C语言中的文件操作，包括文件的打开、文件的读写、文件的关闭等。'}, {'name':'预处理指令','description':'介绍C语言中的预处理指令，包括宏定义、条件编译等。'}, {'name':'错误处理','description':'介绍C语言中的错误处理，包括错误码、异常处理等。'}, {'name':'递归','description':'介绍C语言中的递归，包括递归的定义、递归的应用等。'}, {'name':'动态内存分配','description':'介绍C语言中的动态内存分配，包括malloc函数、free函数等。'}, {'name':'文件操作','description':'介绍C语言中的文件操作，包括文件的打开、文件的读写、文件的关闭等。'}, {'name':'指针与数组','description':'介绍C语言中指针与数组的关系，包括指针与一维数组、指针与多维数组等。'}, {'name':'结构体与指针','description':'介绍C语言中结构体与指针的关系，包括结构体指针的定义、结构体指针的应用等。'}, {'name':'函数指针','description':'介绍C语言中的函数指针，包括函数指针的定义、函数指针的应用等。'}, {'name':'位运算','description':'介绍C语言中的位运算，包括按位与、按位或、按位异或等。'}, {'name':'枚举','description':'介绍C语言中的枚举，包括枚举的定义、枚举的应用等。'}, {'name':'链表','description':'介绍C语言中的链表，包括链表的定义、链表的插入、链表的删除等。'}, {'name':'排序算法','description':'介绍C语言中的排序算法，包括冒泡排序、插入排序、选择排序等。'}, {'name':'查找算法','description':'介绍C语言中的查找算法，包括线性查找、二分查找等。'}, {'name':'递归算法','description':'介绍C语言中的递归算法，包括阶乘、斐波那契数列等。'}, {'name':'文件操作','description':'介绍C语言中的文件操作，包括文件的打开、文件的读写、文件的关闭等。'}, {'name':'指针与字符串','description':'介绍C语言中指针与字符串的关系，包括指针与字符串的输入输出、指针与字符串的操作等。'}, {'name':'结构体与文件','description':'介绍C语言中结构体与文件的关系，包括结构体与文件的读写、结构体与文件的存储等。'}, {'name':'函数与文件','description':'介绍C语言中函数与文件的关系，包括函数与文件的读写、函数与文件的存储等。'}, {'name':'指针与函数','description':'介绍C语言中指针与函数的关系，包括指针与函数的调用、指针与函数的参数传递等。'}, {'name':'结构体与链表','description':'介绍C语言中结构体与链表的关系，包括结构体与链表的插入、结构体与链表的删除等。'}, {'name':'递归与链表','description':'介绍C语言中递归与链表的关系，包括递归与链表的插入、递归与链表的删除等。'}, {'name':'指针与动态内存分配','description':'介绍C语言中指针与动态内存分配的关系，包括指针与动态内存分配的应用等。'}, {'name':'结构体与动态内存分配','description':'介绍C语言中结构体与动态内存分配的关系，包括结构体与动态内存分配的应用等。'}, {'name':'函数与动态内存分配','description':'介绍C语言中函数与动态内存分配的关系，包括函数与动态内存分配的应用等。'}, {'name':'指针与文件','description':'介绍C语言中指针与文件的关系，包括指针与文件的读写、指针与文件的存储等。'}, {'name':'结构体与字符串','description':'介绍C语言中结构体与字符串的关系，包括结构体与字符串的输入输出、结构体与字符串的操作等。'}, {'name':'函数与字符串','description':'介绍C语言中函数与字符串的关系，包括函数与字符串的输入输出、函数与字符串的操作等。'}, {'name':'指针与结构体','description':'介绍C语言中指针与结构体的关系，包括指针与结构体的定义、指针与结构体的应用等。'}, {'name':'函数与结构体','description':'介绍C语言中函数与结构体的关系，包括函数与结构体的定义、函数与结构体的应用等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与函数的调用、函数与函数的参数传递等。'}, {'name':'指针与指针','description':'介绍C语言中指针与指针的关系，包括指针与指针的运算、指针与指针的应用等。'}, {'name':'结构体与结构体','description':'介绍C语言中结构体与结构体的关系，包括结构体与结构体的定义、结构体与结构体的应用等。'}, {'name':'函数与函数','description':'介绍C语言中函数与函数的关系，包括函数与"
    },
    {
        "sortId": 490,
        "id": "1451954950540783616",
        "title": "爱我中华",
        "content": "爱我中华，喜迎国庆。请编写程序，输出“中华”两个大字。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n□□□□□□□■□□□□□□□□□□□□□■□□□■□□□□□□\n□□□□□□□■□□□□□□□□□□□□□■□□□■□□■□□□\n□□□□□□□■□□□□□■□□□□□□■□□□□■□■■□□□\n□■■■■■■■■■■■■■■□□□□□■□□□□■■□□□□□\n□■□□□□□■□□□□□■□□□□□■■□□□■■□□□□□□\n□■□□□□□■□□□□□■□□□□■□■□□■□■□□□□□□\n□■□□□□□■□□□□□■□□□■□□■□■□□■□□□■□□\n□■□□□□□■□□□□□■□□□□□□■□□□□■□□□■□□\n□■■■■■■■■■■■■■□□□□□□■□□■□□■■■■□□\n□■□□□□□■□□□□□■□□□□□□□□□■□□□□□□□□\n□□□□□□□■□□□□□□□□■■■■■■■■■■■■■■■□\n□□□□□□□■□□□□□□□□□□□□□□□■□□□□□□□□\n□□□□□□□■□□□□□□□□□□□□□□□■□□□□□□□□\n□□□□□□□■□□□□□□□□□□□□□□□■□□□□□□□□\n□□□□□□□■□□□□□□□□□□□□□□□■□□□□□□□□\n□□□□□□□■□□□□□□□□□□□□□□□■□□□□□□□□\n\n```\n\n实际显示效果如下：\n\n> \n![中华.jpg](~/24b14008-7e89-4ff6-9ddd-0529bab4cde7.jpg)\n\n\n---\n\n提示：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'使用printf函数进行输出'}, {'name':'字符输出','description':'使用字符数组进行输出'}, {'name':'循环结构','description':'使用循环结构控制输出的行数和列数'}, {'name':'条件判断','description':'使用条件判断控制输出的字符'}, {'name':'图形输出','description':'使用特定的字符进行图形输出'}]"
    },
    {
        "sortId": 491,
        "id": "1450526849507409920",
        "title": "实数的输出(格式限定符)(double)",
        "content": "实数的输出(格式限定符)(double)\n\n用 printf 函数输出实数(double)时所使用的格式限定符\n\n<table>\n<tr>\n<td align=\"center\"><b>类型</b></td>\n<td align=\"center\"><b>小数格式</b></td>\n<td align=\"center\"><b>指数格式(小写)</b></td>\n<td align=\"center\"><b>指数格式(大写)</b></td>\n<td align=\"center\"><b>精简格式(小写)</b></td>\n<td align=\"center\"><b>精简格式(大写)</b></td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n<td align=\"center\"></td>\n</tr>\n</table>\n\n---\n\n注：若不支持，则填短横线(-)。若支持多个，则选填其中一个。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实数的输出(格式限定符)(double)', 'description':'本题涉及到C语言中实数的输出以及格式限定符的使用。学生需要了解不同类型的实数输出格式限定符，包括小数格式、指数格式（小写和大写）、精简格式（小写和大写）。学生需要掌握如何使用这些格式限定符来输出double类型的实数。'}]"
    },
    {
        "sortId": 492,
        "id": "1450510049826717696",
        "title": "字符的输入(格式限定符)(char)",
        "content": "字符的输入(格式限定符)(char)\n\n用 scanf 函数输入字符(char)时所使用的格式限定符\n\n<table>\n<tr>\n<td align=\"center\"><b>类型</b></td>\n<td align=\"center\"><b>格式限定符</b></td>\n</tr>\n<tr>\n<td align=\"center\">unsigned char</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">signed char</td>\n<td align=\"center\"></td>\n</tr>\n</table>\n\n---\n\n注：若不支持，则填短横线(-)。若支持多个，则选填其中一个。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符的输入(格式限定符)(char)', 'description':'本知识点主要讲解在C语言中使用scanf函数输入字符(char)时所使用的格式限定符。在输入unsigned char类型的字符时，可以使用格式限定符%hhu；在输入signed char类型的字符时，可以使用格式限定符%hhd。'}]"
    },
    {
        "sortId": 493,
        "id": "1450509367459594240",
        "title": "字符的输出(格式限定符)(char)",
        "content": "字符的输出(格式限定符)(char)\n\n用 printf 函数输出字符(char)时所使用的格式限定符\n\n<table>\n<tr>\n<td align=\"center\"><b>类型</b></td>\n<td align=\"center\"><b>格式限定符</b></td>\n</tr>\n<tr>\n<td align=\"center\">unsigned char</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">signed char</td>\n<td align=\"center\"></td>\n</tr>\n</table>\n\n---\n\n注：若不支持，则填短横线(-)。若支持多个，则选填其中一个。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符的输出(格式限定符)(char)', 'description':'C语言中用于输出字符的格式限定符，包括unsigned char和signed char的格式限定符。'}]"
    },
    {
        "sortId": 494,
        "id": "1450100265520582656",
        "title": "字符变变变",
        "content": "从键盘上输入任意两个数字字符，将其转换成一个两位数。（当第一个字符为0时，转换后是一个一位数。）\n### 输入格式:\n\n输入任意的两个数字字符，以逗号隔开。\n\n### 输出格式:\n\n对每一组输入，输出对应的一个两位数（或一位数）。\n\n### 输入样例:\n\n```in\n2,5\n```\n\n### 输出样例:\n\n```out\n25\n```\n\n### 输入样例:\n\n```in\n0,9\n```\n\n### 输出样例:\n\n```out\n9\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘上输入字符，并将结果输出到屏幕上。'}, {'name':'数据类型转换','description':'学习如何将字符转换成整数类型，并进行相应的运算。'}, {'name':'条件判断','description':'学习如何根据条件判断来选择不同的执行路径。'}]"
    },
    {
        "sortId": 495,
        "id": "1450015418995105792",
        "title": "位运算应用",
        "content": "现有96个端口状态，用3个无符号整型ua(95~64),ub(63~32),uc(31~0)组合起来的96位二进制数来表示，每位二进制数的1、0表示其正常和故障状态。\n\n输入一个tag位，将tag位上二进制数置1.\n\ntag位表示其在96位中所处的位数（在96位中从低向高从0至95）\n\n\n### 输入格式:\n第一行输入三个无符号整数，表示ua,ub,uc \n\n第二行输入一个整数tag。\n\n### 输出格式:\n\n若tag值不在0到95之间，则输出`Error`，否则输出转换后的ua,ub,uc\n\n### 输入样例:\n\n\n\n```in\n1 2 3\n-2\n```\n\n### 输出样例:\n\n\n```out\nError\n```\n\n### 输入样例:\n\n\n\n```in\n1 2 3\n10\n```\n\n### 输出样例:\n\n\n```out\nua=1,ub=2,uc=1027\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '无符号整型', 'description': '无符号整型是一种数据类型，用于表示非负整数。在C语言中，无符号整型的范围是从0到2^n-1，其中n是该类型的位数。'}, {'name': '二进制数', 'description': '二进制数是一种数制，只包含0和1两个数字。在C语言中，可以使用二进制数来表示各种状态，如正常和故障状态。'}, {'name': '位操作', 'description': '位操作是一种对二进制数进行操作的方法。在C语言中，可以使用位操作来对二进制数进行置位、清零、取反等操作。'}, {'name': '输入输出', 'description': '输入输出是指将数据从外部设备（如键盘、文件）输入到程序中，或将程序中的数据输出到外部设备（如屏幕、文件）。在C语言中，可以使用输入输出函数来实现输入输出操作。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件判断来执行不同代码块的语句。在C语言中，可以使用条件语句来根据tag值的范围判断是否输出Error或转换后的ua、ub、uc。'}]"
    },
    {
        "sortId": 496,
        "id": "1449621127265312768",
        "title": "弧度->角度",
        "content": "请编写程序，输入弧度，输出角度（包括：度、分和秒数）。\n\n#### 输入格式\n> 弧度\n\n注：弧度为正实数。\n\n#### 输出格式\n> 度数、分数和秒数\n\n注：度数和分数为正整数，秒数为正实数。\n\n要求：秒数输出 2 位小数，末位四舍五入。\n\n#### 输入样例1\n```in\n0.2707466243\n\n```\n#### 输出样例1\n```out\n15 30 45.50\n\n```\n\n#### 输入样例2\n```in\n1.025962711964\n\n```\n#### 输出样例2\n```out\n58 47 0.00\n\n```\n\n---\n\n注：$$pi = 3.1415926535897932384626...$$\n\n提示：实数存在误差。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整型、浮点型等，并了解它们的特点和使用方法。'}, {'name': '运算符', 'description': '学习各种运算符的使用方法，如加法、减法、乘法、除法等，并了解它们的优先级和结合性。'}, {'name': '控制结构', 'description': '学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name': '函数', 'description': '学习如何定义和调用函数，并了解函数的参数传递和返回值的使用方法。'}, {'name': '数组', 'description': '学习如何定义和使用数组，并了解数组的特点和常见操作。'}, {'name': '字符串', 'description': '学习如何定义和使用字符串，并了解字符串的特点和常见操作。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，并了解文件操作的常见函数和错误处理方法。'}, {'name': '指针', 'description': '学习如何定义和使用指针，并了解指针的特点和常见操作。'}, {'name': '结构体', 'description': '学习如何定义和使用结构体，并了解结构体的特点和常见操作。'}, {'name': '位运算', 'description': '学习如何使用位运算符进行位操作，并了解位运算的特点和常见用途。'}, {'name': '递归', 'description': '学习如何使用递归函数解决问题，并了解递归的原理和应用场景。'}, {'name': '错误处理', 'description': '学习如何处理程序中的错误，并了解常见的错误处理方法和技巧。'}, {'name': '调试技巧', 'description': '学习如何使用调试工具和技巧来调试程序，并了解常见的调试技巧和注意事项。'}, {'name': '算法', 'description': '学习常见的算法和数据结构，并了解它们的原理和应用场景。'}, {'name': '编程风格', 'description': '学习如何编写清晰、简洁和可维护的代码，并了解常见的编程风格和规范。'}, {'name': '代码优化', 'description': '学习如何优化程序的性能和效率，并了解常见的代码优化技巧和方法。'}, {'name': '调用库函数', 'description': '学习如何调用库函数来完成特定的任务，并了解常见的库函数和使用方法。'}, {'name': '模块化编程', 'description': '学习如何将程序分解为多个模块，并了解模块化编程的优点和方法。'}, {'name': '面向对象编程', 'description': '学习如何使用面向对象的思想和方法来设计和实现程序，并了解面向对象编程的特点和应用场景。'}, {'name': '并发编程', 'description': '学习如何使用并发编程的思想和方法来设计和实现程序，并了解并发编程的特点和应用场景。'}, {'name': '网络编程', 'description': '学习如何使用网络编程的思想和方法来设计和实现程序，并了解网络编程的特点和应用场景。'}, {'name': '图形界面编程', 'description': '学习如何使用图形界面编程的思想和方法来设计和实现程序，并了解图形界面编程的特点和应用场景。'}, {'name': '嵌入式编程', 'description': '学习如何使用嵌入式编程的思想和方法来设计和实现程序，并了解嵌入式编程的特点和应用场景。'}, {'name': '算法复杂度', 'description': '学习如何分析算法的时间复杂度和空间复杂度，并了解常见的算法复杂度和评估方法。'}, {'name': '数据结构', 'description': '学习常见的数据结构，如数组、链表、栈、队列、树、图等，并了解它们的特点和应用场景。'}, {'name': '操作系统', 'description': '学习操作系统的基本概念和原理，并了解操作系统的功能和作用。'}, {'name': '计算机网络', 'description': '学习计算机网络的基本概念和原理，并了解计算机网络的功能和作用。'}, {'name': '数据库', 'description': '学习数据库的基本概念和原理，并了解数据库的功能和作用。'}, {'name': '软件工程', 'description': '学习软件工程的基本概念和原理，并了解软件工程的方法和技术。'}, {'name': '人工智能', 'description': '学习人工智能的基本概念和原理，并了解人工智能的应用和发展趋势。'}, {'name': '计算机图形学', 'description': '学习计算机图形学的基本概念和原理，并了解计算机图形学的应用和发展趋势。'}, {'name': '计算机安全', 'description': '学习计算机安全的基本概念和原理，并了解计算机安全的方法和技术。'}, {'name': '计算机体系结构', 'description': '学习计算机体系结构的基本概念和原理，并了解计算机体系结构的组成和作用。'}, {'name': '编译原理', 'description': '学习编译原理的基本概念和原理，并了解编译原理的方法和技术。'}, {'name': '操作系统原理', 'description': '学习操作系统原理的基本概念和原理，并了解操作系统原理的方法和技术。'}, {'name': '数据库原理', 'description': '学习数据库原理的基本概念和原理，并了解数据库原理的方法和技术。'}, {'name': '软件工程原理', 'description': '学习软件工程原理的基本概念和原理，并了解软件工程原理的方法和技术。'}, {'name': '人工智能原理', 'description': '学习人工智能原理的基本概念和原理，并了解人工智能原理的方法和技术。'}, {'name': '计算机图形学原理', 'description': '学习计算机图形学原理的基本概念和原理，并了解计算机图形学原理的方法和技术。'}, {'name': '计算机安全原理', 'description': '学习计算机安全原理的基本概念和原理，并了解计算机安全原理的方法和技术。'}, {'name': '计算机体系结构原理', 'description': '学习计算机体系结构原理的基本概念和原理，并了解计算机体系结构原理的方法和技术。'}, {'name': '编译原理原理', 'description': '学习编译原理原理的基本概念和原理，并了解编译原理原理的方法和技术。'}, {'name': '操作系统原理原理', 'description': '学习操作系统原理原理的基本概念和原理，并了解操作系统原理原理的方法和技术。'}, {'name': '数据库原理原理', 'description': '学习数据库原理原理的基本概念和原理，并了解数据库原理原理的方法和技术。'}, {'name': '软件工程原理原理', 'description': '学习软件工程原理原理的基本概念和原理，并了解软件工程原理原理的方法和技术。'}, {'name': '人工智能原理原理', 'description': '学习人工智能原理原理的基本概念和原理，并了解人工智能原理原理的方法和技术。'}, {'name': '计算机图形学原理原理', 'description': '学习计算机图形学原理原理的基本概念和原理，并了解计算机图形学原理原理的方法和技术。'}, {'name': '计算机安全原理原理', 'description': '学习计算机安全原理原理的基本概念和原理，并了解计算机安全原理原理的方法和技术。'}, {'name': '计算机体系结构原理原理', 'description': '学习计算机体系结构原理原理的基本概念和原理，并了解计算机体系结构原理原理的方法和技术。'}, {'name': '编译原理原理原理', 'description': '学习编译原理原理原理的基本概念和原理，并了解编译原理原理原理的方法和技术。'}, {'name': '操作系统原理原理原理', 'description': '学习操作系统原理原理原理的基本概念和原理，并了解操作系统原理原理原理的方法和技术。'}, {'name': '数据库原理原理原理', 'description': '学习数据库原理原理原理的基本概念和原理，并了解数据库原理原理原理的方法和技术。'}, {'name': '软件工程原理原理原理', 'description': '学习软件工程原理原理原理的基本概念和原理，并了解软件工程原理原理原理的方法和技术。'}, {'name': '人工智能原理原理原理', 'description': '学习人工智能原理原理原理的基本概念和原理，并了解人工智能原理原理原理的方法和技术。'}, {'name': '计算机图形学原理原理原理', 'description': '学习计算机图形学原理原理原理的基本概念和原理，并了解计算机图形学原理原理原理的方法和技术。'}, {'name': '计算机安全原理原理原理', 'description': '学习计算机安全原理原理原理的基本概念和原理，并了解计算机安全原理原理原理的方法和技术。'}, {'name': '计算机体系结构原理原理原理', 'description': '学习计算机体系结构原理原理原理的基本概念和原理，并了解计算机体系结构原理原理原理的方法和技术。'}, {'name': '编译原理原理原理原理', 'description': '学习编译原理原理原理原理的基本概念和原理，并了解编译原理原理原理原理的方法和技术。'}, {'name': '操作系统原理原理原理原理', 'description': '学习操作系统原理原理原理原理的基本概念和原理，并了解操作系统原理原理原理原理的方法和技术。'}, {'name': '数据库原理原理原理原理', 'description': '学习数据库原理原理原理原理的基本概念和原理，并了解数据库原理原理原理原理的方法和技术。'}, {'name': '软件工程原理原理原理原理', 'description': '学习软件工程原理原理原理原理的基本概念和原理，并了解软件工程原理原理原理原理的方法和技术。'}, {'name': '人工智能原理原理原理原理', 'description': '学习人工智能原理原理原理原理的基本概念和原理，并了解人工智能原理原理原理原理的方法和技术。'}, {'name': '计算机图形学原理原理原理原理', 'description': '学习计算机图形学原理原理原理原理的基本概念和原理，并了解计算机图形学原理原理原理原理的方法和技术。'}, {'name': '计算机安全原理原理原理原理', 'description': '学习计算机安全原理原理原理原理的基本概念和原理，并了解计算机安全原理原理原理原理的方法和技术。'}, {'name': '计算机体系结构原理原理原理原理', 'description': '学习计算机体系结构原理原理原理原理的基本概念和原理，并了解计算机体系结构原理原理原理原理的方法和技术。'}, {'name': '编译原理原理原理原理原理', 'description': '学习编译原理原理原理原理原理的基本概念和原理，并了解编译原理原理原理原理原理的方法和技术。'}, {'name': '操作系统原理原理原理原理原理', 'description': '学习操作系统原理原理原理原理原理的基本概念和原理，并了解操作系统原理原理原理原理原理的方法和技术。'}, {'name': '数据库原理原理原理原理原理', 'description': '学习数据库原理原理原理原理原理的基本概念和原理，并了解数据库原理原理原理原理原理的方法和技术。'}, {'name': '软件工程原理原理原理原理原理', 'description': '学习软件工程原理原理原理原理原理的基本概念和原理，并了解软件工程原"
    },
    {
        "sortId": 497,
        "id": "1449536330396184576",
        "title": "求婚",
        "content": "国王的女儿达西娅要出嫁了，按照当地的风俗，在结婚那天公主从高台上抛下一朵鲜花，花儿落到谁身上，公主就嫁给谁。达西娅担心花儿落不到心上人克俊身上，就和克俊一起商议……。\n\n达西娅找到父亲说：“我不愿意搭台抛花，那么多人挤在一起乱哄哄的。”国王说：“不搭台也行，你必须在结婚当天从求婚人群中选出新郎，但不许指名。”达西娅高兴地找到司仪做了安排。\n\n结婚那天，司仪让求婚者站成一排，克俊数了一下求婚的人数，然后就站到队伍中去了。司仪让求婚者从 1 开始报数，报单数的人退场，留下的人再从 1 开始报数，报单数的人再退场，……，到最后只剩一个人时，众人惊奇地看到这个人正是克俊。\n\n请编写程序，输入求婚的人数 n，输出克俊应该站的位置 p。\n\n#### 输入格式\n> $$n$$\n\n#### 输出格式\n> $$p$$\n\n#### 输入样例\n```in\n105\n\n```\n#### 输出样例\n```out\n64\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构可以用来解决需要重复执行某段代码的问题。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来决定程序的执行路径。在C语言中，常用的条件判断结构有if语句、if-else语句和switch语句。条件判断结构可以根据不同的条件来执行不同的代码块，从而实现不同的功能。'}, {'name': '变量', 'description': '变量是用来存储数据的一种数据类型。在C语言中，变量需要先声明后使用，可以通过赋值操作来给变量赋初值。变量可以用来存储不同类型的数据，如整数、浮点数、字符等。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的一种方式。在C语言中，可以使用scanf函数来从键盘读取输入数据，使用printf函数来向屏幕输出结果。输入输出可以用来获取用户的输入，显示程序的运行结果等。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的数据结构。在C语言中，数组需要先声明后使用，可以通过下标来访问数组中的元素。数组可以用来存储一组数据，如整数、浮点数、字符等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，函数需要先声明后使用，可以通过参数传递数据，通过返回值返回结果。函数可以用来封装一段独立的功能，提高代码的复用性和可读性。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方式。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，如阶乘、斐波那契数列等。递归需要定义递归终止条件，以避免无限递归导致程序崩溃。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。在C语言中，可以使用加减乘除等运算符来进行数学运算，还可以使用数学库中的函数来进行更复杂的数学运算，如求平方根、求幂等。数学运算可以用来解决各种数学问题，如求和、求平均值等。'}, {'name': '数据类型', 'description': '数据类型是用来定义变量的一种属性，决定了变量可以存储的数据类型和占用的内存空间。在C语言中，常用的数据类型有整型、浮点型、字符型等。不同的数据类型可以存储不同范围和精度的数据，可以根据实际需求选择合适的数据类型。'}, {'name': '指针', 'description': '指针是一种特殊的变量，存储的是内存地址。在C语言中，可以使用指针来间接访问和修改变量的值，还可以通过指针来动态分配内存空间。指针可以用来处理复杂的数据结构，如链表、树等。'}, {'name': '字符串', 'description': '字符串是由字符组成的一种数据类型。在C语言中，字符串需要使用字符数组来存储，可以通过下标来访问字符串中的字符。字符串可以用来存储文本信息，如姓名、地址等。'}, {'name': '文件操作', 'description': '文件操作是对文件进行读写操作的过程。在C语言中，可以使用文件指针来打开、关闭文件，使用fscanf函数来从文件读取数据，使用fprintf函数来向文件写入数据。文件操作可以用来读取和保存文件中的数据，如文本文件、二进制文件等。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。在C语言中，可以使用结构体来组织和管理复杂的数据，如学生信息、员工信息等。结构体可以通过点操作符来访问和修改成员变量的值。'}, {'name': '指针运算', 'description': '指针运算是对指针进行加减操作的过程。在C语言中，可以使用指针运算来访问和修改数组中的元素，还可以使用指针运算来遍历链表等数据结构。指针运算可以简化对数组和链表等数据结构的操作，提高代码的效率和可读性。'}, {'name': '位运算', 'description': '位运算是对二进制数进行各种操作的过程。在C语言中，可以使用位运算符来进行位运算，如与、或、异或等。位运算可以用来进行位操作，如位与、位或、位取反等。位运算可以用来解决一些特定的问题，如判断奇偶性、交换两个数的值等。'}, {'name': '宏定义', 'description': '宏定义是一种预处理指令，用来定义常量、函数和代码片段。在C语言中，可以使用宏定义来定义常量，使用宏定义来定义函数，使用宏定义来定义代码片段。宏定义可以简化代码的书写，提高代码的可读性和可维护性。'}, {'name': '错误处理', 'description': '错误处理是对程序中可能出现的错误进行处理的过程。在C语言中，可以使用错误处理机制来捕获和处理程序中的错误，如输入错误、内存分配错误等。错误处理可以提高程序的健壮性和可靠性，避免程序崩溃或产生不正确的结果。'}, {'name': '数据结构', 'description': '数据结构是一种组织和存储数据的方式。在C语言中，可以使用数组、链表、栈、队列等数据结构来组织和管理数据。数据结构可以用来解决各种实际问题，如查找、排序、图算法等。'}, {'name': '算法', 'description': '算法是解决问题的一种方法或步骤。在C语言中，可以使用各种算法来解决不同的问题，如查找算法、排序算法、图算法等。算法可以用来提高程序的效率和性能，减少资源的消耗。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是一个指针。在C语言中，可以使用指针数组来存储多个指针，可以通过下标来访问指针数组中的指针。指针数组可以用来存储多个字符串、多个函数指针等。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存空间的过程。在C语言中，可以使用malloc函数来动态分配内存空间，使用free函数来释放内存空间。动态内存分配可以用来解决内存不足或浪费的问题，提高程序的灵活性和效率。'}, {'name': '指针函数', 'description': '指针函数是一个返回指针的函数。在C语言中，可以使用指针函数来返回指针，可以通过指针函数来间接访问和修改变量的值。指针函数可以用来处理复杂的数据结构，如链表、树等。'}, {'name': '多文件编程', 'description': '多文件编程是将程序分成多个文件进行编写和管理的一种方式。在C语言中，可以使用头文件和源文件来实现多文件编程，可以使用makefile来管理多个文件的编译和链接。多文件编程可以提高代码的可读性和可维护性，方便代码的复用和扩展。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的一种指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译等。预处理指令可以用来简化代码的书写，提高代码的可读性和可维护性。'}, {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换来进行类型转换，可以使用类型转换函数来进行类型转换，如atoi函数、atof函数等。类型转换可以用来处理不同类型的数据，如整数和浮点数的相互转换等。'}, {'name': '指针参数', 'description': '指针参数是一个指针类型的参数。在C语言中，可以使用指针参数来传递指针，可以通过指针参数来修改变量的值。指针参数可以用来处理复杂的数据结构，如链表、树等。'}, {'name': '逻辑运算', 'description': '逻辑运算是对逻辑表达式进行求值的过程。在C语言中，可以使用逻辑运算符来进行逻辑运算，如与、或、非等。逻辑运算可以用来判断条件的真假，控制程序的执行路径。'}, {'name': '位操作', 'description': '位操作是对二进制数的位进行操作的过程。在C语言中，可以使用位操作符来进行位操作，如位与、位或、位取反等。位操作可以用来提取和设置二进制数的某一位，进行位运算等。'}, {'name': '结构体指针', 'description': '结构体指针是指向结构体的指针。在C语言中，可以使用结构体指针来访问和修改结构体的成员变量，可以通过结构体指针来动态创建和释放结构体。结构体指针可以用来处理复杂的数据结构，如链表、树等。'}, {'name': '文件指针', 'description': '文件指针是指向文件的指针。在C语言中，可以使用文件指针来打开、关闭文件，使用文件指针来读写文件中的数据。文件指针可以用来处理文件操作，如读取和保存文件中的数据，复制和删除文件等。'}, {'name': '字符数组', 'description': '字符数组是一个数组，其中的每个元素都是一个字符。在C语言中，可以使用字符数组来存储字符串，可以通过下标来访问字符数组中的字符。字符数组可以用来存储文本信息，如姓名、地址等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。在C语言中，可以使用字符串库中的函数来进行字符串处理，如字符串拷贝、字符串连接等。字符串处理可以用来处理字符串中的字符和子串，进行字符串的比较和排序等。'}, {'name': '指针运算', 'description': '指针运算是对指针进行加减操作的过程。在C语言中，可以使用指针运算来访问和修改数组中的元素，还可以使用指针运算来遍历链表等数据结构。指针运算可以简化对数组和链表等数据结构的操作，提高代码的效率和可读性。'}, {'name': '位运算', 'description': '位运算是对二进制数进行各种操作的过程。在C语言中，可以使用位运算符来进行位运算，如与、或、异或等。位运算可以用来进行位操作，如位与、位或、位取反等。位运算可以用来解决一些特定的问题，如判断奇偶性、交换两个数的值等。'}, {'name': '宏定义', 'description': '宏定义是一种预处理指令，用来定义常量、函数和代码片段。在C语言中，可以使用宏定义来定义常量，使用宏定义来定义函数，使用宏定义来定义代码片段。宏定义可以简化代码的书写，提高代码的可读性和可维护性。'}, {'name': '错误处理', 'description': '错误处理是对程序中可能出现的错误进行处理的过程。在C语言中，可以使用错误处理机制来捕获和处理程序中的错误，如输入错误、内存分配错误等。错误处理可以提高程序的健壮性和可靠性，避免程序崩溃或产生不正确的结果。'}, {'name': '数据结构', 'description': '数据结构是一种组织和存储数据的方式。在C语言中，可以使用数组、链表、栈、队列等数据结构来组织和管理数据。数据结构"
    },
    {
        "sortId": 498,
        "id": "1448216340602466304",
        "title": "实数的输出格式(域宽)",
        "content": "在空白处填写适当内容，以小数格式输出，指定宽度 16 格。\n\n```c\ndouble x;\nscanf(\"%lf\", &x);\nprintf(__________, x);\n```\n\n##### 输入样例1\n```in\n1537.4\n\n```\n\n##### 输出样例1\n```out\n金额:      1537.400000 元\n\n```\n\n##### 输入样例2\n```in\n0\n\n```\n\n##### 输出样例2\n```out\n金额:         0.000000 元\n\n```\n\n##### 输入样例3\n```in\n-730942816.38205\n\n```\n\n##### 输出样例3\n```out\n金额: -730942816.382050 元\n\n```\n\n提示：只填写空白处的内容。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'本题考察了C语言中的输入输出操作。通过scanf函数从标准输入读取一个double类型的值，然后通过printf函数将该值以小数格式输出，指定宽度为16格。'}]"
    },
    {
        "sortId": 499,
        "id": "1447756415476408320",
        "title": "有一函数，以下程序段中错误的是？",
        "content": "有一函数\n![QQ截图20211012104411.jpg](~/bbc9231e-27eb-4d8c-842c-9b32fcd67748.jpg)\n，以下程序段中错误的是？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数声明与定义', 'description': '函数声明与定义是C语言程序设计中的基础知识点，它涉及到函数的声明和定义的语法规则以及函数的作用和调用方式。学生需要了解函数的声明和定义的区别，以及如何正确地声明和定义函数。在这道题目中，学生需要判断给定的程序段中是否存在错误的函数声明或定义。'}, {'name': '变量的作用域', 'description': '变量的作用域是C语言程序设计中的重要概念，它涉及到变量在程序中的可见范围和生命周期。学生需要了解局部变量和全局变量的作用域规则，以及如何正确地使用和访问变量。在这道题目中，学生需要判断给定的程序段中是否存在错误的变量作用域。'}, {'name': '函数参数传递', 'description': '函数参数传递是C语言程序设计中的重要概念，它涉及到函数调用时参数的传递方式和参数的类型匹配规则。学生需要了解函数参数传递的方式，包括按值传递和按引用传递，以及如何正确地传递参数。在这道题目中，学生需要判断给定的程序段中是否存在错误的函数参数传递。'}, {'name': '语法错误', 'description': '语法错误是C语言程序设计中常见的错误类型，它涉及到程序中的语法规则和语法错误的检测。学生需要了解C语言的基本语法规则，包括标识符的命名规则、语句的结束符号等，以及如何正确地编写和检测语法错误。在这道题目中，学生需要判断给定的程序段中是否存在语法错误。'}]"
    },
    {
        "sortId": 500,
        "id": "1447754095279710208",
        "title": "下列程序段的输出结果是？",
        "content": "下列程序段的输出结果是？\n\n    int a=2,b=3,c=2;\n    if(a<b)\n         if(b<0) c=0;\n\t     else c++;\n    printf(\"%d\\n\",c);",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句','description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是：if (条件) {代码块}，其中条件为一个表达式，如果条件为真，则执行代码块中的语句，否则跳过代码块。'}]"
    },
    {
        "sortId": 501,
        "id": "1447753008090947584",
        "title": "在嵌套使用if语句时，C语言规定else总是？",
        "content": "在嵌套使用if语句时，C语言规定else总是？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'if语句','description':'if语句是C语言中的条件语句，用于根据条件的真假来执行不同的代码块。在嵌套使用if语句时，C语言规定else总是可选的，即可以省略else部分。'}]"
    },
    {
        "sortId": 502,
        "id": "1447751823564972032",
        "title": "能正确表示 逻辑关系“a≥10或a≤0“的C语言表达式是？",
        "content": "能正确表示 逻辑关系“a≥10或a≤0“的C语言表达式是？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '逻辑运算符', 'description': '逻辑运算符用于对多个条件进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）。在本题中，需要使用或运算符（||）来表示“a≥10或a≤0”的逻辑关系。'}]"
    },
    {
        "sortId": 503,
        "id": "1447750908879441920",
        "title": "对于变量定义：int a,b=0；下列叙述中正确的是？",
        "content": "对于变量定义：int a,b=0；下列叙述中正确的是？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义','description':'变量定义是C语言程序设计中的基础知识点，用于声明和定义变量。在C语言中，可以同时定义多个变量，每个变量可以有初始值或者没有初始值。在给变量赋初值时，可以使用等号进行赋值操作。'}]"
    },
    {
        "sortId": 504,
        "id": "1447748799295524864",
        "title": "以下c语言表达式的值不等于1的是？",
        "content": "以下c语言表达式的值不等于1的是？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，有些运算符的优先级比较高，有些运算符的优先级比较低。在表达式中，优先级高的运算符会先执行，优先级低的运算符会后执行。通过了解运算符优先级，可以正确理解表达式的计算结果。'},\n{'name':'逻辑运算符','description':'逻辑运算符用于对表达式进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）和非（!）。通过了解逻辑运算符的使用规则，可以正确判断表达式的逻辑结果。'},\n{'name':'比较运算符','description':'比较运算符用于比较两个表达式的值，常用的比较运算符有等于（==）、不等于（!=）、大于（>）、小于（<）、大于等于（>=）和小于等于（<=）。通过了解比较运算符的使用规则，可以正确比较表达式的值。'},\n{'name':'条件语句','description':'条件语句用于根据表达式的值来执行不同的代码块。在C语言中，常用的条件语句有if语句和switch语句。通过了解条件语句的使用规则，可以根据不同的条件执行不同的代码。'},\n{'name':'循环语句','description':'循环语句用于重复执行一段代码块。在C语言中，常用的循环语句有for循环、while循环和do-while循环。通过了解循环语句的使用规则，可以实现代码的重复执行。'},\n{'name':'数据类型','description':'数据类型用于定义变量的类型和范围。在C语言中，常用的数据类型有整型、浮点型、字符型和指针型等。通过了解数据类型的使用规则，可以正确定义和使用变量。'},\n{'name':'数组','description':'数组是一种存储相同类型数据的集合。在C语言中，数组可以用于存储多个相同类型的数据，并通过下标访问数组中的元素。通过了解数组的使用规则，可以实现对多个数据的有效管理。'},\n{'name':'指针','description':'指针是一种特殊的数据类型，用于存储变量的地址。通过了解指针的使用规则，可以实现对变量的间接访问和操作。'},\n{'name':'函数','description':'函数是一段完成特定任务的代码块。在C语言中，函数可以用于封装一段可重用的代码，并通过函数调用来执行该代码块。通过了解函数的使用规则，可以实现代码的模块化和复用。'},\n{'name':'预处理指令','description':'预处理指令用于在编译之前对源代码进行处理。在C语言中，常用的预处理指令有#include和#define等。通过了解预处理指令的使用规则，可以实现对源代码的预处理操作。'}]"
    },
    {
        "sortId": 505,
        "id": "1447525640067747840",
        "title": "字母 Q 的字长",
        "content": "在 C 语言里，大写字母 'Q' 的字长为  字节。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字节大小', 'description':'字节大小是计算机存储单位的一种，表示存储空间的大小。在C语言中，一个字节由8个二进制位组成，可以表示256个不同的值。'}]"
    },
    {
        "sortId": 506,
        "id": "1447481636345118720",
        "title": "Redemption",
        "content": "I am dreadfully sorry for your bad experience, such a low number of submissions as well as pass rates and my\n![2.jpg](~/ff67870a-2765-43e8-8411-7e33690d169e.jpg)\nin SHI ZHAN YI. \n\n![QQ截图20211022161127.jpg](~/2d5921af-fed1-47fe-b5b0-12448763f694.jpg)\n\nI set up some challenging data points and some a littlt bit hard problems. If you are interested in them, you can try to solve them. If not, that's also **OK**.  In other words, that will **NOT** affect your score. Do **NOT** worried about them. Please take it step by step and please remember, it is really important for you to learn how to study by yourself.\n\nFinally, I am so sorry...\n\n![QQ截图20211011164255.jpg](~/34aaebf2-2314-41e5-835b-de42d1e9c4af.jpg)\n\n***Remarkably HANDSOME***  \\_October has warned me to reduce the difficulty of the problems. So there you just need to output \"HEIlO, W0RLD！\"（without quotation marks）\n\n### Click [题解.pdf](~/218859dd-8885-47aa-b142-ff642ae45679.pdf) to check the solution about SHI ZHAN YI.\n\n### INPUT:\n\nNO INPUT.\n\n### OUTPUT:\n\nAs problem surface said.\n\n### SAMPLE INPUT:\n\n```in\nNONE\n```\n\n### SAMPLE OUTPUT:\n\n```out\nHEIlO, W0RLD！ \n\n```\n\n> See you again at SHI ZHAN SAN.\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出字符串', 'description': '教学描述：学习如何在C语言中输出字符串。'}, {'name': '注释', 'description': '教学描述：学习如何在C语言中添加注释。'}, {'name': '变量声明和赋值', 'description': '教学描述：学习如何在C语言中声明和赋值变量。'}, {'name': '函数定义和调用', 'description': '教学描述：学习如何在C语言中定义和调用函数。'}, {'name': '输入输出', 'description': '教学描述：学习如何在C语言中进行输入和输出操作。'}, {'name': '字符串处理', 'description': '教学描述：学习如何在C语言中处理字符串。'}, {'name': '条件语句', 'description': '教学描述：学习如何在C语言中使用条件语句。'}, {'name': '循环语句', 'description': '教学描述：学习如何在C语言中使用循环语句。'}, {'name': '文件操作', 'description': '教学描述：学习如何在C语言中进行文件操作。'}]"
    },
    {
        "sortId": 507,
        "id": "1447461535369793536",
        "title": "右转弯",
        "content": "请编写程序，在屏幕上显示右转弯的路标。\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```out\n\\\\\\ \\\\\\\n/// ///\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'教学如何使用printf函数进行基本的输出操作'}, {'name':'转义字符','description':'教学如何使用转义字符进行特殊字符的输出'}, {'name':'字符串输出','description':'教学如何输出字符串'}, {'name':'注释','description':'教学如何使用注释进行代码的解释和说明'}, {'name':'程序结构','description':'教学如何编写一个完整的C语言程序的结构'}, {'name':'编译运行','description':'教学如何使用编译器进行C语言程序的编译和运行'}, {'name':'变量定义','description':'教学如何定义变量并进行赋值操作'}, {'name':'数据类型','description':'教学C语言中的基本数据类型和其使用方法'}, {'name':'运算符','description':'教学C语言中的基本运算符和其使用方法'}, {'name':'条件语句','description':'教学C语言中的条件语句和其使用方法'}, {'name':'循环语句','description':'教学C语言中的循环语句和其使用方法'}, {'name':'函数定义','description':'教学如何定义函数和函数的调用'}, {'name':'数组','description':'教学C语言中的数组和其使用方法'}, {'name':'指针','description':'教学C语言中的指针和其使用方法'}, {'name':'结构体','description':'教学C语言中的结构体和其使用方法'}, {'name':'文件操作','description':'教学C语言中的文件操作和其使用方法'}, {'name':'预处理指令','description':'教学C语言中的预处理指令和其使用方法'}, {'name':'递归','description':'教学C语言中的递归和其使用方法'}, {'name':'动态内存分配','description':'教学C语言中的动态内存分配和其使用方法'}, {'name':'位运算','description':'教学C语言中的位运算和其使用方法'}, {'name':'指针与数组','description':'教学指针与数组的关系和使用方法'}, {'name':'字符串处理','description':'教学C语言中的字符串处理和其使用方法'}, {'name':'结构体与指针','description':'教学结构体与指针的关系和使用方法'}, {'name':'文件读写','description':'教学C语言中的文件读写操作和其使用方法'}, {'name':'函数指针','description':'教学C语言中的函数指针和其使用方法'}, {'name':'多文件编程','description':'教学C语言中的多文件编程和其使用方法'}, {'name':'位字段','description':'教学C语言中的位字段和其使用方法'}, {'name':'枚举','description':'教学C语言中的枚举和其使用方法'}, {'name':'联合','description':'教学C语言中的联合和其使用方法'}, {'name':'异常处理','description':'教学C语言中的异常处理和其使用方法'}, {'name':'命令行参数','description':'教学C语言中的命令行参数和其使用方法'}, {'name':'标准库函数','description':'教学C语言中的标准库函数和其使用方法'}, {'name':'编码规范','description':'教学C语言中的编码规范和良好的编程习惯'}, {'name':'调试技巧','description':'教学C语言程序的调试技巧和常见错误的排查方法'}, {'name':'性能优化','description':'教学C语言程序的性能优化方法和技巧'}, {'name':'代码复用','description':'教学C语言程序的代码复用方法和技巧'}, {'name':'错误处理','description':'教学C语言程序的错误处理方法和技巧'}, {'name':'内存管理','description':'教学C语言程序的内存管理方法和技巧'}, {'name':'并发编程','description':'教学C语言程序的并发编程方法和技巧'}, {'name':'网络编程','description':'教学C语言程序的网络编程方法和技巧'}, {'name':'图形界面','description':'教学C语言程序的图形界面编程方法和技巧'}, {'name':'嵌入式编程','description':'教学C语言程序的嵌入式编程方法和技巧'}, {'name':'面向对象','description':'教学C语言程序的面向对象编程方法和技巧'}, {'name':'算法与数据结构','description':'教学C语言程序的算法与数据结构的基本概念和实现方法'}, {'name':'操作系统','description':'教学C语言程序在操作系统中的运行机制和调用接口'}, {'name':'网络协议','description':'教学C语言程序在网络协议中的实现和应用'}, {'name':'数据库','description':'教学C语言程序在数据库中的操作和应用'}, {'name':'图像处理','description':'教学C语言程序在图像处理中的算法和实现'}, {'name':'人工智能','description':'教学C语言程序在人工智能领域的应用和实现'}, {'name':'物联网','description':'教学C语言程序在物联网领域的应用和实现'}, {'name':'区块链','description':'教学C语言程序在区块链领域的应用和实现'}, {'name':'机器学习','description':'教学C语言程序在机器学习领域的应用和实现'}, {'name':'深度学习','description':'教学C语言程序在深度学习领域的应用和实现'}, {'name':'自然语言处理','description':'教学C语言程序在自然语言处理领域的应用和实现'}, {'name':'计算机视觉','description':'教学C语言程序在计算机视觉领域的应用和实现'}, {'name':'数据挖掘','description':'教学C语言程序在数据挖掘领域的应用和实现'}, {'name':'云计算','description':'教学C语言程序在云计算领域的应用和实现'}, {'name':'大数据','description':'教学C语言程序在大数据领域的应用和实现'}, {'name':'物理模拟','description':'教学C语言程序在物理模拟领域的应用和实现'}, {'name':'游戏开发','description':'教学C语言程序在游戏开发领域的应用和实现'}, {'name':'嵌入式系统','description':'教学C语言程序在嵌入式系统中的应用和实现'}, {'name':'网络安全','description':'教学C语言程序在网络安全领域的应用和实现'}, {'name':'人机交互','description':'教学C语言程序在人机交互领域的应用和实现'}, {'name':'软件工程','description':'教学C语言程序的软件工程方法和技巧'}, {'name':'计算机组成原理','description':'教学C语言程序在计算机组成原理中的应用和实现'}, {'name':'操作系统原理','description':'教学C语言程序在操作系统原理中的应用和实现'}, {'name':'编译原理','description':'教学C语言程序在编译原理中的应用和实现'}, {'name':'数据库原理','description':'教学C语言程序在数据库原理中的应用和实现'}, {'name':'网络原理','description':'教学C语言程序在网络原理中的应用和实现'}, {'name':'算法设计与分析','description':'教学C语言程序在算法设计与分析中的应用和实现'}, {'name':'计算机图形学','description':'教学C语言程序在计算机图形学中的应用和实现'}, {'name':'计算机网络','description':'教学C语言程序在计算机网络中的应用和实现'}, {'name':'计算机安全','description':'教学C语言程序在计算机安全中的应用和实现'}, {'name':'计算机体系结构','description':'教学C语言程序在计算机体系结构中的应用和实现'}, {'name':'计算机算法','description':'教学C语言程序在计算机算法中的应用和实现'}, {'name':'计算机数据结构','description':'教学C语言程序在计算机数据结构中的应用和实现'}, {'name':'计算机操作系统','description':'教学C语言程序在计算机操作系统中的应用和实现'}, {'name':'计算机编译原理','description':'教学C语言程序在计算机编译原理中的应用和实现'}, {'name':'计算机数据库','description':'教学C语言程序在计算机数据库中的应用和实现'}, {'name':'计算机网络原理','description':'教学C语言程序在计算机网络原理中的应用和实现'}, {'name':'计算机算法设计与分析','description':'教学C语言程序在计算机算法设计与分析中的应用和实现'}, {'name':'计算机计算机图形学','description':'教学C语言程序在计算机计算机图形学中的应用和实现'}, {'name':'计算机计算机网络','description':'教学C语言程序在计算机计算机网络中的应用和实现'}, {'name':'计算机计算机安全','description':'教学C语言程序在计算机计算机安全中的应用和实现'}, {'name':'计算机计算机体系结构','description':'教学C语言程序在计算机计算机体系结构中的应用和实现'}, {'name':'计算机计算机算法','description':'教学C语言程序在计算机计算机算法中的应用和实现'}, {'name':'计算机计算机数据结构','description':'教学C语言程序在计算机计算机数据结构中的应用和实现'}, {'name':'计算机计算机操作系统','description':'教学C语言程序在计算机计算机操作系统中的应用和实现'}, {'name':'计算机计算机编译原理','description':'教学C语言程序在计算机计算机编译原理中的应用和实现'}, {'name':'计算机计算机数据库','description':'教学C语言程序在计算机计算机数据库中的应用和实现'}, {'name':'计算机计算机网络原理','description':'教学C语言程序在计算机计算机网络原理中的应用和实现'}, {'name':'计算机计算机算法设计与分析','description':'教学C语言程序在计算机计算机算法设计与分析中的应用和实现'}, {'name':'计算机计算机计算机图形学','description':'教学C语言程序在计算机计算机计算机图形学中的应用和实现'}, {'name':'计算机计算机计算机网络','description':'教学C语言程序在计算机计算机计算机网络中的应用和实现'}, {'name':'计算机计算机计算机安全','description':'教学C语言程序在计算机计算机计算机安全中的应用和实现'}, {'name':'计算机计算机计算机体系结构','description':'教学C语言程序在计算机计算机计算机体系结构中的应用和实现'}, {'name':'计算机计算机计算机算法','description':'教学C语言程序在计算机计算机计算机算法中的应用和实现'}, {'name':'计算机计算机计算机数据结构','description':'教学C语言程序在计算机计算机计算机数据结构中的应用和实现'}, {'name':'计算机计算机计算机操作系统','description':'教学C语言程序在计算机计算机计算机操作系统中的应用和实现'}, {'name':'计算机计算机计算机编译原理','description':'教学C语言程序在计算机计算机计算机编译原理中的应用和实现'}, {'name':'计算机计算机计算机数据库','description':'教学C语言程序在计算机计算机计算机数据库中的应用和实现'}, {'name':'计算机计算机计算机网络原理','description':'教学C语言程序在计算机计算机计算机网络原理中的应用和实现'}, {'name':'计算机计算机计算机算法设计与分析','description':'教学C语言程序在计算机计算机计算机算法设计与分析中的应用和实现'}, {'name':'计算机计算机计算机计算机图形学','description':'教学C语言程序在计算机计算机计算机计算机图形学中的应用和实现'}, {'name':'计算机计算机计算机计算机网络','description':'教学C语言程序在计算机计算机计算机计算机网络中的应用和实现'}, {'name':'计算机计算机计算机计算机安全','description':'教学C语言程序在计算机计算机计算机计算机安全中的应用和实现'}, {'name':'计算机计算机计算机计算机体系结构','description':'教学C语言程序在计算机计算机计算机计算机体系结构中的应用和实现'}, {'name':'计算机计算机计算机计算机算法','description':'教学C语言程序在计算机计算机计算机计算机算法中的应用和实现'}, {'name':'计算机计算机计算机计算机数据结构','description':'教学C语言程序在计算机计算机计算机计算机数据结构中的应用和实现'}, {'name':'计算机计算机计算机计算机操作系统','description':'教学C语言程序在计算机计算机计算机计算机操作系统中的应用和实现'}, {'name':'计算机计算机计算机计算机编译原理','description':'教学C语言程序在计算机计算机计算机计算机编译原理中的应用和实现'}, {'name':'计算机计算机计算机计算机数据库','description':'教学C语言程序在计算机计算机计算机计算机数据库中的应用和实现'}, {'name':'计算机计算机计算机计算机网络原理','description':'教学C语言程序在计算机计算机计算机计算机网络原理中的应用和实现'}, {'name':'计算机计算机计算机计算机算法设计与分析','description':'教学C语言程序在计算机计算机计算机计算"
    },
    {
        "sortId": 508,
        "id": "1447109016982474752",
        "title": "书虫",
        "content": "小明买了10本一样厚的书，按编号从1到10相邻着一起放在书架上，不巧其中1本跑进了1只书虫。这只书虫也怪，总是从某本书的第一页跑到另一本书的最后一页。每本书的厚度（不包括封面和封底）为v，每本书封面和封底厚度都是c，求书虫从第s本书开始爬到第t本书所爬过的距离。(书本序号从左往右从1开始编号)\n\n### 输入格式:\n\n测试数据有多组，每组4个整数v，c，s，t，含义如上，输入到文件尾结束。\n\n### 输出格式:\n\n对于每组测试，在一行上输出书虫所爬过的距离。\n\n### 输入样例:\n\n```in\n10 1 1 2\n10 2 5 2\n```\n\n### 输出样例:\n\n```out\n2\n52\n```\n\n### 提示:\n\n按一般习惯，放书时按编号从小到大，从左往右竖立，封面同向。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'运算符'，'description':'C语言中的各种运算符的使用方法和优先级。'}, {'name':'条件语句'，'description':'C语言中的条件语句（if语句）的使用方法和语法结构。'}, {'name':'循环语句'，'description':'C语言中的循环语句（for循环、while循环）的使用方法和语法结构。'}, {'name':'函数'，'description':'C语言中函数的定义和调用方法，以及函数的参数传递和返回值。'}, {'name':'数组'，'description':'C语言中数组的定义和使用方法，以及数组的遍历和操作。'}, {'name':'指针'，'description':'C语言中指针的概念和使用方法，以及指针和数组的关系。'}, {'name':'文件操作'，'description':'C语言中文件的打开、读写和关闭操作，以及文件指针的使用方法。'}, {'name':'字符串操作'，'description':'C语言中字符串的定义和使用方法，以及字符串的比较和拼接。'}, {'name':'结构体'，'description':'C语言中结构体的定义和使用方法，以及结构体的成员访问和操作。'}, {'name':'指针和动态内存分配'，'description':'C语言中指针和动态内存分配的概念和使用方法，以及内存泄漏和野指针的问题。'}, {'name':'预处理指令'，'description':'C语言中预处理指令的使用方法和预处理器的功能。'}, {'name':'位运算'，'description':'C语言中位运算的概念和使用方法，以及位运算的应用场景。'}, {'name':'递归'，'description':'C语言中递归的概念和使用方法，以及递归算法的设计和优化。'}, {'name':'数据结构'，'description':'C语言中常见的数据结构（如链表、栈、队列、树）的定义和操作方法。'}, {'name':'算法'，'description':'C语言中常见的算法（如排序、查找、图算法）的实现和优化。'}, {'name':'输入输出'，'description':'C语言中输入输出的格式化和非格式化方法，以及文件的读写操作。'}, {'name':'错误处理'，'description':'C语言中错误处理的方法和技巧，以及异常处理和错误码的使用。'}, {'name':'调试和优化'，'description':'C语言程序的调试和优化方法，以及常见的性能问题和解决方案。'}, {'name':'多线程和并发'，'description':'C语言中多线程和并发编程的概念和使用方法，以及线程同步和互斥的技术。'}, {'name':'网络编程'，'description':'C语言中网络编程的基本概念和使用方法，以及套接字和网络协议的操作。'}, {'name':'图形界面编程'，'description':'C语言中图形界面编程的基本概念和使用方法，以及常见的图形库和界面设计。'}, {'name':'嵌入式系统'，'description':'C语言在嵌入式系统开发中的应用和特点，以及硬件和外设的操作方法。'}, {'name':'面向对象编程'，'description':'C语言中面向对象编程的基本概念和使用方法，以及类、对象和继承的实现。'}, {'name':'并行计算'，'description':'C语言中并行计算的概念和使用方法，以及多核处理器和分布式系统的编程技术。'}, {'name':'安全编程'，'description':'C语言中安全编程的方法和技巧，以及常见的安全漏洞和防御措施。'}, {'name':'代码管理'，'description':'C语言程序的版本管理和代码管理工具的使用方法，以及团队协作和代码审查的技巧。'}, {'name':'软件工程'，'description':'C语言程序开发中的软件工程方法和流程，以及需求分析和系统设计的技术。'}, {'name':'项目实践'，'description':'C语言程序开发中的项目实践和实际应用，以及项目管理和项目经验的总结。'}]"
    },
    {
        "sortId": 509,
        "id": "1446743324828299264",
        "title": "成绩统计表",
        "content": "某大学全校都开设C语言课程，每学年结束都按成绩进行统计。请编写程序，输入优秀、良好、中等、及格和不及格的人数，输出成绩统计表。\n\n#### 输入样例\n```in\n36\n275\n1806\n2194\n101\n\n```\n\n#### 输出样例\n```out\nRank      Number\n----------------\nExcellent     36\nGood         275\nMedium      1806\nPass        2194\nFail         101\n----------------\nTotal       4412\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用输入输出函数进行数据的输入和输出操作。'}, {'name':'变量和数据类型','description':'学习如何定义变量和使用不同的数据类型来存储数据。'}, {'name':'运算符和表达式','description':'学习如何使用运算符和表达式进行数值计算和逻辑判断。'}, {'name':'控制语句','description':'学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name':'数组','description':'学习如何定义和使用数组来存储和处理多个相同类型的数据。'}, {'name':'函数','description':'学习如何定义和调用函数来实现代码的模块化和重用。'}, {'name':'字符串','description':'学习如何定义和操作字符串类型的数据。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件来进行文件的输入输出操作。'}]"
    },
    {
        "sortId": 510,
        "id": "1444652660377325568",
        "title": "笑话",
        "content": "汤普森先生讲了一个笑话，朋友们都笑了。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n                          The Joke\n\n    Sir William Thompson  was very deaf  but he did not like\npeople to  know this.  One evening  he  had invited  several\nfriends to dinner, and while they were sitting at the table,\none of the friends told a funny story. Everyone laughed, and\nSir William, who had laughed as loud as anyone,  said,  That\nwas a very funny joke,  but I know a funnier one.  Would you\nlike to hear it?   They all said they would,  so Sir William\nbegan his story. When it ended, everyone laughed louder than\never and Sir William smiled happily.  But he didn't know the\nreason for their laughter.  He had told the very same  story\nthat his friend had just told.\n\n```\n\n提示：如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置。\n- 用鼠标右键点击窗口标题栏，选择“属性”\n- 切换到“选项”卡片，选择“使用旧版控制台”\n- 切换到“字体”卡片，字体选择“点阵字体”，大小选择“8×16”\n- 点击“确定”按钮\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'本题无输入，直接输出一段文字。'}, {'name':'字符串处理','description':'本题涉及字符串的处理，包括字符串的输出和拼接。'}, {'name':'条件语句','description':'本题涉及条件语句的使用，根据条件判断执行不同的操作。'}, {'name':'循环语句','description':'本题涉及循环语句的使用，重复执行某段代码。'}, {'name':'变量定义和赋值','description':'本题涉及变量的定义和赋值操作。'}, {'name':'函数调用','description':'本题涉及函数的调用操作。'}]"
    },
    {
        "sortId": 511,
        "id": "1443757848107225088",
        "title": "黑白子交换棋局",
        "content": "请编写程序，输出下面的黑白子初始状态和终止状态。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n○○○  ●●●\n●●●  ○○○\n\n```\n\n实际显示效果如下：\n\n> ![黑白子交换.jpg](~/141b8ad8-20b6-4248-af55-9f03d81fa43f.jpg)\n\n注：空白处为西文空格。\n\n---\n\n提示：\n\n如果你使用的是 Windows 7/8/10 操作系统，需要对运行窗口进行设置：用鼠标右键点击窗口标题栏，选择“属性”，切换到“选项”卡片，选择“使用旧版控制台”，再切换到“字体”卡片，选择“点阵字体”、“8×16”，最后点击“确定”按钮。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法','description':'学习C语言的基本语法，包括变量、数据类型、运算符、控制语句等。'}, {'name':'输入输出','description':'学习如何在C语言中进行输入和输出操作，包括使用scanf和printf函数。'}, {'name':'数组','description':'学习如何定义和使用数组，包括一维数组和多维数组。'}, {'name':'字符串','description':'学习如何定义和使用字符串，包括字符串的输入输出、字符串的比较和拼接等操作。'}, {'name':'函数','description':'学习如何定义和调用函数，包括函数的参数传递、函数的返回值等。'}, {'name':'指针','description':'学习如何定义和使用指针，包括指针的声明、指针的运算等。'}, {'name':'结构体','description':'学习如何定义和使用结构体，包括结构体的成员、结构体的初始化等。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作，包括打开文件、关闭文件、读取文件内容、写入文件内容等。'}, {'name':'动态内存分配','description':'学习如何使用动态内存分配函数malloc和free，包括动态分配内存、释放内存等操作。'}, {'name':'递归','description':'学习如何使用递归函数，包括递归的定义、递归的调用等。'}, {'name':'排序算法','description':'学习常见的排序算法，包括冒泡排序、插入排序、选择排序、快速排序等。'}]"
    },
    {
        "sortId": 512,
        "id": "1443167319631896576",
        "title": "贴“福”字",
        "content": "请编写程序，输出“福”字。\n\n####  输入样例\n```in\n\n\n```\n注：无输入。\n\n####  输出样例\n\n```out\n    *                   *\n      *   * * * * * * * * *\n      *\n            * * * * * * *\n* * * * *   *           *\n        *   *           *\n      *     * * * * * * *\n    * * *                 *\n  *   *   * * * * * * * * * *\n*     *   *       *       *\n      *   *       *       *\n      *   * * * * * * * * *\n      *   *       *       *\n      *   *       *       *\n      *   * * * * * * * * *\n      *   *               *\n\n```\n\n---\n\n注：每行末尾没有多余的空白字符。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出', 'description':'使用printf函数输出字符'}]"
    },
    {
        "sortId": 513,
        "id": "1443162524997165056",
        "title": "分段函数求值",
        "content": "根据如下分段函数定义求$$y$$的值。\n\n$$\ny = \\begin{cases}\n   x^2 &  x<0 \\\\\n   2x-1 & 0 \\le x<10 \\\\\t \n\t 3x-11& x \\ge 10\n\\end{cases}\n$$\n\n### 输入格式:\n\n在一行中输入浮点数$$x$$。\n\n\n### 输出格式:\n\n输出$$y$$的值，保留两位小数。\n\n\n### 输入样例:\n\n\n```in\n-5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n25.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，根据输入的x的值，使用条件语句来判断x所属的范围，并计算出对应的y的值。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，需要定义一个变量x来存储输入的浮点数值。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行数学运算或逻辑运算的符号。在本题中，需要使用数学运算符和比较运算符来计算y的值。'}, {'name': '输出格式控制', 'description': '输出格式控制是C语言中用于控制输出结果的格式的一种技术。在本题中，需要使用输出格式控制来保留y的值的小数位数。'}]"
    },
    {
        "sortId": 514,
        "id": "1443158254373609472",
        "title": "有志者，事竟成！",
        "content": "请编写程序，输出下面的文字。\n\n```c\n===========================================\n Nothing is impossible to a willing heart!\n===========================================\n```\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n===========================================\n Nothing is impossible to a willing heart!\n===========================================\n\n```\n\n---\n\n注：每行末尾没有多余的空白字符。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出文本','description':'使用printf函数输出指定的文本内容'}]"
    },
    {
        "sortId": 515,
        "id": "1443154393957195776",
        "title": "二元一次方程的解",
        "content": "求二元一次方程的解，\n\n$$\nax+by=c \\\\\ndx+ey=f\n$$\n\n### 输入格式:\n在一行中给出$$a、b、c、d、e、f$$的值，都为整数。\n### 输出格式:\n\n无数解，输出`0 0`；无解输出`-1 -1`；有解，输出$$x、y$$的解，保留两位小数。\n\n### 输入样例:\n\n\n```in\n2 3 5 1 -4 7\n```\n### 输出样例:\n```out\n3.73 -0.82\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 25,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '二元一次方程', 'description': '教学描述：二元一次方程是指含有两个未知数的一次方程，形如ax+by=c。教学重点应该包括方程的解的判断以及解的求解方法。'}]"
    },
    {
        "sortId": 516,
        "id": "1443116286297808896",
        "title": "求一元二次方程的根",
        "content": "求$$ax^2+bx+c=0$$的根。\n\n### 输入格式:\n\n在一行给出$$a(\\ne 0)、b、c$$三个整数的值（a非）。\n\n### 输出格式:\n\n如果有实数根，在一行从小到大顺序输出两个根，保留小数点后2位。如果是虚数根，输出两个-1。\n\n### 输入样例:\n\n\n```in\n1 -2 1\n```\n```in\n4 6 1\n```\n```in\n4 3 1\n```\n\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1.00 1.00\n```\n```out\n-1.31 -0.19\n```\n```out\n-1 -1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'一元二次方程求根','description':'通过求解一元二次方程的根来理解解析式、判别式和根的性质。'}]"
    },
    {
        "sortId": 517,
        "id": "1443105597609009152",
        "title": "交换三个整数的次序",
        "content": "本题目要求输入3个整数值a、b、c，把b中的值赋给a，把c中的值赋给b，把a中的值赋给c，最后输出a、b、c的值。\n\n### 输入格式:\n\n输入在一行中给出3个整数a、b、c，中间用空格隔开。\n\n### 输出格式:\n\n对每一组输入，在一行中输出交换后的a、b、c的值，中间用空格隔开。\n\n### 输入样例:\n\n\n```in\n4 5 6\n```\n\n### 输出样例:\n\n\n```out\n5 6 4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量交换','description':'本知识点主要涉及变量的赋值和交换操作。通过使用临时变量，可以实现两个变量的值交换。'}]"
    },
    {
        "sortId": 518,
        "id": "1443098337411391488",
        "title": "编程计算2345+6789之和。",
        "content": "可参照教材P.4 [例1.2]\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等，学生需要了解各种数据类型的表示范围、存储方式以及常见的数据类型转换方法。'},\n{'name':'变量和常量'，'description':'学生需要了解变量和常量的概念，以及如何声明和使用变量和常量。'},\n{'name':'运算符'，'description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符等，学生需要了解各种运算符的优先级和使用方法。'},\n{'name':'控制语句'，'description':'C语言中的控制语句包括条件语句、循环语句和跳转语句，学生需要了解各种控制语句的语法和使用场景。'},\n{'name':'数组'，'description':'学生需要了解数组的概念、声明和使用方法，以及多维数组的表示和操作。'},\n{'name':'函数'，'description':'学生需要了解函数的概念、声明和调用方法，以及函数的参数传递和返回值。'},\n{'name':'指针'，'description':'学生需要了解指针的概念、声明和使用方法，以及指针和数组、指针和函数之间的关系。'},\n{'name':'字符串'，'description':'学生需要了解字符串的概念、表示方法和常见的字符串操作函数。'},\n{'name':'结构体'，'description':'学生需要了解结构体的概念、声明和使用方法，以及结构体和指针、结构体和数组之间的关系。'},\n{'name':'文件操作'，'description':'学生需要了解文件的打开、读写和关闭操作，以及文件指针的使用方法。'}]"
    },
    {
        "sortId": 519,
        "id": "1443023596314947584",
        "title": "365次方",
        "content": "网上曾经有两个很火的公式，那就是1的365次方是1，1.01的365次方约等于37.8，0.99的365次方约等于0.03。每天多努力百分之一，每天进步百分之一，一年以后将取得很大进步，而每天退步百分之一，一年以后将所剩无几。\n\n![365次方1.png](~/4df7d6d7-cf3c-4fc1-81fa-f4f127e97849.png)\n\n每天进步百分之二或退步百分之二，差距竟是如此之大。\n\n![365次方2.png](~/a45bda4f-baf0-4517-955c-c738c4954c6a.png)\n\n本题要求对于给定的小数x，计算1+x和1-x的365次方。\n\n### 输入格式:\n\n输入为一个小数x（0<x<0.05）。\n\n### 输出格式:\n\n输出数据有两行，第一行输出1+x的365次方，第二行输出1-x的365次方，其中所有小数位数都保留8位。\n\n### 输入样例:\n\n\n\n```in\n0.01\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n37.78343433\n0.02551796\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '幂运算', 'description': '幂运算是指将一个数自乘多次的运算。在C语言中，可以使用pow函数进行幂运算。'}]"
    },
    {
        "sortId": 520,
        "id": "1442738243986010112",
        "title": "基础数据类型的输入（4）字符串",
        "content": "在最初问候了“Hello World!”之后，我们接触了C语言的若干基本数据类型，我们逐个打声招呼吧。最后是字符串。要求：输入一个字符串，比如你姓名的拼音（中间没有空格，字符串内容不超过20个字符）。\n\n### 输入格式:\n\n一个字符串，长度不超过20。\n\n### 输出格式:\n\n按照输出样例输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nZhangSan\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nhello , ZhangSan!\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '基本数据类型', 'description': '在C语言中，有几种基本数据类型，包括整型、浮点型、字符型等。学生需要了解这些数据类型的定义、范围、存储方式等基本知识。'}, {'name': '字符串', 'description': '字符串是由字符组成的一串数据，在C语言中使用字符数组来表示字符串。学生需要了解字符串的定义、输入输出、比较、拼接等操作。'}]"
    },
    {
        "sortId": 521,
        "id": "1442513231004782592",
        "title": "熟悉PTA环境。输出：^^^^^^^^Hello PTA^^^^^^^^",
        "content": "本题目要求按格式输出字符。\n\n### 输入格式:\n\n无输入。\n\n### 输出格式:\n\n分3行输出。第1、3行8个^。第3行的最后无需换行。\n\n### 输入样例:\n本题无需输入。\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n^^^^^^^^\nHello PTA\n^^^^^^^^\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式化输出','description':'格式化输出是C语言中常用的输出方式，可以通过控制输出的格式来满足不同的需求。在本题中，要求按照指定的格式输出字符。'}]"
    },
    {
        "sortId": 522,
        "id": "1442342776797089792",
        "title": "在8位系统下，所表示的8位二进制有符号数的最大值加1时会出现什么结果？",
        "content": "8位二进制所能表示的数值原本为：-127~+127之间。\n当最大值127再加上1时，在计算机中由补码进行表示时会出现什么问题？\n",
        "type": "SUBJECTIVE",
        "difficulty": 2,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'补码表示','description':'补码是一种用于表示有符号整数的编码方式，它可以解决负数的表示问题。在计算机中，补码表示法常用于表示有符号整数。补码的表示方法是将一个数的绝对值的二进制表示取反，然后再加1。补码的优点是可以将加法和减法统一起来，同时可以避免出现正零和负零的问题。当最大值127再加上1时，由于计算机中整数的表示范围是有限的，会发生溢出的情况，即结果会回到最小值-128。'}]"
    },
    {
        "sortId": 523,
        "id": "1438498044507865088",
        "title": "scanf()函数在读不到数据时返回（）",
        "content": "scanf()函数在读不到数据时返回（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'scanf函数', 'description': 'scanf函数是C语言中用于从标准输入流中读取数据的函数。它可以根据指定的格式字符串，将输入的数据按照指定的类型进行解析并存储到相应的变量中。当读取不到数据时，scanf函数会返回一个特定的值，用于表示读取失败。'}]"
    },
    {
        "sortId": 524,
        "id": "1437763036889235456",
        "title": "太神奇了",
        "content": "\n![sq.jpg](~/f48c1718-07da-4e8e-ba43-c4a943f36e4b.jpg)\n\n\n“告诉大家一个神奇的消息，太神奇了：明年全世界所有的人都同岁，全部都等于2022。明年的日子很特别，大概每1000年才会有一次。明年你的周岁年龄+你的出生年，每个人都是2022年。例如：你明年57加上1965年生的，加起来就是2022年。特别奇怪，连中外专家都无法解释！你计算一下，看看是不是2022。真是千年等一回呀！真准！转朋友圈，让大伙都算一下吧！”\n\n据说这个“电子包浆”贴每年都会出现。本题就请你根据发贴人提到的周岁年龄和出生年，判断其发贴的时候是哪一年。\n\n### 输入格式：\n\n输入在第一行中给出两个正整数，即周岁年龄和出生年，其中年龄在 (0, 200) 区间内，出生年在 (1900, 2022) 区间内。\n\n### 输出格式：\n\n在一行中输出发贴年份。\n\n\n### 输入样例：\n```in\n57 1965\n\n```\n\n### 输出样例：\n```out\n2021\n\n```\n\n### 样例说明\n\n因为贴子里说“**明年**全世界所有的人都同岁”，所以发贴是在**今年**，即 2021 年。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。常见的数据类型包括整型、浮点型、字符型等。在本题中，需要使用整型变量来存储周岁年龄和出生年。'}, {'name': '算术运算符', 'description': '在C语言中，算术运算符用于进行数值的加减乘除等运算。在本题中，需要使用加法运算符来计算周岁年龄和出生年的和。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在本题中，需要使用条件语句来判断发贴的年份。'}, {'name': '输出语句', 'description': '输出语句用于将结果输出到屏幕上。在本题中，需要使用输出语句将发贴的年份输出。'}]"
    },
    {
        "sortId": 525,
        "id": "1437400427178405888",
        "title": "求三门课程的平均分",
        "content": "某同学本学期学习了C语言，高数和英语，请输入三门课程的成绩，并输出三门课程的平均分。\n\n### 输入格式:\n在一行中输入3个浮点型数据，空格分隔。\n\n### 输出格式:\n\n输出平均分，保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n79 87.6 83\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n83.20\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型等。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数，包括scanf和printf等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、赋值运算符等。'}, {'name':'控制语句'，'description':'C语言中的控制语句，包括条件语句、循环语句等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组、多维数组等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用等。'}, {'name':'格式化输出'，'description':'C语言中的格式化输出，包括格式化输出的控制符等。'}, {'name':'浮点数运算'，'description':'C语言中的浮点数运算，包括浮点数的精度问题等。'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的操作等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的操作等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的操作等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写等。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配，包括动态内存的申请、动态内存的释放等。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令，包括宏定义、条件编译等。'}, {'name':'递归'，'description':'C语言中的递归，包括递归的定义、递归的应用等。'}, {'name':'位运算'，'description':'C语言中的位运算，包括位运算的基本操作等。'}, {'name':'指针与数组'，'description':'C语言中的指针与数组的关系，包括指针与数组的转换等。'}, {'name':'结构体与指针'，'description':'C语言中的结构体与指针的关系，包括结构体指针的定义、结构体指针的操作等。'}, {'name':'函数指针'，'description':'C语言中的函数指针，包括函数指针的定义、函数指针的应用等。'}, {'name':'多文件编程'，'description':'C语言中的多文件编程，包括多文件编程的组织、多文件编程的调用等。'}, {'name':'错误处理'，'description':'C语言中的错误处理，包括错误处理的方法、错误处理的应用等。'}, {'name':'数据结构'，'description':'C语言中的数据结构，包括链表、栈、队列等。'}, {'name':'算法'，'description':'C语言中的算法，包括排序算法、查找算法等。'}, {'name':'编程规范'，'description':'C语言中的编程规范，包括命名规范、缩进规范等。'}, {'name':'调试技巧'，'description':'C语言中的调试技巧，包括断点调试、打印调试等。'}, {'name':'性能优化'，'description':'C语言中的性能优化，包括算法优化、代码优化等。'}, {'name':'内存管理'，'description':'C语言中的内存管理，包括内存泄漏、内存溢出等。'}, {'name':'并发编程'，'description':'C语言中的并发编程，包括线程、进程等。'}, {'name':'网络编程'，'description':'C语言中的网络编程，包括套接字、网络通信等。'}, {'name':'图形界面编程'，'description':'C语言中的图形界面编程，包括图形界面库、图形界面设计等。'}, {'name':'嵌入式编程'，'description':'C语言中的嵌入式编程，包括单片机、嵌入式系统等。'}, {'name':'面向对象编程'，'description':'C语言中的面向对象编程，包括类、对象、继承等。'}, {'name':'异常处理'，'description':'C语言中的异常处理，包括异常的捕获、异常的处理等。'}, {'name':'模块化编程'，'description':'C语言中的模块化编程，包括模块的划分、模块的调用等。'}, {'name':'代码重构'，'description':'C语言中的代码重构，包括代码的优化、代码的重用等。'}, {'name':'软件工程'，'description':'C语言中的软件工程，包括需求分析、设计模式等。'}, {'name':'安全编程'，'description':'C语言中的安全编程，包括缓冲区溢出、代码注入等。'}, {'name':'网络安全'，'description':'C语言中的网络安全，包括加密算法、防火墙等。'}, {'name':'操作系统'，'description':'C语言中的操作系统，包括进程管理、内存管理等。'}, {'name':'数据库'，'description':'C语言中的数据库，包括SQL语句、数据库操作等。'}, {'name':'人工智能'，'description':'C语言中的人工智能，包括机器学习、深度学习等。'}, {'name':'物联网'，'description':'C语言中的物联网，包括传感器、无线通信等。'}, {'name':'区块链'，'description':'C语言中的区块链，包括加密货币、智能合约等。'}, {'name':'云计算'，'description':'C语言中的云计算，包括云服务、分布式计算等。'}, {'name':'大数据'，'description':'C语言中的大数据，包括数据挖掘、数据分析等。'}, {'name':'机器人'，'description':'C语言中的机器人，包括机器人控制、机器人视觉等。'}, {'name':'虚拟现实'，'description':'C语言中的虚拟现实，包括虚拟现实技术、虚拟现实应用等。'}, {'name':'游戏开发'，'description':'C语言中的游戏开发，包括游戏引擎、游戏设计等。'}, {'name':'移动应用开发'，'description':'C语言中的移动应用开发，包括Android开发、iOS开发等。'}, {'name':'Web开发'，'description':'C语言中的Web开发，包括前端开发、后端开发等。'}, {'name':'嵌入式系统'，'description':'C语言中的嵌入式系统，包括嵌入式系统的设计、嵌入式系统的开发等。'}, {'name':'网络安全'，'description':'C语言中的网络安全，包括网络安全的基本概念、网络安全的技术等。'}, {'name':'人工智能'，'description':'C语言中的人工智能，包括人工智能的基本原理、人工智能的应用等。'}, {'name':'数据结构与算法'，'description':'C语言中的数据结构与算法，包括数据结构的基本概念、算法的基本思想等。'}, {'name':'操作系统'，'description':'C语言中的操作系统，包括操作系统的基本原理、操作系统的功能等。'}, {'name':'数据库'，'description':'C语言中的数据库，包括数据库的基本概念、数据库的操作等。'}, {'name':'网络编程'，'description':'C语言中的网络编程，包括网络编程的基本原理、网络编程的应用等。'}, {'name':'图形界面编程'，'description':'C语言中的图形界面编程，包括图形界面编程的基本原理、图形界面编程的应用等。'}, {'name':'嵌入式系统'，'description':'C语言中的嵌入式系统，包括嵌入式系统的基本原理、嵌入式系统的开发等。'}, {'name':'软件工程'，'description':'C语言中的软件工程，包括软件工程的基本概念、软件工程的方法等。'}, {'name':'计算机网络'，'description':'C语言中的计算机网络，包括计算机网络的基本原理、计算机网络的协议等。'}, {'name':'计算机组成原理'，'description':'C语言中的计算机组成原理，包括计算机组成原理的基本概念、计算机组成原理的设计等。'}, {'name':'编译原理'，'description':'C语言中的编译原理，包括编译原理的基本概念、编译原理的方法等。'}, {'name':'人机交互'，'description':'C语言中的人机交互，包括人机交互的基本原理、人机交互的技术等。'}, {'name':'计算机图形学'，'description':'C语言中的计算机图形学，包括计算机图形学的基本原理、计算机图形学的应用等。'}, {'name':'计算机安全'，'description':'C语言中的计算机安全，包括计算机安全的基本概念、计算机安全的技术等。'}, {'name':'计算机体系结构'，'description':'C语言中的计算机体系结构，包括计算机体系结构的基本概念、计算机体系结构的设计等。'}, {'name':'计算机算法'，'description':'C语言中的计算机算法，包括计算机算法的基本概念、计算机算法的设计等。'}, {'name':'计算机操作系统'，'description':'C语言中的计算机操作系统，包括计算机操作系统的基本概念、计算机操作系统的功能等。'}, {'name':'计算机网络'，'description':'C语言中的计算机网络，包括计算机网络的基本概念、计算机网络的协议等。'}, {'name':'计算机组成原理'，'description':'C语言中的计算机组成原理，包括计算机组成原理的基本概念、计算机组成原理的设计等。'}, {'name':'编译原理'，'description':'C语言中的编译原理，包括编译原理的基本概念、编译原理的方法等。'}, {'name':'人机交互'，'description':'C语言中的人机交互，包括人机交互的基本原理、人机交互的技术等。'}, {'name':'计算机图形学'，'description':'C语言中的计算机图形学，包括计算机图形学的基本原理、计算机图形学的应用等。'}, {'name':'计算机安全'，'description':'C语言中的计算机安全，包括计算机安全的基本概念、计算机安全的技术等。'}, {'name':'计算机体系结构'，'description':'C语言中的计算机体系结构，包括计算机体系结构的基本概念、计算机体系结构的设计等。'}, {'name':'计算机算法'，'description':'C语言中的计算机算法，包括计算机算法的基本概念、计算机算法的设计等。'}, {'name':'计算机操作系统'，'description':'C语言中的计算机操作系统，包括计算机操作系统的基本概念、计算机操作系统的功能等。'}, {'name':'计算机网络'，'description':'C语言中的计算机网络，包括计算机网络的基本概念、计算机网络的协议等。'}, {'name':'计算机组成原理'，'description':'C语言中的计算机组成原理，包括计算机组成原理的基本概念、计算机组成原理的设计等。'}, {'name':'编译原理'，'description':'C语言中的编译原理，包括编译原理的基本概念、编译原理的方法等。'}, {'name':'人机交互'，'description':'C语言中的人机交互，包括人机交互的基本原理、人机交互的技术等。'}, {'name':'计算机图形学'，'description':'C语言中的计算机图形学，包括计算机图形学的基本原理、计算机图形学的应用等。'}, {'name':'计算机安全'，'description':'C语言中的计算机安全，包括计算机安全的基本概念、计算机安全的技术等。'}, {'name':'计算机体系结构'，'description':'C语言中的计算机体系结构，包括计算机体系结构的基本概念、计算机体系结构的设计等。'}, {'name':'计算机算法'，'description':'C语言中的计算机算法，包括计算机算法的基本概念、计算机算法的设计等。'}, {'name':'计算机操作系统'，'description':'C语言中的计算机操作系统，包括计算机操作系统的基本概念、计算机操作系统的功能等。'}, {'name':'计算机网络'，'description':'C语言中的计算机网络，包括计算机网络的基本概念、计算机网络的协议等。'}, {'name':'计"
    },
    {
        "sortId": 526,
        "id": "1437378168090963968",
        "title": "基础数据类型的输入（5）再说一声\"Hello World!\"",
        "content": "在最初问候了“Hello World!”之后，我们接触了C语言的若干基本数据类型。我们逐个打完招呼后，我们再……再……再说一声`\"Hello World!\"`吧？\n\n### 输入格式:\n\n无。\n\n### 输出格式:\n\n按照输出样例格式。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n无\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n\"Hello World!\"\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '基本数据类型', 'description': 'C语言中的基本数据类型包括整型、浮点型、字符型等，通过了解这些数据类型的特点和使用方法，可以进行变量的声明和赋值操作。'}, {'name': '字符串', 'description': '字符串是由字符组成的序列，C语言中使用字符数组来表示字符串，通过了解字符串的定义、初始化、输入输出等操作，可以进行字符串的处理。'}, {'name': '输入输出', 'description': 'C语言中使用标准输入输出函数来进行输入输出操作，通过了解输入输出函数的使用方法，可以实现与用户的交互。'}, {'name': '控制结构', 'description': 'C语言中的控制结构包括顺序结构、选择结构和循环结构，通过了解这些控制结构的语法和使用方法，可以实现程序的流程控制。'}, {'name': '函数', 'description': 'C语言中的函数是一段完成特定任务的代码块，通过了解函数的定义、调用和返回值等操作，可以实现代码的模块化和重复利用。'}, {'name': '数组', 'description': 'C语言中的数组是一种存储多个相同类型数据的数据结构，通过了解数组的定义、初始化和访问等操作，可以实现对多个数据的统一管理。'}, {'name': '指针', 'description': 'C语言中的指针是一种特殊的变量，它存储了内存地址，通过了解指针的定义、初始化和使用等操作，可以实现对内存的直接访问和操作。'}, {'name': '结构体', 'description': 'C语言中的结构体是一种自定义的数据类型，通过了解结构体的定义、初始化和访问等操作，可以实现对多个不同类型数据的组合和管理。'}, {'name': '文件操作', 'description': 'C语言中的文件操作包括文件的打开、读写和关闭等操作，通过了解文件操作函数的使用方法，可以实现对文件的读写和管理。'}, {'name': '动态内存分配', 'description': 'C语言中的动态内存分配通过malloc和free函数来实现，通过了解动态内存分配的使用方法，可以实现对内存的灵活管理。'}]"
    },
    {
        "sortId": 527,
        "id": "1437376360949927936",
        "title": "基础数据类型的输入（3）字符型",
        "content": "在最初问候了“Hello World!”之后，我们接触了C语言的若干基本数据类型，我们逐个打声招呼吧。然后是字符型数据。要求：输入三个字符数据。\n\n### 输入格式:\n\n输入三个字符数据。\n\n### 输出格式:\n\n按照格式输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nxyz\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nhello , x , y and z!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '基本数据类型', 'description': '在C语言中，有几种基本数据类型，包括整型、浮点型、字符型等。学生需要了解这些数据类型的特点和使用方法。'}, {'name': '字符型数据', 'description': '字符型数据是C语言中的一种基本数据类型，学生需要了解如何输入和输出字符型数据，以及字符型数据的特点和使用方法。'}]"
    },
    {
        "sortId": 528,
        "id": "1437375340844855296",
        "title": "基础数据类型的输入（2）浮点型",
        "content": "在最初问候了“Hello World!”之后，我们接触了C语言的若干基本数据类型，我们逐个打声招呼吧。再来是浮点型数据。要求：输入两个浮点数据，输出的格式为保留小数点后两位。\n\n### 输入格式:\n\n两个浮点数。\n\n### 输出格式:\n\n按照样例输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1.414 1.732\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nhello , 1.41 and 1.73!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型-浮点型数据'，'description':'浮点型数据是C语言中的一种基本数据类型，用于表示带有小数部分的数值。在本题中，我们需要输入两个浮点数，并按照保留小数点后两位的格式输出。'}]"
    },
    {
        "sortId": 529,
        "id": "1437374059124281344",
        "title": "基础数据类型的输入（1）整型",
        "content": "在最初问候了“Hello World!”之后，我们接触了C语言的若干基本数据类型，我们逐个打声招呼吧。先从整型数据开始吧。要求：输入一个整数。\n\n### 输入格式:\n\n输入格式，一个整数A。\n\n### 输出格式:\n\n按照输出样例输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2021\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nhello , 2021!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整型数据', 'description': '整型数据是C语言中的一种基本数据类型，用于表示整数。在本题中，要求输入一个整数，并按照输出样例输出。'}]"
    },
    {
        "sortId": 530,
        "id": "1437251048681222144",
        "title": "求位移",
        "content": "在匀加速直线运动中，已知初速度、加速度和时间的值，编程序求出相应的位移并输出（保留2位小数）。\n\n### 输入格式:\n\n依次输入初速度、加速度、时间的值（以空格间隔）。\n\n### 输出格式:\n\n一个实数（保留2位小数）。\n\n### 输入样例:\n\n\n```in\n1.2 3.2 5.6\n\n```\n\n### 输出样例:\n\n\n```out\n56.90\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量用于存储数据，数据类型决定了变量可以存储的数据的种类和范围。在本题中，需要使用浮点型变量来存储初速度、加速度和时间的值。'}, {'name': '运算符', 'description': '在C语言中，运算符用于进行各种数学和逻辑运算。在本题中，需要使用加法运算符和乘法运算符来计算位移。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数来接收输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数接收初速度、加速度和时间的值，并使用printf函数输出位移的结果。'}]"
    },
    {
        "sortId": 531,
        "id": "1434424618456600576",
        "title": "运算符与表达式",
        "content": "输入一个3位整数，将百位和各位复制，转换成一个5位整数.\n例如123，转换为11233\n\n### 输入格式:\n一个3位整数\n\n### 输出格式:\n\n一个5位整数\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n123\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n11233\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整数输入输出', 'description': '教学目标：学生能够使用C语言实现整数的输入和输出。\\n教学内容：介绍C语言中整数的输入和输出的方法，包括使用scanf函数进行输入和使用printf函数进行输出。\\n教学方法：通过示例代码演示整数的输入和输出的过程，让学生理解输入和输出的基本原理和方法。\\n教学评价：通过练习题目，检验学生对整数输入和输出的掌握程度。'}, {'name': '整数复制和转换', 'description': '教学目标：学生能够使用C语言实现整数的复制和转换。\\n教学内容：介绍C语言中整数的复制和转换的方法，包括使用赋值运算符进行复制和使用算术运算符进行转换。\\n教学方法：通过示例代码演示整数的复制和转换的过程，让学生理解复制和转换的基本原理和方法。\\n教学评价：通过练习题目，检验学生对整数复制和转换的掌握程度。'}]"
    },
    {
        "sortId": 532,
        "id": "1432161348659019776",
        "title": "时差",
        "content": "请编写程序，输入两个时区号 $$a$$ 和 $$b$$，输出这两个时区间的时差 $$c$$。\n\n#### 输入格式\n> $$a$$ 和 $$b$$\n\n说明：东8区的时区号为8，西5区的时区号为-5。\n\n#### 输出格式\n> $$c$$\n\n#### 输入样例1\n```in\n8 -5\n\n```\n#### 输出样例1\n```out\n13\n\n```\n\n#### 输入样例2\n```in\n5 7\n\n```\n#### 输出样例2\n```out\n2\n\n```\n\n要求：使用 C 库函数完成计算，不要使用选择语句。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何使用C语言进行输入和输出操作，包括读取输入、格式化输出等。'}, {'name': '变量和数据类型', 'description': '学习C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '学习C语言中的运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '条件语句', 'description': '学习C语言中的条件语句，包括if语句、switch语句等。'}, {'name': '循环语句', 'description': '学习C语言中的循环语句，包括for循环、while循环、do-while循环等。'}, {'name': '函数', 'description': '学习C语言中的函数，包括函数的定义、函数的调用、函数的参数传递等。'}, {'name': '数组', 'description': '学习C语言中的数组，包括一维数组、多维数组等。'}, {'name': '指针', 'description': '学习C语言中的指针，包括指针的定义、指针的运算等。'}, {'name': '库函数', 'description': '学习C语言中的库函数，包括数学库函数、字符串库函数等。'}]"
    },
    {
        "sortId": 533,
        "id": "1432158270321000448",
        "title": "温差",
        "content": "某液体某时刻测得的温度为 $$a$$，另一时刻测得的温度为 $$b$$，请问温差 $$c$$ 为多少？\n\n#### 输入格式\n> $$a$$ 和 $$b$$\n\n#### 输出格式\n> $$c$$\n\n注：题目保证 $$a$$、$$b$$ 和 $$c$$ 的值都在 int 类型的表示范围内。\n\n#### 输入样例1\n```in\n7 -5\n\n```\n#### 输出样例1\n```out\n12\n\n```\n\n#### 输入样例2\n```in\n35 40\n\n```\n#### 输出样例2\n```out\n5\n\n```\n\n要求：使用 C 库函数完成计算，不要使用选择语句。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C 库函数', 'description': 'C 库函数是指在 C 语言中已经定义好的函数，可以直接调用来完成特定的功能。在本题中，要求使用 C 库函数完成计算，不要使用选择语句。'}]"
    },
    {
        "sortId": 534,
        "id": "1430106004210221056",
        "title": "求两点间的距离",
        "content": "已知平面上两点的极坐标（极角单位为度），求两点之间的距离，结果保留3位小数。\n提示：设A(ρ1,θ1),B(ρ2,θ2)\n则根据余弦定理可得\n![余弦定理公式.jpg](~/c957780a-223a-421f-b075-ce85af593ecc.jpg)\n<br>\n输入样例1：1 0 1 90<br>\n输出样例1：1.414<br>\n输入样例2：1 0 2 60<br>\n输出样例2：1.732<br>\n```c++\n#include<stdio.h>\n#include<math.h>\n#define PI 3.14159\nint main()\n{ double r1,o1,r2,o2,d;\n  scanf(\"\",&r1,&o1,&r2,&o2);\n  o1=;  //度转换为弧度\n  o2=;  //度转换为弧度\n  d=r1*r1+r2*r2-;\n  d=;\n  printf(\"%.3f\",d);\n  return 0;\n }\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'极坐标转换为直角坐标','description':'根据极坐标的定义，将极坐标转换为直角坐标，即将极坐标中的极径和极角转换为直角坐标中的x和y坐标。'},\n{'name':'余弦定理','description':'根据余弦定理，可以计算两点之间的距离。余弦定理公式为c^2 = a^2 + b^2 - 2ab*cos(C)，其中a、b为两边的长度，C为夹角的度数。'},\n{'name':'输入输出','description':'使用scanf函数从标准输入读取数据，使用printf函数将结果输出到标准输出。'},\n{'name':'数学函数','description':'使用math.h头文件中的函数，如sin、cos、sqrt等，进行数学计算。'},\n{'name':'宏定义','description':'使用#define指令定义常量，如PI的值为3.14159。'}]"
    },
    {
        "sortId": 535,
        "id": "1430104192786792448",
        "title": "分离正整数",
        "content": "完善程序，实现从键盘输入一个四位正整数，分离出它的每一位数字并输出。<br>\n输入样例：7869<br>\n输出样例：7 8 6 9<br>\n```c++\n#include<stdio.h>\nint main()\n{  int n,d4,d3,d2,d1;  //变量n用于存储输入的正整数\n   scanf(\"%d\",);\n   d1=; // 分离出的个位数存入变量d1\n   d2=n/10%10;\n   d3=; // 分离出的百位数存入变量d3\n   d4=; // 分离出的千位数存入变量d4\n   printf(\"%d %d %d %d\\n\",);//按照 千位 百位 十位 个位的顺序输出\n   return 0;\n }\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量声明和初始化'，'description':'在程序中声明和初始化变量，以存储输入的正整数和分离出的每一位数字。'}, {'name':'输入输出函数'，'description':'使用scanf函数从键盘输入一个四位正整数，并使用printf函数按照指定格式输出分离出的每一位数字。'}, {'name':'算术运算符'，'description':'使用算术运算符进行数值计算，如除法运算符/和取余运算符%来分离出每一位数字。'}]"
    },
    {
        "sortId": 536,
        "id": "1430102973938827264",
        "title": "求离均差",
        "content": "从键盘输入5个实数，求出每个数的离均差并输出结果（保留2位小数）\n\n### 输入格式:\n\n输入5个实数（以空格间隔）\n\n### 输出格式:\n\n输出5个实数（保留2位小数，以空格间隔）\n\n### 输入样例:\n\n```in\n3.8 2.1 6.8 4.4 3.2\n\n```\n\n### 输出样例:\n\n\n```out\n-0.26 -1.96 2.74 0.34 -0.86\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学如何从键盘输入实数，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '教学如何定义和使用变量来存储输入的实数和计算结果。'}, {'name': '循环', 'description': '教学如何使用循环结构来重复执行计算离均差的操作。'}, {'name': '数组', 'description': '教学如何使用数组来存储输入的实数和计算结果。'}, {'name': '算术运算', 'description': '教学如何使用算术运算符来进行数值计算。'}, {'name': '格式化输出', 'description': '教学如何使用格式化输出函数来保留小数位数并输出结果。'}]"
    },
    {
        "sortId": 537,
        "id": "1430102433632780288",
        "title": "字符转换",
        "content": "从键盘输入一个小写字母，把它转换成相应的大写字母，最后输出转换之后的字符及其十进制ASCII码。\n### 输入格式:\n输入一个小写字母\n\n### 输出格式:\n\n输出一个大写字母和一个整数（之间以空格间隔）\n\n### 输入样例:\n\n```in\na\n\n```\n\n### 输出样例:\n\n```out\nA 65\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符输入输出', 'description': '字符输入输出是C语言中常见的操作之一。通过使用scanf函数从键盘输入一个小写字母，并使用printf函数输出一个大写字母和一个整数，可以实现字符的转换和ASCII码的输出。'}]"
    },
    {
        "sortId": 538,
        "id": "1430101709150601216",
        "title": "求圆锥的侧面积",
        "content": "从键盘输入某圆锥的底面半径和高的值，编程求其侧面积并输出(结果保留2位小数)。其中圆周率取3.14159。\n\n### 输入格式:\n\n输入两个实数代表圆锥的底面半径和高（以空格间隔）\n\n### 输出格式:\n\n输出一个实数（保留2位小数）\n\n### 输入样例:\n\n```in\n1 2\n\n```\n\n### 输出样例:\n\n```out\n7.02\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数值计算。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如实数、整数、字符等，并了解它们的特点和用法。'}, {'name': '控制结构', 'description': '学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '格式化输出', 'description': '学习如何使用格式化输出函数来控制输出结果的格式。'}, {'name': '数学库函数', 'description': '学习如何使用数学库函数来进行数学计算，如求平方根、求幂等。'}, {'name': '常量', 'description': '学习如何使用常量来表示固定的数值。'}, {'name': '注释', 'description': '学习如何使用注释来解释代码的作用和用法。'}]"
    },
    {
        "sortId": 539,
        "id": "1428218292221505536",
        "title": "输入输出实型数据",
        "content": "程序功能：\n根据程序代码后面的提示，完成相应格式的输入输出。<br>\n输入样例：<br>\n3.6543&nbsp;&nbsp;6.78654<br>\n输出样例：<br>\n3.654300&nbsp;&nbsp;6.786540<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3.65<br>\n3.65<br>\n```c++\n#include<stdio.h>\nint main()\n{  float x;double y;\n   scanf();//输入变量x、y的值（之间以空格间隔）\n   printf(\"\\n\",x,y);//输出x、y的值（之间以空格间隔）\n   printf(\"\\n\",x);//按照总宽度为8，小数位数为2输出x的值\n   printf(\"\\n\",x); //按实际宽度输出x的值，并保留2位小数\n   return 0;\n } \n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出格式化','description':'学习如何使用scanf和printf函数进行输入输出格式化，包括指定变量类型、宽度和小数位数等。'}]"
    },
    {
        "sortId": 540,
        "id": "1428212585166454784",
        "title": "输出字符画：HAUT",
        "content": "haut是一个你要上四年的大学。请你用字符画的形式输出`haut`。\n\n### 输入格式:\n\n无\n\n### 输出格式:\n\n参考样例\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n无\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nhhhhhhh                                                       tttt          \nh:::::h                                                    ttt:::t          \nh:::::h                                                    t:::::t          \nh:::::h                                                    t:::::t          \n h::::h hhhhh         aaaaaaaaaaaaa  uuuuuu    uuuuuuttttttt:::::ttttttt    \n h::::hh:::::hhh      a::::::::::::a u::::u    u::::ut:::::::::::::::::t    \n h::::::::::::::hh    aaaaaaaaa:::::au::::u    u::::ut:::::::::::::::::t    \n h:::::::hhh::::::h            a::::au::::u    u::::utttttt:::::::tttttt    \n h::::::h   h::::::h    aaaaaaa:::::au::::u    u::::u      t:::::t          \n h:::::h     h:::::h  aa::::::::::::au::::u    u::::u      t:::::t          \n h:::::h     h:::::h a::::aaaa::::::au::::u    u::::u      t:::::t          \n h:::::h     h:::::ha::::a    a:::::au:::::uuuu:::::u      t:::::t    tttttt\n h:::::h     h:::::ha::::a    a:::::au:::::::::::::::uu    t::::::tttt:::::t\n h:::::h     h:::::ha:::::aaaa::::::a u:::::::::::::::u    tt::::::::::::::t\n h:::::h     h:::::h a::::::::::aa:::a uu::::::::uu:::u      tt:::::::::::tt\n hhhhhhh     hhhhhhh  aaaaaaaaaa  aaaa   uuuuuuuu  uuuu        ttttttttttt  \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符画输出', 'description': '字符画输出是指通过字符的排列组合来形成图形或文字的一种输出方式。在C语言中，可以使用字符数组和循环语句来实现字符画的输出。通过掌握字符数组的使用和循环语句的控制，可以实现各种形式的字符画输出。'}]"
    },
    {
        "sortId": 541,
        "id": "1427306357544103936",
        "title": "圆柱体表面积",
        "content": "\n\n输入圆柱体的底面半径r和高h，计算圆柱体的表面积并输出到屏幕上。要求定义圆周率为如下宏常量\n\n`#define PI 3.14159`\n\n### 输入格式:\n\n 输入两个实数，为圆柱体的底面半径r和高h。\t\n\n### 输出格式:\n\n 输出一个实数，即圆柱体的表面积，保留2位小数。\t\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n42.1 71.6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n30076.14\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '宏常量', 'description': '宏常量是在程序中定义的一个常量，使用#define关键字进行定义。宏常量的值在编译时被替换，不会占用内存空间。在本题中，需要定义一个宏常量PI，用于表示圆周率。'}]"
    },
    {
        "sortId": 542,
        "id": "1427303865511047168",
        "title": " 求等差数列的和",
        "content": "等差数列是指从第二项起，每一项与它的前一项的差等于同一个常数的一种数列，这个常数叫做等差数列的公差。\n给出三个整数，分别表示等差数列的第一项、最后一项和公差，求该数列的和。\n\n### 输入格式:\n\n输入三个整数，之间用空格隔开。第1个数作为首项，第2个数作为末项，第3个数作为公差。\n\n### 输出格式:\n\n输出占一行，包含一个整数，为该等差数列的和。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2 11 3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n26\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'等差数列求和'，'description':'等差数列是指从第二项起，每一项与它的前一项的差等于同一个常数的一种数列，这个常数叫做等差数列的公差。给出三个整数，分别表示等差数列的第一项、最后一项和公差，求该数列的和。'}]"
    },
    {
        "sortId": 543,
        "id": "1427298872737394688",
        "title": "三位数的数位分离",
        "content": "从键盘输入一个任意的三位正整数，分别求出其个位、十位和百位上的数字。\n### 输入格式:\n\n输入任意的一个三位正整数。\n\n### 输出格式:\n\n依次输出个位、十位、百位上的数字。以空格间隔，但最后一个数据的后面没有空格，直接换行。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n367\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n7 6 3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入一个任意的三位正整数，并将结果输出到屏幕上。'}, {'name':'变量','description':'学习如何定义和使用变量来存储输入的三位正整数和计算结果。'}, {'name':'运算符','description':'学习如何使用取余运算符和除法运算符来分别求出个位、十位和百位上的数字。'}, {'name':'循环','description':'学习如何使用循环语句来重复执行求解个位、十位和百位上的数字的过程。'}]"
    },
    {
        "sortId": 544,
        "id": "1427297837759328256",
        "title": "简单多项式求值",
        "content": "对用户输入的任一整数，输出以下多项式的值。\n\n$$y=2*x^2+x+8$$ \n\n### 输入格式:\n输入整数x的值。\n\n### 输出格式:\n\n输出一个整数，即多项式的值。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n11\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从用户输入获取数据，并将结果输出给用户。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数学运算。'}, {'name': '控制流', 'description': '学习如何使用条件语句和循环语句来控制程序的执行流程。'}, {'name': '函数', 'description': '学习如何定义和调用函数来组织代码。'}]"
    },
    {
        "sortId": 545,
        "id": "1427272855872335872",
        "title": "打字",
        "content": "小明1分钟能打m字，小敏1分钟能打n字，两人一起打了t分钟，总共打了多少字。\n\n### 输入格式:\n\n输入3个整数m，n，t。\n\n### 输出格式:\n\n输出小明和小敏t分钟一共打的字数。\n\n### 输入样例:\n\n```in\n65 60 2\n```\n\n### 输出样例:\n\n```out\n250\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247804354764800",
                        "name": "基本数据类型",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924249150001766400",
                        "name": "运算符和表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。在这个题目中，需要定义三个整数类型的变量m、n、t来存储输入的数据。'}, {'name': '算术运算符', 'description': '在C语言中，算术运算符用于进行数值计算。在这个题目中，需要使用加法运算符+来计算小明和小敏t分钟一共打的字数。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数来从标准输入读取数据，使用printf函数来向标准输出打印数据。在这个题目中，需要使用scanf函数来读取输入的数据，使用printf函数来打印输出的结果。'}]"
    },
    {
        "sortId": 546,
        "id": "1427202625724657664",
        "title": "植树问题",
        "content": "某学校植树节开展植树活动，已知树苗有m株，参加植树的同学有n人（且m>n），请问每位同学平均可以植树几株？还有几株剩余？\n\n### 输入格式:\n\n输入两个整数m和n，分别表示树苗的数量和学生的人数（m>n）。\n\n### 输出格式:\n\n输出两个整数，分别表示每位同学平均植树的数量及剩余的树苗数量。\n\n### 输入样例:\n\n\n```in\n163 32\n```\n\n### 输出样例:\n\n\n```out\n5 3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'算术运算符'，'description':'C语言中的算术运算符，包括加法、减法、乘法、除法等。'}, {'name':'赋值运算符'，'description':'C语言中的赋值运算符，用于给变量赋值。'}, {'name':'输入输出函数'，'description':'C语言中的输入输出函数，包括scanf和printf等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句和switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句，包括for循环、while循环和do-while循环等。'}, {'name':'运算符优先级'，'description':'C语言中的运算符优先级，用于确定表达式中各个运算符的执行顺序。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用和函数的返回值等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组和多维数组等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算和指针的应用等。'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的输入输出和字符串的处理等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的成员和结构体的应用等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写和文件的关闭等。'}, {'name':'递归'，'description':'C语言中的递归，包括递归的定义、递归的调用和递归的应用等。'}, {'name':'指针与数组'，'description':'C语言中指针与数组的关系，包括指针与一维数组和指针与多维数组等。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配，包括动态内存的申请和动态内存的释放等。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令，包括宏定义、条件编译和文件包含等。'}, {'name':'位运算'，'description':'C语言中的位运算，包括按位与、按位或和按位异或等。'}, {'name':'结构体与指针'，'description':'C语言中结构体与指针的关系，包括结构体指针的定义和结构体指针的应用等。'}, {'name':'函数指针'，'description':'C语言中的函数指针，包括函数指针的定义、函数指针的调用和函数指针的应用等。'}, {'name':'多文件编程'，'description':'C语言中的多文件编程，包括头文件的引用、函数的声明和函数的定义等。'}, {'name':'错误处理'，'description':'C语言中的错误处理，包括错误码的定义、错误处理函数的编写和错误处理的应用等。'}, {'name':'位字段'，'description':'C语言中的位字段，包括位字段的定义、位字段的操作和位字段的应用等。'}, {'name':'枚举'，'description':'C语言中的枚举，包括枚举的定义、枚举的应用和枚举的遍历等。'}, {'name':'链表'，'description':'C语言中的链表，包括链表的定义、链表的插入和链表的删除等。'}, {'name':'栈'，'description':'C语言中的栈，包括栈的定义、栈的入栈和栈的出栈等。'}, {'name':'队列'，'description':'C语言中的队列，包括队列的定义、队列的入队和队列的出队等。'}, {'name':'排序算法'，'description':'C语言中的排序算法，包括冒泡排序、插入排序和快速排序等。'}, {'name':'查找算法'，'description':'C语言中的查找算法，包括线性查找、二分查找和哈希查找等。'}, {'name':'图'，'description':'C语言中的图，包括图的定义、图的遍历和图的最短路径等。'}, {'name':'树'，'description':'C语言中的树，包括树的定义、树的遍历和树的查找等。'}, {'name':'堆'，'description':'C语言中的堆，包括堆的定义、堆的插入和堆的删除等。'}, {'name':'哈希表'，'description':'C语言中的哈希表，包括哈希表的定义、哈希表的插入和哈希表的查找等。'}, {'name':'图的遍历'，'description':'C语言中图的遍历，包括深度优先搜索和广度优先搜索等。'}, {'name':'图的最短路径'，'description':'C语言中图的最短路径，包括Dijkstra算法和Floyd算法等。'}, {'name':'树的遍历'，'description':'C语言中树的遍历，包括前序遍历、中序遍历和后序遍历等。'}, {'name':'树的查找'，'description':'C语言中树的查找，包括二叉搜索树和平衡二叉树等。'}, {'name':'堆的插入和删除'，'description':'C语言中堆的插入和删除，包括最小堆和最大堆等。'}, {'name':'哈希表的插入和查找'，'description':'C语言中哈希表的插入和查找，包括哈希函数和冲突解决等。'}, {'name':'深度优先搜索'，'description':'C语言中深度优先搜索，包括递归和栈的应用等。'}, {'name':'广度优先搜索'，'description':'C语言中广度优先搜索，包括队列的应用和图的遍历等。'}, {'name':'递归与回溯'，'description':'C语言中递归与回溯，包括递归的应用和回溯算法等。'}, {'name':'动态规划'，'description':'C语言中动态规划，包括状态转移方程和最优子结构等。'}, {'name':'贪心算法'，'description':'C语言中贪心算法，包括贪心选择和局部最优解等。'}, {'name':'分治算法'，'description':'C语言中分治算法，包括分解子问题和合并子问题等。'}, {'name':'回溯算法'，'description':'C语言中回溯算法，包括状态的保存和状态的恢复等。'}, {'name':'动态规划与贪心算法'，'description':'C语言中动态规划与贪心算法的关系，包括动态规划的优化和贪心算法的应用等。'}, {'name':'分治与回溯算法'，'description':'C语言中分治与回溯算法的关系，包括分治算法的应用和回溯算法的优化等。'}, {'name':'排序与查找算法'，'description':'C语言中排序与查找算法的关系，包括排序算法的应用和查找算法的优化等。'}, {'name':'图的遍历与最短路径'，'description':'C语言中图的遍历与最短路径的关系，包括图的遍历的应用和最短路径的优化等。'}, {'name':'树的遍历与查找'，'description':'C语言中树的遍历与查找的关系，包括树的遍历的应用和查找算法的优化等。'}, {'name':'堆的插入和删除与哈希表的插入和查找'，'description':'C语言中堆的插入和删除与哈希表的插入和查找的关系，包括堆的插入和删除的应用和哈希表的插入和查找的优化等。'}, {'name':'深度优先搜索与广度优先搜索'，'description':'C语言中深度优先搜索与广度优先搜索的关系，包括深度优先搜索的应用和广度优先搜索的优化等。'}, {'name':'递归与回溯与动态规划'，'description':'C语言中递归与回溯与动态规划的关系，包括递归的应用和回溯算法的优化和动态规划的应用等。'}, {'name':'贪心算法与分治算法'，'description':'C语言中贪心算法与分治算法的关系，包括贪心算法的应用和分治算法的优化等。'}, {'name':'排序与查找算法与图的遍历与最短路径'，'description':'C语言中排序与查找算法与图的遍历与最短路径的关系，包括排序算法的应用和查找算法的优化和图的遍历的应用和最短路径的优化等。'}, {'name':'树的遍历与查找与堆的插入和删除与哈希表的插入和查找'，'description':'C语言中树的遍历与查找与堆的插入和删除与哈希表的插入和查找的关系，包括树的遍历的应用和查找算法的优化和堆的插入和删除的应用和哈希表的插入和查找的优化等。'}, {'name':'深度优先搜索与广度优先搜索与递归与回溯与动态规划'，'description':'C语言中深度优先搜索与广度优先搜索与递归与回溯与动态规划的关系，包括深度优先搜索的应用和广度优先搜索的优化和递归的应用和回溯算法的优化和动态规划的应用等。'}, {'name':'贪心算法与分治算法与排序与查找算法'，'description':'C语言中贪心算法与分治算法与排序与查找算法的关系，包括贪心算法的应用和分治算法的优化和排序算法的应用和查找算法的优化等。'}, {'name':'图的遍历与最短路径与树的遍历与查找与堆的插入和删除与哈希表的插入和查找'，'description':'C语言中图的遍历与最短路径与树的遍历与查找与堆的插入和删除与哈希表的插入和查找的关系，包括图的遍历的应用和最短路径的优化和树的遍历的应用和查找算法的优化和堆的插入和删除的应用和哈希表的插入和查找的优化等。'}, {'name':'深度优先搜索与广度优先搜索与递归与回溯与动态规划与贪心算法与分治算法'，'description':'C语言中深度优先搜索与广度优先搜索与递归与回溯与动态规划与贪心算法与分治算法的关系，包括深度优先搜索的应用和广度优先搜索的优化和递归的应用和回溯算法的优化和动态规划的应用和贪心算法的应用和分治算法的优化等。'}, {'name':'排序与查找算法与图的遍历与最短路径与树的遍历与查找与堆的插入和删除与哈希表的插入和查找'，'description':'C语言中排序与查找算法与图的遍历与最短路径与树的遍历与查找与堆的插入和删除与哈希表的插入和查找的关系，包括排序算法的应用和查找算法的优化和图的遍历的应用和最短路径的优化和树的遍历的应用和查找算法的优化和堆的插入和删除的应用和哈希表的插入和查找的优化等。'}, {'name':'深度优先搜索与广度优先搜索与递归与回溯与动态规划与贪心算法与分治算法与排序与查找算法'，'description':'C语言中深度优先搜索与广度优先搜索与递归与回溯与动态规划与贪心算法与分治算法与排序与查找算法的关系，包括深度优先搜索的应用和广度优先搜索的优化和递归的应用和回溯算法的优化和动态规划的应用和贪心算法的应用和分治算法的优化和排序算法的应用和查找算法的优化等。'}, {'name':'图的遍历与最短路径与树的遍历与查找与堆的插入和删除与哈希表的插入和查找与深度优先搜索与广度优先搜索与递归与回溯与动态规划与贪心算法与分治算法与排序与查找算法'，'description':'C语言中图的遍历与最短路径与树的遍"
    },
    {
        "sortId": 547,
        "id": "1427191012527353856",
        "title": "A+B问题",
        "content": "计算 A+B\n### 输入格式:\n\n输入两个整数 A和B (0<=A, B<=10)\n\n### 输出格式:\n\n输出A+B的值。\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n1 2\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n3\n```\n\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n5 10\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n15\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'本题主要涉及到C语言的基本输入输出，包括使用scanf函数进行输入和使用printf函数进行输出。'}, {'name':'变量定义和赋值','description':'本题需要学生了解如何定义整型变量，并且将输入的值赋给这些变量。'}, {'name':'算术运算','description':'本题需要学生了解如何进行加法运算，以及如何将运算结果输出。'}]"
    },
    {
        "sortId": 548,
        "id": "1427102901604626432",
        "title": "欢迎萌新",
        "content": "新学期开始了，HAUT又迎来一批新生力量，勤奋的萌新们在暑假期间就开始C语言的学习之旅，不少同学已经能够顺利地写出一行又一行代码，AC了一道又一道题目，看来，用程序写出下面的迎新词已不成问题。\n\n### 输入格式:\n\n无\n\n### 输出格式:\n\n<p>Welcome to Henan University of Technology!</p>\n<p>Welcome to HAUT!</p>\n\n### 输入样例:\n\n此题无输入：\n\n```in\n\n```\n\n### 输出样例:\n\n输出内容为：\n\n```out\nWelcome to Henan University of Technology!\nWelcome to HAUT!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法'，'description':'学习C语言的基本语法，包括变量、数据类型、运算符、控制语句等。'}, {'name':'字符串处理'，'description':'学习C语言中字符串的处理，包括字符串的定义、输入输出、字符串的操作等。'}, {'name':'函数'，'description':'学习C语言中函数的定义、调用、参数传递等。'}, {'name':'数组'，'description':'学习C语言中数组的定义、初始化、访问等。'}, {'name':'指针'，'description':'学习C语言中指针的定义、指针与数组、指针与函数等。'}, {'name':'结构体'，'description':'学习C语言中结构体的定义、结构体的成员、结构体的操作等。'}, {'name':'文件操作'，'description':'学习C语言中文件的打开、读写、关闭等操作。'}]"
    },
    {
        "sortId": 549,
        "id": "1425819739138056192",
        "title": "将秒数转换成时分秒",
        "content": "程序功能：从键盘输入一个以秒为单位的时间值整数，将其转换成时、分、秒的形式输出。\n\n**输入格式:**\n输入代表总秒数的整数。\n\n**输出格式:**\n输出时、分、秒的整数值，以英文冒号分隔，最后换行。\n\n**输入样例：**\n20000\n\n**输出样例：**\n5:33:20\n\n```\n#include <stdio.h>\nint main(void)\n{int t,h,m,s;  //变量t用于存储输入的总秒数\n scanf(\"%d\",);\n s=;  //秒\n m=;  //分\n h=;  //时\n printf(\"\\n\",h,m,s); // 时分秒之间用英文冒号 间隔\n return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量声明和初始化'，'description':'在程序中声明和初始化变量，用于存储输入的总秒数和时、分、秒的值。'}, {'name':'输入输出'，'description':'使用scanf函数从键盘输入总秒数，使用printf函数输出时、分、秒的值。'}, {'name':'算术运算'，'description':'使用算术运算符将总秒数转换为时、分、秒的值。'}]"
    },
    {
        "sortId": 550,
        "id": "1425815485102972928",
        "title": "求一元二次方程的根",
        "content": "已知一元二次方程a$x^2$+bx+c=0的系数a,b,c的值，设$b^2$-4ac≥0且a≠0，编写程序利用求根公式求该方程的两个根。（结果保留2位小数）<br>\n输入样例：<br>\n2 6 3<br>\n输出样例：<br>\n-0.63 -2.37<br>\n\n```c++\n#include<stdio.h>\n#include<math.h>\nint main()\n{  double a,b,c,p,q,x1,x2;\n   scanf(\"\",&a,&b,&c);\n   p=-b/;  //求根公式的前半部分\n   q=/(2*a);  //求根公式的后半部分\n   x1= p+q;\n   x2=;\n   printf(\"\\n\",x1,x2);//两个根之间用一个空格分隔\n   return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'一元二次方程求根公式'，'description':'一元二次方程求根公式是解决一元二次方程的常用方法，根据方程的系数a、b、c，利用求根公式可以求得方程的两个根。求根公式为x=(-b±√(b^2-4ac))/(2a)，其中b^2-4ac≥0且a≠0。在程序中，可以通过输入方程的系数a、b、c，利用求根公式计算得到方程的两个根，并将结果保留两位小数后输出。'}]"
    },
    {
        "sortId": 551,
        "id": "1425702514116812800",
        "title": "求三角形的面积",
        "content": "从键盘输入一个三角形三条边的长度，编写程序求其面积并输出（结果保留2位小数）。\n提示：用海伦公式\n\n### 输入格式:\n\n输入三个实数（以空格间隔）\n\n### 输出格式:\n\n输出一个实数表示三角形的面积（结果保留2位小数）\n\n### 输入样例:\n\n\n```in\n3 4 5\n\n```\n\n### 输出样例:\n\n\n```out\n6.00\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '海伦公式', 'description': '海伦公式是一种计算三角形面积的公式，通过三角形的三条边长来计算三角形的面积。'}]"
    },
    {
        "sortId": 552,
        "id": "1414986758304727040",
        "title": "天天向上的力量4-工作日的努力",
        "content": "工作日的模式要每天达到什么水平，才能与每天努力百分之一（0.01）一样？\n\nA君：一年365天，每天进步百分之一（0.01），不停歇\n\nB君：一年365天，每周工作5天休息2天，休息日下降百分之一（0.01），要多努力？\n\n结果保留3位小数\n\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n工作日的力量参数：0.020\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是C语言中用来进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'数据类型','description':'数据类型是C语言中用来表示不同种类数据的分类，包括整型、浮点型、字符型等。'}, {'name':'变量','description':'变量是C语言中用来存储数据的容器，可以通过变量名来访问和操作存储在变量中的数据。'}, {'name':'表达式','description':'表达式是C语言中由运算符和操作数组成的式子，用来进行各种运算操作。'}, {'name':'控制语句','description':'控制语句是C语言中用来控制程序执行流程的语句，包括条件语句、循环语句等。'}, {'name':'函数','description':'函数是C语言中用来封装一段可重复使用的代码的结构，可以通过函数名来调用和执行函数中的代码。'}, {'name':'输入输出','description':'输入输出是C语言中用来与用户进行交互的操作，包括从键盘输入数据和向屏幕输出数据。'}, {'name':'数组','description':'数组是C语言中用来存储多个相同类型数据的连续内存空间，可以通过下标来访问和操作数组中的元素。'}, {'name':'指针','description':'指针是C语言中用来存储内存地址的变量，可以通过指针来访问和操作内存中的数据。'}, {'name':'字符串','description':'字符串是C语言中用来存储字符序列的数组，可以通过字符串名来访问和操作字符串中的字符。'}, {'name':'文件操作','description':'文件操作是C语言中用来读写文件的操作，包括打开文件、读取文件内容、写入文件内容等。'}]"
    },
    {
        "sortId": 553,
        "id": "1414982353312366592",
        "title": "天天向上的力量3-工作日的力量",
        "content": "一年365天，一周5个工作日，每天进步百分之一（0.01）\n\n一年365天，一周2个休息日，每天退步百分之一（0.01）\n\n那么一年所累计下来的能力值是多少？\n\n结果保留2位小数\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n工作日的力量：4.63\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'控制语句'，'description':'C语言中的控制语句，包括条件语句、循环语句等。'}, {'name':'格式化输入输出'，'description':'C语言中的格式化输入输出，包括printf函数、scanf函数等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组、多维数组等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算等。'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的操作等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的操作等。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配，包括malloc函数、free函数等。'}]"
    },
    {
        "sortId": 554,
        "id": "1414977824479150080",
        "title": "天天向上的力量2",
        "content": "一年365天，每天进步千分之五（0.005）或百分之一（0.001），累计进步多少？\n\n一年365天，每天退步千分之五（0.005）或百分之一（0.001），累计剩下多少？\n\n输出要求保留2位小数\n\n\n\n### 输入样例:\n\n在这里给出一组输入（进步或者退步的比率）。例如：\n\n```in\n0.005\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n向上：6.17,向下：0.16\n\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n0.01\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n向上：37.78,向下：0.03\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、赋值运算符等。'}, {'name':'控制流程'，'description':'C语言中的控制流程，包括条件语句、循环语句等。'}, {'name':'格式化输出'，'description':'C语言中的格式化输出，包括printf函数的使用等。'}, {'name':'浮点数运算'，'description':'C语言中浮点数的运算，包括加法、乘法等。'}, {'name':'保留小数位数'，'description':'C语言中保留小数位数的方法，包括使用printf函数的格式化输出等。'}]"
    },
    {
        "sortId": 555,
        "id": "1414970854674169856",
        "title": "天天进步的力量1",
        "content": "一年365天，每天进步千分之一（0.001），累计会进步多少？\n\n一年365天，每天退步千分之一（0.001），累计会剩下多少？\n\n结果保留2位小数。\n\n### 输入样例:\n\n在这里给出相应的输出。例如：\n\n```in\n\n\n```\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n向上：1.44,向下：0.69\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、赋值运算符、关系运算符等。'}, {'name':'控制语句'，'description':'C语言中的控制语句，包括条件语句、循环语句等。'}, {'name':'格式化输出'，'description':'C语言中的格式化输出，包括printf函数的使用。'}, {'name':'浮点数运算'，'description':'C语言中浮点数的运算，包括加法、减法等。'}, {'name':'保留小数位数'，'description':'C语言中保留小数位数的方法，包括使用printf函数的格式控制符。'}]"
    },
    {
        "sortId": 556,
        "id": "1411618163244494848",
        "title": "输出字符串",
        "content": "输出字符串\n\n下面的语句将输出 ▁▁▁▁▁。\n\n```c\nprintf(\"abc\" \"def\");\n```\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符串拼接', 'description': '字符串拼接是指将多个字符串连接在一起形成一个新的字符串。在C语言中，可以使用双引号将多个字符串直接连接在一起，形成一个新的字符串。例如，printf(\"abc\" \"def\")将输出abcdef。'}]"
    },
    {
        "sortId": 557,
        "id": "1411617678620114944",
        "title": "判断合法的标识符",
        "content": "▁▁▁▁▁ 是合法的标识符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '合法的标识符', 'description': '合法的标识符是指在C语言中可以用来表示变量、函数、数组等的名称。合法的标识符必须以字母或下划线开头，后面可以是字母、数字或下划线。'}]"
    },
    {
        "sortId": 558,
        "id": "1411617267613794304",
        "title": "判断非法的标识符",
        "content": "▁▁▁▁▁ 是非法的标识符。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '标识符', 'description': '标识符是用来标识变量、函数、数组等程序实体的名称。在C语言中，标识符由字母、数字和下划线组成，且必须以字母或下划线开头。本题涉及到了非法的标识符，即以数字开头的标识符，因此需要向学生解释标识符的命名规则和合法性。'}]"
    },
    {
        "sortId": 559,
        "id": "1411616706948591616",
        "title": "输出字符串",
        "content": "输出字符串\n\n下面的语句将输出 ▁▁▁▁▁。\n\n```c\nprintf(\"abc\\\\def\");\n```\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些无法直接输入或显示的字符。在C语言中，常见的转义字符包括\\\\n表示换行符，\\\\t表示制表符，\\\\\\\"表示双引号，\\\\\\\\表示反斜杠等。在给定的题目中，\\\\d并不是一个合法的转义字符，因此会被当作普通字符输出。'}]"
    },
    {
        "sortId": 560,
        "id": "1411616110292070400",
        "title": "输出星号字符(*)",
        "content": "输出星号字符(\\*)\n\n下列输出星号字符 (\\*，ASCII 码为 42) 的语句中，哪一个是错误的？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出字符','description':'在C语言中，可以使用printf函数来输出字符。'}]"
    },
    {
        "sortId": 561,
        "id": "1406246698619158528",
        "title": "h0011.乘法表 ",
        "content": "本题目要求读入1个整数n，然后输出1到n的乘法表,如样例所示。\n\n### 输入格式:\n\n输入在一行中给出1个整数n(0<n<10)。\n\n### 输出格式:\n\n输出1到n的乘法表（提示：乘积占2个位置，行用\\t进行空格）。\n\n### 输入样例:\n\n```in\n4\n```\n\n### 输出样例:\n\n```out\n1*1= 1\t\n2*1= 2\t2*2= 4\t\n3*1= 3\t3*2= 6\t3*3= 9\t\n4*1= 4\t4*2= 8\t4*3=12\t4*4=16\t\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1171431903002374144",
                        "name": "大数据技术能力评测（一级）",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "1171431954961412096",
                        "name": "计算机基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "1171432158624231424",
                        "name": "计算机程序设计基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环语句'，'description':'循环语句是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环语句来实现输出1到n的乘法表。'}，{'name':'格式化输出'，'description':'格式化输出是C语言中的一种输出方式，可以通过控制输出的格式来实现对齐、占位等效果。在本题中，可以使用格式化输出来实现乘法表的输出。'}]"
    },
    {
        "sortId": 562,
        "id": "1406199823019196416",
        "title": "h0002.斐波那契数列",
        "content": "斐波那契数列\n方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N*）\n\n\n\n### 输入样例:\n```in\n无\n```\n\n\n### 输出样例:\n\n```out\n1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,1597,2584,4181,6765,\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1171431903002374144",
                        "name": "大数据技术能力评测（一级）",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "1171431954961412096",
                        "name": "计算机基础",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "1171432158624231424",
                        "name": "计算机程序设计基础",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'斐波那契数列'，'description':'方法定义：F(1)=1，F(2)=1, F(n)=F(n-1)+F(n-2)（n>=3，n∈N*）'}]"
    },
    {
        "sortId": 563,
        "id": "1404268595467223040",
        "title": "计算分段函数值",
        "content": "编写程序计算下列分段函数的值。  \n$$y=\\begin{cases}2\\sqrt{x}&0\\leqslant x \\leqslant 1\\\\x+ 1&x>1\n\\end{cases}$$\n\n### 输入格式:\n\n在一行输入一个实数，作为函数自变量的值。\n\n### 输出格式:\n\n输入的`x`值在函数的定义域中，输出一个实数作为函数的计算结果(计算结果保留6位小数)，不在定域中输出`No Solution.`。\n\n### 输入样例1:\n```in\n0.5\n```\n### 输出样例1:\n```out\n1.414214\n```\n### 输入样例2:\n```in\n-1\n```\n### 输出样例2:\n```out\nNo Solution.\n```\n### 输入样例3:\n```in\n2.321\n```\n### 输出样例3:\n```out\n3.321000\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '分段函数', 'description': '分段函数是指由两个或多个不同的函数组成的函数，根据自变量的取值范围来确定使用哪个函数进行计算。在C语言中，可以使用if语句或者三元运算符来实现分段函数的计算。'}]"
    },
    {
        "sortId": 564,
        "id": "1403323578279960576",
        "title": "下述代码执行后，a,b的值各为多少？",
        "content": "下述代码执行后，a,b的值各为多少？\n\n```\n    int a = 0, b = 0;\n    a = (b++, 4);\n```",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '逗号运算符', 'description': '逗号运算符是C语言中的一种运算符，它用于连接两个表达式，并返回右侧表达式的值。在上述代码中，逗号运算符的作用是先执行b++，然后执行4赋值给a，所以a的值为4，b的值为1。'}]"
    },
    {
        "sortId": 565,
        "id": "1402418101366841344",
        "title": "计算s=1+1/2+1/4+1/8+...+1/(2^n)",
        "content": "从键盘输入正整数$$n$$,计算$$sum=1+\\frac{1}{2}+\\frac{1}{2^2}+\\frac{1}{2^3}+\\cdots+\\frac{1}{2^n}$$的值\n\n### 输入格式:\n\n输入一个整数`n`\n\n### 输出格式:\n\n输出`sum = 实数`的形式, 输出保留10位小数.\n\n### 输入样例:\n\n```in\n10\n```\n\n### 输出样例:\n```out\nsum = 1.9990234375\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码块。在本题中，可以使用循环结构来计算sum的值。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储输入的整数n和计算得到的sum的值。'}, {'name':'输入输出'，'description':'输入输出是C语言中用于与用户交互的一种操作。在本题中，可以使用输入输出来获取用户输入的整数n和输出计算得到的sum的值。'}, {'name':'浮点数'，'description':'浮点数是C语言中的一种数据类型，用于表示带有小数部分的数值。在本题中，可以使用浮点数来存储sum的值，并且输出时保留10位小数。'}]"
    },
    {
        "sortId": 566,
        "id": "1402403474704715776",
        "title": "sdut-顺序结构-2 计算得分",
        "content": "最近，科比总得分超过乔丹，科比球打的很棒....\n\n那么问题来了，科比有一场比赛投中a个3分球，b个2分球，罚进了c个球(罚球得一分),这场比赛总共得了多少分？\n\n\n### 输入格式:\n\n多组输入。\n\n每行包含3个数字a,b,c( 0<=a,b,c<= 100)\n\n### 输出格式:\n\n输出所求的结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n7 21 18\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n81\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "172",
                        "name": "Java程序设计",
                        "isLeaf": false,
                        "enName": "Java Programming"
                    },
                    {
                        "id": "173",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "177",
                        "name": "算术运算符（整数浮点运算）",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247804354764800",
                        "name": "基本数据类型",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924249150001766400",
                        "name": "运算符和表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '基本运算', 'description': '学习如何进行基本的数值运算，包括加法、减法、乘法和除法。'}, {'name': '变量', 'description': '了解如何声明和使用变量，以及变量的命名规则和作用域。'}, {'name': '输入输出', 'description': '学习如何从用户输入获取数据，并将结果输出到屏幕上。'}, {'name': '条件语句', 'description': '学习如何使用条件语句进行逻辑判断，包括if语句和switch语句。'}, {'name': '循环语句', 'description': '学习如何使用循环语句进行重复执行，包括for循环、while循环和do-while循环。'}, {'name': '数据类型', 'description': '了解不同的数据类型，包括整型、浮点型、字符型和字符串型，以及它们的存储和使用方式。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的索引和遍历方式。'}, {'name': '函数', 'description': '了解如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针和数组的关系。'}, {'name': '结构体', 'description': '了解如何定义和使用结构体，以及结构体的成员和访问方式。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件指针的使用。'}, {'name': '动态内存分配', 'description': '了解如何使用动态内存分配函数malloc和free，以及内存泄漏和内存溢出的问题。'}, {'name': '预处理指令', 'description': '学习如何使用预处理指令进行代码的预处理，包括宏定义和条件编译。'}, {'name': '递归', 'description': '了解递归的概念和原理，以及如何使用递归解决问题。'}, {'name': '位运算', 'description': '学习如何使用位运算进行二进制数的操作，包括与、或、异或、左移和右移。'}, {'name': '错误处理', 'description': '了解如何处理程序中的错误，包括错误码和异常处理。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，包括字符串的拼接、比较和查找。'}, {'name': '排序算法', 'description': '了解常见的排序算法，包括冒泡排序、插入排序、选择排序和快速排序。'}, {'name': '查找算法', 'description': '学习常见的查找算法，包括线性查找和二分查找。'}, {'name': '数据结构', 'description': '了解常见的数据结构，包括栈、队列、链表、树和图。'}, {'name': '算法复杂度', 'description': '学习如何分析算法的时间复杂度和空间复杂度，以及如何选择合适的算法。'}, {'name': '编程风格', 'description': '了解良好的编程风格和规范，包括命名规则、缩进和注释的使用。'}, {'name': '调试技巧', 'description': '学习如何使用调试工具和技巧，以及如何排查和修复程序中的错误。'}, {'name': '代码优化', 'description': '了解如何优化程序的性能和效率，包括减少内存占用和提高运行速度。'}, {'name': '多线程编程', 'description': '学习如何使用多线程进行并发编程，以提高程序的效率和响应速度。'}, {'name': '网络编程', 'description': '了解如何使用网络编程进行数据通信，包括套接字和网络协议的使用。'}, {'name': '图形界面编程', 'description': '学习如何使用图形界面库进行图形界面编程，以实现用户友好的界面。'}, {'name': '模块化编程', 'description': '了解如何使用模块化编程进行代码的组织和管理，以提高代码的可维护性和复用性。'}, {'name': '异常处理', 'description': '学习如何使用异常处理机制进行错误处理，以避免程序崩溃和数据丢失。'}, {'name': '面向对象编程', 'description': '了解面向对象编程的概念和原理，以及如何使用类和对象进行编程。'}, {'name': '泛型编程', 'description': '学习如何使用泛型编程进行通用的编程，以提高代码的灵活性和复用性。'}, {'name': '并发编程', 'description': '了解如何使用并发编程进行多任务处理，以提高程序的并发性和响应能力。'}, {'name': '网络安全', 'description': '学习如何保护网络安全，包括防火墙、加密和认证的使用。'}, {'name': '软件工程', 'description': '了解软件工程的基本原理和方法，以提高软件开发的效率和质量。'}, {'name': '项目管理', 'description': '学习如何进行项目管理，包括需求分析、设计和测试的过程和方法。'}, {'name': '代码审查', 'description': '了解如何进行代码审查，以发现和修复代码中的问题和缺陷。'}, {'name': '版本控制', 'description': '学习如何使用版本控制工具进行代码的管理和协作，以提高团队的开发效率。'}, {'name': '软件测试', 'description': '了解软件测试的基本原理和方法，以保证软件的质量和稳定性。'}, {'name': '软件部署', 'description': '学习如何进行软件的部署和发布，以确保软件能够正常运行和使用。'}, {'name': '性能调优', 'description': '了解如何进行性能调优，以提高软件的运行速度和响应能力。'}, {'name': '安全测试', 'description': '学习如何进行安全测试，以发现和修复软件中的安全漏洞和风险。'}, {'name': '软件维护', 'description': '了解软件维护的基本原理和方法，以保证软件的可靠性和可用性。'}, {'name': '软件开发流程', 'description': '学习软件开发的基本流程和方法，包括需求分析、设计、编码、测试和发布。'}, {'name': '软件开发工具', 'description': '了解常用的软件开发工具，包括集成开发环境、调试器和性能分析器。'}, {'name': '软件开发框架', 'description': '学习常用的软件开发框架，以提高开发效率和代码质量。'}, {'name': '软件开发模式', 'description': '了解常见的软件开发模式，包括瀑布模型、迭代模型和敏捷开发模式。'}, {'name': '软件开发语言', 'description': '学习常用的软件开发语言，包括C、C++、Java、Python和JavaScript等。'}, {'name': '软件开发平台', 'description': '了解常用的软件开发平台，包括Windows、Linux和macOS等。'}, {'name': '软件开发技术', 'description': '学习常用的软件开发技术，包括面向对象、泛型和并发编程等。'}, {'name': '软件开发规范', 'description': '了解常用的软件开发规范，包括代码风格、命名规则和注释规范等。'}, {'name': '软件开发原则', 'description': '学习常用的软件开发原则，包括单一职责、开闭原则和依赖倒置原则等。'}, {'name': '软件开发模型', 'description': '了解常见的软件开发模型，包括瀑布模型、迭代模型和敏捷开发模型等。'}, {'name': '软件开发工程', 'description': '学习软件开发工程的基本原理和方法，以提高软件开发的效率和质量。'}, {'name': '软件开发过程', 'description': '了解软件开发过程的基本流程和方法，包括需求分析、设计、编码、测试和发布等。'}, {'name': '软件开发环境', 'description': '学习常用的软件开发环境，包括集成开发环境、调试器和性能分析器等。'}, {'name': '软件开发框架', 'description': '了解常用的软件开发框架，以提高开发效率和代码质量。'}, {'name': '软件开发语言', 'description': '学习常用的软件开发语言，包括C、C++、Java、Python和JavaScript等。'}, {'name': '软件开发平台', 'description': '了解常用的软件开发平台，包括Windows、Linux和macOS等。'}, {'name': '软件开发技术', 'description': '学习常用的软件开发技术，包括面向对象、泛型和并发编程等。'}, {'name': '软件开发规范', 'description': '了解常用的软件开发规范，包括代码风格、命名规则和注释规范等。'}, {'name': '软件开发原则', 'description': '学习常用的软件开发原则，包括单一职责、开闭原则和依赖倒置原则等。'}, {'name': '软件开发模型', 'description': '了解常见的软件开发模型，包括瀑布模型、迭代模型和敏捷开发模型等。'}, {'name': '软件开发工程', 'description': '学习软件开发工程的基本原理和方法，以提高软件开发的效率和质量。'}, {'name': '软件开发过程', 'description': '了解软件开发过程的基本流程和方法，包括需求分析、设计、编码、测试和发布等。'}, {'name': '软件开发环境', 'description': '学习常用的软件开发环境，包括集成开发环境、调试器和性能分析器等。'}, {'name': '软件开发框架', 'description': '了解常用的软件开发框架，以提高开发效率和代码质量。'}, {'name': '软件开发语言', 'description': '学习常用的软件开发语言，包括C、C++、Java、Python和JavaScript等。'}, {'name': '软件开发平台', 'description': '了解常用的软件开发平台，包括Windows、Linux和macOS等。'}, {'name': '软件开发技术', 'description': '学习常用的软件开发技术，包括面向对象、泛型和并发编程等。'}, {'name': '软件开发规范', 'description': '了解常用的软件开发规范，包括代码风格、命名规则和注释规范等。'}, {'name': '软件开发原则', 'description': '学习常用的软件开发原则，包括单一职责、开闭原则和依赖倒置原则等。'}, {'name': '软件开发模型', 'description': '了解常见的软件开发模型，包括瀑布模型、迭代模型和敏捷开发模型等。'}, {'name': '软件开发工程', 'description': '学习软件开发工程的基本原理和方法，以提高软件开发的效率和质量。'}, {'name': '软件开发过程', 'description': '了解软件开发过程的基本流程和方法，包括需求分析、设计、编码、测试和发布等。'}, {'name': '软件开发环境', 'description': '学习常用的软件开发环境，包括集成开发环境、调试器和性能分析器等。'}, {'name': '软件开发框架', 'description': '了解常用的软件开发框架，以提高开发效率和代码质量。'}, {'name': '软件开发语言', 'description': '学习常用的软件开发语言，包括C、C++、Java、Python和JavaScript等。'}, {'name': '软件开发平台', 'description': '了解常用的软件开发平台，包括Windows、Linux和macOS等。'}, {'name': '软件开发技术', 'description': '学习常用的软件开发技术，包括面向对象、泛型和并发编程等。'}, {'name': '软件开发规范', 'description': '了解常用的软件开发规范，包括代码风格、命名规则和注释规范等。'}, {'name': '软件开发原则', 'description': '学习常用的软件开发原则，包括单一职责、开闭原则和依赖倒置原则等。'}, {'name': '软件开发模型', 'description': '了解常见的软件开发模型，包括瀑布模型、迭代模型和敏捷开发模型等。'}, {'name': '软件开发工程', 'description': '学习软件开发工程的基本原理和方法，以提高软件开发的效率和质量。"
    },
    {
        "sortId": 567,
        "id": "1402179204426739712",
        "title": "求整数区间[a,b]中奇数之积",
        "content": "编写函数，求给定整数区间$$[a,b]$$中奇数之积。\n\n### 函数接口定义：\n```c++\nint  ProductOdd(int begin, int end);\n```\n参数`begin`是整数区间的左边界， `end`是整数区间的有边界，函数的值是该区间所有偶数之和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"ProductOdd = %d\\n\",ProductOdd(a,b));\n    return 0;\n}\n```\n\n### 输入样例：\n\n```in\n1 10\n```\n\n### 输出样例：\n\n```out\nProductOdd = 945\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义', 'description': '编写函数，求给定整数区间[a,b]中奇数之积。'}, {'name': '函数参数', 'description': '参数begin是整数区间的左边界， end是整数区间的有边界。'}, {'name': '函数返回值', 'description': '函数的值是该区间所有偶数之和。'}, {'name': '输入输出', 'description': '裁判测试程序样例中包含了输入和输出的处理。'}, {'name': '变量定义和赋值', 'description': '在main函数中定义了变量a和b，并通过scanf函数进行赋值。'}, {'name': '格式化输出', 'description': '使用printf函数进行格式化输出。'}, {'name': '循环结构', 'description': '在函数中可能需要使用循环结构来遍历整数区间。'}, {'name': '条件判断', 'description': '在函数中可能需要使用条件判断来判断奇数和偶数。'}, {'name': '运算符', 'description': '在函数中可能需要使用运算符进行乘法运算。'}]"
    },
    {
        "sortId": 568,
        "id": "1402168890196119552",
        "title": "求整数区间[a,b]中偶数之和",
        "content": "编写函数，求给定整数区间$$[a,b]$$中偶数之和。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint sumEven(int begin, int end);\n```\n参数`begin`是整数区间的左边界， `end`是整数区间的右边界，函数的值是该区间所有偶数之和。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    int a,b;\n    scanf(\"%d%d\",&a,&b);\n    printf(\"SumEven = %d\\n\",sumEven(a,b));\n    return 0;\n}\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n1 10\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nSumEven = 30\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'函数定义和调用'，'description':'学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name':'循环结构'，'description':'学习如何使用循环结构来遍历整数区间，以及如何判断一个数是否为偶数。'}, {'name':'变量的声明和赋值'，'description':'学习如何声明和赋值变量，以及如何使用变量来保存计算结果。'}, {'name':'输入输出'，'description':'学习如何使用scanf和printf函数来进行输入输出操作。'}]"
    },
    {
        "sortId": 569,
        "id": "1402071953144958976",
        "title": "求等差数列第n项的值",
        "content": "设 $$a_0,a_1,\\cdots a_n$$为一个等差数列，请编写函数求其通项第n项的值。   \n`说明:`数列下标从0开始计数。\n### 函数接口定义：\n```c++\ndouble Arithmetic(double start, double ratio ,int index)；\n```\n参数`start`为首项的值，`diff`为公差，`index`为通项索引号(从0开始计数)。函数值为第 index 项的值。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    double h,r;     //h首项，r公差\n    int n;          //n通项索引\n    scanf(\"%lf%lf%d\",&h,&r,&n);\n    printf(\"%G\\n\",Arithmetic(h,r,n));\n    return 0;\n}\n```\n\n### 输入样例：\n\n```in\n3.2 1.2 4\n```\n\n### 输出样例：\n\n```out\n8\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'等差数列', 'description':'等差数列是指数列中相邻两项之间的差值相等的数列。本题要求编写一个函数，根据给定的首项、公差和通项索引号，计算等差数列的第index项的值。'}]"
    },
    {
        "sortId": 570,
        "id": "1402064890659303424",
        "title": "求等差数列前n项和",
        "content": "设 $$a_0,a_1,\\cdots a_n,\\cdots$$为一个等差数列，请编写函数求其前i项和$$sum = a_0+a_1+\\cdots+a_i$$。  \n`说明:`数列下标从0开始计数。  \n### 函数接口定义：\n```c++\ndouble SumArithmetic(double start, double diff ,int index)；\n```\n参数`start`为首项的值，`diff`为公差，`index`为通项索引号(从0开始计数)。函数值为第 index 项的值。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    double h,r;     //h首项，r公差\n    int n;          //n通项索引\n    scanf(\"%lf%lf%d\",&h,&r,&n);\n    printf(\"%G\\n\",SumArithmetic(h,r,n));\n    return 0;\n}\n```\n### 输入说明：\n在一行输入3个实数，分别是首项、公差和数列的项数，数与数之间用1个空格隔开。\n### 输入样例：\n\n```in\n3.2 1.2 7\n```\n\n### 输出样例：\n\n```out\n59.2\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'等差数列求和','description':'本题考察了对等差数列求和的理解和实现。需要理解等差数列的概念，以及求和公式的推导过程。在编写函数时，需要根据给定的首项、公差和索引号，使用循环结构计算出前i项的和。'}]"
    },
    {
        "sortId": 571,
        "id": "1401923371251978240",
        "title": "求等比数列前n项和",
        "content": "设 $$a_0,a_1,\\cdots a_n$$为一个等比数列的前n项，请编写函数求其前n项和$$sum = a_0+a_1+\\cdots+a_n$$。   \n`说明:`数列的项数从0开始计数。\n### 函数接口定义：\n```c++\ndouble SumGeometric(double start, double ratio ,int index)；\n```\n参数`start`为首项的值，`ratio`为公比，`index`为通项索引号(从0开始计数)。函数值为第 index 项的值。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    double h,r;     //h首项，r公比\n    int n;          //n通项索引\n    scanf(\"%lf%lf%d\",&h,&r,&n);\n    printf(\"%G\\n\",SumGeometric(h,r,n));\n    return 0;\n}\n```\n\n### 输入样例：\n\n```in\n3.2 2 6\n```\n\n### 输出样例：\n\n```out\n406.4\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '等比数列求和', 'description': '本题考察了对等比数列求和的理解和实现。需要学生了解等比数列的概念，以及求和公式的推导过程。在编写函数时，需要注意参数的传递和返回值的类型。'}]"
    },
    {
        "sortId": 572,
        "id": "1401914922191282176",
        "title": "求等比数列通项",
        "content": "设 $$a_0,a_1,\\cdots a_n$$为一个等比数列的前n项，请编写函数求等比数列第$$i$$项的值。  \n`说明:`数列的项数从0开始计数。\n### 函数接口定义：\n```c++\ndouble geometric(double start, double ratio ,int index)；\n```\n参数`start`为首项的值，`ratio`为公比，`index`为通项索引号(从0开始计数)。函数值为第 index 项的值。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    double h,r;     //h首项，r公比\n    int n;          //n通项索引\n    scanf(\"%lf%lf%d\",&h,&r,&n);\n    printf(\"%G\\n\",geometric(h,r,n));\n    return 0;\n}\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n3.2 2 5\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n102.4\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '等比数列', 'description': '等比数列是指数列中的每一项与它的前一项的比值都相等的数列。本题要求编写一个函数，根据给定的首项、公比和通项索引号，计算等比数列的第index项的值。'}]"
    },
    {
        "sortId": 573,
        "id": "1401835896349315072",
        "title": "判断是否偶数",
        "content": "编写函数，判断一个整数是否偶数。\n\n### 函数接口定义：\n```c++\nint Even(int x);\n```\n `x` 是传入的参数。 当`x`为偶数时函数返回值为`1`，否则返回值为`0`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    int a;\n    scanf(\"%d\",&a);\n    if(Even(a))printf(\"%d is even.\\n\",a);\n    else printf(\"%d is not even.\\n\",a);\n    return 0;\n}\n```\n\n### 输入样例：\n\n```in\n4\n```\n\n### 输出样例：\n\n```out\n4 is even.\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义', 'description': '编写函数，判断一个整数是否偶数。'}, {'name': '函数参数', 'description': '函数接口定义中的参数x是传入的整数。'}, {'name': '函数返回值', 'description': '函数返回值为1表示传入的整数是偶数，返回值为0表示传入的整数不是偶数。'}, {'name': '输入输出', 'description': '使用scanf函数接收输入的整数，使用printf函数输出判断结果。'}]"
    },
    {
        "sortId": 574,
        "id": "1401832058938638336",
        "title": "判断是否奇数",
        "content": "编写函数，判断一个整数是否奇数。\n\n### 函数接口定义：\n```c++\nint Odd(int x);\n```\n `x` 是传入的参数。 当`x`为奇数时函数返回值为`1`，否则返回值为`0`。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n/* 你编写的函数将嵌入在这里 */\n\nint main()\n{\n    int a;\n    scanf(\"%d\",&a);\n    if(Odd(a))printf(\"%d is odd.\\n\",a);\n    else printf(\"%d is not odd.\\n\",a);\n    return 0;\n}\n```\n\n### 输入样例：\n```in\n3\n```\n\n### 输出样例：\n```out\n3 is odd.\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'函数定义与调用'，'description':'函数是C语言中的一种重要的程序模块，用于封装一段特定的功能代码。函数的定义包括函数名、参数列表、返回值类型和函数体。函数的调用通过函数名和参数列表来实现。本题中需要编写一个函数来判断一个整数是否为奇数。'}]"
    },
    {
        "sortId": 575,
        "id": "1401825685374943232",
        "title": "求两个数的最小值",
        "content": "编写函数求出两个数的最大值\n\n### 函数接口定义：\n```c++\nint intMin(int x, int y);\n```\n `x` 和 `y` 都是传入的参数， 函数返回的是两者中较小的数。\n\n### 裁判测试程序样例：\n```C\n#include <stdio.h>\n\n/*你编写的函数将被嵌入在这里*/\n\nint main()\n{    \n    int a, b;\n\n    scanf(\"%d %d\", &a, &b);\n    printf(\"max = %d\\n\", intMin(a, b));\n    return 0;\n}\n```\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n18 4\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nmin = 4\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义', 'description': '函数定义是C语言程序设计中的基础知识点，通过定义函数可以实现对特定功能的封装和复用。在本题中，需要编写一个函数来求两个数的最大值。'}, {'name': '函数参数传递', 'description': '函数参数传递是C语言程序设计中的重要知识点，通过参数传递可以将数据传递给函数进行处理。在本题中，需要将两个数作为参数传递给函数。'}, {'name': '函数返回值', 'description': '函数返回值是C语言程序设计中的重要知识点，通过返回值可以将函数的计算结果返回给调用者。在本题中，需要将两个数中较小的数作为函数的返回值。'}, {'name': '输入输出函数', 'description': '输入输出函数是C语言程序设计中常用的函数，通过输入函数可以从标准输入读取数据，通过输出函数可以将结果输出到标准输出。在本题中，需要使用输入函数scanf读取两个数，使用输出函数printf将最小值输出到标准输出。'}]"
    },
    {
        "sortId": 576,
        "id": "1401819818322972672",
        "title": "求两个数的最大值",
        "content": "编写函数求出两个数的最大值\n\n### 函数接口定义：\n```c++\nint intMax(int x, int y);\n```\n `x` 和 `y` 都是传入的参数， 函数返回的是两者中较大的数。\n\n### 裁判测试程序样例：\n```C\n#include <stdio.h>\n\n/*你编写的函数将被嵌入在这里*/\n\nint main()\n{    \n    int a, b;\n\n    scanf(\"%d %d\", &a, &b);\n    printf(\"max = %d\\n\", intMax(a, b));\n    return 0;\n}\n```\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n18 4\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nmax = 18\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。函数定义包括函数名、参数列表、返回值类型和函数体。'}, {'name': '函数参数', 'description': '函数参数是在函数定义中声明的变量，用于接收调用函数时传入的值。函数可以有多个参数，参数之间用逗号分隔。'}, {'name': '函数返回值', 'description': '函数可以有返回值，用于将计算结果返回给调用函数的地方。返回值类型在函数定义中声明，可以是任意合法的C数据类型。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的过程。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name': '变量定义', 'description': '变量是用于存储数据的内存空间，可以通过变量名来访问和操作其中的数据。变量定义包括变量类型和变量名，可以在定义时初始化变量的值。'}, {'name': '控制流程', 'description': '控制流程是程序中根据条件或循环来决定执行哪些语句的过程。C语言提供了多种控制流程语句，如if语句、for循环和while循环等。'}, {'name': '函数调用', 'description': '函数调用是通过函数名和参数列表来执行函数体中的代码。函数调用可以在程序的任何地方进行，可以嵌套调用其他函数。'}, {'name': '变量赋值', 'description': '变量赋值是将一个值赋给一个变量，使得变量的值发生改变。在C语言中，可以使用赋值运算符=来进行变量赋值操作。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，决定了变量可以存储的数据的种类和范围。C语言提供了多种数据类型，如整型、浮点型、字符型和指针型等。'}, {'name': '运算符', 'description': '运算符是用于进行各种数学和逻辑运算的符号。C语言提供了多种运算符，如算术运算符、关系运算符和逻辑运算符等。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来决定执行哪些语句的语句块。C语言提供了if语句和switch语句来实现条件语句。'}, {'name': '循环语句', 'description': '循环语句是根据条件的真假来重复执行一段代码的语句块。C语言提供了for循环、while循环和do-while循环来实现循环语句。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的连续内存空间。数组可以通过下标来访问和操作其中的元素，下标从0开始。'}, {'name': '指针', 'description': '指针是存储内存地址的变量，可以通过指针来访问和操作内存中的数据。指针可以指向任意类型的数据，可以进行指针运算和指针比较。'}, {'name': '字符串', 'description': '字符串是由字符组成的字符数组，以空字符\\0结尾。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '库函数', 'description': '库函数是由C语言标准库提供的函数，可以通过包含相应的头文件来使用库函数。库函数提供了各种常用的功能，如输入输出、字符串处理和数学运算等。'}, {'name': '编译链接', 'description': '编译链接是将源代码转换为可执行文件的过程。编译器将源代码编译成目标代码，链接器将目标代码和库函数链接成可执行文件。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。预处理指令以#开头，可以包括宏定义、条件编译和文件包含等操作。'}, {'name': '宏定义', 'description': '宏定义是用于定义常量、函数和代码片段的预处理指令。宏定义使用#define关键字，可以在程序中使用宏名来代替相应的值或代码。'}, {'name': '条件编译', 'description': '条件编译是根据条件的真假来选择性地编译部分代码的预处理指令。条件编译使用#if、#ifdef和#ifndef等关键字来控制编译过程。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。结构体可以通过结构体名和成员名来访问和操作其中的数据。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是一个指针。指针数组可以存储多个指针，每个指针可以指向不同类型的数据。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存空间的过程。C语言提供了malloc和free函数来实现动态内存分配。'}, {'name': '递归', 'description': '递归是一个函数调用自身的过程。递归可以用于解决一些需要重复执行相同操作的问题，如阶乘和斐波那契数列等。'}, {'name': '位运算', 'description': '位运算是对二进制数进行逐位操作的运算。C语言提供了多种位运算符，如按位与、按位或和按位异或等。'}, {'name': '指针运算', 'description': '指针运算是对指针进行加减操作的运算。指针运算可以用于访问数组元素、遍历字符串和实现动态内存分配等。'}, {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。C语言提供了多种类型转换运算符，如强制类型转换和隐式类型转换等。'}, {'name': '错误处理', 'description': '错误处理是在程序运行过程中处理错误情况的过程。C语言提供了多种错误处理机制，如返回错误码、抛出异常和使用断言等。'}, {'name': '多文件编程', 'description': '多文件编程是将程序分成多个源文件进行编写和管理的方法。C语言提供了头文件和函数声明来实现多文件编程。'}, {'name': '指针函数', 'description': '指针函数是返回指针的函数，可以通过指针函数来返回动态分配的内存空间或者函数内部的局部变量。'}, {'name': '函数指针', 'description': '函数指针是指向函数的指针变量，可以通过函数指针来调用相应的函数。函数指针可以作为参数传递给其他函数，也可以作为函数的返回值。'}, {'name': '结构体指针', 'description': '结构体指针是指向结构体的指针变量，可以通过结构体指针来访问和操作结构体中的成员变量。结构体指针可以动态分配和释放内存空间。'}, {'name': '文件指针', 'description': '文件指针是指向文件的指针变量，可以通过文件指针来进行文件的读写操作。文件指针可以使用标准库函数fopen返回，也可以通过文件描述符进行操作。'}, {'name': '预定义宏', 'description': '预定义宏是由编译器预先定义的宏，可以在程序中直接使用。预定义宏包括__FILE__、__LINE__和__DATE__等，用于获取文件名、行号和编译日期等信息。'}, {'name': '内存管理', 'description': '内存管理是对程序中使用的内存进行分配和释放的过程。C语言提供了多种内存管理函数，如malloc、calloc和realloc等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。C语言提供了多种数学运算函数，如sqrt、sin和pow等。'}, {'name': '随机数生成', 'description': '随机数生成是生成随机数的过程。C语言提供了rand和srand函数来生成伪随机数，也可以使用time函数来获取当前时间作为随机数种子。'}, {'name': '字符处理', 'description': '字符处理是对字符进行各种操作的过程。C语言提供了多种字符处理函数，如isalpha、isdigit和toupper等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。C语言提供了多种数学运算函数，如sqrt、sin和pow等。'}, {'name': '随机数生成', 'description': '随机数生成是生成随机数的过程。C语言提供了rand和srand函数来生成伪随机数，也可以使用time函数来获取当前时间作为随机数种子。'}, {'name': '字符处理', 'description': '字符处理是对字符进行各种操作的过程。C语言提供了多种字符处理函数，如isalpha、isdigit和toupper等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。C语言提供了多种数学运算函数，如sqrt、sin和pow等。'}, {'name': '随机数生成', 'description': '随机数生成是生成随机数的过程。C语言提供了rand和srand函数来生成伪随机数，也可以使用time函数来获取当前时间作为随机数种子。'}, {'name': '字符处理', 'description': '字符处理是对字符进行各种操作的过程。C语言提供了多种字符处理函数，如isalpha、isdigit和toupper等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。C语言提供了多种数学运算函数，如sqrt、sin和pow等。'}, {'name': '随机数生成', 'description': '随机数生成是生成随机数的过程。C语言提供了rand和srand函数来生成伪随机数，也可以使用time函数来获取当前时间作为随机数种子。'}, {'name': '字符处理', 'description': '字符处理是对字符进行各种操作的过程。C语言提供了多种字符处理函数，如isalpha、isdigit和toupper等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学运算是对数值进行各种数学操作的过程。C语言提供了多种数学运算函数，如sqrt、sin和pow等。'}, {'name': '随机数生成', 'description': '随机数生成是生成随机数的过程。C语言提供了rand和srand函数来生成伪随机数，也可以使用time函数来获取当前时间作为随机数种子。'}, {'name': '字符处理', 'description': '字符处理是对字符进行各种操作的过程。C语言提供了多种字符处理函数，如isalpha、isdigit和toupper等。'}, {'name': '文件操作', 'description': '文件操作是对磁盘文件进行读写操作的过程。C语言提供了多种文件操作函数，如fopen、fclose和fread等。'}, {'name': '字符串处理', 'description': '字符串处理是对字符串进行各种操作的过程。C语言提供了多种字符串处理函数，如strlen、strcpy和strcat等。'}, {'name': '数学运算', 'description': '数学"
    },
    {
        "sortId": 577,
        "id": "1398465996929863680",
        "title": "若已定义：int  a=5;*p1=&a; float x=11.6,*p2=&x;下列能实现正确赋值的语句是（  ）。",
        "content": "若已定义：int  a=5;*p1=&a; float x=11.6,*p2=&x;下列能实现正确赋值的语句是（  ）。\n\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'指针类型','description':'指针类型是C语言中的一种特殊数据类型，用于存储变量的内存地址。通过指针类型，可以实现对变量的间接访问和操作。本题涉及到了指针类型的定义和使用，包括指针的声明、指针的赋值和指针的取值。'}, {'name':'变量的定义和赋值','description':'变量是C语言中用于存储数据的一种基本概念。本题涉及到了变量的定义和赋值，包括整型变量和浮点型变量的定义和赋值。'}, {'name':'赋值语句','description':'赋值语句是C语言中用于将一个值赋给一个变量的语句。本题涉及到了赋值语句的使用，包括将一个整型变量的值赋给一个整型指针变量和将一个浮点型变量的值赋给一个浮点型指针变量。'}]"
    },
    {
        "sortId": 578,
        "id": "1398463363473383424",
        "title": "若有定义:int a;且表达式!a的值为0，则表达式（  ）的值为1.",
        "content": "若有定义:int a;且表达式!a的值为0，则表达式（  ）的值为1.\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑非运算符','description':'逻辑非运算符（!）用于对表达式进行逻辑取反操作。当表达式的值为0时，逻辑非运算符将其取反为1，否则取反为0。'}]"
    },
    {
        "sortId": 579,
        "id": "1398461080798728192",
        "title": "对应代数表达式3a÷(b+c)，C语言的表达式是()",
        "content": "对应代数表达式3a÷(b+c)，C语言的表达式是()\n\n\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'算术运算符'，'description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法、除法等。在C语言中，除法运算符/用于执行整数除法，%用于执行取余运算。'}，{'name':'运算符优先级'，'description':'运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，乘法和除法的优先级高于加法和减法，可以使用括号来改变运算符的优先级。'}]"
    },
    {
        "sortId": 580,
        "id": "1397202610375884800",
        "title": "温度转换",
        "content": "华氏和摄氏温度的转换公式为：C=5/9*(F-32)，其中C表示射手温度，F表示华氏温度。下面的程序要求从华氏0度到华氏300度，每隔20度输出一个华氏温度对应的摄氏温度值，请在横线上填上适当的语句。\n\n```c++\n#include<stdio.h>\nint main()\n{\n\tfloat fahr=0,celsius;\n\twhile()\n\t{\n\t\tcelsius=;\n\t\tprintf(\"%f\\n\",celsius);\n\t;\n\t}\n\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 9,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型和变量'，'description':'C语言中的数据类型和变量的概念和使用方法，包括浮点型变量和整型变量的声明和赋值操作。'}, {'name':'循环结构'，'description':'C语言中的循环结构，包括while循环的使用方法和语法规则。'}, {'name':'算术运算符'，'description':'C语言中的算术运算符，包括加法运算符和乘法运算符的使用方法和运算规则。'}, {'name':'输出语句'，'description':'C语言中的输出语句，包括printf函数的使用方法和格式化输出的规则。'}]"
    },
    {
        "sortId": 581,
        "id": "1397094685942099968",
        "title": "判断是否是闰年",
        "content": "判断是否闰年\n\n```c++\n\n#include <stdio.h>\n\nint main()\n{\n\tint year;\n\tscanf(\"%d\",&year);\n\n\t\t\tprintf(\"%d是闰年\",year);\n\telse\n\t\t\tprintf(\"%d不是闰年\",year);\n\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在这个习题中，通过判断输入的年份是否为闰年来决定输出的结果。'}]"
    },
    {
        "sortId": 582,
        "id": "1397046181387898880",
        "title": "若已经定义： int x=2,y=3;则下列表达式值为假的是（  ）",
        "content": "若已经定义： int x=2,y=3;则下列表达式值为假的是（  ）\n\n\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，返回一个布尔值。常见的逻辑运算符有与（&&）、或（||）、非（!）等。在本题中，需要对给定的表达式进行逻辑判断，判断其是否为假。'}]"
    },
    {
        "sortId": 583,
        "id": "1397043574451818496",
        "title": "下面叙述正确的是（  ）",
        "content": "下面叙述正确的是（  ）\n\n\n\n\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'包括C语言的基本语法、数据类型、运算符、控制结构等基础知识点。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，包括与、或、非等运算符。'}, {'name':'条件语句','description':'条件语句用于根据条件的真假来执行不同的代码块，包括if语句和switch语句。'}, {'name':'循环语句','description':'循环语句用于重复执行一段代码，包括for循环、while循环和do-while循环。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块，可以重复使用，包括函数的定义、调用和参数传递等。'}, {'name':'数组','description':'数组是一种存储多个相同类型数据的容器，包括数组的定义、访问和操作等。'}, {'name':'指针','description':'指针是一种特殊的变量，存储变量的地址，包括指针的定义、指针运算和指针与数组的关系等。'}, {'name':'字符串','description':'字符串是一串字符的序列，包括字符串的定义、操作和常用字符串函数等。'}, {'name':'结构体','description':'结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量，包括结构体的定义、访问和操作等。'}, {'name':'文件操作','description':'文件操作用于对文件进行读写操作，包括文件的打开、读写和关闭等。'}]"
    },
    {
        "sortId": 584,
        "id": "1390947478490071040",
        "title": "自动编程",
        "content": "输出语句是每个程序员首先要掌握的语句。Python 的输出语句很简单，只要写一个 `print(X)` 即可，其中 `X` 是需要输出的内容。\n\n本题就请你写一个自动编程机，对任何一个要输出的整数 N，给出输出这个整数的 Python 语句。\n\n### 输入格式：\n\n输入给出一个不超过 $$10^5$$ 的正整数。\n\n### 输出格式：\n\n在一行中打印输出这个整数的 Python 语句，其中不包含任何空格。\n\n### 输入样例：\n```in\n520\n\n```\n\n### 输出样例：\n```out\nprint(520)\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '输出语句是每个程序员首先要掌握的语句。Python 的输出语句很简单，只要写一个 `print(X)` 即可，其中 `X` 是需要输出的内容。'}]"
    },
    {
        "sortId": 585,
        "id": "1387235209611722752",
        "title": "已知如下定义：",
        "content": "已知如下定义：\n\n`#define s(a) a*a`\n\n则s(2+3)的值为 ",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'宏定义', 'description':'宏定义是C语言中的一种预处理指令，用于将一个标识符替换为一个表达式或语句。在本题中，宏定义了一个名为s的宏，它接受一个参数a，并将a*a作为替换内容。'}]"
    },
    {
        "sortId": 586,
        "id": "1386604157436166144",
        "title": "求一个数列前n项和[D]",
        "content": "已知一个数列前两项分别是`1`和`1`，从第三项开始，每个奇数项的值都是其前两项之和，偶数项的值是其前两项之差的绝对值。数列形式如下：   \n`1、1、2、1、3、2、5 ...    `  \n现在要求编写程序，输出该数列前n项和(2<n<20).\n### 输入格式:\n\n输入项数n\n\n### 输出格式:\n\n输出前n项和\n\n### 输入样例:\n\n```in\n7\n```\n\n### 输出样例:\n\n```out\nsum = 15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的控制结构，可以根据条件来控制代码的执行次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构在解决需要重复执行某段代码的问题时非常有用。'}, {'name': '变量和数据类型', 'description': '变量是用来存储数据的一种容器，可以通过变量名来访问和操作存储在变量中的数据。在C语言中，变量需要先声明后使用，并且需要指定变量的数据类型。常见的数据类型有整型、浮点型、字符型等。在解决问题时，选择合适的数据类型可以提高程序的效率和准确性。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件来选择执行不同代码块的控制结构。在C语言中，常用的条件语句有if语句和switch语句。条件语句可以根据不同的条件来执行不同的代码，从而实现程序的灵活性和可控性。'}, {'name': '数组', 'description': '数组是一种用来存储多个相同类型数据的连续内存空间。在C语言中，数组需要先声明后使用，并且需要指定数组的大小。通过数组下标可以访问和操作数组中的元素。数组在解决需要处理大量数据的问题时非常有用。'}, {'name': '算术运算符', 'description': '算术运算符是一种用来进行基本数学运算的运算符。在C语言中，常用的算术运算符有加法运算符、减法运算符、乘法运算符、除法运算符等。通过算术运算符可以对数值进行加减乘除等操作，从而实现数学运算的功能。'}, {'name': '逻辑运算符', 'description': '逻辑运算符是一种用来进行逻辑运算的运算符。在C语言中，常用的逻辑运算符有与运算符、或运算符、非运算符等。通过逻辑运算符可以对逻辑表达式进行求值，从而实现逻辑运算的功能。逻辑运算符在解决需要根据不同条件来执行不同代码的问题时非常有用。'}, {'name': '函数', 'description': '函数是一种封装了一段代码的模块，可以通过函数名来调用和执行这段代码。在C语言中，函数需要先声明后使用，并且需要指定函数的返回值类型和参数列表。通过函数可以将一个大问题分解成多个小问题，从而提高程序的可读性和可维护性。'}, {'name': '运算符优先级', 'description': '运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，不同的运算符有不同的优先级，高优先级的运算符会先于低优先级的运算符执行。通过合理设置运算符的优先级，可以确保表达式的计算结果符合预期。'}, {'name': '输入输出', 'description': '输入输出是指程序与外部环境进行数据交换的过程。在C语言中，可以使用标准库函数来实现输入输出操作。常用的输入函数有scanf函数，常用的输出函数有printf函数。通过输入输出操作，可以实现程序与用户之间的交互，从而提高程序的灵活性和实用性。'}, {'name': '递归', 'description': '递归是一种在函数内部调用自身的技术。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题。递归函数需要定义递归终止条件，以避免无限递归导致程序崩溃。递归在解决一些复杂问题时非常有用，但需要注意控制递归的深度和效率。'}, {'name': '数学函数', 'description': '数学函数是一种用来进行数学运算的函数。在C语言中，可以使用数学库函数来实现各种数学运算。常用的数学函数有求平方根的sqrt函数、求绝对值的fabs函数、求正弦值的sin函数等。通过数学函数可以实现复杂的数学运算，从而提高程序的功能和准确性。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行各种操作的过程。在C语言中，可以使用字符串库函数来实现字符串处理。常用的字符串函数有字符串拷贝的strcpy函数、字符串连接的strcat函数、字符串比较的strcmp函数等。通过字符串处理可以实现对字符串的增删改查等操作，从而提高程序的灵活性和实用性。'}, {'name': '指针', 'description': '指针是一种用来存储内存地址的变量。在C语言中，可以使用指针来访问和操作内存中的数据。通过指针可以实现对变量的间接访问和修改，从而提高程序的灵活性和效率。指针在解决一些需要动态分配内存和操作复杂数据结构的问题时非常有用。'}, {'name': '数组指针', 'description': '数组指针是一种指向数组的指针。在C语言中，可以使用数组指针来访问和操作数组中的元素。通过数组指针可以实现对数组的灵活访问和操作，从而提高程序的效率和可读性。数组指针在解决一些需要处理多维数组和复杂数据结构的问题时非常有用。'}, {'name': '结构体', 'description': '结构体是一种用来存储多个不同类型数据的自定义数据类型。在C语言中，可以使用结构体来定义自己的数据类型，并通过结构体变量来访问和操作结构体中的成员。通过结构体可以实现对复杂数据的封装和处理，从而提高程序的可读性和可维护性。'}, {'name': '文件操作', 'description': '文件操作是指对文件进行读写和管理的过程。在C语言中，可以使用文件库函数来实现文件操作。常用的文件函数有打开文件的fopen函数、读写文件的fread和fwrite函数、关闭文件的fclose函数等。通过文件操作可以实现对文件的读写和管理，从而实现数据的持久化和共享。'}, {'name': '预处理指令', 'description': '预处理指令是一种在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来实现宏定义、条件编译等功能。常用的预处理指令有宏定义的#define指令、条件编译的#ifdef和#ifndef指令等。通过预处理指令可以实现对源代码的灵活处理，从而提高程序的可读性和可维护性。'}, {'name': '错误处理', 'description': '错误处理是指在程序运行过程中对错误情况进行处理的过程。在C语言中，可以使用错误处理机制来捕获和处理程序中的错误。常用的错误处理机制有错误码的返回、异常的抛出和捕获等。通过错误处理可以提高程序的健壮性和可靠性，避免程序崩溃和数据丢失。'}, {'name': '位运算', 'description': '位运算是一种对二进制位进行操作的运算。在C语言中，可以使用位运算符来实现位运算。常用的位运算符有按位与运算符、按位或运算符、按位取反运算符等。通过位运算可以实现对二进制位的灵活操作，从而提高程序的效率和可读性。'}, {'name': '随机数', 'description': '随机数是一种在一定范围内随机生成的数值。在C语言中，可以使用随机数函数来生成随机数。常用的随机数函数有生成随机数的rand函数、设置随机数种子的srand函数等。通过随机数可以实现对数据的随机化处理，从而提高程序的灵活性和实用性。'}, {'name': '指针数组', 'description': '指针数组是一种存储指针的数组。在C语言中，可以使用指针数组来存储多个指针。通过指针数组可以实现对指针的灵活管理和操作，从而提高程序的效率和可读性。指针数组在解决一些需要处理多个指针和动态分配内存的问题时非常有用。'}, {'name': '动态内存分配', 'description': '动态内存分配是一种在程序运行过程中根据需要分配和释放内存的技术。在C语言中，可以使用动态内存分配函数来实现动态内存分配。常用的动态内存分配函数有申请内存的malloc函数、释放内存的free函数等。通过动态内存分配可以实现对内存的灵活管理和利用，从而提高程序的效率和可扩展性。'}, {'name': '多文件编程', 'description': '多文件编程是一种将程序分成多个文件进行开发和管理的技术。在C语言中，可以使用多文件编程来实现模块化开发和代码复用。通过多文件编程可以将程序分成多个模块，每个模块负责不同的功能，从而提高程序的可读性和可维护性。'}, {'name': '指针函数', 'description': '指针函数是一种返回指针的函数。在C语言中，可以使用指针函数来返回指针类型的数据。通过指针函数可以实现对指针的灵活返回和使用，从而提高程序的效率和可读性。指针函数在解决一些需要返回指针类型数据的问题时非常有用。'}, {'name': '位字段', 'description': '位字段是一种用来存储和操作二进制位的数据结构。在C语言中，可以使用位字段来定义自己的数据类型，并通过位字段变量来访问和操作位字段中的位。通过位字段可以实现对二进制位的灵活管理和操作，从而提高程序的效率和可读性。'}, {'name': '枚举', 'description': '枚举是一种用来表示一组相关常量的数据类型。在C语言中，可以使用枚举来定义自己的数据类型，并通过枚举变量来访问和操作枚举中的常量。通过枚举可以实现对常量的分类和管理，从而提高程序的可读性和可维护性。'}, {'name': '位域', 'description': '位域是一种用来存储和操作二进制位的数据结构。在C语言中，可以使用位域来定义自己的数据类型，并通过位域变量来访问和操作位域中的位。通过位域可以实现对二进制位的灵活管理和操作，从而提高程序的效率和可读性。'}, {'name': '链表', 'description': '链表是一种用来存储和操作数据的数据结构。在C语言中，可以使用链表来实现动态存储和管理数据。链表由多个节点组成，每个节点包含数据和指向下一个节点的指针。通过链表可以实现对数据的灵活插入、删除和查找，从而提高程序的效率和可读性。'}, {'name': '队列', 'description': '队列是一种用来存储和操作数据的数据结构。在C语言中，可以使用队列来实现先进先出的数据结构。队列由多个元素组成，每个元素包含数据和指向下一个元素的指针。通过队列可以实现对数据的顺序存储和访问，从而提高程序的效率和可读性。'}, {'name': '栈', 'description': '栈是一种用来存储和操作数据的数据结构。在C语言中，可以使用栈来实现后进先出的数据结构。栈由多个元素组成，每个元素包含数据和指向下一个元素的指针。通过栈可以实现对数据的逆序存储和访问，从而提高程序的效率和可读性。'}, {'name': '递归函数', 'description': '递归函数是一种在函数内部调用自身的技术。在C语言中，可以使用递归函数来解决一些需要重复执行相同操作的问题。递归函数需要定义递归终止条件，以避免无限递归导致程序崩溃。递归函数在解决一些复杂问题时非常有用，但需要注意控制递归的深度和效率。'}, {'name': '排序算法', 'description': '排序算法是一种将数据按照一定规则进行排序的算法。在C语言中，可以使用排序算法来对数据进行排序。常用的排序算法有冒泡排序、插入排序、选择排序、快速排序等。通过排序算法可以实现对数据的有序存储和访问，从而提高程序的效率和可读性。'}, {'name': '查找算法', 'description': '查找算法是一种在数据集合中查找指定元素的算法。在C语言中，可以使用查找算法来对数据进行查找。常用的查找算法有线性查找、二分查找、哈希查找等。通过查找算法可以实现对数据的快速查找和访问，从而提高程序的效率和可读性。'}, {'name': '图算法', 'description': '图算法是一种用"
    },
    {
        "sortId": 587,
        "id": "1386593954994028544",
        "title": "int x=3;",
        "content": "int x=3;\n\nx=x^2;\n\n此程序段执行后，x的值为 。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'位运算','description':'位运算是C语言中的一种运算方式，通过对二进制数的位进行操作来实现特定的功能。在该题目中，x=x^2表示对x进行异或运算，异或运算是将两个二进制数的对应位进行异或操作，得到的结果再赋值给x。'}]"
    },
    {
        "sortId": 588,
        "id": "1386591527561560064",
        "title": "int x=52;",
        "content": "int x=52;\n\ndouble y=123.456;\n\nprintf(\"%d,%f\",x,y);的输出结果是 。（用@表示空格，下同）\n\nprintf(\"%5d,%1.2f\",x,y);的输出结果是。\n\nprintf(\"%+5d,%-8.2f\",x,y);的输出结果是。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 2,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'格式化输出','description':'格式化输出是C语言中常用的输出方式，通过使用特定的格式控制符来指定输出的格式。在这些题目中，需要了解%d和%f格式控制符的使用，以及它们的一些常见参数，如宽度、精度、对齐等。'}]"
    },
    {
        "sortId": 589,
        "id": "1386588093906157568",
        "title": "int x=012;",
        "content": "int x=012;\n\nprintf(\"%d\",x);\n\n请问程序段执行后x的值为 。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数常量的表示','description':'整数常量可以用十进制、八进制或十六进制表示。十进制表示直接写出数字即可，八进制表示以0开头，十六进制表示以0x或0X开头。'}]"
    },
    {
        "sortId": 590,
        "id": "1386587826843254784",
        "title": "编写计算器程序",
        "content": "编写一个简单计算器程序，可根据输入的运算符，对2个数进行加、减、乘、除运算。\n### 输入格式:\n\n在一行中依次给出运算数1、运算符、运算数2，其间不留空格。运算符为`+`、`-`、`*`与`/`中的任意一个。\n\n### 输出格式:\n\n输出一个实数，保留2位小数。如果输入了错误的运算符号，则输出`Incorrect Operator!`。对除法运算，如果输入的运算数2的绝对值是个近似于`0`(小于$$10^{-5}$$)的数，则输出`Divided by zero!`。\n\n### 输入样例:\n\n```in\n20.0+31.25\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n51.25\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "69",
                        "name": "switch",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符','description':'运算符是用来进行数学运算的符号，包括加法、减法、乘法和除法。在C语言中，常用的运算符有+、-、*和/。'}, {'name':'条件判断','description':'条件判断是根据给定的条件来决定程序的执行路径。在C语言中，常用的条件判断语句有if语句和switch语句。'}, {'name':'变量','description':'变量是用来存储数据的容器。在C语言中，变量需要先声明后使用，并且需要指定变量的类型。'}, {'name':'输入输出','description':'输入输出是程序与用户或外部设备之间进行数据交互的方式。在C语言中，常用的输入输出函数有scanf和printf。'}, {'name':'浮点数','description':'浮点数是一种表示实数的数据类型。在C语言中，浮点数的表示方式有两种：单精度浮点数和双精度浮点数。'}, {'name':'错误处理','description':'错误处理是在程序运行过程中遇到错误时进行相应的处理。在C语言中，常用的错误处理方式有条件判断和异常处理。'}, {'name':'循环结构','description':'循环结构是用来重复执行一段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块。在C语言中，函数需要先声明后使用，并且可以有参数和返回值。'}, {'name':'字符串处理','description':'字符串处理是对字符串进行操作的过程。在C语言中，常用的字符串处理函数有strlen、strcpy和strcat。'}, {'name':'数组','description':'数组是一种存储多个相同类型数据的容器。在C语言中，数组需要先声明后使用，并且需要指定数组的大小。'}, {'name':'指针','description':'指针是存储内存地址的变量。在C语言中，指针可以用来访问和操作内存中的数据。'}, {'name':'结构体','description':'结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。在C语言中，结构体需要先定义后使用。'}, {'name':'文件操作','description':'文件操作是对文件进行读写的过程。在C语言中，常用的文件操作函数有fopen、fclose、fread和fwrite。'}, {'name':'递归','description':'递归是一种通过调用自身来解决问题的方法。在C语言中，可以使用递归来实现一些复杂的算法。'}, {'name':'指针运算','description':'指针运算是对指针进行操作的过程。在C语言中，常用的指针运算符有取地址运算符&和取值运算符*。'}, {'name':'动态内存分配','description':'动态内存分配是在程序运行过程中根据需要分配和释放内存的过程。在C语言中，可以使用malloc和free函数来进行动态内存分配和释放。'}, {'name':'位运算','description':'位运算是对二进制位进行操作的过程。在C语言中，常用的位运算符有按位与&、按位或|和按位异或^。'}, {'name':'指针数组','description':'指针数组是一个数组，其中的每个元素都是一个指针。在C语言中，可以使用指针数组来存储多个字符串。'}, {'name':'结构体指针','description':'结构体指针是指向结构体的指针。在C语言中，可以使用结构体指针来访问和操作结构体的成员变量。'}, {'name':'链表','description':'链表是一种动态数据结构，可以在运行时动态地分配和释放内存。在C语言中，可以使用指针来实现链表。'}, {'name':'排序算法','description':'排序算法是将一组数据按照特定的顺序进行排列的算法。在C语言中，常用的排序算法有冒泡排序、插入排序和快速排序。'}, {'name':'搜索算法','description':'搜索算法是在一组数据中查找特定元素的算法。在C语言中，常用的搜索算法有线性搜索和二分搜索。'}, {'name':'图形界面','description':'图形界面是一种通过图形方式与用户进行交互的界面。在C语言中，可以使用图形库来实现图形界面。'}, {'name':'网络编程','description':'网络编程是通过网络进行数据交互的过程。在C语言中，可以使用套接字来实现网络编程。'}, {'name':'多线程','description':'多线程是一种同时执行多个任务的方式。在C语言中，可以使用线程库来实现多线程。'}, {'name':'异常处理','description':'异常处理是在程序运行过程中遇到异常情况时进行相应的处理。在C语言中，可以使用异常处理机制来处理异常。'}, {'name':'模块化编程','description':'模块化编程是将程序分解为多个模块进行开发的方式。在C语言中，可以使用头文件和源文件来实现模块化编程。'}, {'name':'数据结构','description':'数据结构是一种组织和存储数据的方式。在C语言中，常用的数据结构有数组、链表、栈和队列。'}, {'name':'算法复杂度','description':'算法复杂度是衡量算法执行效率的指标。在C语言中，可以使用大O表示法来表示算法复杂度。'}, {'name':'编译预处理','description':'编译预处理是在编译过程中对源代码进行预处理的过程。在C语言中，可以使用预处理指令来进行编译预处理。'}, {'name':'编译链接','description':'编译链接是将源代码转换为可执行文件的过程。在C语言中，可以使用编译器和链接器来进行编译链接。'}, {'name':'调试技巧','description':'调试技巧是在程序开发过程中解决问题的方法和技巧。在C语言中，可以使用调试器来进行调试。'}, {'name':'代码优化','description':'代码优化是提高程序执行效率的过程。在C语言中，可以使用优化编译选项来进行代码优化。'}, {'name':'内存管理','description':'内存管理是对程序中的内存进行分配和释放的过程。在C语言中，可以使用malloc和free函数来进行内存管理。'}, {'name':'文件操作','description':'文件操作是对文件进行读写的过程。在C语言中，可以使用文件指针和文件操作函数来进行文件操作。'}, {'name':'字符串处理','description':'字符串处理是对字符串进行操作的过程。在C语言中，可以使用字符串函数来进行字符串处理。'}, {'name':'数据类型','description':'数据类型是用来表示不同类型数据的方式。在C语言中，常用的数据类型有整型、浮点型、字符型和指针型。'}, {'name':'运算符优先级','description':'运算符优先级是指在表达式中运算符执行的顺序。在C语言中，可以使用括号来改变运算符的优先级。'}, {'name':'数组指针','description':'数组指针是指向数组的指针。在C语言中，可以使用数组指针来访问和操作数组的元素。'}, {'name':'字符串指针','description':'字符串指针是指向字符串的指针。在C语言中，可以使用字符串指针来访问和操作字符串的字符。'}, {'name':'结构体数组','description':'结构体数组是一个数组，其中的每个元素都是一个结构体。在C语言中，可以使用结构体数组来存储多个结构体。'}, {'name':'文件指针','description':'文件指针是指向文件的指针。在C语言中，可以使用文件指针来进行文件操作。'}, {'name':'递归函数','description':'递归函数是调用自身的函数。在C语言中，可以使用递归函数来解决一些复杂的问题。'}, {'name':'指针函数','description':'指针函数是返回指针的函数。在C语言中，可以使用指针函数来返回指针类型的数据。'}, {'name':'结构体指针数组','description':'结构体指针数组是一个数组，其中的每个元素都是一个结构体指针。在C语言中，可以使用结构体指针数组来存储多个结构体。'}, {'name':'链表指针','description':'链表指针是指向链表的指针。在C语言中，可以使用链表指针来访问和操作链表的节点。'}, {'name':'排序算法优化','description':'排序算法优化是提高排序算法执行效率的过程。在C语言中，可以使用优化算法来优化排序算法。'}, {'name':'搜索算法优化','description':'搜索算法优化是提高搜索算法执行效率的过程。在C语言中，可以使用优化算法来优化搜索算法。'}, {'name':'图形界面库','description':'图形界面库是用来实现图形界面的软件库。在C语言中，常用的图形界面库有GTK+和Qt。'}, {'name':'网络编程库','description':'网络编程库是用来实现网络编程的软件库。在C语言中，常用的网络编程库有Winsock和BSD Socket。'}, {'name':'多线程库','description':'多线程库是用来实现多线程的软件库。在C语言中，常用的多线程库有pthread和Windows API。'}, {'name':'异常处理机制','description':'异常处理机制是在程序运行过程中处理异常的一种机制。在C语言中，可以使用setjmp和longjmp函数来实现异常处理。'}, {'name':'模块化编程技巧','description':'模块化编程技巧是将程序分解为多个模块进行开发的一种技巧。在C语言中，可以使用头文件和源文件来实现模块化编程。'}, {'name':'数据结构优化','description':'数据结构优化是提高数据结构执行效率的过程。在C语言中，可以使用优化算法来优化数据结构。'}, {'name':'算法复杂度分析','description':'算法复杂度分析是对算法执行效率进行评估的过程。在C语言中，可以使用大O表示法来进行算法复杂度分析。'}, {'name':'编译预处理指令','description':'编译预处理指令是在编译过程中对源代码进行预处理的指令。在C语言中，常用的编译预处理指令有#include和#define。'}, {'name':'编译链接过程','description':'编译链接过程是将源代码转换为可执行文件的过程。在C语言中，可以使用编译器和链接器来进行编译链接。'}, {'name':'调试技巧和工具','description':'调试技巧和工具是在程序开发过程中解决问题的方法和工具。在C语言中，常用的调试技巧和工具有断点调试和打印调试。'}, {'name':'代码优化技巧','description':'代码优化技巧是提高程序执行效率的一种技巧。在C语言中，常用的代码优化技巧有循环展开和函数内联。'}, {'name':'内存管理技巧','description':'内存管理技巧是对程序中的内存进行分配和释放的一种技巧。在C语言中，常用的内存管理技巧有内存池和内存对齐。'}, {'name':'文件操作技巧','description':'文件操作技巧是对文件进行读写的一种技巧。在C语言中，常用的文件操作技巧有文件缓冲和文件锁。'}, {'name':'字符串处理技巧','description':'字符串处理技巧是对字符串进行操作的一种技巧。在C语言中，常用的字符串处理技巧有字符串拼接和字符串替换。'}, {'name':'数据类型转换','description':'数据类型转换是将一种数据类型转换为另一种数据类型的过程。在C语言中，可以使用强制类型转换来进行数据类型转换。'}, {'name':'运算符优先级表','description':'运算符优先级表是指在表达式中运算符执行的顺序。在C语言中，可以使用运算符优先级表来确定运算符的优先级。'}, {'name':'数组指针和指针数组','description':'数组指针和指针数组是指向数组的指针和数组中的指针。在C语言中，可以使用数组指针和指针数组来访问和操作数组的元素。'}, {'name':'字符串指针和指针字符串','description':'字符串指针和指针字符串是指向字符串的指针和字符串中的指针。在C语言中，可以使用字符串指针和指针字符串来访问和操作字符串的字符。'}, {'name':'结构体指针数组和数组指针结构体','description':'结构体指针数组和数组指针结构体是指向结构体的指针数组和数组中的结构体指针。在C语言中，可以使用结构体指针数组和数组指针结构体来存储多个结构体。'}, {'name':'链表指针和指针链表','description':'链表指针和指针链表是指向链表的指针和链表中的指针。在C语言中，可以使用链表指针和指针链表来访问和操作链表的节点。'}, {'name':'排序算法优化技巧','description':'排序算法优化技巧是提高排序算法执行效率的一种技巧。在C语言中，"
    },
    {
        "sortId": 591,
        "id": "1386587306393042944",
        "title": "若变量均已正确定义并赋值，以下合法的C语言赋值语句是（    ）。",
        "content": "若变量均已正确定义并赋值，以下合法的C语言赋值语句是（    ）。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值语句','description':'赋值语句用于将一个值赋给变量，是C语言中常用的操作之一。在赋值语句中，等号（=）用于将右边的值赋给左边的变量。'}]"
    },
    {
        "sortId": 592,
        "id": "1386586716291203072",
        "title": "设有定义：",
        "content": "设有定义：\n\nint a;\n\nfloat b;\n\n执行scanf(\"%2d%f\", &a, &b);语句时，\n\n若从键盘输入876 543.0<回车>\n\n则a和b的值分别是（    ）。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'scanf函数', 'description': 'scanf函数是C语言中用于从标准输入流中读取数据的函数，可以根据指定的格式字符串将输入的数据赋值给相应的变量。在本题中，scanf函数被用于读取整数和浮点数，并将其赋值给变量a和b。'}, {'name': '格式化输入', 'description': '格式化输入是指根据指定的格式字符串从输入流中读取数据，并按照指定的格式进行解析和赋值的过程。在本题中，格式化输入的格式字符串为\"%2d%f\"，表示读取两位整数和一个浮点数。'}, {'name': '变量赋值', 'description': '变量赋值是指将一个值赋给一个变量的操作。在本题中，通过scanf函数将输入的整数和浮点数赋值给变量a和b，分别表示为a和b的值。'}]"
    },
    {
        "sortId": 593,
        "id": "1386585396301791232",
        "title": "设有定义：",
        "content": "设有定义：\n\nfloat a;\n\nint b;\n\nchar c;\n\n用语句scanf(\"%f%c%d\",&a,&c,&b);为变量a,b,c输入数据时，欲使a=12.34，c='A'，b=56，那么，应当输入的一行数据为： 。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数','description':'scanf函数是C语言中用于从标准输入流中读取数据的函数，可以根据指定的格式字符串将输入的数据赋值给相应的变量。在本题中，使用scanf函数可以实现对变量a、b、c的输入。'}，{'name':'格式字符串','description':'格式字符串是scanf函数中用于指定输入数据格式的字符串。在本题中，格式字符串为\"%f%c%d\"，其中%f表示读取一个浮点数，%c表示读取一个字符，%d表示读取一个整数。'}]"
    },
    {
        "sortId": 594,
        "id": "1386584560309895168",
        "title": "执行语句scanf(\"%d□%d,%d\",&a,&b,&c);时，合法的输入形式为（）。（□表示宫空格）",
        "content": "执行语句scanf(\"%d□%d,%d\",&a,&b,&c);时，合法的输入形式为（）。（□表示宫空格）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'scanf函数的使用'，'description':'scanf函数用于从标准输入流中读取数据，并根据指定的格式进行解析。在该题目中，scanf函数的格式字符串为\"%d□%d,%d\"，其中%d表示读取一个整数，□表示一个空格，%d,%d表示读取两个整数并用逗号分隔。合法的输入形式为输入三个整数，并用空格和逗号分隔。'}]"
    },
    {
        "sortId": 595,
        "id": "1386580271625666560",
        "title": "以下选项中，不合法的C语言字符串常量是（ ）。",
        "content": "以下选项中，不合法的C语言字符串常量是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言字符串常量', 'description': 'C语言字符串常量是由双引号括起来的字符序列，可以包含任意字符，包括转义字符。字符串常量在内存中以字符数组的形式存储，以空字符\\0结尾。'}, {'name': '合法的C语言字符串常量', 'description': '合法的C语言字符串常量必须由双引号括起来，且双引号内的字符序列必须符合C语言的语法规则。'}, {'name': '不合法的C语言字符串常量', 'description': '不合法的C语言字符串常量可能是由于缺少双引号、双引号不匹配、包含非法的转义字符等原因导致的。'}]"
    },
    {
        "sortId": 596,
        "id": "1386579100790915072",
        "title": "以下选项中，不合法的C语言常量是（ ）。",
        "content": "以下选项中，不合法的C语言常量是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言常量', 'description': 'C语言常量是指在程序运行过程中其值不会发生改变的量，常量可以是整数、浮点数、字符、字符串等。在C语言中，常量的表示方式有多种，如整数常量可以用十进制、八进制、十六进制表示，浮点数常量可以用小数形式或科学计数法表示，字符常量用单引号括起来，字符串常量用双引号括起来。在C语言中，常量的值在程序运行过程中是不可修改的，因此常量在程序中起到了固定值的作用。'}]"
    },
    {
        "sortId": 597,
        "id": "1386576811203231744",
        "title": "实型变量x的值非常接近0（精确到$$10^{-6}$$）,下面C语言表述正确的是（）",
        "content": "实型变量x的值非常接近0（精确到$$10^{-6}$$）,下面C语言表述正确的是（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '实型变量', 'description': '实型变量是指用于存储实数的变量，其值可以是整数或小数。在C语言中，实型变量可以使用float或double类型来声明。'}, {'name': '精确度', 'description': '精确度是指数值的准确程度。在C语言中，可以使用浮点数的精确度来表示数值的准确程度。'}, {'name': '表达式', 'description': '表达式是由操作数和运算符组成的式子，用于进行数学运算或逻辑判断。在C语言中，可以使用表达式来计算实型变量的值。'}, {'name': '逻辑判断', 'description': '逻辑判断是指根据条件的真假来进行不同的操作。在C语言中，可以使用逻辑运算符（如==、!=、<、>等）来进行逻辑判断。'}, {'name': 'C语言表述', 'description': 'C语言表述是指使用C语言的语法和语义来描述问题或进行计算。在C语言中，可以使用if语句来进行逻辑判断和条件执行。'}]"
    },
    {
        "sortId": 598,
        "id": "1386523214739374080",
        "title": "每位数之和",
        "content": "输入一个2位数a，计算出它的2位数字之和赋值给b\n\n```c++\n\n#include <stdio.h>\n\nint main()\n{\n\tint a,b;\nscanf();\n\n  printf(\"%d\",b);\n return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'输入输出是C语言程序设计中的基本操作，通过scanf函数从键盘获取输入值，通过printf函数将结果输出到屏幕上。'}，{'name':'变量定义和赋值','description':'变量定义和赋值是C语言程序设计中的基本操作，通过int类型定义整型变量a和b，并通过赋值操作将输入的值赋给变量a。'}，{'name':'算术运算','description':'算术运算是C语言程序设计中的基本操作，通过对变量a进行算术运算，计算出2位数字之和并赋值给变量b。'}]"
    },
    {
        "sortId": 599,
        "id": "1386520780608602112",
        "title": "t小时后时针点数",
        "content": "本题完成如下求解：\n\n设现在时针指向8点，那么t(t>0)小时后时针指向的点数。\n\n```c++\n\n#include <stdio.h>\n\nint main()\n{\n\tint t,b;\n  scanf();\n  b=;\n\tprintf(\"%d\",b);\n\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'本知识点主要包括使用scanf函数进行输入和使用printf函数进行输出的方法。在本题中，需要使用scanf函数接收一个整数作为输入，并使用printf函数输出一个整数。'}, {'name':'变量定义和赋值','description':'本知识点主要包括如何定义变量和给变量赋值的方法。在本题中，需要定义两个整型变量t和b，并给变量b赋值。'}, {'name':'算术运算','description':'本知识点主要包括加法、减法、乘法和除法等基本的算术运算。在本题中，需要根据输入的t计算出b的值。'}, {'name':'格式化输出','description':'本知识点主要包括如何使用格式化字符串进行输出的方法。在本题中，需要使用格式化字符串\"%d\"将变量b的值输出。'}]"
    },
    {
        "sortId": 600,
        "id": "1386518393457213440",
        "title": "请将下列描述写成C语言表达式：(表达式中不要添加无用的空格)",
        "content": "请将下列描述写成C语言表达式：(表达式中不要添加无用的空格)\n\nx是介于3到10之间(包括3和10)的整数(已有定义int x;)\n\n \n\nx能同时被3和5整除(已有定义int x;)\n\n\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数类型','description':'整数类型是C语言中的一种基本数据类型，用于表示整数值。在C语言中，整数类型包括有符号整数类型和无符号整数类型。有符号整数类型可以表示正数、负数和零，而无符号整数类型只能表示非负数和零。在本题中，需要使用整数类型来定义变量x，并限制x的取值范围为介于3到10之间的整数。'},\n{'name':'取余运算','description':'取余运算是C语言中的一种算术运算符，用于求两个整数相除的余数。在C语言中，取余运算使用百分号（%）表示。在本题中，需要使用取余运算来判断x能否同时被3和5整除。'}]"
    },
    {
        "sortId": 601,
        "id": "1386515816598470656",
        "title": "鸡兔同笼",
        "content": "《孙子算经》中记载了一个有趣的问题：“今有雉兔同笼，上有三十五头，下有九十四足，问雉兔各几何？”根据上述描述可列出如下形式的二元一次方程组。  \n$$\\begin{cases} x+y=35\\\\2x+4y=94\\end{cases}$$  \n那么求解鸡兔同笼问题就转化成了二元一次方程组求解问题。本题要求编写程序对任意给定的头数和足数判断鸡和兔各有多少。  \n\n### 输入格式:\n\n在一行中给出任意两个非负整数，整数之间用空格分开，第一个整数表示头数，第二个整数表示足数。\n\n### 输出格式:\n\n在一行中按照`chickens = mm; rabbits = nn`的格式输出解，如果无解则输出`No solution!` 。其中`mm`与`nn`都是非负整数。\n\n### 输入样例1:\n\n```in\n35 94\n```\n\n### 输出样例1:\n\n```out\nchickens = 23; rabbits = 12\n```\n### 输入样例2:\n\n```in\n94 35\n```\n\n### 输出样例1:\n\n```out\nNo solution!\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '二元一次方程组求解', 'description': '本知识点主要讲解如何通过二元一次方程组求解问题。在本题中，通过给定的头数和足数，可以列出一个二元一次方程组，然后通过求解方程组得到鸡和兔的数量。'}]"
    },
    {
        "sortId": 602,
        "id": "1386515666686672896",
        "title": "请写出对应的C语言表达式",
        "content": "请写出对应的C语言表达式\n\n$$b^2-4ac$$\n\n\n\n$$\\frac{x_1+x_2}{2x}$$\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '算术运算符', 'description': '算术运算符用于执行基本的数学运算，包括加法、减法、乘法、除法等。在C语言中，可以使用算术运算符来计算表达式中的数值。'}, {'name': '幂运算', 'description': '幂运算是一种特殊的算术运算，用于计算一个数的指数次幂。在C语言中，可以使用幂运算符“^”来进行幂运算。'}, {'name': '变量', 'description': '变量是用于存储数据的内存位置，可以通过变量名来访问和操作存储在其中的数据。在C语言中，可以使用变量来存储和处理各种类型的数据。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的序列，用于计算和生成值。在C语言中，可以使用表达式来进行各种数学和逻辑运算。'}, {'name': '数值计算', 'description': '数值计算是一种基本的计算方法，用于对数值进行各种数学运算。在C语言中，可以使用数值计算来计算表达式中的数值。'}, {'name': '除法运算', 'description': '除法运算是一种基本的算术运算，用于计算两个数的商。在C语言中，可以使用除法运算符“/”来进行除法运算。'}, {'name': '变量赋值', 'description': '变量赋值是一种基本的操作，用于将一个值赋给一个变量。在C语言中，可以使用赋值运算符“=”来进行变量赋值。'}, {'name': '运算优先级', 'description': '运算优先级是指在一个表达式中，各个运算符的执行顺序。在C语言中，可以使用运算优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '数学函数', 'description': '数学函数是一种用于计算数学运算的函数，包括求平方根、求绝对值、求幂等。在C语言中，可以使用数学函数来进行各种数学运算。'}, {'name': '数据类型', 'description': '数据类型是用于定义变量的属性和操作的一种机制，包括整型、浮点型、字符型等。在C语言中，可以使用数据类型来定义和操作各种类型的数据。'}, {'name': '运算符', 'description': '运算符是一种用于执行特定操作的符号，包括算术运算符、关系运算符、逻辑运算符等。在C语言中，可以使用运算符来进行各种数学和逻辑运算。'}, {'name': '数学表达式', 'description': '数学表达式是一种用于计算数学运算的表达式，包括加法、减法、乘法、除法等。在C语言中，可以使用数学表达式来进行各种数学运算。'}, {'name': '整数运算', 'description': '整数运算是一种基本的算术运算，用于计算两个整数的和、差、积等。在C语言中，可以使用整数运算来进行各种整数运算。'}, {'name': '浮点数运算', 'description': '浮点数运算是一种基本的算术运算，用于计算两个浮点数的和、差、积等。在C语言中，可以使用浮点数运算来进行各种浮点数运算。'}, {'name': '运算符优先级', 'description': '运算符优先级是指在一个表达式中，各个运算符的执行顺序。在C语言中，可以使用运算符优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '数学运算', 'description': '数学运算是一种基本的计算方法，用于对数值进行各种数学运算。在C语言中，可以使用数学运算来计算表达式中的数值。'}, {'name': '除法运算符', 'description': '除法运算符是一种用于计算两个数的商的运算符。在C语言中，可以使用除法运算符“/”来进行除法运算。'}, {'name': '变量命名', 'description': '变量命名是一种基本的操作，用于给变量起一个有意义的名字。在C语言中，可以使用变量命名来命名各种类型的变量。'}, {'name': '数学运算符', 'description': '数学运算符是一种用于执行数学运算的运算符，包括加法、减法、乘法、除法等。在C语言中，可以使用数学运算符来进行各种数学运算。'}, {'name': '整数除法', 'description': '整数除法是一种基本的算术运算，用于计算两个整数的商。在C语言中，可以使用整数除法运算符“/”来进行整数除法运算。'}, {'name': '浮点数除法', 'description': '浮点数除法是一种基本的算术运算，用于计算两个浮点数的商。在C语言中，可以使用浮点数除法运算符“/”来进行浮点数除法运算。'}, {'name': '数学表达式求值', 'description': '数学表达式求值是一种基本的计算方法，用于计算数学表达式的值。在C语言中，可以使用数学表达式求值来计算表达式的值。'}, {'name': '数学运算符优先级', 'description': '数学运算符优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数运算符', 'description': '整数运算符是一种用于执行整数运算的运算符，包括加法、减法、乘法、除法等。在C语言中，可以使用整数运算符来进行各种整数运算。'}, {'name': '浮点数运算符', 'description': '浮点数运算符是一种用于执行浮点数运算的运算符，包括加法、减法、乘法、除法等。在C语言中，可以使用浮点数运算符来进行各种浮点数运算。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数除法运算', 'description': '整数除法运算是一种基本的算术运算，用于计算两个整数的商。在C语言中，可以使用整数除法运算符“/”来进行整数除法运算。'}, {'name': '浮点数除法运算', 'description': '浮点数除法运算是一种基本的算术运算，用于计算两个浮点数的商。在C语言中，可以使用浮点数除法运算符“/”来进行浮点数除法运算。'}, {'name': '数学表达式的求值', 'description': '数学表达式的求值是一种基本的计算方法，用于计算数学表达式的值。在C语言中，可以使用数学表达式的求值来计算表达式的值。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数运算符的使用', 'description': '整数运算符的使用是一种基本的操作，用于对整数进行各种运算。在C语言中，可以使用整数运算符的使用来进行整数运算。'}, {'name': '浮点数运算符的使用', 'description': '浮点数运算符的使用是一种基本的操作，用于对浮点数进行各种运算。在C语言中，可以使用浮点数运算符的使用来进行浮点数运算。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数除法运算的使用', 'description': '整数除法运算的使用是一种基本的操作，用于对整数进行除法运算。在C语言中，可以使用整数除法运算的使用来进行整数除法运算。'}, {'name': '浮点数除法运算的使用', 'description': '浮点数除法运算的使用是一种基本的操作，用于对浮点数进行除法运算。在C语言中，可以使用浮点数除法运算的使用来进行浮点数除法运算。'}, {'name': '数学表达式的求值方法', 'description': '数学表达式的求值方法是一种基本的计算方法，用于计算数学表达式的值。在C语言中，可以使用数学表达式的求值方法来计算表达式的值。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数运算符的使用方法', 'description': '整数运算符的使用方法是一种基本的操作，用于对整数进行各种运算。在C语言中，可以使用整数运算符的使用方法来进行整数运算。'}, {'name': '浮点数运算符的使用方法', 'description': '浮点数运算符的使用方法是一种基本的操作，用于对浮点数进行各种运算。在C语言中，可以使用浮点数运算符的使用方法来进行浮点数运算。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数除法运算的使用方法', 'description': '整数除法运算的使用方法是一种基本的操作，用于对整数进行除法运算。在C语言中，可以使用整数除法运算的使用方法来进行整数除法运算。'}, {'name': '浮点数除法运算的使用方法', 'description': '浮点数除法运算的使用方法是一种基本的操作，用于对浮点数进行除法运算。在C语言中，可以使用浮点数除法运算的使用方法来进行浮点数除法运算。'}, {'name': '数学表达式的求值方法', 'description': '数学表达式的求值方法是一种基本的计算方法，用于计算数学表达式的值。在C语言中，可以使用数学表达式的求值方法来计算表达式的值。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数运算符的使用方法', 'description': '整数运算符的使用方法是一种基本的操作，用于对整数进行各种运算。在C语言中，可以使用整数运算符的使用方法来进行整数运算。'}, {'name': '浮点数运算符的使用方法', 'description': '浮点数运算符的使用方法是一种基本的操作，用于对浮点数进行各种运算。在C语言中，可以使用浮点数运算符的使用方法来进行浮点数运算。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数除法运算的使用方法', 'description': '整数除法运算的使用方法是一种基本的操作，用于对整数进行除法运算。在C语言中，可以使用整数除法运算的使用方法来进行整数除法运算。'}, {'name': '浮点数除法运算的使用方法', 'description': '浮点数除法运算的使用方法是一种基本的操作，用于对浮点数进行除法运算。在C语言中，可以使用浮点数除法运算的使用方法来进行浮点数除法运算。'}, {'name': '数学表达式的求值方法', 'description': '数学表达式的求值方法是一种基本的计算方法，用于计算数学表达式的值。在C语言中，可以使用数学表达式的求值方法来计算表达式的值。'}, {'name': '数学运算符的优先级', 'description': '数学运算符的优先级是指在一个数学表达式中，各个运算符的执行顺序。在C语言中，可以使用数学运算符的优先级来确定表达式中各个运算符的执行顺序。'}, {'name': '整数运算符的使用方法', 'description': '整数运算符的使用方法是一种基本的操作，用于对整数进行各种运算。在C语言中，可以使用整数运算符的使用方法来进行整数运算。'}, {'name': '浮点"
    },
    {
        "sortId": 603,
        "id": "1386511516648341504",
        "title": "用于判断字符变量ch存储是26个字母的表达式是（）。",
        "content": "用于判断字符变量ch存储是26个字母的表达式是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符变量', 'description':'字符变量是用来存储单个字符的变量，可以用单引号括起来表示，例如\\'a\\'。'}, {'name':'表达式', 'description':'表达式是由运算符和操作数组成的式子，可以进行计算和求值。'}, {'name':'判断', 'description':'判断是通过条件判断语句来确定某个条件是否成立，如果条件成立则执行相应的代码块，否则执行其他代码块。'}, {'name':'26个字母', 'description':'26个字母是指英语字母表中的26个字母，包括大写字母和小写字母。'}]"
    },
    {
        "sortId": 604,
        "id": "1386509798749503488",
        "title": "设有定义：",
        "content": "设有定义：\n\nint x;\n\ndouble y=15.8;\n\n执行表达式\n\nx=(int)(y/3+0.5)+(int)y%3之后，\n\nx的值等于（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'类型转换'，'description':'类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符将一个表达式的值转换为指定的数据类型。在本题中，使用了强制类型转换将double类型的y转换为int类型，以及将int类型的y%3转换为int类型。'}]"
    },
    {
        "sortId": 605,
        "id": "1386507735244210176",
        "title": "设有定义：",
        "content": "设有定义：\n\nint x=1,y=3;\n\n分别单独计算下列表达式后，（     ）的计算结果可使x的值不等于6。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的计算顺序。在这道题中，需要了解加法运算符和赋值运算符的优先级，以及它们的结合性。'}]"
    },
    {
        "sortId": 606,
        "id": "1386504910398259200",
        "title": "下面哪组是全部合法的标识符？",
        "content": "下面哪组是全部合法的标识符？",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'标识符','description':'标识符是用来表示变量、函数、数组等命名的符号，必须遵循一定的命名规则。合法的标识符由字母、数字和下划线组成，且不能以数字开头。'}, {'name':'多选题','description':'多选题是一种题型，要求选择多个正确答案。在C语言中，合法的标识符由字母、数字和下划线组成，且不能以数字开头。因此，下划线开头的选项是合法的标识符。'}]"
    },
    {
        "sortId": 607,
        "id": "1386503171926360064",
        "title": "以下选项中，合法的C语言常量是（    ）。",
        "content": "以下选项中，合法的C语言常量是（    ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言常量','description':'C语言常量是指在程序执行过程中其值不会发生改变的量，合法的C语言常量包括整数常量、浮点数常量、字符常量和字符串常量等。'}]"
    },
    {
        "sortId": 608,
        "id": "1386502245102616576",
        "title": "下面这段程序的输出结果是 。",
        "content": "下面这段程序的输出结果是 。\n```\nint a=3,c;\n{\n \t c=2;\t\t\n  \ta*=c+1;\t\t\n}\nprintf(\"%d\\n\", a);\n```",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量声明与初始化', 'description': '在C语言中，变量需要先声明后使用。声明变量时需要指定变量的类型，并可以选择性地进行初始化。本题中，int a=3,c;语句中声明了两个int类型的变量a和c，并将a初始化为3。'}, {'name': '运算符优先级', 'description': '在C语言中，不同的运算符具有不同的优先级。在表达式中，优先级高的运算符会先于优先级低的运算符进行计算。本题中，a*=c+1;语句中，由于乘法运算符的优先级高于加法运算符，所以先计算c+1的结果，再将a与该结果相乘。'}, {'name': 'printf函数', 'description': 'printf函数是C语言中用于输出信息的函数。它可以根据指定的格式将数据输出到标准输出设备（通常是显示器）。本题中，printf(\"%d\\n\", a);语句中使用了printf函数，将变量a的值以%d的格式输出到标准输出设备，并在末尾加上换行符。'}]"
    },
    {
        "sortId": 609,
        "id": "1386500695427907584",
        "title": "在VC环境中有定义：int a＝100;",
        "content": "在VC环境中有定义：int a＝100;\n则语句printf(\"%d%d%d\\n\",sizeof(\"a\"),sizeof(a),sizeof(3.14));的输出结果是（    ）。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'sizeof运算符'，'description':'sizeof运算符用于计算数据类型或变量的大小，返回结果以字节为单位。在本题中，sizeof(\"a\")返回的是字符串\"a\"的大小，即2字节；sizeof(a)返回的是变量a的大小，即4字节；sizeof(3.14)返回的是浮点数3.14的大小，即8字节。因此，printf(\"%d%d%d\\n\",sizeof(\"a\"),sizeof(a),sizeof(3.14))的输出结果是2 4 8。'}]"
    },
    {
        "sortId": 610,
        "id": "1386499247742910464",
        "title": "一个C语言源程序通常含有多个函数，其中必做包含一个 ,而且总是从函数开始执行。",
        "content": "一个C语言源程序通常含有多个函数，其中必做包含一个 ,而且总是从函数开始执行。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言源程序的结构'，'description':'C语言源程序通常含有多个函数，其中必须包含一个main函数，而且总是从main函数开始执行。'}]"
    },
    {
        "sortId": 611,
        "id": "1383959948475842560",
        "title": "求数列之和[A]",
        "content": "给定一个数字$$A~(1\\leqslant A \\leqslant 9)$$以及一个非负整数$$N~(0\\leqslant N \\leqslant 15)$$，编程计算$$sum = A+AA+AAA+\\cdots+AA\\cdots A(N$$个$$A)$$, 例如当$$A=2, N=3$$时，$$S=2+22+222=246$$。   \n\n### 输入格式:\n\n在一行内输入数字$$A$$与非负整数$$N$$。数与数之间用空格间隔。\n\n### 输出格式:\n\n按照`S = xxx`的格式输出其$$N$$项之和$$S$$的值。\n\n### 输入样例:\n\n\n```in\n2  3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nS = 246\n```\n### 说明 :\n$$\\qquad$$本题是在浙江大学DS课程组《求数列和-加强版》的基础上降低了$$N$$的取值范围，使得数列各项及其总和能在整数的取值范围内表示。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来重复计算每一项的值，并累加求和。'}, {'name':'变量与赋值'，'description':'变量是C语言中用于存储数据的一种数据类型，赋值是将一个值赋给一个变量。在本题中，可以使用变量来存储每一项的值，并使用赋值操作来更新变量的值。'}, {'name':'算术运算'，'description':'算术运算是C语言中的一种基本运算，包括加法、乘法等。在本题中，可以使用算术运算来计算每一项的值，并累加求和。'}]"
    },
    {
        "sortId": 612,
        "id": "1380145026048172032",
        "title": "程序填空题",
        "content": "这是一个主观题模板。请在这里写题目描述。\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言基础','description':'C语言基础知识点包括数据类型、变量、运算符、控制语句等，是学习C语言的基础。'}, {'name':'函数','description':'函数是C语言中的重要概念，通过函数可以实现代码的模块化和重用。学习函数的定义、调用、参数传递等内容。'}, {'name':'数组','description':'数组是C语言中用于存储多个相同类型数据的数据结构，学习数组的定义、访问、遍历等操作。'}, {'name':'指针','description':'指针是C语言中的重要概念，学习指针的定义、指针与数组的关系、指针与函数的关系等内容。'}, {'name':'字符串','description':'字符串是C语言中的一种特殊的数组，学习字符串的定义、字符串处理函数等内容。'}, {'name':'结构体','description':'结构体是C语言中用于存储不同类型数据的数据结构，学习结构体的定义、访问、结构体数组等内容。'}, {'name':'文件操作','description':'学习C语言中的文件操作，包括文件的打开、读写、关闭等操作。'}, {'name':'动态内存分配','description':'学习C语言中的动态内存分配，包括malloc、free等函数的使用。'}, {'name':'位运算','description':'学习C语言中的位运算，包括位与、位或、位异或等操作。'}, {'name':'预处理指令','description':'学习C语言中的预处理指令，包括宏定义、条件编译等内容。'}]"
    },
    {
        "sortId": 613,
        "id": "1378922457282224128",
        "title": "两小时学完C语言",
        "content": "\n![Q.JPG](~/b388314c-c7d3-48d8-befa-0fc45cf853a9.JPG)\n\n\n知乎上有个宝宝问：“两个小时内如何学完 C 语言？”当然，问的是“学完”并不是“学会”。\n\n假设一本 C 语言教科书有 N 个字，这个宝宝每分钟能看 K 个字，看了 M 分钟。还剩多少字没有看？\n\n### 输入格式：\n\n输入在一行中给出 3 个正整数，分别是 N（不超过 400 000），教科书的总字数；K（不超过 3 000），是宝宝每分钟能看的字数；M（不超过 120），是宝宝看书的分钟数。\n\n题目保证宝宝看完的字数不超过 N。\n\n### 输出格式：\n\n在一行中输出宝宝还没有看的字数。\n\n### 输入样例：\n```in\n100000 1000 72\n```\n\n### 输出样例：\n```out\n28000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '学习C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name': '运算符', 'description': '学习C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name': '表达式和语句', 'description': '学习C语言中的表达式和语句的概念，以及如何使用它们进行编程。'}, {'name': '条件语句', 'description': '学习C语言中的条件语句，包括if语句、switch语句等。'}, {'name': '循环语句', 'description': '学习C语言中的循环语句，包括for循环、while循环等。'}, {'name': '函数', 'description': '学习C语言中的函数的概念，以及如何定义和调用函数。'}, {'name': '数组', 'description': '学习C语言中的数组的概念，以及如何定义和使用数组。'}, {'name': '指针', 'description': '学习C语言中的指针的概念，以及如何定义和使用指针。'}, {'name': '字符串', 'description': '学习C语言中的字符串的概念，以及如何定义和使用字符串。'}, {'name': '文件操作', 'description': '学习C语言中的文件操作，包括打开文件、读写文件等。'}, {'name': '编程题', 'description': '学习C语言中的编程题，通过实际编程练习来巩固所学的知识。'}]"
    },
    {
        "sortId": 614,
        "id": "1378921633185300480",
        "title": "人与神",
        "content": "跨界大神 L. Peter Deutsch 有一句名言：“To iterate is human, to recurse divine.”（迭代的是人，递归的是神）。本题就请你直接在屏幕上输出这句话。\n\n### 输入格式：\n\n本题没有输入。\n\n### 输出格式：\n\n在一行中输出 `To iterate is human, to recurse divine.`。\n\n### 输入样例：\n```in\n无\n```\n\n### 输出样例：\n```out\nTo iterate is human, to recurse divine.\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'递归','description':'递归是一种在函数中调用自身的方法。在本题中，通过在函数中调用自身来实现输出一句话的功能。'}]"
    },
    {
        "sortId": 615,
        "id": "1377415259015987200",
        "title": "数学函数调用",
        "content": "利用库math.h中的相关函数，计算表达式log$$_{10}$$(|sin(x)-cos(x/2)+$$\\sqrt{x+168}$$|)的值。\n\n### 输入格式:\n一个实数。\n### 输出格式:\n计算并输出上述表达式的值，保留4位小数。\n### 输入样例:\n```in\n1.57\n```\n### 输出样例:\n```out\n1.1243\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'库函数的使用'，'description':'本知识点主要介绍如何使用库函数进行数学计算。在C语言中，可以通过包含相应的头文件来引入库函数，然后调用库函数来完成特定的数学计算。本题中需要使用math.h中的函数来计算表达式的值。'}]"
    },
    {
        "sortId": 616,
        "id": "1376166145410211840",
        "title": "阿飞的挺身而出",
        "content": "大林最近看了一些大数计算的资料，觉得颇有心得，于是他在课堂上出了一道简单的大数加法给学生做练习，当然两个加数都是超过int和long所能表示的数的范围。这让他的学生们不禁陷入了沉思，怎么办呢？做不出来的话期末成绩可能要59分了。在这危急时刻，有个聪明的阿飞同学挺身而出，通过仔细观察，他发现两个高位数的正整数相加，可以把这两个正整数分别拆成两个低位数的正整数之间的加法和进位运算。经过不懈努力，他成功地解决了这道题，获得了大林的表扬。请大家向阿飞同学学习，也编写类似程序来解决这个问题。 \n\n### 输入格式:\n\n两个30位正整数。 \n\n### 输出格式:\n\n和 \n\n### 输入样例:\n\n```in\n111123456789101112131715161718\n222345678910111213141516171819\n```\n\n### 输出样例:\n\n```out\n333469135699212325273231333537\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'大数加法','description':'通过拆分大数为低位数的正整数之间的加法和进位运算来实现大数加法。'}]"
    },
    {
        "sortId": 617,
        "id": "1374537044063268864",
        "title": "实数四舍五入后的相加运算",
        "content": "本题目实现实数保留两位小数的四舍五入存储后，再相加。\n\n### 输入格式:\n\n输入两个双精度实数A，B。\n\n### 输出格式:\n\n第一行输出A+B的真实值（保留两位小数）\\\n第二行输出A、B进行四舍五入后再相加后的值（保留两位小数）。\n\n为了保证输出的美观，每个实数占10位，A为左对齐，B为右对齐，A+B的结果为左对齐。\n\n### 输入样例:\n\n```in\n12.345,4.896\n```\n\n### 输出样例:\n\n```out\n12.345000 +  4.896000=17.24     \n12.350000 +  4.900000=17.25     \n\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数运算'，'description':'本知识点主要涉及浮点数的加法运算和保留小数位数的方法。学生需要了解浮点数的表示方式，以及如何进行浮点数的加法运算。此外，还需要学习如何保留浮点数的小数位数，包括四舍五入和截断。'}]"
    },
    {
        "sortId": 618,
        "id": "1374521775962042368",
        "title": "广西科技大学校训",
        "content": " 广西科技大学坐落于国家历史文化名城和西南地区工业重镇、交通枢纽、商贸物流中心——柳州市。学校于2013年经教育部批准，由原广西工学院和原柳州医学高等专科学校合并建立，是直属广西壮族自治区人民政府管理的普通高等学校。学校学科门类较为齐全，学科专业特色鲜明。学校以工为主，专业涵盖工、管、理、医、经、文、法、艺术、教育等九大学科门类。2013年经自治区学位委员会批准，学校成为博士学位授予权立项建设单位。学校坚持“育人为本，师生为重，培养‘行业的骨干、创新的纽带’”的办学理念，以“求真近道，明德致新”为校训，不断深化“校市相融，校企合作”的办学特色。全面落实立德树人根本任务，始终坚守为党育人、为国育才的初心使命，主动服务区域经济社会发展，大力培养富有社会责任感、创新精神、理论联系实际和国际视野的应用型高级专门人才。\n \n 本题非常简单，请你用汉语拼音输出广西科技大学的校训。\n\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n在一行中输出广西科技大学校训的汉语拼音。\n\n### 输入样例:\n\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nQiu zhen jin dao, ming de zhi xin!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '汉语拼音', 'description': '教学描述：教授学生如何正确拼读和书写汉语拼音，包括声母、韵母、声调等内容。'}]"
    },
    {
        "sortId": 619,
        "id": "1374352518515077120",
        "title": "整数的按权展开",
        "content": "本题目要求读入一个三位整数，然后写成按权展开的形式。\n\n### 输入格式:\n一个三位正整数。\n### 输出格式:\n输出这个三位正整数的的按权展开形式。\n\n### 输入样例1:\n```in\n567\n```\n### 输出样例1:\n```out\n567=500+60+7\n```\n\n### 输入样例2:\n\n```in\n900\n```\n### 输出样例:\n```out\n900=900+0+0\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '按权展开', 'description': '按权展开是指将一个多位数按照各位数的权重展开，例如将567展开为500+60+7。在C语言中，可以使用除法和取余运算来实现按权展开的操作。'}]"
    },
    {
        "sortId": 620,
        "id": "1373278707116888064",
        "title": "设有int x=11;则表达式(x++*1/3)的值是（ ）。",
        "content": "设有int x=11;则表达式(x++*1/3)的值是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级决定了表达式中各个运算符的执行顺序。在表达式(x++*1/3)中，先执行x++，再执行乘法运算，最后执行除法运算。'}, {'name': '自增运算符', 'description': '自增运算符（++）用于将变量的值增加1。在表达式(x++*1/3)中，x++表示先使用x的值进行运算，然后再将x的值增加1。'}, {'name': '整数除法', 'description': '整数除法是指两个整数相除得到的结果仍为整数。在表达式(x++*1/3)中，1/3的结果为0，因为1和3都是整数。'}]"
    },
    {
        "sortId": 621,
        "id": "1373278706546462720",
        "title": "在C语言中，要求参加运算的数必须是整数的运算符是（ ）。",
        "content": "在C语言中，要求参加运算的数必须是整数的运算符是（ ）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整数运算符'，'description':'整数运算符是用来对整数进行运算的特殊符号，包括加法、减法、乘法、除法等运算。在C语言中，要求参加运算的数必须是整数的运算符是整数运算符。'}]"
    },
    {
        "sortId": 622,
        "id": "1373278705871179776",
        "title": "以下选项中合法的C语言标识符是（ ） 。",
        "content": "以下选项中合法的C语言标识符是（ ） 。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'C语言标识符'，'description':'C语言标识符是用来命名变量、函数、数组等程序实体的名称，必须遵循一定的命名规则。合法的C语言标识符由字母、数字和下划线组成，且必须以字母或下划线开头。'}]"
    },
    {
        "sortId": 623,
        "id": "1372818773644341248",
        "title": "已知ch是字符型变量，下面不正确的赋值语句是（）。",
        "content": "已知ch是字符型变量，下面不正确的赋值语句是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符型变量赋值','description':'字符型变量赋值需要使用单引号括起来的字符'}]"
    },
    {
        "sortId": 624,
        "id": "1372817468527931392",
        "title": "阅读以下程序，当输入数据的形式为25,13,10<回车键>时，正确的输出结果为（）。",
        "content": "阅读以下程序，当输入数据的形式为25,13,10<回车键>时，正确的输出结果为（）。\n```\nint main()\n{ int x,y,z;\n  scanf(\"%d%d%d\",&x,&y,&z);\n\tprintf(\"x+y+z=%d\\n\",x+y+z);\n}\n```\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出函数', 'description': '输入输出函数是C语言中常用的函数，用于从键盘上读取输入数据和将结果输出到屏幕上。本题中使用了scanf函数进行输入操作，printf函数进行输出操作。'}, {'name': '变量定义和赋值', 'description': '变量定义和赋值是C语言中常用的操作，用于声明变量并给变量赋初值。本题中定义了三个整型变量x、y、z，并通过scanf函数将输入的数据赋值给这三个变量。'}, {'name': '算术运算', 'description': '算术运算是C语言中常用的操作，用于进行数值计算。本题中使用了加法运算符+对x、y、z进行求和，并将结果通过printf函数输出。'}]"
    },
    {
        "sortId": 625,
        "id": "1372641028104679424",
        "title": "红心(♥)的字长",
        "content": "在 C 语言里，红心(♥) '\\\\3' 的字长为  字节。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型', 'description':'字符类型用于存储单个字符，包括字母、数字、符号等。在C语言中，字符类型使用char关键字来声明。字符类型的字长为1字节。'}]"
    },
    {
        "sortId": 626,
        "id": "1372640350435176448",
        "title": "响铃符的字长",
        "content": "在 C 语言里，响铃符 '\\\\a' 的字长为  字节。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些特殊的字符或者控制字符。在C语言中，转义字符以反斜杠（\\\\）开头，后面跟着一个或多个字符。其中，响铃符（\\\\a）是一种转义字符，用于产生响铃声或者闪烁光标的效果。在C语言中，响铃符的字长为一个字节。'}]"
    },
    {
        "sortId": 627,
        "id": "1372635864916455424",
        "title": "音符(♫)的字长",
        "content": "在 C 语言里，音符(♫)  '\\\\16' 的字长为  字节。",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字长', 'description': '字长是指计算机中一个字所占的位数。在C语言中，可以使用sizeof运算符来获取某个数据类型的字长。字长的大小决定了数据类型所能表示的范围和精度。'}]"
    },
    {
        "sortId": 628,
        "id": "1372527356082507776",
        "title": "输出米字",
        "content": "编写程序，在屏幕上输出一个**米**字形状\n### 输如样例:\n```in\n```\n\n### 输出样例:\n\n```out\n\\|/\n-+-\n/|\\\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出特殊字符','description':'学习如何在C语言中输出特殊字符，如反斜杠、竖线、横线等。'}]"
    },
    {
        "sortId": 629,
        "id": "1372421146486362112",
        "title": "根据下面的定义，能打印出字母M的语句是（    ）。",
        "content": "根据下面的定义，能打印出字母M的语句是（    ）。\n\nStruct person {\nChar name[10];\nint age;}\nc[10] = { “John”, 17, ”Paul”, 19, ”Mary”, 18, ”Adam”, 16 };\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '结构体', 'description': '结构体是一种用户自定义的数据类型，可以将不同类型的数据组合在一起，形成一个新的数据类型。在C语言中，结构体可以用来表示复杂的数据结构，如人员信息、学生信息等。结构体的定义使用关键字struct，可以在结构体中定义多个成员，每个成员可以是不同的数据类型。在本题中，定义了一个结构体person，包含了一个字符数组name和一个整型变量age。'}]"
    },
    {
        "sortId": 630,
        "id": "1372410961520914432",
        "title": "设float x=2.5,y=4.7;int a=7;，printf(\"%.1f\",x+a%3*(int)(x+y)%2/4)的",
        "content": "设float x=2.5,y=4.7;int a=7;，printf(\"%.1f\",x+a%3*(int)(x+y)%2/4)的结果为（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级','description':'运算符优先级决定了表达式中各个运算符的执行顺序。在这道题中，需要了解加法运算符、取余运算符、乘法运算符、强制类型转换和除法运算符的优先级。'}]"
    },
    {
        "sortId": 631,
        "id": "1371808607339466752",
        "title": "混合有间隔输入输出",
        "content": "本题目要求读入1个整数，1个字符和1个单精度实数，1个双精度实数，然后依次输出它们，用逗号隔开。\n\n### 输入格式:\n\n输入1个整数A，1个字符B，1个单精度实数C，1个双精度实数D。\n\nABC之间用空格分隔，CD之间用冒号分隔。\n\n### 输出格式:\n\n输出A,B,C,D，用逗号隔开。\n\n### 输入样例:\n\n```in\n123 a  8.34:12.6\n```\n\n注意a前后有一空格。\n\n### 输出样例:\n\n```out\n123,a,8.340000,12.600000\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何使用scanf函数读取输入，以及使用printf函数输出结果。'}, {'name': '数据类型', 'description': '了解整数、字符、单精度实数和双精度实数的数据类型，并学习如何声明和使用这些数据类型。'}, {'name': '格式化输出', 'description': '学习如何使用格式化字符串控制输出的格式，包括小数点后的位数、逗号分隔等。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，包括字符串的输入、输出和格式化处理。'}, {'name': '变量赋值', 'description': '学习如何将输入的值赋给变量，并学习变量的赋值操作。'}, {'name': '运算符', 'description': '学习如何使用逗号运算符将多个表达式组合在一起，并学习逗号运算符的优先级和用法。'}]"
    },
    {
        "sortId": 632,
        "id": "1371650995864211456",
        "title": "输入输出控制",
        "content": "编写程序，最多可读入5个数，它们依次是：字符，无符号短整数，整数，单精度浮点数和双精度浮点数，值均在它们的许可范围内，但数据间的分隔符可能有：空格，分号，逗号，换行符等等，然后，在第一行输出成功读取到的数的数量（正确读取到多少个数），第二行依次输出上述五个数（逗号分隔，浮点数均保留三位小数），第三行输出在上行的输出中共占用多少个字符位置。第四行输出前述读入五个变量占用的字节数。\n\n\n### 输入格式:\n最多五个数，它们依次是：字符，无符号短整数，整数，单精度浮点数和双精度浮点数，值均在它们的许可范围内，但数据间的分隔符可能有：空格，分号，逗号，换行符等等,你可以假设，若数据数量不够读取，缺少的一般是后边的几个。\n\n### 输出格式:\n第一行输出成功读取到的数的数量（正确读取到多少个数）。\n第二行依次输出上述五个数（逗号分隔，浮点数均保留三位小数）。\n第三行输出在上一行的输出中共占用多少个字符位置。\n第四行输出前述读入五个变量占用的字节数。\n\n### 输入样例:\n```in\na,34567;-399999\n3.1415926\n```\n\n### 输出样例:\n本例中成功读入四个数据，第二行输出占27个字符宽度。字符占1个字节，无符号短整数占2个字节，两种浮点数均占8个字节(PTA使用的系统)，共19个字节。\n```out\n4\na,34567,-399999,3.142,0.000\n27\n19\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符输入','description':'字符输入是C语言中的一种基本输入方式，可以使用scanf函数来读取字符输入。'}, {'name':'整数输入','description':'整数输入是C语言中的一种基本输入方式，可以使用scanf函数来读取整数输入。'}, {'name':'浮点数输入','description':'浮点数输入是C语言中的一种基本输入方式，可以使用scanf函数来读取浮点数输入。'}, {'name':'数据分隔符处理','description':'数据分隔符处理是C语言中的一种基本处理方式，可以使用字符串处理函数来处理数据间的分隔符。'}, {'name':'字符宽度计算','description':'字符宽度计算是C语言中的一种基本计算方式，可以使用字符串处理函数来计算字符宽度。'}, {'name':'字节占用计算','description':'字节占用计算是C语言中的一种基本计算方式，可以使用sizeof运算符来计算变量占用的字节数。'}]"
    },
    {
        "sortId": 633,
        "id": "1371382954672787456",
        "title": "putchar函数可以向终端输出一个（）。",
        "content": "putchar函数可以向终端输出一个（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'putchar函数', 'description':'putchar函数可以向终端输出一个字符。'}]"
    },
    {
        "sortId": 634,
        "id": "1371381920008822784",
        "title": "表达式18/4\\*sqrt(4.0)/8的值的数据类型为（）。",
        "content": "表达式18/4\\*sqrt(4.0)/8的值的数据类型为（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念之一，用于定义变量的类型和范围。在C语言中，不同的数据类型可以存储不同类型的数据，如整数、浮点数、字符等。在本题中，需要了解表达式的数据类型是如何确定的。'}, {'name': '表达式', 'description': '表达式是C语言中的基本概念之一，用于表示计算过程和结果。在C语言中，表达式由运算符和操作数组成，可以进行各种数学和逻辑运算。在本题中，需要了解表达式的计算规则和优先级。'}, {'name': '运算符', 'description': '运算符是C语言中的基本概念之一，用于进行各种数学和逻辑运算。在C语言中，有多种运算符，如加法运算符、乘法运算符、除法运算符等。在本题中，需要了解除法运算符的使用和计算规则。'}, {'name': '函数', 'description': '函数是C语言中的基本概念之一，用于封装一段可重复使用的代码。在C语言中，函数由函数名、参数列表和函数体组成，可以通过函数调用来执行函数体中的代码。在本题中，需要了解sqrt函数的使用和返回值类型。'}]"
    },
    {
        "sortId": 635,
        "id": "1371381102845628416",
        "title": "若有代数式$$\\left | x^{3} \\right |$$，则正确的C语言表达式（）。",
        "content": "若有代数式$$\\left | x^{3} \\right |$$，则正确的C语言表达式（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '绝对值函数', 'description': '绝对值函数是一个常用的数学函数，用来计算一个数的绝对值。在C语言中，可以使用abs()函数来计算一个数的绝对值。'}]"
    },
    {
        "sortId": 636,
        "id": "1371378497070882816",
        "title": "在C语言中，要求运算数必须是整型的运算符是（）。",
        "content": "在C语言中，要求运算数必须是整型的运算符是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'整型运算符'，'description':'整型运算符是C语言中要求运算数必须是整型的运算符。'}]"
    },
    {
        "sortId": 637,
        "id": "1371377566258827264",
        "title": "若有代数式$$\\frac{3ae}{bc}$$，则不正确的C语言表达式是（）。",
        "content": "若有代数式$$\\frac{3ae}{bc}$$，则不正确的C语言表达式是（）。",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 2,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '算术运算符', 'description': '算术运算符用于执行基本的数学运算，如加法、减法、乘法和除法。在C语言中，常见的算术运算符有加法运算符（+）、减法运算符（-）、乘法运算符（*）和除法运算符（/）。'},\n {'name': '变量', 'description': '变量是用于存储数据的一种命名内存单元。在C语言中，变量需要先声明后使用，并且可以通过赋值操作来改变变量的值。'},\n {'name': '数据类型', 'description': '数据类型用于定义变量的类型和范围。在C语言中，常见的数据类型有整型（int）、浮点型（float）、字符型（char）等。不同的数据类型在内存中占用的空间大小和表示范围不同。'},\n {'name': '运算符优先级', 'description': '运算符优先级用于确定表达式中各个运算符的执行顺序。在C语言中，运算符优先级从高到低依次为括号运算符、一元运算符、乘除法运算符、加减法运算符、关系运算符、逻辑运算符和赋值运算符。'},\n {'name': '表达式', 'description': '表达式是由运算符和操作数组成的序列，用于进行计算和生成结果。在C语言中，表达式可以包含算术运算、逻辑运算、关系运算等。'},\n {'name': '逻辑运算符', 'description': '逻辑运算符用于执行逻辑运算，如与（&&）、或（||）、非（!）等。在C语言中，逻辑运算符常用于条件判断和循环控制语句中。'},\n {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在C语言中，常见的条件语句有if语句、if-else语句和switch语句。'},\n {'name': '循环语句', 'description': '循环语句用于重复执行一段代码块，直到满足退出条件为止。在C语言中，常见的循环语句有while循环、do-while循环和for循环。'},\n {'name': '数组', 'description': '数组是一种用于存储多个相同类型数据的连续内存空间。在C语言中，数组需要先声明后使用，并且可以通过下标访问数组中的元素。'},\n {'name': '指针', 'description': '指针是一种用于存储内存地址的变量。在C语言中，指针可以用于间接访问和修改内存中的数据，还可以用于动态分配内存空间。'},\n {'name': '函数', 'description': '函数是一段完成特定任务的独立代码块。在C语言中，函数需要先声明后使用，并且可以通过函数名调用函数执行相应的代码块。'},\n {'name': '预处理指令', 'description': '预处理指令用于在编译之前对源代码进行处理。在C语言中，常见的预处理指令有#include、#define、#ifdef等。预处理指令可以用于包含头文件、定义宏、条件编译等。'},\n {'name': '结构体', 'description': '结构体是一种用于存储多个不同类型数据的自定义数据类型。在C语言中，结构体可以通过定义结构体类型和声明结构体变量来使用。结构体可以包含多个成员，每个成员可以是不同的数据类型。'},\n {'name': '文件操作', 'description': '文件操作用于对文件进行读取和写入操作。在C语言中，可以使用文件指针和相关的文件操作函数来打开、关闭、读取和写入文件。文件操作可以用于读取输入文件、写入输出文件等。'}]"
    },
    {
        "sortId": 638,
        "id": "1371375333827469312",
        "title": "下面正确的字符常量是（）",
        "content": "下面正确的字符常量是（）",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符常量', 'description': '字符常量是由单引号括起来的一个字符，可以是字母、数字、特殊字符等。在C语言中，字符常量是用来表示一个字符的值。'}]"
    },
    {
        "sortId": 639,
        "id": "1371278222272761856",
        "title": "敲钟",
        "content": " 大小两寺敲晨钟，报时警示时光匆，约定晨时同起声，大寺三分敲一下，小寺四时应一声，大小各敲十二通，一人居在两寺中，可闻多少晨钟声。\n\t\t \n上面故事的意思是：有大小两座寺院敲晨钟用来报时，并且两座寺院都是在晨时开始敲钟。大寺院每3分钟敲一下，小寺院每4分钟敲一下，两座寺院各敲12下，居住在两座寺院中间的人能听到多少声钟声？\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n按照以下格式输出：\n\nBells = 听到的钟声数\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nBells = 听到的钟声数\n```\n\n\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的控制结构，可以根据条件来控制代码的执行次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。本题中需要使用循环结构来模拟大寺院和小寺院的敲钟过程，并计算出居住在两座寺院中间的人能听到的钟声数。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件来选择执行不同代码块的控制结构。在C语言中，常用的条件语句有if语句和switch语句。本题中可以使用条件语句来判断是否满足敲钟的条件，以及计算居住在两座寺院中间的人能听到的钟声数。'}, {'name': '变量和表达式', 'description': '变量是用来存储数据的内存空间，可以通过变量来保存计算结果。表达式是由运算符和操作数组成的式子，可以进行各种数学和逻辑运算。本题中需要使用变量来保存计算结果，以及使用表达式来计算居住在两座寺院中间的人能听到的钟声数。'}, {'name': '算术运算符', 'description': '算术运算符是用来进行数学运算的符号，常见的算术运算符有加法运算符、减法运算符、乘法运算符和除法运算符。本题中可以使用算术运算符来计算居住在两座寺院中间的人能听到的钟声数。'}, {'name': '逻辑运算符', 'description': '逻辑运算符是用来进行逻辑运算的符号，常见的逻辑运算符有与运算符、或运算符和非运算符。本题中可以使用逻辑运算符来判断是否满足敲钟的条件。'}, {'name': '输出语句', 'description': '输出语句是用来将结果输出到屏幕上的语句，可以使用printf函数来进行输出。本题中需要使用输出语句来输出居住在两座寺院中间的人能听到的钟声数。'}]"
    },
    {
        "sortId": 640,
        "id": "1371273403193155584",
        "title": "临大精神",
        "content": "\n![QQ截图20210315094201.png](~/dfd8dad5-5a77-4dca-b466-2810e6b0fd43.png)\n\n临沂大学是山东省属普通高校，山东省特色名校，坐落在历史文化名城、商贸物流之都、滨水生态之城、红色旅游城市、全国文明城市——山东省临沂市，是沂蒙革命老区唯一的综合性大学，也是一所具有优良革命传统的革命老区大学。红色基因浓厚。抗大一分校在沂蒙根据地办学期间，1941年抽调部分干部教员与中共滨海地委共同创建滨海中学（实为抗大式学校），后改称滨海建国学院，后多次迁徙合并，校名几度更迭，历经临沂第一师范、临沂教师进修学校、临沂教育学院、临沂师专、临沂师范学院等发展阶段，2010年经教育部批准更名为临沂大学。学校建校近80年来，根植琅琊文化沃土，传承红色基因，弘扬沂蒙精神，积淀形成“明义、锐思、弘毅、致远”的校训和“实”的校风，铸就“能吃苦、善创新、敢担当、乐奉献”的临大特质和“团结包容、崇实尚贤、艰苦创业、勇于争先”的临大精神，形成革命老区大学鲜明的办学特色。\n\n本题非常简单，请你用汉语拼音输出临沂大学的校训。\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n在一行中按照样例输出，以惊叹号结尾。\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nMing Yi,Rui Si,Hong Yi,Zhi Yuan!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型'，'description':'C语言中的数据类型包括基本数据类型和派生数据类型。基本数据类型包括整型、浮点型、字符型和布尔型。派生数据类型包括数组、指针、结构体和联合体。学生需要了解各种数据类型的定义、声明和使用方法，以及它们在内存中的存储方式和大小。'}, {'name':'运算符'，'description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符、位运算符和赋值运算符等。学生需要了解各种运算符的优先级和结合性，以及它们在表达式中的使用方法。'}, {'name':'控制语句'，'description':'C语言中的控制语句包括条件语句、循环语句和跳转语句等。学生需要了解各种控制语句的语法和用法，以及它们在程序中的应用场景。'}, {'name':'函数'，'description':'C语言中的函数是程序的基本组织单元，可以实现代码的模块化和重用。学生需要了解函数的定义、声明和调用方法，以及函数参数的传递方式和返回值的类型。'}, {'name':'数组'，'description':'C语言中的数组是一种存储相同类型数据的集合，可以通过下标访问和修改数组元素。学生需要了解数组的定义、声明和初始化方法，以及数组在内存中的存储方式和访问方式。'}, {'name':'指针'，'description':'C语言中的指针是一种特殊的变量，存储其他变量的地址。学生需要了解指针的定义、声明和使用方法，以及指针和数组、指针和函数之间的关系。'}, {'name':'字符串'，'description':'C语言中的字符串是由字符组成的字符数组，以空字符结尾。学生需要了解字符串的定义、声明和初始化方法，以及字符串的输入输出和常用操作函数。'}, {'name':'结构体'，'description':'C语言中的结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。学生需要了解结构体的定义、声明和使用方法，以及结构体成员的访问方式和结构体数组的定义和使用。'}, {'name':'文件操作'，'description':'C语言中的文件操作可以实现对文件的读写操作。学生需要了解文件的打开、关闭和读写方法，以及文件指针的移动和文件的错误处理。'}, {'name':'动态内存管理'，'description':'C语言中的动态内存管理可以实现对内存的动态分配和释放。学生需要了解动态内存分配函数malloc和free的使用方法，以及内存泄漏和内存溢出的问题。'}]"
    },
    {
        "sortId": 641,
        "id": "1370725388216954880",
        "title": "下蛋公式",
        "content": "一天，挺挺学长和帅学长在鸡圈发现了一枚鸡蛋，这枚鸡蛋被挺挺学长带回了实验室，第二天，挺挺学长找到了帅学长，并且和他说，经过他一个晚上不眠不休的实验，得出一个公式，已知鸡蛋的体积和质量为v和m\n\n$$\\huge f(v, m) = {\\frac{arctan(sin(m!)) + (1 + m) * v}{(m * v)^\\frac{1}{2}}}$$\n\n挺挺学长给这个公式命名为\"下蛋公式\"，通过这个公式可以得出这个鸡蛋是谁下的，尽管挺挺学长向帅学长解释了一天，但是帅学长还是不能理解，实验室里还有很多鸡蛋，帅学长决定通过实验来理解。\n\n### 输入格式:\n\n输入两个整数v和m($$1 \\le m,v \\le 1e^9$$)，代表当前这个鸡蛋的体积和质量。测试样例有多组，读入到文件结尾。\n\n### 输出格式:\n\n如果得出结论是母鸡下的蛋，就打印\"female\"，否则打印\"male\"。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n23 66\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nfemale\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数学函数', 'description': '学习使用数学函数进行数值计算和转换。'}, {'name': '运算符', 'description': '学习使用运算符进行数值计算和逻辑判断。'}, {'name': '变量', 'description': '学习使用变量存储和操作数据。'}, {'name': '输入输出', 'description': '学习使用输入输出函数进行数据的输入和输出。'}, {'name': '条件语句', 'description': '学习使用条件语句进行条件判断和分支控制。'}, {'name': '循环语句', 'description': '学习使用循环语句进行重复执行和循环控制。'}, {'name': '函数', 'description': '学习使用函数进行代码的模块化和重复利用。'}, {'name': '数据类型', 'description': '学习使用不同的数据类型进行数据的存储和操作。'}, {'name': '运算优先级', 'description': '学习运算符的优先级和结合性，理解表达式的计算顺序。'}, {'name': '数学库', 'description': '学习使用数学库中的函数进行高级数学计算。'}, {'name': '条件表达式', 'description': '学习使用条件表达式进行简洁的条件判断和赋值操作。'}, {'name': '逻辑运算', 'description': '学习使用逻辑运算符进行逻辑判断和布尔运算。'}, {'name': '字符串处理', 'description': '学习使用字符串处理函数进行字符串的操作和处理。'}, {'name': '数组', 'description': '学习使用数组进行多个数据的存储和操作。'}, {'name': '指针', 'description': '学习使用指针进行内存的动态分配和数据的传递。'}, {'name': '结构体', 'description': '学习使用结构体进行复杂数据的封装和操作。'}, {'name': '文件操作', 'description': '学习使用文件操作函数进行文件的读写和处理。'}, {'name': '预处理指令', 'description': '学习使用预处理指令进行代码的预处理和宏定义。'}, {'name': '错误处理', 'description': '学习使用错误处理机制进行异常情况的处理和错误提示。'}, {'name': '位运算', 'description': '学习使用位运算符进行位级别的操作和位字段的处理。'}, {'name': '内存管理', 'description': '学习使用内存管理函数进行内存的分配和释放。'}, {'name': '模块化编程', 'description': '学习使用模块化编程进行代码的组织和管理。'}, {'name': '调试技巧', 'description': '学习使用调试技巧进行程序的调试和错误的排查。'}, {'name': '编码规范', 'description': '学习使用编码规范进行代码的规范化和风格的统一。'}, {'name': '数据结构', 'description': '学习使用数据结构进行数据的组织和操作。'}, {'name': '算法设计', 'description': '学习使用算法进行问题的分析和解决。'}, {'name': '面向对象', 'description': '学习使用面向对象的思想进行程序的设计和实现。'}, {'name': '并发编程', 'description': '学习使用并发编程进行多线程和多进程的程序设计。'}, {'name': '网络编程', 'description': '学习使用网络编程进行网络通信和数据传输。'}, {'name': '图形界面', 'description': '学习使用图形界面进行程序的可视化和用户交互。'}, {'name': '嵌入式系统', 'description': '学习使用嵌入式系统进行硬件和软件的集成。'}, {'name': '编译原理', 'description': '学习使用编译原理进行程序的编译和优化。'}, {'name': '操作系统', 'description': '学习使用操作系统进行程序的运行和管理。'}, {'name': '计算机网络', 'description': '学习使用计算机网络进行数据通信和网络安全。'}, {'name': '数据库', 'description': '学习使用数据库进行数据的存储和查询。'}, {'name': '人工智能', 'description': '学习使用人工智能进行数据分析和模式识别。'}, {'name': '大数据', 'description': '学习使用大数据进行数据挖掘和分析。'}, {'name': '云计算', 'description': '学习使用云计算进行资源的共享和计算的扩展。'}, {'name': '物联网', 'description': '学习使用物联网进行设备的连接和数据的传输。'}, {'name': '区块链', 'description': '学习使用区块链进行数据的安全和交易的可追溯。'}, {'name': '软件工程', 'description': '学习使用软件工程进行项目的管理和开发。'}, {'name': '计算机图形学', 'description': '学习使用计算机图形学进行图像的处理和渲染。'}, {'name': '计算机安全', 'description': '学习使用计算机安全进行系统的保护和攻击的防范。'}, {'name': '计算机体系结构', 'description': '学习使用计算机体系结构进行计算的优化和并行的设计。'}, {'name': '计算机算法', 'description': '学习使用计算机算法进行问题的求解和优化。'}, {'name': '计算机语言', 'description': '学习使用计算机语言进行程序的设计和实现。'}, {'name': '计算机硬件', 'description': '学习使用计算机硬件进行计算和存储的实现。'}, {'name': '计算机软件', 'description': '学习使用计算机软件进行应用的开发和运行。'}, {'name': '计算机科学', 'description': '学习使用计算机科学进行问题的研究和创新。'}, {'name': '计算机工程', 'description': '学习使用计算机工程进行系统的设计和实现。'}, {'name': '计算机技术', 'description': '学习使用计算机技术进行计算和通信的应用。'}, {'name': '计算机应用', 'description': '学习使用计算机应用进行实际问题的解决和应用的开发。'}, {'name': '计算机理论', 'description': '学习使用计算机理论进行计算的原理和模型的研究。'}, {'name': '计算机实验', 'description': '学习使用计算机实验进行实际问题的验证和实验的设计。'}, {'name': '计算机教育', 'description': '学习使用计算机教育进行计算机知识的传授和教育的实践。'}, {'name': '计算机应用技术', 'description': '学习使用计算机应用技术进行实际问题的解决和应用的开发。'}, {'name': '计算机网络技术', 'description': '学习使用计算机网络技术进行网络通信和数据传输。'}, {'name': '计算机系统结构', 'description': '学习使用计算机系统结构进行计算的优化和并行的设计。'}, {'name': '计算机软件技术', 'description': '学习使用计算机软件技术进行应用的开发和运行。'}, {'name': '计算机硬件技术', 'description': '学习使用计算机硬件技术进行计算和存储的实现。'}, {'name': '计算机科学技术', 'description': '学习使用计算机科学技术进行问题的研究和创新。'}, {'name': '计算机工程技术', 'description': '学习使用计算机工程技术进行系统的设计和实现。'}, {'name': '计算机技术应用', 'description': '学习使用计算机技术应用进行计算和通信的应用。'}, {'name': '计算机理论基础', 'description': '学习使用计算机理论基础进行计算的原理和模型的研究。'}, {'name': '计算机实验技术', 'description': '学习使用计算机实验技术进行实际问题的验证和实验的设计。'}, {'name': '计算机教育技术', 'description': '学习使用计算机教育技术进行计算机知识的传授和教育的实践。'}, {'name': '计算机应用技术基础', 'description': '学习使用计算机应用技术基础进行实际问题的解决和应用的开发。'}, {'name': '计算机网络技术基础', 'description': '学习使用计算机网络技术基础进行网络通信和数据传输。'}, {'name': '计算机系统结构基础', 'description': '学习使用计算机系统结构基础进行计算的优化和并行的设计。'}, {'name': '计算机软件技术基础', 'description': '学习使用计算机软件技术基础进行应用的开发和运行。'}, {'name': '计算机硬件技术基础', 'description': '学习使用计算机硬件技术基础进行计算和存储的实现。'}, {'name': '计算机科学技术基础', 'description': '学习使用计算机科学技术基础进行问题的研究和创新。'}, {'name': '计算机工程技术基础', 'description': '学习使用计算机工程技术基础进行系统的设计和实现。'}, {'name': '计算机技术应用基础', 'description': '学习使用计算机技术应用基础进行计算和通信的应用。'}, {'name': '计算机理论基础基础', 'description': '学习使用计算机理论基础基础进行计算的原理和模型的研究。'}, {'name': '计算机实验技术基础', 'description': '学习使用计算机实验技术基础进行实际问题的验证和实验的设计。'}, {'name': '计算机教育技术基础', 'description': '学习使用计算机教育技术基础进行计算机知识的传授和教育的实践。'}, {'name': '计算机应用技术基础基础', 'description': '学习使用计算机应用技术基础基础进行实际问题的解决和应用的开发。'}, {'name': '计算机网络技术基础基础', 'description': '学习使用计算机网络技术基础基础进行网络通信和数据传输。'}, {'name': '计算机系统结构基础基础', 'description': '学习使用计算机系统结构基础基础进行计算的优化和并行的设计。'}, {'name': '计算机软件技术基础基础', 'description': '学习使用计算机软件技术基础基础进行应用的开发和运行。'}, {'name': '计算机硬件技术基础基础', 'description': '学习使用计算机硬件技术基础基础进行计算和存储的实现。'}, {'name': '计算机科学技术基础基础', 'description': '学习使用计算机科学技术基础基础进行问题的研究和创新。'}, {'name': '计算机工程技术基础基础', 'description': '学习使用计算机工程技术基础基础进行系统的设计和实现。'}, {'name': '计算机技术应用基础基础', 'description': '学习使用计算机技术应用基础基础进行计算和通信的应用。'}, {'name': '计算机理论基础基础', 'description': '学习使用计算机理论基础基础进行计算的原理和模型的研究。'}, {'name': '计算机实验技术基础基础', 'description': '学习使用计算机实验技术基础基础进行实际问题的验证和实验的设计。'}, {'name': '计算机教育技术基础基础', 'description': '学习使用计算机教育技术基础基础进行计算机知识的传授和教育的实践。'}, {'name': '计算机应用技术基础基础', 'description': '学习使用计算机应用技术基础基础进行实际问题的解决和应用的开发。'}, {'name': '计算机网络技术基础基础', 'description': '学"
    },
    {
        "sortId": 642,
        "id": "1369510726619947008",
        "title": "计算两点之间的距离",
        "content": "题目要求从键盘输入两个点的坐标x1、y1、x2、y2，然后输出它们之间的距离。\n\n### 输入格式:\n\n在一行中输入4个整数，用空格分开。\n\n### 输出格式:\n\n输出单独占一行，计算结果显示2位小数。\n\n### 输入样例:\n\n```in\n2 5 -1 3\n```\n\n### 输出样例:\n\n```out\n3.61\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入和输出结果'},{'name':'变量','description':'学习如何定义和使用变量'},{'name':'运算符','description':'学习如何使用运算符进行数值计算'},{'name':'数据类型','description':'学习不同的数据类型及其使用方法'},{'name':'数学库函数','description':'学习如何使用数学库函数进行数值计算'},{'name':'格式化输出','description':'学习如何使用格式化输出函数进行结果的显示'}]"
    },
    {
        "sortId": 643,
        "id": "1369146387845144576",
        "title": "输出中间值",
        "content": " 输入三个各不相同的整数，输出介于最大和最小之间的那个数。\n\n### 输入格式:\n\n例如：输入在一行中给出3个互不相同的整数。\n\n### 输出格式:\n\n输出中间值的整数。\n\n### 输入样例:\n\n```in\n12   90   8\n```\n\n### 输出样例:\n\n```out\n12\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'输入输出'，'description':'C语言中的输入和输出函数的使用方法。'}, {'name':'条件语句'，'description':'C语言中的条件语句的使用方法。'}, {'name':'运算符'，'description':'C语言中的运算符的概念和使用方法。'}, {'name':'控制语句'，'description':'C语言中的控制语句的使用方法。'}, {'name':'函数'，'description':'C语言中的函数的概念和使用方法。'}, {'name':'数组'，'description':'C语言中的数组的概念和使用方法。'}, {'name':'循环语句'，'description':'C语言中的循环语句的使用方法。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法。'}, {'name':'字符串'，'description':'C语言中的字符串的概念和使用方法。'}, {'name':'结构体'，'description':'C语言中的结构体的概念和使用方法。'}, {'name':'文件操作'，'description':'C语言中的文件操作的概念和使用方法。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令的概念和使用方法。'}, {'name':'递归'，'description':'C语言中的递归的概念和使用方法。'}, {'name':'位运算'，'description':'C语言中的位运算的概念和使用方法。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配的概念和使用方法。'}, {'name':'指针与数组'，'description':'C语言中指针与数组的关系和使用方法。'}, {'name':'指针与函数'，'description':'C语言中指针与函数的关系和使用方法。'}, {'name':'结构体与指针'，'description':'C语言中结构体与指针的关系和使用方法。'}, {'name':'文件操作与指针'，'description':'C语言中文件操作与指针的关系和使用方法。'}, {'name':'递归与指针'，'description':'C语言中递归与指针的关系和使用方法。'}, {'name':'位运算与指针'，'description':'C语言中位运算与指针的关系和使用方法。'}, {'name':'动态内存分配与指针'，'description':'C语言中动态内存分配与指针的关系和使用方法。'}]"
    },
    {
        "sortId": 644,
        "id": "1367485807413432320",
        "title": "你好，又是你。",
        "content": "据计算，两个人相遇的概率是0.00478（记为M），而此时此刻，我们所有人在同一实验室写同一份试题，而你恰好看到了这个题目，这样的概率微乎其微！为了庆祝这一刻的相遇，红细胞决定让你求解一个有趣的计算：遇见一个陌生人后，随着时间流逝，再次见到这个陌生人的概率。\n\n通过建立模型：将所有人比做花瓣，且以每秒5cm的速度向随机方向移动，如果两个人某时某刻处于相同位置，我们定义为相遇。两个人之间的位移服从高斯分布，通过对概率密度进行估计，计算出两个人见面后t秒再次重逢的概率（记为P（t））。\n![8F0D2650-79BF-4EDA-9C2F-B9DA2FD1E9E1.png](~/5793ade9-8cef-4ffd-97d9-ce342325dfbe.png)，\nt的单位为秒。通过输入t的值来计算相遇后t秒可以重逢的概率。可见24小时后，两个人相遇的概率仅为5.8%！然后按反比衰减，10天之后就只有0.58%了。\n\n\n### 输入格式:\n\n一个整数N（N<=10000000）代表时间秒。\n### 输出格式:\n输出N秒后陌生人见面后再次见面概率百分比，保留1位小数，四舍五入。\n### 输入样例:\n\n```in\n86400\n```\n\n### 输出样例:\n\n```out\n5.8%\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '高斯分布', 'description': '高斯分布是一种连续概率分布，也称为正态分布。在C语言程序设计中，可以使用高斯分布来模拟两个人之间的位移，从而计算相遇后再次见面的概率。'}, {'name': '概率密度', 'description': '概率密度是指在某个取值点上的概率分布函数的导数。在C语言程序设计中，可以通过对概率密度进行估计，计算出两个人见面后t秒再次重逢的概率。'}, {'name': '百分比计算', 'description': '百分比计算是指将一个数值表示为百分数的计算方法。在C语言程序设计中，可以使用百分比计算来将概率转化为百分比形式的输出。'}]"
    },
    {
        "sortId": 645,
        "id": "1367459580501823488",
        "title": "戍边英雄",
        "content": "去年六月\n\n远在我国西北边陲广袤的大地上\n\n五位戍边英雄挺身而出\n\n用伟岸的身躯守护着\n\n中华大地上的每一寸“肌肤”\n\n\n![英雄.jpg](~/28db6f27-c8a9-4663-827e-f88ee401a06c.jpg)\n\n他们分别是**陈红军、王焯冉、祁发宝、肖思远、陈祥榕**\n\n让我们用编程的形式向这些英雄致敬！\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\n***********************\n* Zhi Jing Ying Xiong *\n*     Chen Hongjun    *\n*     Wang Zhuoran    *\n*       Qi Fabao      *\n*     Xiao Siyuan     *\n*     Chen Xiangrong  *\n***********************\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符串输出', 'description': '教学描述：字符串输出是C语言中常用的输出方式之一，通过使用printf函数可以将字符串输出到屏幕上。在本题中，需要使用printf函数输出一段特定格式的字符串。'}, {'name': '循环结构', 'description': '教学描述：循环结构是C语言中的一种控制结构，可以重复执行一段代码块。在本题中，可以使用循环结构来重复输出特定格式的字符串。'}, {'name': '数组', 'description': '教学描述：数组是C语言中的一种数据结构，可以存储多个相同类型的元素。在本题中，可以使用数组来存储英雄的姓名，并通过循环遍历数组来输出每个英雄的姓名。'}]"
    },
    {
        "sortId": 646,
        "id": "1367296192052203520",
        "title": "h0001.Hello World! (5 分)",
        "content": "本题要求编写程序，输出一个短句“Hello World!”。\n\n### 输入格式:\n\n本题目没有输入。\n\n### 输出格式:\n\n在一行中输出短句“Hello World!”。\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nHello World!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "172",
                        "name": "Java程序设计",
                        "isLeaf": false,
                        "enName": "Java Programming"
                    },
                    {
                        "id": "173",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "174",
                        "name": "变量与赋值",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'本知识点主要讲解如何使用输出语句在屏幕上打印出指定的内容。在C语言中，可以使用printf函数来实现输出操作。'}]"
    },
    {
        "sortId": 647,
        "id": "1367118722380337152",
        "title": "跑步冠军",
        "content": "小明同学的梦想是奥运会长跑冠军，所以他给自己定了一个训练计划：`第一天跑5米，以后每一天比前一天多跑5%。`\n### 输入格式:\n\n一个整数(1<=N<=100)代表第N天。\n\n### 输出格式:\n\n输出这一天应该跑多远距离。（结果四舍五入保留两位小数）。\n\n### 输入样例:\n\n\n```in\n1\n```\n\n### 输出样例:\n\n```out\n5.00\n```\n\n\n### 输入样例:\n\n\n```in\n4\n```\n\n### 输出样例:\n\n```out\n5.79\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数运算'，'description':'浮点数运算是C语言中的一种基本运算，用于处理小数点后的数字。在本题中，需要使用浮点数运算来计算每一天跑的距离。'}]"
    },
    {
        "sortId": 648,
        "id": "1367041406602055680",
        "title": "Computer Science Ability Test",
        "content": "Computer Science Ability Test (CSAT) aims to evaluate objectively, through unified examinations with $$10$$ true or false questions, the abilities of testees in computer science.\n\nLittle Gyro is taking the test, but soon he discovers with dismay that he cannot answer even a single question. Now he presents you with these $$10$$ questions. Can you tell him the correct answer to each question?\n\n1. (On calculus)$$ \\frac{y\\text{d}x - x\\text{d}y}{x^2-y^2} = \\text{d}(\\frac{1}{2}\\ln \\left| \\frac{x-y}{x+y} \\right|)$$.\n2. (On discrete mathematics) $$\\emptyset \\subseteq \\{\\emptyset\\}$$.\n3. (On linear algebra) Two vectors $$v_1$$ and $$v_2$$ are linearly dependent if there exists two scalars $$k_1$$ and $$k_2$$ such that $$k_1v_1 + k_2v_2 = \\vec{0}$$.\n4. (On physics) One mole of ideal gas is expanded from $$V_0$$ to $$2V_0$$ in a reversible adiabatic process. If the temperature of the gas decreases by 25%, the gas may be a type of monatomic gas.\n5. (On data structure) The amortized time complexity of an insert operation of a Fibonacci heap is $$O(1)$$.\n6. (On approximation algorithm) If $$P \\ne NP$$, there does not exist a polynomial-time $$2$$-approximation algorithm for the traveling salesman problem on a complete graph, but there exists a polynomial-time $$2^n$$-approximation algorithm for this problem.\n7. (On quantum algorithm) There exists a comparison-based quantum sorting algorithm which takes less than $$\\Omega(n\\log n)$$ steps and is better than classical algorithms.\n8. (On operating system) A system consists of $$4$$ resources with the same type. Suppose that at most $$3$$ processes simultaneously apply the resource and every process applies at most $$2$$ resources, so the system is deadlock free.\n9. (On theory of computation) Let $$L(M)$$ be the language that the Turing machine $$M$$ accepts, then the language $$\\{\\text{\"}M\\text{\"} | M \\text{ is a Turing machine and } L(M) \\text{ is uncountable} \\}$$ is recursively enumerable but not recursive.\n10. (On compiler principles) There exists a grammar which is $$LL(1)$$ but not $$LALR(1)$$. \n\n### Input Specification:\n\nThis problem has no input.\n\n### Output Specification:\n\nOutput one line containing $$10$$ characters. The characters must be either $$'T'$$ or $$'F'$$, where $$'T'$$ means true and $$'F'$$ means false. The $$i$$-th character indicates the answer to the $$i$$-th true or false question.\n\n### Sample Input:\n\nThis problem has no input.\n```in\n(no input)\n```\n\n### Sample Output:\n\nPlease note that the sample output is just for an example, it's definitely not the correct answer of the problem.\n```out\nFTFTFTTFTF\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'calculus', 'description': 'The knowledge of calculus is required to understand and solve the first question. It involves the concept of differentiation and integration.'}, {'name': 'discrete mathematics', 'description': 'The knowledge of discrete mathematics is required to understand and solve the second question. It involves the concept of sets and subsets.'}, {'name': 'linear algebra', 'description': 'The knowledge of linear algebra is required to understand and solve the third question. It involves the concept of linear dependence and vectors.'}, {'name': 'physics', 'description': 'The knowledge of physics is required to understand and solve the fourth question. It involves the concept of ideal gas and adiabatic processes.'}, {'name': 'data structure', 'description': 'The knowledge of data structures is required to understand and solve the fifth question. It involves the concept of amortized time complexity and Fibonacci heaps.'}, {'name': 'approximation algorithm', 'description': 'The knowledge of approximation algorithms is required to understand and solve the sixth question. It involves the concept of polynomial-time approximation algorithms and the traveling salesman problem.'}, {'name': 'quantum algorithm', 'description': 'The knowledge of quantum algorithms is required to understand and solve the seventh question. It involves the concept of comparison-based quantum sorting algorithms and their efficiency compared to classical algorithms.'}, {'name': 'operating system', 'description': 'The knowledge of operating systems is required to understand and solve the eighth question. It involves the concept of deadlock-free systems and resource allocation.'}, {'name': 'theory of computation', 'description': 'The knowledge of the theory of computation is required to understand and solve the ninth question. It involves the concept of Turing machines, languages, and recursive enumerability.'}, {'name': 'compiler principles', 'description': 'The knowledge of compiler principles is required to understand and solve the tenth question. It involves the concept of LL(1) and LALR(1) grammars.'}]"
    },
    {
        "sortId": 649,
        "id": "1365919250567757824",
        "title": "志不强者智不达",
        "content": "志不强者智不达\n\n若希望输出墨子的名言：\n\n```out\n志不强者智不达，\n言不信者行不果。\n```\n\n则输出语句应为\n\n```c\nputs(  );\nputs(  );\n```\n\n---\n\n注：其中标点符号为中文全角符号。\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'puts函数', 'description': 'puts函数用于向标准输出流打印字符串，并自动在末尾添加换行符。'}, {'name': '字符串常量', 'description': '字符串常量是由一串字符组成的，用双引号括起来的字符序列。'}, {'name': '转义字符', 'description': '转义字符是一些特殊的字符序列，用来表示一些不可打印的字符或具有特殊含义的字符。'}]"
    },
    {
        "sortId": 650,
        "id": "1364869280049758208",
        "title": "Hello, world!",
        "content": "Say \"Hello\" to the world.\n\nShow \"Hello, world!\" on the screen.\n\n### Input Specification:\n\nNo input.\n\n### Output Specification:\n\nPrint \"*Hello, world!*  \" in one line. No space before and behind the sentence. 1 space behind comma(','). 1 exclamation mark('!') behind \"world\".\n\n### Sample Input:\n```in\n\n```\n\n\n### Sample Output:\n\n\n\n```out\nHello, world!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'使用printf函数将指定的字符串输出到屏幕上。'}]"
    },
    {
        "sortId": 651,
        "id": "1364853289500639232",
        "title": "简单四则运算",
        "content": "读入两个正整数，求两者的和、差、积、商。\n\n### 输入格式:\n\n在一行中给出2个正整数A和B，以空格分隔。\n\n### 输出格式:\n\n按照输出样例的格式输出A与B的和、差、积、商。商的输出结果保留一位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3 2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3 + 2 = 5\n3 - 2 = 1\n3 * 2 = 6\n3 / 2 = 1.5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本运算','description':'学习如何进行加减乘除运算，以及保留小数的方法'}]"
    },
    {
        "sortId": 652,
        "id": "1363690468045848576",
        "title": "关于scanf函数返回值，以下说法错误的是(     )。",
        "content": "关于scanf函数返回值，以下说法错误的是(     )。\n\n@[](2)\n\nA. 该函数读不到数据时返回EOF\nB. 该函数的返回值是正确读到的数据个数\nC. 该函数没有返回值\nD. 该函数读不到数据时返回-1",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'scanf函数返回值', 'description': 'scanf函数返回值是正确读到的数据个数，而不是返回EOF或-1。'}]"
    },
    {
        "sortId": 653,
        "id": "1363690004726251520",
        "title": "以下与k=n++等价的表达式是（     ）。",
        "content": "以下与k=n++等价的表达式是（     ）。\n\n@[](2)\n\nA. k=++n\nB. n=n+1,k=n\nC. k=n,n=n+1\nD. k+=n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '自增运算符', 'description': '自增运算符是C语言中常用的一种运算符，用于将变量的值加1。在表达式中，自增运算符可以放在变量的前面（前缀自增）或者后面（后缀自增）。前缀自增表示先将变量的值加1，然后再使用这个值；后缀自增表示先使用变量的值，然后再将变量的值加1。在本题中，k=n++表示先将n的值赋给k，然后再将n的值加1。'}]"
    },
    {
        "sortId": 654,
        "id": "1363689598658904064",
        "title": "用逻辑表达式表示“大于10且小于20的数”，正确的是(     ) 。",
        "content": "用逻辑表达式表示“大于10且小于20的数”，正确的是(     ) 。\n\n@[](2)\n\nA. 10< x < 20\nB. x > 10 || x < 20\nC. x >10 & x < 20\nD.  !(x <= 10 || x >= 20)",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑表达式','description':'逻辑表达式是由逻辑运算符连接起来的表达式，用于表示逻辑关系。在C语言中，逻辑运算符包括与运算符（&&）、或运算符（||）和非运算符（!）。逻辑表达式可以用于条件判断、循环控制等方面。'}, {'name':'比较运算符','description':'比较运算符用于比较两个值的大小关系，返回一个布尔值（true或false）。在C语言中，常用的比较运算符包括大于（>）、小于（<）、大于等于（>=）、小于等于（<=）、等于（==）和不等于（!=）。比较运算符常用于条件判断、循环控制等方面。'}]"
    },
    {
        "sortId": 655,
        "id": "1363689168809852928",
        "title": "判断a、b中有且仅有1个值为0的表达式是(     )。",
        "content": "判断a、b中有且仅有1个值为0的表达式是(     )。\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对表达式进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）等。在本题中，需要判断a、b中有且仅有1个值为0的表达式，可以使用逻辑运算符来实现。'}]"
    },
    {
        "sortId": 656,
        "id": "1363688565060763648",
        "title": "表达式34/5的结果为（     ）。",
        "content": "表达式34/5的结果为（     ）。\n\n@[](2)\n\nA. 6\nB. 7\nC. 6.8\nD. 以上都错",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '算术运算符', 'description': '算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，除法运算符/用于执行整数除法，结果为整数商。'}]"
    },
    {
        "sortId": 657,
        "id": "1363687033334497280",
        "title": "C/C++语言中，要求运算对象只能为整数的运算符是(     )。",
        "content": "C/C++语言中，要求运算对象只能为整数的运算符是(     )。\n\n@[](2)\n\nA. *\nB. /\nC. >\nD. %",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整数运算符', 'description': '整数运算符是指只能对整数进行运算的运算符，包括加法、减法、乘法、除法和取余运算符。'}]"
    },
    {
        "sortId": 658,
        "id": "1363686766195081216",
        "title": "以下运算符优先级按从高到低排列正确的是(     )。",
        "content": "以下运算符优先级按从高到低排列正确的是(     )。\n\n@[](2)\n\nA. 算术运算、赋值运算、关系运算\nB. 关系运算、赋值运算、算术运算\nC. 算术运算、关系运算、赋值运算\nD. 关系运算、算术运算、赋值运算",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级是指在一个表达式中，不同运算符的执行顺序。在C语言中，运算符优先级按照一定的规则进行排列，掌握运算符优先级可以正确理解和计算表达式的值。'}]"
    },
    {
        "sortId": 659,
        "id": "1363686325675720704",
        "title": "以下运算符中，优先级最高的是(    )。",
        "content": "以下运算符中，优先级最高的是(    )。\n\n@[](2)\n\nA. <=\nB. !\nC. %\nD. &&",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符优先级', 'description': '运算符优先级是指在表达式中，不同运算符的执行顺序。在C语言中，不同的运算符有不同的优先级，优先级高的运算符会先执行。了解运算符优先级可以帮助学生正确理解和书写表达式。'}]"
    },
    {
        "sortId": 660,
        "id": "1363685978576093184",
        "title": "已知字母A的ASCII码为十进制数65，执行以下语句的输出结果是(     )。",
        "content": "已知字母A的ASCII码为十进制数65，执行以下语句的输出结果是(     )。\n```\nint c='A'+'6'-'3';\n\n//C++风格代码\ncout<<char(c);\n\n//C风格代码\nprintf(\"%c\", (char) c);\n```\n",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'ASCII码转换'，'description':'ASCII码是一种将字符映射为数字的编码方式，通过ASCII码可以实现字符与数字之间的转换。在C语言中，可以使用char类型来表示字符，使用int类型来表示ASCII码。本题涉及到了将ASCII码转换为字符的操作。'}]"
    },
    {
        "sortId": 661,
        "id": "1363685566594777088",
        "title": "int i = 2.9 * 6的结果是(     ) 。",
        "content": "int i = 2.9 * 6的结果是(     ) 。\n\n@[](2)\n\nA. 12\nB. 16\nC. 17\nD. 18",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'数据类型转换是指将一种数据类型的值转换为另一种数据类型的过程。在C语言中，数据类型转换可以通过强制类型转换来实现。强制类型转换可以将一个表达式的值转换为指定的数据类型，从而改变表达式的类型和值。在本题中，2.9是一个浮点数，而6是一个整数，它们相乘的结果会进行数据类型转换，将浮点数转换为整数，因此结果是18。'},\n{'name':'运算符'，'description':'运算符是C语言中用于进行各种运算操作的符号。在本题中，*是乘法运算符，用于计算2.9和6的乘积。'},\n{'name':'变量'，'description':'变量是C语言中用于存储数据的一种特殊的标识符。在本题中，i是一个变量，用于存储2.9 * 6的结果。'}]"
    },
    {
        "sortId": 662,
        "id": "1363684570384662528",
        "title": "设int类型数据占4个内存字节，则以下short 类型能表达的最大整数错误的是(     )。",
        "content": "设int类型数据占4个内存字节，则以下short 类型能表达的最大整数错误的是(     )。\n@[](2)\n\nA. 0x7fff\nB. 1<<15-1\nC. 32767\nD. 077777",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念之一，用于定义变量的类型和占用内存的大小。在本题中，涉及到了int类型和short类型的比较，需要了解int类型占用4个字节，short类型占用2个字节的知识点。'}, {'name': '整数表示范围', 'description': '整数表示范围是指某种数据类型能够表示的最大和最小整数值的范围。在本题中，需要了解short类型能够表示的最大整数值是多少的知识点。'}, {'name': '位运算', 'description': '位运算是C语言中的一种运算方式，用于对二进制数进行操作。在本题中，选项B使用了位运算符<<，需要了解位运算符的使用和运算规则的知识点。'}]"
    },
    {
        "sortId": 663,
        "id": "1360528360634417152",
        "title": "写出满足条件的关系表达式或逻辑表达式[5]",
        "content": "写出满足下列条件的C表达式。 \n\n```c++\n① x 为零。\n@@[](1)\n\n② x 和 y 不同时为零。\n@@[](1)\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对表达式进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）等。在本题中，需要使用逻辑运算符来判断条件是否满足。'}]"
    },
    {
        "sortId": 664,
        "id": "1355541496630996992",
        "title": "两整数求和*",
        "content": "请编写程序，求两个整数的和。\n\n#### 输入格式\n> 若干行数据，每行两个整数\n\n注：最后一行的末尾可能有换行符，也可能没有。\n\n#### 输出格式\n> 若干行数据，每行对应为两个整数的和\n\n#### 输入样例\n```in\n3 4\n78 126\n3 -35\n```\n\n#### 输出样例\n```out\n7\n204\n-32\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型','description':'C语言中的基本数据类型包括整型、浮点型、字符型等，可以用来存储不同类型的数据。'}, {'name':'变量和赋值','description':'变量是用来存储数据的内存空间，赋值是将一个值存储到变量中。'}, {'name':'输入输出','description':'输入是从外部获取数据，输出是将数据显示到屏幕上。'}, {'name':'运算符','description':'C语言中的运算符包括算术运算符、关系运算符、逻辑运算符等，用于进行各种运算操作。'}, {'name':'控制语句','description':'控制语句用于控制程序的执行流程，包括条件语句、循环语句等。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块，可以重复使用。'}, {'name':'数组','description':'数组是一种存储相同类型数据的集合，可以通过下标访问数组中的元素。'}, {'name':'指针','description':'指针是一个变量，存储了一个内存地址，可以用来访问该地址上的数据。'}, {'name':'字符串','description':'字符串是由字符组成的序列，可以用来存储和操作文本数据。'}, {'name':'文件操作','description':'文件操作用于读取和写入文件中的数据。'}]"
    },
    {
        "sortId": 665,
        "id": "1354721342791421952",
        "title": "若“int n; float f=13.8;”,则执行“n=(int)f%3”后，n的值是（ ）。",
        "content": "若“int n; float f=13.8;”,则执行“n=(int)f%3”后，n的值是（ ）。\n@[](3)\n\nA. 1\nB. 4 \nC. 4.333333\nD. 4.6",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用强制类型转换运算符将一个表达式的值转换为指定的数据类型。在本题中，将浮点数f强制转换为整型，然后再进行取余运算。'}]"
    },
    {
        "sortId": 666,
        "id": "1354720468908638208",
        "title": "如果int a=3,b=4；则条件表达式\"a<b? a:b\"的值是（   ）。",
        "content": "如果int a=3,b=4；则条件表达式\"a<b? a:b\"的值是（   ）。\n@[](3)\n\nA. 3\nB.  4\nC. 0\nD. 1",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件表达式', 'description': '条件表达式是一种特殊的表达式，它根据条件的真假来选择不同的值或执行不同的操作。在C语言中，条件表达式的格式为“条件? 表达式1: 表达式2”，如果条件为真，则返回表达式1的值，否则返回表达式2的值。'}]"
    },
    {
        "sortId": 667,
        "id": "1354361068016418816",
        "title": "开心删删乐",
        "content": "有 2 * a个数，-1......-a 和 1......a，每次最多可以删掉b个数字，但是，x和-x不能同时删，求最少几次删完？\n\n### 输入格式:\n输入两个正整数a，b\\\n1 ≤ a，b≤ 100\n\n### 输出格式:\n输出最少几次删完\n\n### 输入样例:\n\n```in\n3 2\n```\n\n### 输出样例:\n\n```out\n3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 60,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。在本题中，可以使用循环结构来重复执行删除数字的操作，直到满足删除完所有数字的条件。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来决定执行哪一段代码。在本题中，可以使用条件判断来判断是否满足删除数字的条件，以及判断是否需要删除x和-x这两个数字。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储输入的正整数a和b，以及记录删除数字的次数。'}, {'name':'算术运算'，'description':'算术运算是C语言中的一种运算操作，用于进行数值计算。在本题中，可以使用算术运算来计算2 * a个数，以及判断是否需要删除x和-x这两个数字。'}, {'name':'输入输出'，'description':'输入输出是C语言中的一种操作，用于从键盘上获取输入数据，并将结果输出到屏幕上。在本题中，可以使用输入输出来获取输入的正整数a和b，以及将最少几次删完的结果输出到屏幕上。'}]"
    },
    {
        "sortId": 668,
        "id": "1351390610542014464",
        "title": "数油桶",
        "content": "工人师傅将油桶码成如下图所示的梯形，数了数底层的油桶数和层数，就知道有多少油桶了。你知道他是怎么算的吗？\n\n![](~/344)\n\n#### 输入格式\n> 底层油桶数 $$a$$ 和层数 $$b$$\n\n#### 输出格式\n> 油桶的数量 $$n$$\n\n#### 输入样例\n```in\n100000 70000\n\n```\n#### 输出样例\n```out\n4550035000\n\n```\n\n---\n\n提示：本题要使用 long long int 类型。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括整型、浮点型、字符型等，本题中需要使用long long int类型来存储油桶的数量。'}, {'name':'算术运算','description':'本题需要进行乘法运算，计算油桶的数量。'}, {'name':'输入输出','description':'本题需要从标准输入中读取底层油桶数和层数，并将计算得到的油桶数量输出到标准输出。'}]"
    },
    {
        "sortId": 669,
        "id": "1351353525340712960",
        "title": "十六进制转八进制",
        "content": "请编写程序，输入十六进制数，输出对应的八进制数。\n\n#### 输入格式\n> 十六进制非负整数\n\n#### 输出格式\n> 对应的八进制非负整数\n\n#### 输入样例\n```in\n13Ba\n\n```\n#### 输出样例\n```out\n11672\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '进制转换', 'description': '学习如何将十六进制数转换为八进制数。'}]"
    },
    {
        "sortId": 670,
        "id": "1351352526980513792",
        "title": "八进制转十六进制",
        "content": "请编写程序，输入八进制数，输出对应的十六进制数。\n\n#### 输入格式\n> 八进制非负整数\n\n#### 输出格式\n> 对应的十六进制非负整数\n\n要求：十六进制数中的字母均为大写形式。\n\n#### 输入样例\n```in\n11672\n\n```\n#### 输出样例\n```out\n13BA\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '八进制数转十六进制数', 'description': '学生需要掌握八进制数和十六进制数的表示方法，以及如何进行转换。在程序中，需要使用输入输出函数，以及相应的转换函数来实现八进制数转十六进制数的功能。'}]"
    },
    {
        "sortId": 671,
        "id": "1350355620422746112",
        "title": "大小写转换",
        "content": "输入一字母(大写或小写)，输出其对应的另一字母(小写或大写)。\n### 输入样例:\n```in\nA\n```\n### 输出样例:\n```out\na\n```\n### 输入样例:\n```in\ny\n```\n### 输出样例:\n```out\nY\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符类型','description':'字符类型是C语言中的一种基本数据类型，用于表示单个字符。在C语言中，字符类型使用单引号括起来的字符表示，例如'A'、'a'、'Y'、'y'等。'}, {'name':'条件语句','description':'条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断输入的字母是大写还是小写，并根据判断结果输出对应的另一字母。'}, {'name':'字符转换','description':'字符转换是C语言中的一种操作，用于将一个字符转换为另一个字符。在本题中，可以使用字符转换来将大写字母转换为小写字母，或将小写字母转换为大写字母。'}]"
    },
    {
        "sortId": 672,
        "id": "1350354155157852160",
        "title": "倒序4位数",
        "content": "输入一个4位的正整数，输出它的倒序数。\n##### 输入样例:\n```in\n1200\n```\n##### 输出样例:\n```out\n0021\n```\n##### 输入样例:\n```in\n1234\n```\n##### 输出样例:\n```out\n4321\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'教学如何使用scanf和printf函数进行输入输出操作。'}, {'name':'循环结构','description':'教学如何使用循环结构实现倒序数的计算。'}, {'name':'数组','description':'教学如何使用数组存储和处理输入的数字。'}, {'name':'条件语句','description':'教学如何使用条件语句判断输入的数字是否为4位数。'}]"
    },
    {
        "sortId": 673,
        "id": "1350343071730503680",
        "title": "输出几个数的和",
        "content": "编程输入最少1个最多不超过4个整数，输出他们的和。\n```\n输入样例1：5 6 7 8     输出样例1：26\n输入样例2：1 5         输出样例2：6\n输入样例3：1 5 4       输出样例3：10\n输入样例4：5           输出样例4：5\n```\n### 输入样例:\n```in\n5 6 7 8\n```\n\n### 输出样例:\n```out\n26\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name':'变量','description':'学习如何声明和使用变量来存储数据。'}, {'name':'循环结构','description':'学习如何使用循环结构来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码。'}, {'name':'数组','description':'学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name':'算术运算','description':'学习如何使用算术运算符进行数值计算。'}, {'name':'控制流程','description':'学习如何使用控制流程语句来控制程序的执行顺序。'}, {'name':'函数','description':'学习如何声明和调用函数来实现代码的模块化。'}, {'name':'指针','description':'学习如何声明和使用指针来操作内存中的数据。'}, {'name':'字符串','description':'学习如何声明和使用字符串来存储和操作文本数据。'}]"
    },
    {
        "sortId": 674,
        "id": "1350334824233041920",
        "title": "读取字符(代码分析)",
        "content": "```\n案例03-02-03 读取字符\n案例代码 03-02-03.c\n#include <stdio.h>\nint main(){\n  int a1,a2;\n  char c1,c2;\n  scanf(\"%d%c\",&a1,&c1);\n  scanf(\"%d %c\",&a2,&c2);\n  printf(\"a1=%d,c1=%c,c1=%d\\n\",a1,c1,c1);\n  printf(\"a2=%d,c2=%c,c2=%d\\n\",a2,c2,c2);\n  return 0;\n}\n```\n### 输入样例:\n```in\n5      6     A\n```\n### 输出样例:\n```out\na1=5,c1= ,c1=32\na2=6,c2=A,c2=65\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 50,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何使用scanf和printf函数进行输入输出操作。'}, {'name': '变量声明和赋值', 'description': '学习如何声明和赋值变量。'}, {'name': '格式化输出', 'description': '学习如何使用printf函数进行格式化输出。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如int和char。'}, {'name': '格式化输入', 'description': '学习如何使用scanf函数进行格式化输入。'}]"
    },
    {
        "sortId": 675,
        "id": "1350330230698409984",
        "title": "格式说明代码分析",
        "content": "分析代码。\n```\n#include <stdio.h>\nint main(){ \n    int a=1234;\n    printf(\"\\n01.a=%d.a=%#d\", a,a);\n    printf(\"\\n02.a=%o.a=%#o\", a,a);\n    printf(\"\\n03.a=%x.a=%#x\", a,a);\n    printf(\"\\n05.a=%-8X.a=%#8X\", a,a);\n    printf(\"\\n06.a=%08X.a=%#08X\", a,a);\n    return 0;\n}\n```\n##### 输入样例:\n```in\n```\n##### 输出样例:\n```out\n\n01.a=1234.a=1234\n02.a=2322.a=02322\n03.a=4d2.a=0x4d2\n05.a=4D2     .a=   0X4D2\n06.a=000004D2.a=0X0004D2\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '格式化输出', 'description': '格式化输出是C语言中常用的输出方式，通过使用特定的格式控制符，可以将变量的值按照指定的格式输出。在这个习题中，通过使用%d、%o、%x等格式控制符，将变量a的值以十进制、八进制、十六进制的形式输出。同时，还可以通过使用%-8X、%#8X、%08X等格式控制符，控制输出的对齐方式和补零方式。'}]"
    },
    {
        "sortId": 676,
        "id": "1350289357825114112",
        "title": "四个数中的最大值",
        "content": "利用关系运算和条件运算，编程输入4个整数，输出它们中的最大值。\n##### 输入样例:\n```in\n1 2 3 4\n```\n##### 输出样例:\n```out\n4\n```\n##### 输入样例:\n```in\n3 1 4 2\n```\n##### 输出样例:\n```out\n4\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'关系运算','description':'关系运算是C语言中用于比较两个值之间关系的运算符，包括大于、小于、等于等。在本题中，可以利用关系运算符来比较输入的四个整数的大小关系。'}, {'name':'条件运算','description':'条件运算是C语言中用于根据条件选择不同操作的运算符，包括if语句和三目运算符。在本题中，可以利用条件运算符来选择输出最大值。'}, {'name':'输入输出','description':'输入输出是C语言中用于与用户交互的操作，包括scanf函数和printf函数。在本题中，可以使用scanf函数来输入四个整数，使用printf函数来输出最大值。'}]"
    },
    {
        "sortId": 677,
        "id": "1350288321728741376",
        "title": "三个数中的最大值",
        "content": "利用关系运算和条件运算，编程输入3个整数，输出它们中的最大值。\n##### 输入样例:\n```in\n1 2 3\n```\n##### 输出样例:\n```out\n3\n```\n##### 输入样例:\n```in\n3 1 2\n```\n##### 输出样例:\n```out\n3\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'关系运算','description':'关系运算是C语言中用于比较两个值之间关系的运算符，包括大于、小于、等于等。在本题中，可以利用关系运算符来比较输入的三个整数的大小关系。'}, {'name':'条件运算','description':'条件运算是C语言中用于根据条件选择不同操作的运算符，包括if语句和三目运算符。在本题中，可以利用条件运算符来选择输出三个整数中的最大值。'}, {'name':'输入输出','description':'输入输出是C语言中用于与用户进行交互的操作，包括scanf函数和printf函数。在本题中，可以使用scanf函数来接收用户输入的三个整数，使用printf函数来输出最大值。'}]"
    },
    {
        "sortId": 678,
        "id": "1350253653570617344",
        "title": "“++、--”代码分析训练",
        "content": "```\n案例拓展 “++、--”代码分析训练\n请分析得出下面程序的运行结果，然后上机验证。\n#include<stdio.h>\n    int main(){\n    int x,y,z;\n    x=6;y=5; z=4;         printf(\"01.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=-x--;      printf(\"02.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=x+++y;     printf(\"03.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=++x+--y;   printf(\"04.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=++x-y++;   printf(\"05.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=--x-++y;   printf(\"06.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=x++-++y;   printf(\"07.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=x--+--y;   printf(\"08.x=%d,y=%d,z=%d\\n\",x,y,z);\n    x=6;y=5; z=x--+y++;   printf(\"09.x=%d,y=%d,z=%d\\n\",x,y,z);\n  return 0;\n}\n```\n### 输入样例:\n```in\n```\n\n### 输出样例:\n```out\n01.x=6,y=5,z=4\n02.x=5,y=5,z=-6\n03.x=7,y=5,z=11\n04.x=7,y=4,z=11\n05.x=7,y=6,z=2\n06.x=5,y=6,z=-1\n07.x=7,y=6,z=0\n08.x=5,y=4,z=10\n09.x=5,y=6,z=11\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符', 'description': '运算符是用来进行各种数学和逻辑运算的符号，C语言中常用的运算符有算术运算符、关系运算符、逻辑运算符等。本题涉及到的运算符有++和--。'}, {'name': '赋值语句', 'description': '赋值语句用来给变量赋值，将一个值存储到变量中。本题涉及到的赋值语句有x=6、y=5、z=4等。'}, {'name': '格式化输出', 'description': '格式化输出是指按照一定的格式将数据输出到屏幕上。本题涉及到的格式化输出语句有printf(\"01.x=%d,y=%d,z=%d\\n\",x,y,z)等。'}, {'name': '自增自减运算符', 'description': '自增自减运算符是用来对变量进行自增或自减操作的运算符。本题涉及到的自增自减运算符有x--、x++、++x、--y等。'}]"
    },
    {
        "sortId": 679,
        "id": "1350249335033954304",
        "title": "苹果装盘",
        "content": "有N个苹果要全部装盘，每个盘子装两个，编程输入苹果数量N，输出这些苹果能装多少盘。\n### 输入格式:\n\n一个整数N。\n\n### 输出格式:\n一个整数，盘子数量。\n##### 输入样例:\n```in\n15\n```\n##### 输出样例:\n```out\n8\n```\n##### 输入样例:\n```in\n20\n```\n##### 输出样例:\n```out\n10\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来计算盘子的数量。'}]"
    },
    {
        "sortId": 680,
        "id": "1350068782522818560",
        "title": "优先级和结合性训练",
        "content": "编程读入三个整数a,b,c，然后输出表达式-a-b*c和-(a-b)*c的值。思考优先级和结合性。 \n##### 输入样例:\n```in\n5 2 3\n```\n##### 输出样例:\n```out\n-11 -9\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'运算符优先级和结合性'，'description':'在C语言中，不同的运算符有不同的优先级和结合性，这会影响到表达式的计算顺序。本题涉及到了减法、乘法和取负号等运算符，需要学生了解这些运算符的优先级和结合性，以正确计算表达式的值。'}]"
    },
    {
        "sortId": 681,
        "id": "1349949182900543488",
        "title": "真的“汉”字",
        "content": "请编程输出以下汉字点阵图形。\n\n![111111111111111111111111.png](~/71df9968-e23a-4b54-a156-ac5b205e02a9.png)\n\n\n请注意不要有多余的空格回车。\n### 输入样例:\n```in\n```\n### 输出样例:\n```out\n *          *\n  ** *********\n   *        *\n*     *     *\n **   *     *\n  *   *    *\n    *  *   *\n   *   *  *\n  *     * *\n***      *\n  *     * *\n  *    *   *\n  *   *     *\n  *  *      ***\n    *        *\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来输出图形的每一行。'}, {'name':'条件语句'，'description':'条件语句是C语言中的一种控制结构，用于根据条件来执行不同的代码。在本题中，可以使用条件语句来确定每个位置应该输出的字符。'}, {'name':'字符输出'，'description':'字符输出是C语言中的一种基本操作，用于将字符输出到屏幕上。在本题中，可以使用字符输出来输出图形的每个字符。'}]"
    },
    {
        "sortId": 682,
        "id": "1349942176378642432",
        "title": "V形图案",
        "content": "请编程输出以下V字形的字符图形。\n### 输入样例:\n```in\n```\n### 输出样例:\n```out\n*        *\n**      **\n***    ***\n****  ****\n**********\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制字符的输出。'}, {'name':'嵌套循环'，'description':'嵌套循环是指在一个循环内部再嵌套一个或多个循环。在本题中，可以使用嵌套循环来控制字符的输出。'}, {'name':'字符输出'，'description':'字符输出是指将字符打印到屏幕上。在本题中，可以使用字符输出来打印V字形的字符图形。'}]"
    },
    {
        "sortId": 683,
        "id": "1349932618654523392",
        "title": "我爱编程",
        "content": "请编程输出文字：I love Computer,I love Programm,I love C!。\n##### 输入样例\n```in\n```\n##### 输出样例\n```out\nI love Computer,I love Programm,I love C!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'输出语句用于将指定的内容打印到屏幕上。在C语言中，可以使用printf函数来实现输出。'}]"
    },
    {
        "sortId": 684,
        "id": "1349389276982280192",
        "title": "保留两位小数",
        "content": "给你一个数A，四舍五入保留到两位小数，如果小数位不足两位则用0补充。\n### 输入格式:\n\n输入一个数A\n\n### 输出格式:\n\n无\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n3.143\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n3.14\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n3.145\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n3.15\n```\n### 输入样例3:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例3:\n\n在这里给出相应的输出。例如：\n\n```out\n3.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'四舍五入保留小数','description':'给定一个数A，将其四舍五入保留到两位小数，如果小数位不足两位则用0补充。'}]"
    },
    {
        "sortId": 685,
        "id": "1346079802817249280",
        "title": "计算阶梯水价",
        "content": "某市从2016年开始执行新的城市供水价格和污水处理费标准。到户水价按照用水量进行分级调整。每户人口在3人以下的，到户水价按照下面的标准分级计费：\n\n\n| 用水量分级 | 分级基数|到户价（元/立方米） |\n|---|---|---|\n| 第一级     | 17立方米以下（包含17立方米）   | 3.40     |\n| 第二级     | 17立方米以上，30立方米以下（包含30立方米）     | 5.32     |\n| 第三级     | 30立方米 以上部分    | 7.00     |\n\n假设需要计算水价的每户人口都在3人以下，即按照上面表格分级计费。要求每次输入当月的用水量，输出当月应交的水费。例如，一户人家当月用了$$19.5$$立方米的生活用水，那么，水费计算为：$$17*3.40+(19-17)*5.32=68.44$$元\n\n### 输入格式:\n\n一行中输入当月的用水量 T，T 是一个不超过1000的整数。\n\n### 输出格式:\n\n在一行中输出对应的水费，要求保留小数点后2位。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n19\n```\n\n### 输出样例:\n\n```out\n68.44\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。在这个题目中，需要使用整数类型的变量来存储用水量和水费。'}, {'name': '运算符', 'description': '在C语言中，运算符用于对变量进行各种运算操作。在这个题目中，需要使用算术运算符来计算水费。'}, {'name': '条件语句', 'description': '在C语言中，条件语句用于根据条件的真假来执行不同的代码块。在这个题目中，需要使用条件语句来根据用水量的不同范围计算水费。'}, {'name': '输入输出', 'description': '在C语言中，可以使用输入输出函数来从用户处获取输入数据，并将结果输出到屏幕上。在这个题目中，需要使用输入输出函数来获取用水量，并输出水费。'}]"
    },
    {
        "sortId": 686,
        "id": "1346064837498634240",
        "title": "假定X和y为int型，则执行x=2; y=x+3/2; 后，y的值是3",
        "content": "假定X和y为int型，则执行x=2; y=x+3/2; 后，y的值是3\n~@[](2)",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '基本数据类型', 'description': '基本数据类型是C语言中最基础的数据类型，包括int、float、char等。在C语言中，变量的类型决定了变量所占用的内存空间大小和能够存储的数据范围。在本题中，x和y都是int型变量。'}, {'name': '运算符优先级', 'description': '运算符优先级决定了表达式中各个运算符的执行顺序。在C语言中，除法运算符/的优先级高于加法运算符+，所以x+3/2的计算结果是2。'}, {'name': '赋值运算符', 'description': '赋值运算符用于将一个值赋给变量。在本题中，x=2将2赋给变量x，y=x+3/2将x+3/2的结果赋给变量y。'}, {'name': '表达式求值', 'description': '表达式求值是指根据运算符优先级和结合性，计算表达式的值。在本题中，先计算3/2得到1，再将x的值2加上1，最终y的值为3。'}]"
    },
    {
        "sortId": 687,
        "id": "1346061537546076160",
        "title": "已知如下程序段：",
        "content": "已知如下程序段：\nint x = 10, y = 20, t = 0;\nif(x！=y) \t{\tt = x; x = y; y = t;\t}\nprintf(\"%d,%d\\n\",x,y);\n则程序输出结果为：20，10\n~@[](2)",
        "type": "TRUE_OR_FALSE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句','description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if语句来实现。if语句的基本语法是if(condition) { code_block }，其中condition是一个表达式，如果其值为真，则执行code_block中的代码。'}]"
    },
    {
        "sortId": 688,
        "id": "1346041399182622720",
        "title": "Happy2021",
        "content": "2021年已经到来，我们期待2021年是快乐的一年，请你编程输出三遍“Happy 2021!”。\n\n### 输入格式:\n\n本题无输入。\n\n### 输出格式:\n\n按样例输出三遍“Happy 2021!”。注意每遍占一行，除了每行的回车不能有任何多余字符。\n### 输入样例:\n\n```in\n\n```\n\n### 输出样例:\n\n```out\nHappy 2021!\nHappy 2021!\nHappy 2021!\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来实现输出三遍“Happy 2021!”的功能。'}]"
    },
    {
        "sortId": 689,
        "id": "1345920275132534784",
        "title": "位运算",
        "content": "给定一个数，将该数的某二进制位上置0、置1或取反。\n\n### 输入格式:\n\n第1行：输入一个十进制整数。（32位int取值范围，其二进制数补码表示）\n\n第2行后：每行输入一个位操作运算要求。\n\n格式：输入位操作运算类型（```1表示置0，``` ```2表示置1```，```3表示按位取反```）   位数（```从最低位向高位，范围从0~31```）\n\n最终以键盘输入```^Z``` 或 文件结束(EOF标志)。\n\n### 输出格式:\n\n输出位运算后的整数值。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n1 0\n1 1\n2 3\n3 1\n3 2\n2 0\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "69",
                        "name": "switch",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'位操作运算','description':'位操作运算是C语言中常用的操作，可以对一个数的二进制位进行置0、置1或取反的操作。'}]"
    },
    {
        "sortId": 690,
        "id": "1345849477612699648",
        "title": "符号整数的补码(2空)",
        "content": "在 8 位的计算机上，整数 127 的补码为 ，整数 -127 的补码为 。\n\n---\n\n注：请填8位二进制补码。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'补码','description':'补码是一种表示有符号整数的方法，它将负数表示为正数的补码形式。在8位的计算机上，整数127的补码为01111111，整数-127的补码为10000001。'}]"
    },
    {
        "sortId": 691,
        "id": "1345849064343732224",
        "title": "符号整数的补码(2空)",
        "content": "在 8 位的计算机上，整数 45 的补码为 ，整数 -45 的补码为 。\n\n---\n\n注：请填8位二进制补码。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'补码','description':'补码是一种表示有符号整数的方法，它是计算机内部存储和运算的方式。在8位的计算机上，正整数的补码等于其二进制表示，负整数的补码等于其绝对值的二进制表示取反加1。'}]"
    },
    {
        "sortId": 692,
        "id": "1345792227007266816",
        "title": "评定等级成绩",
        "content": "学生结构体定义如下：\n```C\nstruct Student{\n    char name[50];   //姓名\n    int sid;   //学号\n    int C;   //C语言成绩\n    int English;   //英语成绩\n    int math;   //数学成绩\n    int grade;   //总评等级成绩\n};\n```\n\n其中每一项的含义如以上代码中的注释所述。本题要求实现一个函数，按照以下规则计算学生的总评等级成绩：\n\n（1）共有C语言、英语、数学三门成绩，每门成绩为百分制。**单科成绩不低于60分为通过**；\n\n（2）总评等级成绩有5档，分数为`5`、`4`、`3`、`2`、`1`，分别表示`优秀`、`良好`、`中等`、`及格`、`未通过`；\n\n（3）C语言、英语、数学成绩中，有任何一门未通过（即`低于60分`），则总评成绩为“未通过”；\n\n（4）若三门单科成绩均通过，则根据三科平均成绩评定：\n\n* C语言成绩`低于90分`的，不得评定为优秀，即无论平均分是多少，**最高评为良好**；\n* 平均成绩`超过90分`的，评定为`优秀`（5分），但C语言成绩不符合要求的只能评为良好；\n* 平均成绩`超过80分`且`不超过90分`的，评定为`良好`（4分）；\n* 平均成绩`超过70分`且`不超过80分`的，评定为`中等`（3分）；\n* 平均成绩`超过60分`且`不超过70分`的，评定为`及格`（2分）；\n* 平均成绩`不超过60分`的，评定为`未通过`（1分）。\n\n**提示：仔细阅读评分规则，注意与平时常见规则的不同，例如平均分为80分的，等级是“中等”而不是“良好”**。\n\n\n### 函数接口定义：\n```C\nint calScore(struct Student *stu);\n```\n\n其中`stu`是传入的参数，指向要评定等级成绩的学生结构体变量。函数返回值为`int`型。\n\n函数要做到：\n* 根据规则计算该学生的等级成绩，并写入该学生结构体的`grade`成员（数据项）中\n* 若该学生总评成绩通过（2分至5分），则函数返回`1`；若总评成绩未通过（1分），则函数返回`0`\n\n### 裁判测试程序样例：\n\n此裁判测试程序仅为示例，实际的测试程序可能不同。 \n\n你所提交的代码将被嵌在裁判测试程序中（如最后一行注释所述），要严格按照题目要求编写函数，不要在函数中打印输出任何内容。\n\n```c\n#include <stdio.h>\nstruct Student{\n    char name[50];  //姓名\n    int sid;    //学号\n    int C;   //C语言成绩\n    int English;   //英语成绩\n    int math;   //数学成绩\n    int grade;   //总评等级成绩\n};\nint calScore(struct Student *stu);\nint main(){\n    int n;\n    scanf(\"%d\", &n);\n    struct Student stu;\n    int pass;\n    for(int i=0; i<n; i++){\n        scanf(\"%s%d%d%d%d\", stu.name, &stu.sid, &stu.C,\n              &stu.English, &stu.math);\n        pass = calScore(&stu);\n        printf(\"(%d, %s) : %d(%d)\\n\", stu.sid, stu.name, stu.grade, pass);\n    }\n    return 0;\n}\n/** 你所提交的代码将被嵌在这里  **/\n\t\n```\n\n### 输入样例：\n对于样例裁判程序的输入格式：（实际的输入格式可能随裁判程序的不同而变化）\n```in\n4\nzhangsan 1001 95 87 90\nlisi 1002 79 80 81\nwangwu 1003 85 99 99\nzhaoliu 1004 58 90 92\n```\n\n### 输出样例：\n对于样例裁判程序的输出格式：（实际的输出格式可能随裁判程序的不同而变化）\n```out\n(1001, zhangsan) : 5(1)\n(1002, lisi) : 3(1)\n(1003, wangwu) : 4(1)\n(1004, zhaoliu) : 1(0)\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'结构体定义'，'description':'学生结构体的定义，包括姓名、学号、各科成绩和总评等级成绩的数据项'},\n{'name':'计算总评等级成绩'，'description':'根据规则计算学生的总评等级成绩，并写入学生结构体的grade成员中'},\n{'name':'判断是否通过'，'description':'判断学生的总评等级成绩是否通过，通过返回1，未通过返回0'}]"
    },
    {
        "sortId": 693,
        "id": "1345750056787333120",
        "title": "学而不思则罔",
        "content": "请编写程序，在屏幕上显示孔子的名言。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n学而不思则罔，\n思而不学则殆。\n\n```\n\n---\n\n提示：标点符号为中文全角符号。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '输出语句用于将程序中的数据显示在屏幕上。在C语言中，可以使用printf函数来实现输出功能。'}, {'name': '字符串', 'description': '字符串是由多个字符组成的数据类型。在C语言中，字符串需要使用双引号括起来。'}, {'name': '转义字符', 'description': '转义字符用于表示一些特殊的字符，如换行符、制表符等。在C语言中，可以使用转义字符来实现对特殊字符的输出。'}, {'name': '注释', 'description': '注释用于对程序进行解释说明，不会被编译器执行。在C语言中，可以使用//或/* */来添加注释。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块。在C语言中，可以使用函数来封装一段可重复使用的代码。'}]"
    },
    {
        "sortId": 694,
        "id": "1345730302240432128",
        "title": "志不强者智不达",
        "content": "请编写程序，在屏幕上显示墨子的名言。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n志不强者智不达，\n言不信者行不果。\n\n```\n\n---\n\n提示：标点符号为中文全角符号。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'输出语句用于将程序中的数据显示在屏幕上。在C语言中，可以使用printf函数来实现输出。'}]"
    },
    {
        "sortId": 695,
        "id": "1345728880048414720",
        "title": "业精于勤荒于嬉",
        "content": "请编写程序，在屏幕上显示韩愈的名言。\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n```out\n业精于勤荒于嬉，\n行成于思毁于随。\n\n```\n\n---\n\n提示：标点符号为中文全角符号。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句'，'description':'输出语句用于将程序中的数据显示在屏幕上。在C语言中，可以使用printf函数来实现输出。'}]"
    },
    {
        "sortId": 696,
        "id": "1345121249499545600",
        "title": "六大门派身份识别",
        "content": "武林中六大门派“少林派、武当派、昆仑派、峨嵋派、华山派、崆峒派”的弟子众多，他们行走江湖，需要能够互相识别身份，以免被邪门歪道的恶人冒充。\n\n六大门派（以下简称“正派”）的掌门人聚在一起闭关半年，设计出来这样一个识别方式：\n\n每名正派弟子均有一个身份验证码，并熟知验证规则。当一名正派弟子遇见另一名自称为正派弟子的人，就要求对方报出身份验证码。若验证无误，则交个朋友；若验证失败，说明对方为假冒的，立即开战（当然，如果打不过就溜……）\n\n验证码是这样的：\n* 由9位数字组成;\n* 首位数字表示所在的门派编号，少林派、武当派、昆仑派、峨嵋派、华山派、崆峒派依次使用`0`-`5`表示;\n* 接下来4位数字记为整数`a`，最后4位数字记为整数`b`; （若a、b不满4位，则左边添`0`补位）\n\n例如：`000100015`即表示少林派、`a`是`10`，`b`是`15`\n\n验证规则是这样的：\n1. 找出整数`a`和整数`b`之间（包括a和b）的所有素数p1、p2、p3、...  (提示: a、b均可以是`0-9999`的任何数）\n1. 计算所有这些素数的各位数字之和`sum` （若a、b之间没有素数，则`sum`计为`0`）\n1. 求出`sum`除以`6`的余数`r`\n1. 若余数r与首位门派编号相同，则验证通过，否则为验证失败\n\n例如，验证码`000100015`可以通过验证，因为`10-15`之间的素数有`11`、`13`，其各位数字之和为(1+1+1+3) = `6`，6除以6的余数为`0`，与门派编号`0`相同。\n\n现在给你一些身份验证码，请进行验证、判断是正派弟子还是恶人冒充。\n\n### 输入格式:\n\n第一行给出1个不超过`100`的正整数`N`；\n\n接下来`N`行，每行给出1个9位的验证码.\n\n提示:  C语言的scanf( )函数第一个参数若使用 `\"%d\"` 可以读取一个十进制整数，若使用 `\"%5d\"`则可以读取一个5位十进制整数。这条提示或可帮助你对此题进行输入。\n\n### 输出格式:\n\n对每一个验证码，在一行中给出验证结果：\n* 如果验证通过，先给出所在门派，然后是素数各位数字之和`sum`，中间空1格。 六大门派依次使用拼音表示：`shaolin`,`wudang`,`kunlun`,`emei`,`huashan`,`kongtong`；\n* 如果验证失败，则要开战了，输出`Fighting!`\n\n\n### 输入样例1:\n\n```in\n3\n000200022\n219492021\n202230666\n```\n\n### 输出样例1:\n\n```out\nshaolin 0\nFighting!\nkunlun 986\n```\n\n### 输入样例2:\n\n```in\n3\n500320050\n400900105\n500100002\n```\n\n### 输出样例2:\n\n```out\nFighting!\nhuashan 22\nkongtong 17\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码，可以使用for循环、while循环或do-while循环实现。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来决定执行哪一段代码，可以使用if语句、switch语句实现。'}, {'name':'数组'，'description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据，可以通过下标访问数组中的元素。'}, {'name':'字符串'，'description':'字符串是C语言中的一种数据类型，用于表示一串字符，可以使用字符数组或字符指针来表示和操作字符串。'}, {'name':'函数'，'description':'函数是C语言中的一种模块化编程的方式，用于封装一段可重用的代码，可以通过函数名和参数来调用函数。'}, {'name':'指针'，'description':'指针是C语言中的一种数据类型，用于存储变量的内存地址，可以通过指针来访问和修改变量的值。'}, {'name':'算术运算'，'description':'算术运算是C语言中的一种基本运算，包括加法、减法、乘法、除法和取余等运算。'}, {'name':'逻辑运算'，'description':'逻辑运算是C语言中的一种基本运算，包括与、或、非等运算，用于判断条件的真假。'}, {'name':'素数判断'，'description':'素数判断是一种常见的数学问题，用于判断一个数是否为素数，可以通过循环和条件判断来实现。'}, {'name':'字符串操作'，'description':'字符串操作是C语言中常见的一种操作，包括字符串的拼接、复制、比较等操作，可以使用字符串库函数来实现。'}, {'name':'输入输出'，'description':'输入输出是C语言中常见的一种操作，包括从键盘读取输入和向屏幕输出结果，可以使用标准输入输出库函数来实现。'}]"
    },
    {
        "sortId": 697,
        "id": "1342633188434657280",
        "title": "计算两个数的值",
        "content": "已知两个数x、y的和、差，请计算这两个数的值并输出。\n\n### 输入格式:\n\n输入两个整数a,b，分别表示两个数x,y的和、差。\n\n### 输出格式:\n\n输出x，y的值，用空格隔开。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n8 2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5 3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本运算','description':'基本运算是C语言程序设计中最基础的知识点之一，包括加法、减法、乘法、除法等运算。在本题中，需要对输入的两个数进行加法和减法运算。'}, {'name':'输入输出','description':'输入输出是C语言程序设计中常用的操作之一，用于从键盘上获取输入数据，并将结果输出到屏幕上。在本题中，需要从输入中获取两个整数，并将计算结果输出。'}, {'name':'变量','description':'变量是C语言程序设计中用于存储数据的容器，可以通过变量来保存计算结果。在本题中，需要定义两个整型变量来保存输入的两个整数和计算结果。'}, {'name':'运算符','description':'运算符是C语言程序设计中用于进行运算的符号，包括加法运算符、减法运算符等。在本题中，需要使用加法运算符和减法运算符对输入的两个整数进行运算。'}, {'name':'数据类型','description':'数据类型是C语言程序设计中用于定义变量的属性，包括整型、浮点型等。在本题中，需要使用整型数据类型来定义变量。'}]"
    },
    {
        "sortId": 698,
        "id": "1342627811466944512",
        "title": "C语言虐我千百遍，我待C语言如初恋",
        "content": "请输出“C语言虐我千百遍，我待C语言如初恋！”的英文翻译，你不要说你不会啊。\n\n### 输入格式:\n\n没有输入\n\n### 输出格式:\n\n输出一行英文，严格按输出样例显示输出。\n\n### 输入样例:\n\n\n```in\n```\n\n### 输出样例:\n\n```out\nC abused me thousands of times,My first love for C!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法','description':'包括C语言的基本数据类型、变量定义、运算符、控制语句等基本语法知识点。'}, {'name':'字符串处理','description':'包括字符串的定义、输入输出、字符串函数等相关知识点。'}, {'name':'函数','description':'包括函数的定义、参数传递、返回值等相关知识点。'}, {'name':'数组','description':'包括数组的定义、初始化、访问、多维数组等相关知识点。'}, {'name':'指针','description':'包括指针的定义、指针运算、指针与数组、指针与函数等相关知识点。'}, {'name':'结构体','description':'包括结构体的定义、结构体成员、结构体数组等相关知识点。'}, {'name':'文件操作','description':'包括文件的打开、读写、关闭等相关知识点。'}, {'name':'动态内存分配','description':'包括动态内存分配的malloc、free等相关知识点。'}, {'name':'预处理指令','description':'包括预处理指令的定义、宏定义、条件编译等相关知识点。'}, {'name':'位运算','description':'包括位运算的与、或、异或、左移、右移等相关知识点。'}, {'name':'递归','description':'包括递归的定义、递归函数、递归算法等相关知识点。'}, {'name':'错误处理','description':'包括错误处理的方法、异常处理等相关知识点。'}, {'name':'数据结构','description':'包括链表、栈、队列、树等数据结构的相关知识点。'}, {'name':'算法','description':'包括排序算法、查找算法等相关知识点。'}, {'name':'多线程','description':'包括多线程的创建、同步、互斥等相关知识点。'}, {'name':'网络编程','description':'包括套接字编程、网络通信等相关知识点。'}, {'name':'图形界面编程','description':'包括图形界面编程的相关知识点。'}, {'name':'嵌入式编程','description':'包括嵌入式系统的相关知识点。'}, {'name':'面向对象编程','description':'包括面向对象编程的相关知识点。'}, {'name':'并发编程','description':'包括并发编程的相关知识点。'}, {'name':'其他','description':'包括其他与C语言相关的知识点。'}]"
    },
    {
        "sortId": 699,
        "id": "1342311844484489216",
        "title": "ZY01-输出处理输出-理财计算",
        "content": "周博通星期一买了10000元(一万元)的理财产品。该产品周二上涨了2.34，周三下跌了2.34%。请计算周三结束时，周博通**理财产品的净值是多少**。为了完成此任务，你需要定义一个双精度的数，来接收这个涨跌幅。这里假定，恰好是前一天上涨了多少，后一天就下跌了多少。\n注意：用户输入的小数，**一定位于0到10的闭区间之内**，也就是最大涨跌幅小于等于10%。\n\n### 输入格式:\n\n一个浮点数。例如输入5.00，代表涨跌幅是5.00%。\n\n### 输出格式:\n\n保留三位小数的理财产品净值。\n\n### 输入样例:\n\n输入5.00，表示净值是：10000*(1+5%)*(1-5%)\n\n```in\n5.00\n```\n\n### 输出样例:\n\n保留三位小数。\n\n```out\n9975.000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'浮点数','description':'浮点数是一种用于表示带有小数部分的数值的数据类型。在C语言中，浮点数类型包括float和double两种。float类型可以表示大约6位有效数字的数值，而double类型可以表示大约15位有效数字的数值。在本题中，需要定义一个双精度的数来接收涨跌幅。'}, {'name':'算术运算符','description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在本题中，需要使用加法和乘法运算符来计算理财产品的净值。'}, {'name':'格式化输出','description':'格式化输出是指按照一定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数来进行格式化输出。在本题中，需要使用printf函数将计算得到的净值输出，并保留三位小数。'}]"
    },
    {
        "sortId": 700,
        "id": "1341991417279160320",
        "title": "复数运算",
        "content": "复数是由两个实数分别作为实部和虚部构成的一个复合数，从另一个角度来说复数就是由两个实数构成的有序对，在C语言中适合用结构类型来表示复数。现在要求用结构类型\n```c++\ntypedef struct\n{\n    float x;\n    float y;\n} Comp;\n```\n及其变量来表示与存储复数，编写程序实现复数的加减法运算。\n\n### 输入格式:\n\n在一行输入四个用空格分开的实数`a1 b1 a2 b2`分别表示复数`c1 = a1 + b1i`和`c2 = a2 + b2i`\n\n### 输出格式:\n复数的输出应符合数学上关于复数的表示习惯：实部与虚部都为零时只输出一个0.00； 有一个为零时，只输出非零的部分;  虚部为负时，例如`3-4i`，应输出为`3.00-4.00i`的形式，不要输出为`3.00+-4.00i`。实部与虚部均保留2位小数，例如`3.00-4.00i`\n输出在两行进行，第一行输出求和的结果，第二行输出求差的结果。\n### 输入样例:\n```in\n5.00 4.00 3.00 2.00\n```\n\n### 输出样例:\n```out\n8.00+6.00i\n2.00+2.00i\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'结构类型','description':'结构类型是C语言中一种自定义的数据类型，可以将多个不同类型的变量组合在一起，形成一个新的数据类型。在本题中，使用结构类型Comp来表示复数。'}, {'name':'复数的加减法运算','description':'本题要求实现复数的加减法运算。根据输入的四个实数，分别表示两个复数的实部和虚部，通过对实部和虚部进行加减运算，得到两个复数的和与差。最后按照数学上关于复数的表示习惯，输出结果。'}]"
    },
    {
        "sortId": 701,
        "id": "1341591836376702976",
        "title": "后天是星期几",
        "content": "如果今天是星期三，后天就是星期五；如果今天是星期六，后天就是星期一。我们用数字1到7对应星期一到星期日。给定某一天，请你输出那天的`后天`是星期几。\n\n### 输入格式:\n\n输入一个1~7之间的正整数。\n\n### 输出格式:\n\n输出一个1~7之间的正整数。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\n5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句是根据条件的真假来执行不同的代码块，常用的条件语句有if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}]"
    },
    {
        "sortId": 702,
        "id": "1341588492623028224",
        "title": "前天是星期几",
        "content": "如果今天是星期三，前天就是星期一；如果今天是星期一，前天就是星期六。我们用数字1到7对应表示星期一到星期日。给定某一天，请你输出那天的“前天”是星期几。\n### 输入格式:\n\n输入一个1~7之间的正整数。\n\n### 输出格式:\n\n输出一个1~7之间的正整数。\n\n### 输入样例:\n\n```in\n3\n```\n\n### 输出样例:\n\n```out\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件判断语句'，'description':'根据给定的条件判断执行不同的代码块'}]"
    },
    {
        "sortId": 703,
        "id": "1341261741015449600",
        "title": "时间的输出(12小时制) ",
        "content": "请编写函数，采用12小时制按 hh:mm:ss.ss(AM/PM) 的格式输出时间。说明：规定12点之前为上午(AM)，之后为下午(PM)。例如12:00，应该为下午(PM)。\n\n### 函数接口定义：\n```c\nvoid TimeOutput2(int hour, int minute, double second);\n```\n\n说明：hour、minute和second 分别为时数、分数和秒数，函数将采用12小时制按“hh:mm:ss.ss(AM/PM)”的格式显示时间。\n### 裁判测试程序样例：\n```c\n#include<stdio.h>\nvoid TimeInput(int *hour, int *minute, double *second);\nvoid TimeOutput2(int hour, int minute, double second);\n\nint main()\n{\n    int hour, minute;\n    double second;\n    TimeInput(&hour, &minute, &second);\n    TimeOutput2(hour, minute, second);\n    return 0;\n}\n\nvoid TimeInput(int *hour, int *minute, double *second)\n{\n  /* ............省略*/\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例1：\n\n\n```in\n8:10:5.5\n```\n\n### 输出样例1：\n\n```out\n08:10:05.50(AM)\n```\n### 输入样例2：\n\n```in\n18:25:3.25\n```\n\n### 输出样例2：\n\n```out\n06:25:03.25(PM)\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '函数定义', 'description': '函数定义是指在程序中定义一个函数，函数是一段完成特定任务的代码块，通过函数可以将一个大的问题分解成若干个小的问题，提高代码的可读性和重用性。在C语言中，函数的定义包括函数名、参数列表、返回值类型和函数体。'}, {'name': '函数调用', 'description': '函数调用是指在程序中使用函数完成特定任务。在C语言中，函数调用的格式为函数名(参数列表)，通过函数调用可以执行函数体中的代码。'}, {'name': '变量定义', 'description': '变量定义是指在程序中定义一个变量，变量是用来存储数据的内存空间，通过变量可以在程序中保存和操作数据。在C语言中，变量的定义包括变量类型和变量名。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在C语言中，条件语句包括if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}, {'name': '循环语句', 'description': '循环语句是根据条件的真假来重复执行一段代码块。在C语言中，循环语句包括while循环、do-while循环和for循环。while循环根据条件的真假来重复执行一段代码块，do-while循环先执行一次代码块，然后根据条件的真假来重复执行，for循环根据初始条件、循环条件和循环后操作来重复执行一段代码块。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行操作和处理。在C语言中，可以使用字符串处理函数来实现字符串的复制、连接、比较等操作。'}, {'name': '数组', 'description': '数组是一种存储相同类型数据的集合，通过数组可以方便地存储和访问多个数据。在C语言中，数组的定义包括数组类型、数组名和数组长度。'}, {'name': '指针', 'description': '指针是存储内存地址的变量，通过指针可以访问和操作内存中的数据。在C语言中，可以使用指针来实现对变量的间接访问和操作。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，通过结构体可以将多个不同类型的数据组合在一起。在C语言中，结构体的定义包括结构体名和结构体成员，结构体成员可以是不同类型的变量。'}, {'name': '文件操作', 'description': '文件操作是指对文件进行读写操作。在C语言中，可以使用文件指针和文件操作函数来实现对文件的打开、关闭、读取和写入等操作。'}, {'name': '错误处理', 'description': '错误处理是指在程序中对可能出现的错误进行处理。在C语言中，可以使用错误处理机制来捕获和处理程序中的错误，提高程序的健壮性和可靠性。'}, {'name': '递归', 'description': '递归是指一个函数调用自身的过程。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数包括递归调用和递归终止条件。'}, {'name': '指针运算', 'description': '指针运算是指对指针进行加减运算，通过指针运算可以实现对数组和字符串的遍历和操作。在C语言中，可以使用指针运算来访问和操作内存中的数据。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行时根据需要分配和释放内存空间。在C语言中，可以使用动态内存分配函数malloc和free来实现对内存的动态分配和释放。'}, {'name': '位运算', 'description': '位运算是指对二进制位进行操作的运算。在C语言中，可以使用位运算符来实现对二进制位的与、或、异或、取反等操作。'}, {'name': '函数指针', 'description': '函数指针是指指向函数的指针变量，通过函数指针可以调用函数。在C语言中，可以使用函数指针来实现函数的动态调用和回调函数。'}, {'name': '预处理指令', 'description': '预处理指令是指在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、条件编译等。'}, {'name': '类型转换', 'description': '类型转换是指将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用类型转换运算符来实现不同类型之间的转换。'}, {'name': '枚举', 'description': '枚举是一种自定义的数据类型，通过枚举可以定义一组具有相同属性的常量。在C语言中，枚举的定义包括枚举名和枚举常量，枚举常量可以是整型或字符型。'}, {'name': '宏定义', 'description': '宏定义是指使用宏来定义一个常量或代码片段的过程。在C语言中，可以使用宏定义来定义常量、函数和代码片段，宏定义使用#define关键字。'}, {'name': '多文件编程', 'description': '多文件编程是指将程序分成多个文件进行编写和管理的方法。在C语言中，可以使用头文件和源文件来实现多文件编程，头文件包含函数声明和宏定义，源文件包含函数定义和全局变量。'}, {'name': '数据结构', 'description': '数据结构是指将数据按照一定的方式组织和存储的方法。在C语言中，可以使用数组、链表、栈、队列、树等数据结构来存储和操作数据。'}, {'name': '指针数组', 'description': '指针数组是指数组中的元素是指针变量，通过指针数组可以存储和操作多个指针。在C语言中，可以使用指针数组来存储和操作多个字符串。'}, {'name': '字符串数组', 'description': '字符串数组是指数组中的元素是字符串，通过字符串数组可以存储和操作多个字符串。在C语言中，可以使用字符串数组来存储和操作多个字符串。'}, {'name': '二维数组', 'description': '二维数组是指数组中的元素是一维数组，通过二维数组可以存储和操作二维数据。在C语言中，可以使用二维数组来存储和操作矩阵和表格等二维数据。'}, {'name': '指针与数组', 'description': '指针与数组是指指针和数组之间的关系。在C语言中，可以使用指针来访问和操作数组中的元素，也可以使用数组名来表示数组的首地址。'}, {'name': '结构体数组', 'description': '结构体数组是指数组中的元素是结构体，通过结构体数组可以存储和操作多个结构体。在C语言中，可以使用结构体数组来存储和操作多个具有相同属性的结构体。'}, {'name': '指针与结构体', 'description': '指针与结构体是指指针和结构体之间的关系。在C语言中，可以使用指针来访问和操作结构体中的成员，也可以使用结构体变量的地址来表示结构体的指针。'}, {'name': '链表', 'description': '链表是一种动态数据结构，通过链表可以存储和操作任意数量的数据。在C语言中，链表由节点组成，每个节点包含数据和指向下一个节点的指针。'}, {'name': '栈', 'description': '栈是一种后进先出（LIFO）的数据结构，通过栈可以实现函数调用、表达式求值等操作。在C语言中，栈由数组或链表实现，包括入栈和出栈操作。'}, {'name': '队列', 'description': '队列是一种先进先出（FIFO）的数据结构，通过队列可以实现进程调度、消息传递等操作。在C语言中，队列由数组或链表实现，包括入队和出队操作。'}, {'name': '树', 'description': '树是一种非线性的数据结构，通过树可以存储和操作具有层次关系的数据。在C语言中，树由节点组成，每个节点包含数据和指向子节点的指针。'}, {'name': '图', 'description': '图是一种非线性的数据结构，通过图可以存储和操作具有关联关系的数据。在C语言中，图由顶点和边组成，顶点表示数据，边表示数据之间的关系。'}, {'name': '排序算法', 'description': '排序算法是指将一组数据按照特定的顺序进行排列的算法。在C语言中，可以使用冒泡排序、插入排序、选择排序、快速排序、归并排序等排序算法来对数据进行排序。'}, {'name': '查找算法', 'description': '查找算法是指在一组数据中查找指定数据的算法。在C语言中，可以使用顺序查找、二分查找、哈希查找等查找算法来查找数据。'}, {'name': '递归算法', 'description': '递归算法是指使用递归来解决问题的算法。在C语言中，可以使用递归算法来解决一些需要重复执行相同操作的问题，递归算法包括递归调用和递归终止条件。'}, {'name': '动态规划', 'description': '动态规划是一种通过将问题分解成子问题来解决复杂问题的方法。在C语言中，可以使用动态规划算法来解决一些需要计算最优解的问题，动态规划算法包括状态定义、状态转移方程和边界条件。'}, {'name': '贪心算法', 'description': '贪心算法是一种通过每一步选择局部最优解来达到全局最优解的方法。在C语言中，可以使用贪心算法来解决一些需要在有限时间内做出最优决策的问题，贪心算法包括问题建模、贪心策略和贪心证明。'}, {'name': '回溯算法', 'description': '回溯算法是一种通过试错的方式来搜索解空间的方法。在C语言中，可以使用回溯算法来解决一些需要穷举所有可能解的问题，回溯算法包括问题建模、状态定义、状态转移和剪枝等步骤。'}, {'name': '分治算法', 'description': '分治算法是一种通过将问题分解成子问题来解决复杂问题的方法。在C语言中，可以使用分治算法来解决一些需要分解成多个子问题并合并结果的问题，分治算法包括问题分解、子问题求解和结果合并。'}, {'name': '图算法', 'description': '图算法是一种通过图的遍历和搜索来解决问题的方法。在C语言中，可以使用图算法来解决一些需要在图中查找路径、计算最短路径等问题，图算法包括图的表示、图的遍历和图的搜索。'}, {'name': '动态规划算法', 'description': '动态规划算法是一种通过将问题分解成子问题来解决复杂问题的方法。在C语言中，可以使用动态规划算法来解决一些需要计算最优解的问题，动态规划算法包括状态定义、状态转移方程和边界条件。'}, {'name': '贪心算法', 'description': '贪心算法是一种通过每一步选择局部最优解来达到全局最优解的方法。在C语言中，可以使用贪心算法来解决一些需要在有限时间内做出最优决策的问题，贪心算法包括问题建模、贪心策略和贪心证明。'}, {'name': '回溯算法', 'description': '回溯算法是一种通过试错的方式来搜索解空间的方法。在C语言中，可以使用回溯算法来解决一些需要穷举所有可能解的问题，回溯算法包括问题建模、状态定义、状态转移和剪枝等步骤。'}, {'name': '分治算法', 'description': '分治算法是一种通过将问题分解成子问题来解决复杂问题的方法。在C语言中，可以使用分治算法来解"
    },
    {
        "sortId": 704,
        "id": "1340876953165053952",
        "title": "程序员",
        "content": "二战后期，催生了世上第一台通用型计算机——“ENIAC”的开发。关于ENIAC，很少有人知道，ENIAC的诞生离不开6位女程序员。她们是Jean Bartik、Kathleen Antonelli、Ruth Teitelbaum、Frances Spence、Marlyn Meltzer和Betty Holberton，她们在ENIAC的发明过程中，负责给机器编程。这6位女程序员虽然都是数学系的顶尖毕业生, 但面对第一台通用型电脑，没人知道怎么下手，她们有的只是一叠资料和接线图。她们在这台大家伙上不断的研究调试，每天要费力的去拔各种缆线、托盘，有时甚至需要爬进检修管道检修故障，更换损坏的零件.... 最终她们还是完成了这项艰难的任务，编出了程序让机器运作。\n\n程序员是一群善于学习、进取心超强的人。他们总是喜欢学习、尝试新事物，求知欲望相当强。我们常常能在程序员的身上看到不竭的激情与满满的正能量。\n\n1024是2的十次方，二进制计数的基本计量单位之一，因此每年的10月24日被大家亲切称为程序员节。我们知道，二进制数系统中，每个0或1就是一个位(bit)，位是数据存储的最小单位。其中8bit就称为一个字节（Byte）,1024B=1KB，1024 KB=1MB，1024 MB=1GB等等。\n\n请根据输入的KB数，输出位数。\n### 输入格式:\n\n在一行中给出一个小于100的整数，表示KB数。\n\n### 输出格式:\n\n输出二进制位数。\n\n### 输入样例:\n\n```in\n10\n```\n### 输出样例\n\n```out\n81920\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '二进制数系统', 'description': '二进制数系统中，每个0或1就是一个位(bit)，位是数据存储的最小单位。其中8bit就称为一个字节（Byte）,1024B=1KB，1024 KB=1MB，1024 MB=1GB等等。'}, {'name': '输入输出', 'description': '输入一个小于100的整数，表示KB数，输出二进制位数。'}]"
    },
    {
        "sortId": 705,
        "id": "1340872738535141376",
        "title": "嫦娥奔月",
        "content": "2020年11月24日，中国用长征五号遥五运载火箭成功发射嫦娥五号探测器，并将其送入预定轨道。11月28日，嫦娥五号进入环月轨道飞行。12月1日，嫦娥五号在月球正面预选着陆区着陆。12月2日，嫦娥五号完成月面自动采样封装。\n\n北京时间12月3日23时10分，嫦娥五号上升器从月面起飞，携带月球样品成功进入预定环月轨道，这是中国首次实现地外天体起飞。\n\n在完成采样任务上升起飞前，着陆器携带的一面“织物版”五星红旗在月面成功展开，这是我国在月球表面首次实现国旗的“独立展示”。12月17日凌晨，嫦娥五号返回器携带月球样品着陆地球。\n\n太空中的每一小步，对应着科研领域的一大步。“嫦娥奔月”的背后，是中国科技领域创新自强的盛大图景。\n\n据媒体报道，嫦娥五号返回器在接近大气层时，飞行的速度将接近第二宇宙速度，也就是每秒11.2公里。这个速度相当于民航客机高空巡航速度的约45倍。\n\n假设某民航客机的速度为900公里/小时，请根据输入分钟的分钟数，输出飞行的距离是多少公里？\n\n### 输入格式:\n\n在一行中给出一个小于100的整数，表示飞行的时间，单位为分钟数。\n\n### 输出格式:\n\n输出客机飞行的距离。\n\n### 输入样例:\n```in\n3\n```\n### 输出样例\n```out\n45\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是计算机程序中用于存储和表示数据的一种抽象概念。在C语言中，可以使用变量来存储各种类型的数据，如整数、浮点数、字符等。变量在使用前需要先声明，并且可以通过赋值操作来改变其存储的值。'}, {'name': '输入输出', 'description': '输入输出是C语言程序中常用的操作之一。通过输入操作，程序可以从外部获取数据；通过输出操作，程序可以将结果输出到外部。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号。C语言提供了多种运算符，包括算术运算符、关系运算符、逻辑运算符等。通过使用运算符，可以对变量进行各种数学运算、比较操作和逻辑判断。'}, {'name': '控制流', 'description': '控制流是C语言中用于控制程序执行顺序的语句。C语言提供了多种控制流语句，包括条件语句、循环语句和跳转语句。通过使用控制流语句，可以根据条件来选择不同的执行路径，或者重复执行某段代码块，或者跳转到程序的其他位置。'}, {'name': '数据类型', 'description': '数据类型是C语言中用于表示不同种类数据的一种属性。C语言提供了多种数据类型，包括整型、浮点型、字符型等。不同的数据类型在内存中占用不同的空间，并且支持不同的操作。在C语言中，可以使用关键字来声明不同的数据类型，并且可以使用强制类型转换来进行不同类型之间的转换。'}, {'name': '函数', 'description': '函数是C语言中用于封装一段可重用代码的一种机制。C语言中的函数可以接受输入参数，并且可以返回一个值。通过使用函数，可以将程序分解成多个模块，提高代码的可读性和可维护性。在C语言中，可以使用函数声明和函数定义来定义和使用函数。'}, {'name': '数组', 'description': '数组是C语言中用于存储多个相同类型数据的一种数据结构。数组可以按照索引访问其中的元素，并且可以通过循环来遍历数组中的所有元素。在C语言中，可以使用数组声明和数组初始化来定义和初始化数组。'}, {'name': '指针', 'description': '指针是C语言中用于存储内存地址的一种数据类型。通过使用指针，可以直接访问和修改内存中的数据。在C语言中，可以使用指针声明和指针运算来定义和操作指针。指针在C语言中具有重要的作用，可以用于动态内存分配、函数传参和数组访问等方面。'}, {'name': '字符串', 'description': '字符串是C语言中用于表示文本数据的一种数据类型。字符串由多个字符组成，并且以空字符\\0结尾。在C语言中，可以使用字符数组和字符指针来表示和操作字符串。C语言提供了多种字符串处理函数，如字符串拷贝、字符串连接和字符串比较等。'}, {'name': '文件操作', 'description': '文件操作是C语言中用于读写文件的一种操作。通过文件操作，可以将程序中的数据保存到文件中，或者从文件中读取数据到程序中。在C语言中，可以使用标准库函数fopen、fclose、fread和fwrite等来进行文件操作。文件操作在C语言中具有重要的作用，可以用于数据的持久化和数据的共享等方面。'}]"
    },
    {
        "sortId": 706,
        "id": "1340869798496124928",
        "title": "停课不停教",
        "content": "2020年伊始，新型冠状病毒肺炎疫情发生后，为认真贯彻落实教育部、山东省教育厅及学校关于“停课不停教、停课不停学”的要求，我校全体任课教师在各自学院的安排部署下，在这个“史上最长寒假”里，有效利用中国大学MOOC、学堂在线、智慧树和山东省高等学校在线课程等平台，积极开展各种形式的线上授课，指导学生开展线上学习，保证疫情防控期间的教学进度和质量。\n\n根据输入的某一位教师授课课程的总学时数，以及授课遍数，请你帮着算算该教师线上授课分钟数。\n\n### 输入格式:\n\n在一行中给出两个均小于100，大于0的整数，其间以空格分隔。第一个整数表示该课程的总学时数，一个学时45分钟；第二个整数表示该课程的授课遍数。\n\n### 输出格式:\n\n输出线上授课总分钟数。\n\n### 输入样例:\n```in\n64  3\n```\n\n### 输出样例\n```out\n8640\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法'，'description':'包括C语言的基本数据类型、变量、常量、运算符、控制语句等基本语法知识点。'}, {'name':'函数'，'description':'包括函数的定义、调用、参数传递、返回值等知识点。'}, {'name':'数组'，'description':'包括数组的定义、初始化、访问、多维数组等知识点。'}, {'name':'指针'，'description':'包括指针的定义、指针与数组的关系、指针与函数的关系等知识点。'}, {'name':'结构体'，'description':'包括结构体的定义、结构体成员的访问、结构体数组等知识点。'}, {'name':'文件操作'，'description':'包括文件的打开、读写、关闭等知识点。'}, {'name':'动态内存分配'，'description':'包括动态内存分配的函数malloc、free等知识点。'}, {'name':'预处理指令'，'description':'包括预处理指令的使用、宏定义等知识点。'}, {'name':'递归'，'description':'包括递归函数的定义、递归调用、递归终止条件等知识点。'}, {'name':'字符串处理'，'description':'包括字符串的定义、字符串的输入输出、字符串的处理等知识点。'}, {'name':'位运算'，'description':'包括位运算的基本操作、位运算的应用等知识点。'}]"
    },
    {
        "sortId": 707,
        "id": "1340863203300896768",
        "title": "爱心捐款",
        "content": "自新冠肺炎疫情暴发以来，疫情防控态势一直牵动着全国人民的心弦：白衣战士身先士卒、守护生命；各行各业立足岗位、共克时艰；无数志愿者众志成城、默默奉献……\n\n在这场战“疫”中，每个中国人都情系武汉，做出自己应该做的贡献。\n\n信息学院党员教师积极行动起来，主动向湖北武汉等疫情严重地区捐款，为武汉加油，为中国加油。\n\n学院领导每人捐款两千元，普通党员教师每人捐款一千元，请根据输入的人数，打印捐款总金额。\n\n### 输入格式:\n在一行中给出两个均小于100且大于0的整数，其间以空格分隔。第一个整数表示领导人数，第二个整数表示普通党员教师人数。\n\n### 输出格式:\n输出金额总数。\n \n### 输入样例:\n\n```in\n10  60\n```\n### 输出样例\n```out\n80000\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义与赋值'，'description':'在程序中定义变量并给变量赋值，用于存储数据。'}, {'name':'算术运算'，'description':'使用算术运算符进行加法运算。'}, {'name':'输入输出'，'description':'从标准输入读取数据，将结果输出到标准输出。'}, {'name':'条件语句'，'description':'使用条件语句判断领导人数和普通党员教师人数的大小关系。'}, {'name':'循环语句'，'description':'使用循环语句计算捐款总金额。'}]"
    },
    {
        "sortId": 708,
        "id": "1340369853405753344",
        "title": "左转弯",
        "content": "请编写程序，在屏幕上显示左转弯的路标。\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```out\n// // //\n\\\\ \\\\ \\\\\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'教学如何使用printf函数进行基本的输出操作'}, {'name':'转义字符','description':'教学转义字符的概念和使用方法'}, {'name':'字符串输出','description':'教学如何输出字符串'}, {'name':'循环结构','description':'教学如何使用循环结构实现左转弯的路标'}, {'name':'注释','description':'教学如何使用注释进行代码的解释和说明'}, {'name':'字符输出','description':'教学如何输出特定字符'}, {'name':'格式化输出','description':'教学如何使用格式化输出控制符进行输出格式的控制'}, {'name':'转义序列','description':'教学转义序列的概念和使用方法'}, {'name':'控制结构','description':'教学如何使用控制结构实现左转弯的路标'}, {'name':'字符串处理','description':'教学如何处理字符串并进行输出'}]"
    },
    {
        "sortId": 709,
        "id": "1340363836769255424",
        "title": "乔布斯说创新",
        "content": "史蒂夫·乔布斯说：“领袖和跟风者的区别在于创新。”\n\n请编写程序，输出这句话。\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\nSteven Jobs said, \"Innovation distinguishes between a leader and a follower.\"\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输出语句', 'description': '教学描述：输出语句用于将程序中的结果打印到屏幕上，可以使用printf函数来实现。'}]"
    },
    {
        "sortId": 710,
        "id": "1340356908349472768",
        "title": "爱的宣言",
        "content": "请编写程序，输出爱的宣言。在情人节这一天，鼓起勇气把这个程序送给你的心上人。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n```\nI♥U\n\n```\n\n注：♥ 的 ASCII 码为 3。\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n```out\nI\u0003U\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出', 'description':'学习如何在C语言中进行输出操作，包括输出字符串、字符、数字等。'}, {'name':'ASCII码', 'description':'了解ASCII码的概念和使用，包括如何将字符转换为对应的ASCII码，以及如何将ASCII码转换为对应的字符。'}, {'name':'变量', 'description':'学习如何声明和使用变量，包括整型变量、字符型变量等。'}, {'name':'字符串', 'description':'学习如何声明和使用字符串，包括字符串的输入、输出、拼接等操作。'}, {'name':'注释', 'description':'学习如何在C语言中添加注释，包括单行注释和多行注释。'}, {'name':'运算符', 'description':'学习C语言中常用的运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'控制语句', 'description':'学习C语言中的控制语句，包括条件语句、循环语句等。'}, {'name':'函数', 'description':'学习如何声明和调用函数，包括函数的参数传递、返回值等。'}, {'name':'输入', 'description':'学习如何在C语言中进行输入操作，包括输入字符、字符串、数字等。'}, {'name':'编程', 'description':'学习如何使用C语言进行编程，包括解决实际问题、实现算法等。'}]"
    },
    {
        "sortId": 711,
        "id": "1340355001375604736",
        "title": "爱音乐",
        "content": "请编写程序输出下面的文字。\n\n![题图.jpg](~/aae75c2a-f65a-4d87-a2d5-a7a3ee16bb0d.jpg)\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```\nI♥♬\n\n```\n\n注：♥ 的 ASCII 码为 3，♬ 的 ASCII 码为 14。\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n```out\nI\u0003\u000e\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'ASCII码', 'description': 'ASCII码是一种将字符映射到数字的编码方式，每个字符对应一个唯一的ASCII码。在C语言中，可以通过ASCII码来表示和操作字符。'}, {'name': '输出', 'description': '在C语言中，可以使用printf函数来输出字符、字符串和其他数据类型的值。输出字符时，可以使用%c格式控制符，并将字符的ASCII码作为参数传递给printf函数。'}]"
    },
    {
        "sortId": 712,
        "id": "1340346632573108224",
        "title": "Capital Letter Y",
        "content": "请编写程序，在屏幕上显示大写字母 Y。\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```out\n\\ /\n |\n |\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输出','description':'学习如何在屏幕上输出字符和字符串。'}, {'name':'转义字符','description':'学习如何使用转义字符来输出特殊字符。'}, {'name':'字符常量','description':'学习如何使用字符常量来表示字符。'}, {'name':'ASCII码','description':'学习如何使用ASCII码来表示字符。'}, {'name':'注释','description':'学习如何使用注释来解释代码。'}, {'name':'程序结构','description':'学习如何组织C语言程序的结构。'}, {'name':'变量','description':'学习如何声明和使用变量。'}, {'name':'数据类型','description':'学习C语言的基本数据类型。'}, {'name':'运算符','description':'学习C语言的基本运算符。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的流程。'}, {'name':'函数','description':'学习如何定义和调用函数。'}, {'name':'数组','description':'学习如何声明和使用数组。'}, {'name':'指针','description':'学习如何声明和使用指针。'}, {'name':'字符串','description':'学习如何声明和使用字符串。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作。'}]"
    },
    {
        "sortId": 713,
        "id": "1338676277949001728",
        "title": "计算圆的面积",
        "content": "本题目要求读入圆的半径1个整数r，计算并输出圆的面积。圆周率取值为3.14。\n\n### 输入格式:\n\n输入在一行中给出1个圆的半径整数值r。\n\n### 输出格式:\n\narea=圆的面积，面积值保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\narea=12.56\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量', 'description': '变量是存储数据的一种方式，可以通过变量名来访问和操作数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在C语言中，可以使用scanf函数进行输入操作，使用printf函数进行输出操作。'}, {'name': '运算符', 'description': '运算符是用于进行数学和逻辑运算的符号。在C语言中，常见的运算符有算术运算符、关系运算符、逻辑运算符等。'}, {'name': '数据类型', 'description': '数据类型是用来表示不同种类的数据的属性。在C语言中，常见的数据类型有整型、浮点型、字符型等。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子，用来进行计算和求值。在C语言中，可以使用表达式进行数学运算、逻辑运算等。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程。在C语言中，常见的控制语句有条件语句、循环语句、跳转语句等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行。在C语言中，可以自定义函数和使用标准库函数。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的容器。在C语言中，可以通过下标来访问和操作数组中的元素。'}, {'name': '指针', 'description': '指针是用来存储变量地址的变量。在C语言中，可以通过指针来间接访问和操作变量。'}, {'name': '字符串', 'description': '字符串是由字符组成的序列，用来表示文本数据。在C语言中，可以使用字符数组或指针来表示和操作字符串。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起。在C语言中，可以使用结构体来表示复杂的数据结构。'}]"
    },
    {
        "sortId": 714,
        "id": "1338648032923172864",
        "title": "输出一条语句",
        "content": "本题目要求输出一条简单语句。\n\n### 输入格式:\n\n本题无输入。\n\n### 输出格式:\n\n在一行中输出\"Hello Word!\"。（注意：单词首字母大写，标点为英文。）\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nHello Word!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本语法'，'description':'C语言的基本语法，包括变量定义、数据类型、运算符、控制语句等。'}, {'name':'输出语句'，'description':'C语言中的输出语句，包括printf函数的使用。'}]"
    },
    {
        "sortId": 715,
        "id": "1338014088636743680",
        "title": "读程序写输出结果#include <stdio.h>int main()  {int i,j,m,n;i=8;j=10;m=++",
        "content": "读程序写输出结果\n#include <stdio.h>\nint main()  \n{\n\tint i,j,m,n;\n\ti=8;\n\tj=10;\n\tm=++i;\n\tn=j++;\n\tprintf(\"%d,%d,%d,%d\",i,j,m,n); \n\treturn 0;\n}  \n上面程序的输出是：@@[](3)\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'自增运算符','description':'自增运算符是C语言中的一种特殊运算符，用于将变量的值增加1。在表达式中，自增运算符可以放在变量的前面（前缀自增运算符）或者后面（后缀自增运算符）。前缀自增运算符会先将变量的值增加1，然后再使用增加后的值；后缀自增运算符会先使用变量的值，然后再将变量的值增加1。在上面的程序中，m=++i表示先将i的值增加1，然后将增加后的值赋给m。n=j++表示先使用j的值，然后将j的值增加1。'}]"
    },
    {
        "sortId": 716,
        "id": "1336316219001225216",
        "title": "请输出郑州轻工业大学OJ平台网址",
        "content": "请输出郑州轻工业大学的OJ平台网址, 你可能不知道网址是什么，不要着急，慢慢往下看。\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n输出一行字符串为郑州轻工业大学OJ平台网址。\n\n### 输入样例:\n\n```in\n\n```\n\n### 输出样例:\n\n```out\nacm.zzuli.edu.cn\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'教学如何使用printf和scanf函数进行基本的输入输出操作。'}, {'name':'字符串处理','description':'教学如何使用字符串处理函数进行字符串的输入、输出、拼接、比较等操作。'}, {'name':'文件操作','description':'教学如何使用文件操作函数进行文件的读写操作。'}, {'name':'指针','description':'教学如何使用指针进行内存的动态分配、访问和操作。'}, {'name':'数组','description':'教学如何定义和使用数组进行数据的存储和处理。'}, {'name':'条件语句','description':'教学如何使用条件语句进行程序的分支控制。'}, {'name':'循环语句','description':'教学如何使用循环语句进行程序的重复执行。'}, {'name':'函数','description':'教学如何定义和调用函数进行程序的模块化设计。'}, {'name':'结构体','description':'教学如何定义和使用结构体进行复杂数据类型的定义和操作。'}, {'name':'指针与数组','description':'教学如何使用指针和数组进行复杂数据结构的定义和操作。'}, {'name':'递归','description':'教学如何使用递归进行程序的自我调用和问题的分解。'}, {'name':'位运算','description':'教学如何使用位运算进行二进制数的操作和位操作。'}, {'name':'动态内存分配','description':'教学如何使用动态内存分配函数进行内存的动态分配和释放。'}, {'name':'预处理指令','description':'教学如何使用预处理指令进行程序的预处理和宏定义。'}, {'name':'数据类型','description':'教学C语言的基本数据类型和数据类型的转换。'}, {'name':'指针与函数','description':'教学如何使用指针和函数进行函数指针的定义和调用。'}, {'name':'文件操作','description':'教学如何使用文件操作函数进行文件的读写操作。'}, {'name':'错误处理','description':'教学如何处理程序中的错误和异常情况。'}, {'name':'数据结构','description':'教学如何使用C语言实现常见的数据结构，如链表、栈、队列、树等。'}, {'name':'算法','description':'教学如何使用C语言实现常见的算法，如排序、查找、图算法等。'}, {'name':'多线程','description':'教学如何使用C语言实现多线程编程和线程同步。'}, {'name':'网络编程','description':'教学如何使用C语言进行网络编程和Socket编程。'}, {'name':'系统编程','description':'教学如何使用C语言进行系统编程和操作系统接口的调用。'}, {'name':'面向对象编程','description':'教学如何使用C语言实现面向对象编程的基本概念和技术。'}, {'name':'并发编程','description':'教学如何使用C语言进行并发编程和进程间通信。'}, {'name':'图形界面编程','description':'教学如何使用C语言进行图形界面编程和图形库的使用。'}, {'name':'嵌入式编程','description':'教学如何使用C语言进行嵌入式系统的编程和硬件接口的调用。'}, {'name':'编译原理','description':'教学C语言的编译原理和编译器的工作原理。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学C语言在操作系统中的应用和系统编程的基本概念。'}, {'name':'网络安全','description':'教学C语言在网络安全中的应用和常见的安全漏洞。'}, {'name':'软件工程','description':'教学C语言在软件工程中的应用和软件开发的基本流程。'}, {'name':'数据科学','description':'教学C语言在数据科学中的应用和数据分析的基本技术。'}, {'name':'人工智能','description':'教学C语言在人工智能中的应用和机器学习的基本算法。'}, {'name':'计算机图形学','description':'教学C语言在计算机图形学中的应用和图形渲染的基本原理。'}, {'name':'计算机网络','description':'教学C语言在计算机网络中的应用和网络协议的基本原理。'}, {'name':'数据库','description':'教学C语言在数据库中的应用和数据库管理的基本技术。'}, {'name':'操作系统','description':'教学"
    },
    {
        "sortId": 717,
        "id": "1335845689978601472",
        "title": "简单输入练习",
        "content": "本题目要求输出一条语句\"Hello C!\"。\n\n### 输入格式:\n\n此题无输入\n\n### 输出格式:\n\n本题目要求输出一条语句\"Hello C!\"。注意语句中的均为英文标点。\n\n### 输入样例:\n\n本题无输入\n\n```in\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nHello C!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'本知识点主要讲解如何使用printf函数进行输出操作。'}]"
    },
    {
        "sortId": 718,
        "id": "1335514277941112832",
        "title": "超级玛丽",
        "content": "超级玛丽是一个非常经典的游戏。现在请你用字符画的形式输出一个超级玛丽。\n\n### 输入格式:\n\n\n### 输出格式:\n\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n\n```out\n                ********\n               ************\n               ####....#.\n             #..###.....##....\n             ###.......######              ###            ###\n                ...........               #...#          #...#\n               ##*#######                 #.#.#          #.#.#\n            ####*******######             #.#.#          #.#.#\n           ...#***.****.*###....          #...#          #...#\n           ....**********##.....           ###            ###\n           ....****    *****....\n             ####        ####\n           ######        ######\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'字符画输出', 'description':'字符画输出是指通过字符组成的图案来展示图像或文字的一种方式。在C语言中，可以使用字符数组和循环结构来实现字符画的输出。'}]"
    },
    {
        "sortId": 719,
        "id": "1334165133890211840",
        "title": "I'm Feeling Lucky",
        "content": "A lucky day! The 6th China Jiliang University Programming Contest (Personal Contest) is coming soon, test your luck today!\n\nSystem will generate a random integer number between 1 and 10 (inclusive). And you should submit a program which will print one integer. If your number is equal to what system generated, an AC would be returned, or you would get a WA instead. \n\n### Input Specification:\n\nThere is no input in this problem. \n\n### Output Specification:\n\nPrint one integer end with a newline. \n\n### Sample Input:\n\nThere is no input in this problem. \n\n```in\n(no input)\n```\n\n### Sample Output:\n\nPlease note that the sample output is just for an example, it's probably not the correct answer of the problem. \n\n```out\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "53",
                        "name": "经典算法",
                        "isLeaf": false,
                        "enName": "Classical Algorithms"
                    },
                    {
                        "id": "58",
                        "name": "随机算法",
                        "isLeaf": true,
                        "enName": "Randomized Algorithms"
                    }
                ]
            }
        ],
        "res": "[{'name':'随机数生成'，'description':'本知识点主要讲解如何在C语言中生成随机数。在本题中，需要生成一个1到10之间的随机整数。可以使用rand()函数结合srand()函数来生成随机数。'}，{'name':'输入输出'，'description':'本知识点主要讲解C语言中的输入输出操作。在本题中，需要输出一个整数，可以使用printf()函数来实现。'}]"
    },
    {
        "sortId": 720,
        "id": "1334120809290838016",
        "title": "h0132. 钞票和硬币",
        "content": "读取一个带有两个小数位的浮点数，这代表货币价值。\n\n在此之后，将该值分解为多种钞票与硬币的和，每种面值的钞票和硬币使用数量不限，要求使用的钞票和硬币的数量尽可能少。\n\n钞票的面值是100,50,20,10,5,2。\n\n硬币的面值是1,0.50,0.25,0.10,0.05和0.01。\n\n### 输入格式:\n\n输入一个浮点数N(0≤N≤1000000.00)。\n\n### 输出格式:\n参照输出样例，输出每种面值的钞票和硬币的需求数量。\n### 输入样例:\n\n```in\n112.03\n```\n\n### 输出样例:\n\n```out\nNOTAS:\n1 nota(s) de R$ 100.00\n0 nota(s) de R$ 50.00\n0 nota(s) de R$ 20.00\n1 nota(s) de R$ 10.00\n0 nota(s) de R$ 5.00\n1 nota(s) de R$ 2.00\nMOEDAS:\n0 moeda(s) de R$ 1.00\n0 moeda(s) de R$ 0.50\n0 moeda(s) de R$ 0.25\n0 moeda(s) de R$ 0.10\n0 moeda(s) de R$ 0.05\n3 moeda(s) de R$ 0.01\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何读取输入和输出结果，包括浮点数的输入和输出。'}, {'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及浮点数和整数数据类型的区别。'}, {'name': '运算符', 'description': '学习如何使用算术运算符进行数值计算，包括加法、减法、乘法和除法。'}, {'name': '条件语句', 'description': '学习如何使用条件语句进行逻辑判断，包括if语句和else语句。'}, {'name': '循环语句', 'description': '学习如何使用循环语句进行重复执行，包括for循环和while循环。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的索引和遍历。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的拼接和比较。'}, {'name': '函数', 'description': '学习如何声明和使用函数，以及函数的参数和返回值。'}, {'name': '文件操作', 'description': '学习如何打开、读取和写入文件，以及文件指针的移动和关闭。'}]"
    },
    {
        "sortId": 721,
        "id": "1333733993232510976",
        "title": "h0131. 钞票",
        "content": "在这个问题中，你需要读取一个整数值并将其分解为多张钞票的和，每种面值的钞票可以使用多张，并要求所用的钞票数量尽可能少。\n\n请你输出读取值和钞票清单。\n\n钞票的可能面值有100,50,20,10,5,2,1。\n\n### 输入格式:\n\n输入一个整数n(0<n<1000000)。\n\n### 输出格式:\n\n参照输出样例，输出读取数值以及每种面值的钞票的需求数量。\n\n### 输入样例:\n\n```in\n326\n```\n\n### 输出样例:\n\n```out\n326\n3 nota(s) de R$ 100,00\n0 nota(s) de R$ 50,00\n1 nota(s) de R$ 20,00\n0 nota(s) de R$ 10,00\n1 nota(s) de R$ 5,00\n0 nota(s) de R$ 2,00\n1 nota(s) de R$ 1,00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'读取整数值','description':'在这个问题中，你需要读取一个整数值并将其分解为多张钞票的和。'},{'name':'钞票清单','description':'输出读取数值以及每种面值的钞票的需求数量。'},{'name':'整数运算','description':'在程序中进行整数的加减乘除运算。'},{'name':'条件语句','description':'使用条件语句判断钞票的面值和数量。'},{'name':'循环语句','description':'使用循环语句重复执行读取和输出操作。'},{'name':'数组','description':'使用数组存储钞票的面值和数量。'},{'name':'字符串格式化','description':'使用字符串格式化输出读取数值和钞票清单。'}]"
    },
    {
        "sortId": 722,
        "id": "1332451634549927936",
        "title": "计算两个数的和",
        "content": "本题目要求读入2个整数A和B，两数以英文逗号分隔开，然后输出它们的和。\n\n### 输入格式:\n\n输入在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n在一行中输出A+B的值。\n\n### 输入样例:\n\n\n```in\n1,6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n7\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'输入输出'，'description':'C语言中的输入和输出操作，包括读取和输出整数、字符等。'}, {'name':'运算符'，'description':'C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'控制流程'，'description':'C语言中的控制流程，包括条件语句、循环语句等。'}, {'name':'函数'，'description':'C语言中的函数的定义和使用。'}, {'name':'数组'，'description':'C语言中的数组的定义和使用。'}, {'name':'字符串'，'description':'C语言中的字符串的定义和使用。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括打开文件、读写文件等。'}]"
    },
    {
        "sortId": 723,
        "id": "1330693445215105024",
        "title": "观察实数零的符号记录下面程序的输出结果。```c#include <stdio.h>int main(){    double ",
        "content": "观察实数零的符号\n\n记录下面程序的输出结果。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n    double x = 0.0, y = -x;\n    printf(\"%g\\n\", x);\n    printf(\"%g\\n\", y);\n    return 0;\n}\n```\n\n输出结果：\n\n```\n@@[](1)\n@@[](1)\n```\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '实数零的符号', 'description': '实数零的符号是指实数的正负性质。在C语言中，实数零的符号可以通过赋值和取反操作来确定。当一个实数变量赋值为0时，它的符号为正。当一个实数变量取反后，它的符号会改变。在上述程序中，变量x被赋值为0.0，所以它的符号为正。变量y的赋值表达式为-y，即取变量x的相反数，所以它的符号为负。'}]"
    },
    {
        "sortId": 724,
        "id": "1329004110887383040",
        "title": "C语言中，操作数必须是整型数的运算符是( )",
        "content": "C语言中，操作数必须是整型数的运算符是( )\n@[](2)\n\nA. *\nB. /\nC. %\nD. &&",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整型数运算符', 'description': '整型数运算符是指操作数必须是整型数的运算符。在C语言中，整型数运算符包括：*（乘法运算符）、/（除法运算符）和%（取余运算符）。'}]"
    },
    {
        "sortId": 725,
        "id": "1329003406869262336",
        "title": "设有int ii,ij,ik;则表达式ii=1,ij=2,ik=3,ii>ij && ik的值为（ ）",
        "content": "设有int ii,ij,ik;则表达式ii=1,ij=2,ik=3,ii>ij && ik的值为（ ）\n@[](2)\n\nA. 1\nB. 0\nC. 3\nD. 2",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有&&（与）、||（或）、！（非）。在C语言中，逻辑运算符的优先级比较低，需要注意运算顺序。本题中的表达式ii>ij && ik使用了逻辑与运算符&&，表示当ii大于ij且ik不为0时，表达式的值为真，即为1。'}]"
    },
    {
        "sortId": 726,
        "id": "1328999689193385984",
        "title": "C语言的长整型数值在计算机中所占的字节个数是（ ）",
        "content": "C语言的长整型数值在计算机中所占的字节个数是（ ）\n\n@[](2)\n\nA. 1\nB. 2\nC. 3\nD. 4",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'C语言的长整型数值在计算机中所占的字节个数', 'description': '长整型数值在计算机中所占的字节个数是一个重要的概念，学生需要了解不同数据类型在内存中的存储方式，以及不同数据类型所占的字节个数。这个问题考察了学生对长整型数值在计算机中所占字节个数的理解。'}]"
    },
    {
        "sortId": 727,
        "id": "1328914971043164160",
        "title": "C语言中，整型数据在内存中的存储形式是（ ）",
        "content": "C语言中，整型数据在内存中的存储形式是（ ）\n\n@[](2)\n\nA. ASCII码\nB. 原码\nC. 反码\nD. 补码",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整型数据的存储形式', 'description': '整型数据在内存中的存储形式包括ASCII码、原码、反码和补码。'}]"
    },
    {
        "sortId": 728,
        "id": "1328913928502759424",
        "title": "下列合法的用户标识符为（ ）",
        "content": "下列合法的用户标识符为（ ）\n@[](2)\n\nA. _4sum\nB. float\nC. -fx_1\nD. #dtotal",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '用户标识符', 'description': '用户标识符是用来标识变量、函数、数组等在程序中的名称。合法的用户标识符必须满足以下规则：1. 以字母或下划线开头；2. 只能包含字母、数字和下划线；3. 区分大小写。在给变量、函数等命名时，需要遵守这些规则，否则会导致编译错误。'}]"
    },
    {
        "sortId": 729,
        "id": "1327435207198527488",
        "title": "判断键盘输入的两个整数大小。",
        "content": "本题目要求读入2个整数A和B，然后比较它们的大小。\n\n### 输入格式:\n\n键盘输入时在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n对每一组输入，在一行中将较大的数排列在前，较的小数排列在后输出，中间以一个空格分隔。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n-18 209\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n209 -18\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'比较大小'，'description':'本题目要求读入2个整数A和B，然后比较它们的大小。'}]"
    },
    {
        "sortId": 730,
        "id": "1327240836725501952",
        "title": "大写字母转换为小写字母",
        "content": "编程从键盘输入一个大写英文字母，将其转换为小写英文字母，将转换后的小写英文字母及其十进制的ASCII码值显示到屏幕上。如果输入的不是大写英文字母，则输出Input Data error!。\n\n### 输入格式:\n\n从键盘输入一个大写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的小写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n### 输入样例:\n\n\n\n```in\nB\n```\n\n### 输出样例:\n\n \n\n```out\nb,98\n```\n### 输入样例:\n\n\n\n```in\nb\n```\n\n### 输出样例:\n\n \n\n```out\nInput Data error!\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'将大写字母转换为小写字母的方法是通过将大写字母的ASCII码值加上32来得到对应的小写字母的ASCII码值。'}]"
    },
    {
        "sortId": 731,
        "id": "1326903961519280128",
        "title": "跳台阶风波",
        "content": "近年来， 跳台阶越来越流行， 很多大学生天天练习跳台阶， 有的可以一次最高跳 2 级， 有的可以最高跳 3 级\n小刘是我们学校的跳台阶冠军，一次最高可以眺 n 级, 但是小刘不想一次跳完， 他想知道现在知道他最多有多少种方法可以跳完 n 级台阶\n\n### 输入格式:\n\n输入一个正整数 n （ n > 0 , n 在整型范围内 ）\n\n### 输出格式:\n\n输出 n 级台阶对应的方案数, 由于答案可能很大， 请对 1e9 + 7 取模\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'递归', 'description':'递归是一种解决问题的方法，它把一个问题分解为越来越小的子问题，直到问题的规模小到可以被直接解决。在本题中，可以使用递归的方法来求解小刘跳完n级台阶的方案数。'},\n{'name':'动态规划', 'description':'动态规划是一种解决多阶段决策问题的方法，它将问题分解为多个阶段，并且每个阶段的决策依赖于之前阶段的决策结果。在本题中，可以使用动态规划的方法来求解小刘跳完n级台阶的方案数。'},\n{'name':'取模运算', 'description':'取模运算是一种数学运算，它将一个数除以另一个数，并返回余数。在本题中，由于答案可能很大，需要对最终的方案数取模，以保证结果在可表示的范围内。'}]"
    },
    {
        "sortId": 732,
        "id": "1326430373448151040",
        "title": "三位数逆序输出",
        "content": "从键盘输入一个三位数num，将其逆序输出。\n\n### 输入格式:\n\n一个三位数num（100<=num<1000）\n\n### 输出格式:\n\nnum的逆序，可能不是三位数了（如果num=123,逆序为321；如果num为800，逆序为8）\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n123\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n321\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量，以及变量的命名规则。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整型、字符型等，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习各种运算符的使用，如算术运算符、关系运算符等。'}, {'name': '控制语句', 'description': '学习如何使用条件语句和循环语句控制程序的执行流程。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的特点和用法。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的特点和常用操作。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针的特点和用法。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件的读写位置控制。'}]"
    },
    {
        "sortId": 733,
        "id": "1326366016722849792",
        "title": "爱迪生的名言",
        "content": "爱迪生说：“天才是百分之一的灵感和百分之九十九的汗水。”\n\n请编写程序，输出这句名言。\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\nThomas Edison said, \"Genius is 1% inspiration and 99% perspiration!\"\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句'，'description':'使用printf函数输出指定的字符串'}]"
    },
    {
        "sortId": 734,
        "id": "1325831460154982400",
        "title": "“剁手”",
        "content": "ziquan非常喜欢网购，在一家店铺她看中了一件衣服，她了解到，如果今天是“双11”（11月11日）则这件衣服打7.5折，“双12” （12月12日）则这件衣服打8.5折，如果有优惠券可以额外减75元（优惠券只能在双11或双12使用），求ziquan最终所花的钱数。\n\n### 输入格式:\n\n一行，四个数字，第一个数表示ziquan看中的衣服价格，第二和第三个整数分别表示当天的月份、当天的日期、第四个整数表示是否有优惠券（有优惠券用1表示，无优惠券用0表示）。\n\n### 输出格式:\n\n一行，ziquan实际花的钱数（保留两位小数）。（提示：不要指望商家倒找你钱）\n\n### 输入样例1:\n\n```in\n1000.0 11 11 1\n```\n\n### 输出样例1:\n\n```out\n675.00\n```\n### 输入样例2:\n\n```in\n999.8 12 12 0\n```\n\n### 输出样例2:\n\n```out\n849.83\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'条件语句'，'description':'条件语句是根据条件的真假来执行不同的代码块，常用的条件语句有if语句和switch语句。在这个题目中，可以使用if语句来判断是否是双11或双12，从而确定打折的折扣率。'}，{'name':'运算符'，'description':'运算符是用来进行各种运算操作的符号，常见的运算符有算术运算符、关系运算符、逻辑运算符等。在这个题目中，可以使用算术运算符来计算打折后的价格和优惠券的减免金额。'}]"
    },
    {
        "sortId": 735,
        "id": "1325150789203877888",
        "title": "实数的值域范围",
        "content": "实数的值域范围\n\n除实数零以外，非零实数(规格化数)的值域范围如下：\n\n<table>\n<tr>\n<td align=\"center\"><b>实数</b></td>\n<td align=\"center\"><b>字节数</b></td>\n<td align=\"center\"><b>绝对值范围</b></td>\n<td align=\"center\"><b>有效数字位数</b></td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\"></td>\n<td align=\"center\"> ~ </td>\n<td align=\"center\"> ~ </td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\"></td>\n<td align=\"center\"> ~ </td>\n<td align=\"center\"> ~ </td>\n</tr>\n</table>\n\n---\n\n注：\n- 请填写十进制数。\n- 绝对值的最小值和最大值用十进制科学计数法表示(只保留3位有效数字)。\n- 有效数字位数填折算成十进制的有效数字位数。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'实数的值域范围'，'description':'实数的值域范围是指除实数零以外，非零实数的取值范围。在C语言中，float类型和double类型分别表示单精度浮点数和双精度浮点数。float类型占用4个字节，double类型占用8个字节。对于float类型，其绝对值范围和有效数字位数取决于具体的实现。对于double类型，其绝对值范围和有效数字位数也取决于具体的实现。在实际编程中，我们需要根据具体的需求选择合适的数据类型来表示实数，以保证精度和范围的要求。'}]"
    },
    {
        "sortId": 736,
        "id": "1324225848618991616",
        "title": "爱的宣言(填空)",
        "content": "在情人节这一天，鼓起勇气向你的心上人说：\n\n```\nI♥U\n```\n\n下面的程序输出爱的宣言，请在空白处填写适当内容完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tprintf( __________ );\n\treturn 0;\n}\n```\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```\nI♥U\n\n```\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n相关习题：对你爱不完。\n\n```out\nI\u0003U\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'printf函数是C语言中用于输出的函数，可以将指定的内容输出到屏幕上。在这道题中，需要使用printf函数输出爱的宣言。'}]"
    },
    {
        "sortId": 737,
        "id": "1324189888032235520",
        "title": "“经济”",
        "content": "“经济”\n\n请查找汉字“经”、“济”的区位码，在程序的空白处填写适当内容，输出这两个字。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tputchar(  );\n\tputchar(  );\n\tputchar(  );\n\tputchar(  );\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\n\n```\n\n#### 输出样例\n\n```out\n经济\n\n```\n\n---\n\n[点击此处查看 GB2312-80 汉字区位码表](https://pan.baidu.com/s/1nQVHaRmfNte7a9nWjv1S6A)\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '字符输出', 'description': '字符输出是C语言中的基本操作之一，通过putchar函数可以将字符输出到屏幕上。在本题中，需要使用putchar函数输出汉字“经”和“济”。'}, {'name': 'ASCII码', 'description': 'ASCII码是一种字符编码标准，用于将字符映射为对应的整数值。在本题中，需要了解字符“经”和“济”的ASCII码值，以便正确地使用putchar函数输出。'}, {'name': '注释', 'description': '注释是C语言中的一种语法元素，用于对代码进行解释说明。在本题中，需要了解如何使用注释来提供GB2312-80汉字区位码表的链接。'}]"
    },
    {
        "sortId": 738,
        "id": "1323271056006529024",
        "title": "扩展水仙花数",
        "content": "扩展水仙花数是指一个N位正整数（N>=3），它的每个位上的数字的N次方之和等于它本身。例 如：153 =$1^3$\\+ $5^3$\\+ $3^3$。 要求编写程序，输出所有扩展水仙花数。\n\n### 输入格式:\n\n首先输入一个整数T（1<=T<10），表示测试组数；每组测试在一行上输入一个正整数N（3<=N<=7）。 \n\n### 输出格式:\n\n对于每组测试，按递增顺序输出所有扩展水仙花数，每个数字占一行。\n\n### 输入样例:\n\n```in\n1\n3\n```\n\n### 输出样例:\n\n```out\n153\n370\n371\n407\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历所有可能的N位正整数。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断一个N位正整数是否为扩展水仙花数。'}, {'name':'数学运算'，'description':'数学运算是C语言中的一种基本操作，用于进行数值计算。在本题中，可以使用数学运算来计算一个N位正整数的每个位上的数字的N次方之和。'}]"
    },
    {
        "sortId": 739,
        "id": "1323252863078719488",
        "title": "今天后的第n天是星期几",
        "content": "从键盘上输入今天是星期几，和一个数字$n$，计算今天后第$n$天是星期几。$n$可以是负值，当$n$是负值时表示的是今天之前的第$n$天。\n\n### 输入格式:\n\n从键盘上输入两个整数，两个整数之间用空格间隔。第一个整数表示今天是星期几，第二个整数表示$n$天后，$n$可以为负，负数表示$n$天前。\n\n### 输出格式:\n\n输出一个1到7之间的整数，`7`表示星期天，`1`表示星期一，...... ,`6`表示星期六。\n\n### 输入样例1:\n\n```in\n3 2\n```\n\n### 输出样例1:\n\n```out\n5\n```\n### 输入样例2:\n\n```in\n3 4\n```\n\n### 输出样例2:\n\n```out\n7\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘上输入数据，并将结果输出到屏幕上。'}, {'name':'变量','description':'学习如何定义和使用变量来存储数据。'}, {'name':'运算符','description':'学习如何使用运算符进行数值计算和逻辑运算。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'循环语句','description':'学习如何使用循环语句来重复执行一段代码块。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、浮点数、字符等，并了解它们的特点和用法。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数和返回值的使用。'}, {'name':'数组','description':'学习如何定义和使用数组来存储多个相同类型的数据。'}, {'name':'指针','description':'学习如何使用指针来操作内存中的数据。'}, {'name':'字符串','description':'学习如何定义和使用字符串，并了解字符串的常用操作。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件，以及文件指针的使用。'}]"
    },
    {
        "sortId": 740,
        "id": "1323248398619598848",
        "title": "得分",
        "content": "学院乒乓球循环赛开始了！每场三局两胜（因需打满三局，所以可能出现0:3或3:0的情况），每人胜一场得3分，败一场得1分。现在告诉你小明参加的比赛场次及他每场与他人的比赛情况，请你计算他的得分。也许你没玩过乒乓球，但算个分应该难不倒你。\n\n### 输入格式:\n\n首先输入一个整数T（1<=T<=10），表示测试组数。\\\n每组测试首先在一行上输入一个整数m(1<m<13)；然后输入m行，每行2个整数a, b (0<=a,b<=3)，表示该场比赛，小明与对手的比分是a:b，若a大于b则小明胜，否则对手胜。\n\n### 输出格式:\n\n对于每组测试，在一行上输出小明的得分。\n\n### 输入样例:\n\n```in\n1\n3\n2 1\n1 2\n0 3\n```\n\n### 输出样例:\n\n```out\n5\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'循环结构'，'description':'循环结构是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。'}，{'name':'条件判断'，'description':'条件判断是根据给定的条件来决定程序的执行路径。在C语言中，常用的条件判断语句有if语句和switch语句。'}，{'name':'变量和数据类型'，'description':'变量是用来存储数据的内存位置，每个变量都有一个特定的数据类型，包括整型、浮点型、字符型等。在C语言中，可以使用关键字来声明变量，并且可以对变量进行赋值和操作。'}，{'name':'运算符'，'description':'运算符是用来进行各种运算操作的符号，包括算术运算符、关系运算符、逻辑运算符等。在C语言中，可以使用运算符来进行各种数学运算和逻辑判断。'}，{'name':'数组'，'description':'数组是一种存储相同类型数据的集合，可以通过下标来访问数组中的元素。在C语言中，可以使用数组来存储一组数据，并且可以通过循环来遍历数组中的元素。'}，{'name':'函数'，'description':'函数是一段完成特定任务的代码块，可以通过函数名来调用并执行函数。在C语言中，可以使用函数来封装一段可重用的代码，并且可以通过参数和返回值来传递数据。'}]"
    },
    {
        "sortId": 741,
        "id": "1323246198426132480",
        "title": "连年",
        "content": "给你一个数年份n，把1到n的每个年份都写出来连在一起，最后得到的是几位数？例如n=10，得到的数字是12345678910，因此是11位数。\n\n### 输入格式:\n\n首先输入一个整数T（1<=T<=10），表示测试组数。\\\n每组测试输入一个整数n(1<=n<=10000)。\n\n### 输出格式:\n\n对于每组测试，在一行上输出把1到n的每个年份都写出来连在一起，最后得到的数据的位数。\n\n### 输入样例:\n\n```in\n2\n10\n1\n```\n\n### 输出样例:\n\n```out\n11\n1\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以使用for循环或while循环来实现。在这道题中，可以使用循环来依次将1到n的每个年份都写出来连在一起。'}, {'name': '字符串拼接', 'description': '字符串拼接是将多个字符串连接在一起形成一个新的字符串。在这道题中，可以使用字符串拼接的方法将1到n的每个年份都连接在一起，然后计算最后得到的字符串的位数。'}, {'name': '整数转字符串', 'description': '整数转字符串是将一个整数转换为对应的字符串表示。在这道题中，可以将每个年份转换为字符串后再进行字符串拼接，然后计算最后得到的字符串的位数。'}]"
    },
    {
        "sortId": 742,
        "id": "1322833669459755008",
        "title": "本题要求编写程序，输入一个三位数，输出其个位数字、十位数字和百位数字。",
        "content": "本题要求编写程序，输入一个三位数，输出其个位数字、十位数字和百位数字。\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n152\n```\n\n### 输出样例:\n\n\n```out\n152 = 2 + 5*10 + 1*100\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'介绍C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'输入输出'，'description':'介绍C语言中的输入输出函数，如scanf和printf。'}, {'name':'运算符'，'description':'介绍C语言中的运算符，包括算术运算符、赋值运算符等。'}, {'name':'控制流程'，'description':'介绍C语言中的控制流程，包括条件语句、循环语句等。'}, {'name':'数组'，'description':'介绍C语言中的数组，包括一维数组、多维数组等。'}, {'name':'函数'，'description':'介绍C语言中的函数，包括函数的定义、函数的调用等。'}, {'name':'指针'，'description':'介绍C语言中的指针，包括指针的定义、指针的运算等。'}, {'name':'字符串'，'description':'介绍C语言中的字符串，包括字符串的定义、字符串的操作等。'}, {'name':'文件操作'，'description':'介绍C语言中的文件操作，包括文件的打开、文件的读写等。'}]"
    },
    {
        "sortId": 743,
        "id": "1322047266509512704",
        "title": "汉字输出练习：显示“ 编程日当午，内心泛苦楚。 陷阱如此多，心酸向谁说！”",
        "content": "本题目要求打印汉字。（知识点：注意中英文切换。printf的双撇号应英文状态输入。逗号、叹号为中文状态输入。结尾无需换行。）\n\n### 输入格式:\n\n本题无需输入。\n\n### 输出格式:\n结尾不要换行。\n\n### 输入样例:\n\n```in\n```\n\n### 输出样例:\n\n```out\n编程日当午，内心泛苦楚。\n陷阱如此多，心酸向谁说！\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'printf函数是C语言中用于输出信息的函数，可以输出各种类型的数据，包括字符串、整数、浮点数等。在本题中，使用printf函数输出汉字。'}, {'name':'中英文切换','description':'在使用printf函数输出汉字时，需要注意中英文切换。在双撇号（\"\"）中输入英文字符，在逗号、叹号等标点符号处输入中文字符。'}, {'name':'换行','description':'在本题中，输出的汉字不需要换行，即结尾无需换行符。'}]"
    },
    {
        "sortId": 744,
        "id": "1321851086127194112",
        "title": "你今天刷快手了吗",
        "content": "快手是比较火的一款短视频app软件，里面每天都会更新一些有趣的视频，因此它的出现成为了我们打发时间的一种方式，但是有些同学进去看到有趣的视频就会停不下来，导致沉迷于此。当你进入和退出快手app的时候它的后台都有一个记录数据，即进入快手的时间和退出的时间。你的班主任想知道你们班每位同学每天刷快手的情况，于是就向快手平台要了你们班的后台记录数据，但是这些数据都是零散的，你的班主任让你帮他将每一个同学刷视频的时间按从小到大排序。\n\n### 输入格式:\n\n在第一行给两个整数n和m（1≤n≤1000，0≤m≤10^4），n代表你们班上的人数，m代表数据的条数，接下来m行每行给一组数据，格式为：学号 进入时间 退出时间，你们班的学号为从0~n-1编号并且为三位数。题目保证给出的所有时间均是同一天之内的。\n\n### 输出格式:\n\n将每个同学一天中刷快手的总时间从小到大排序输出（若出现并列情况，则按学号从小到大输出），输出格式为：学号 时间，最后输出最长的时间。\n\n注：输出和输出的学号为三位数(不足三位补前导0)，输出的时间格式为：00:00:00\n\n### 输入样例1:\n\n```in\n3 5\n000 19:48:30 19:59:24\n002 18:45:40 19:01:20\n000 21:32:28 21:53:30\n001 12:30:16 12:43:19\n001 13:05:36 13:37:33\n```\n\n### 输出样例1:\n\n```out\n001 00:45:00\n000 00:31:56\n002 00:15:40\n```\n\n\n### 输入样例2:\n\n```in\n3 5\n000 12:03:31 12:13:12\n002 12:00:28 12:54:41\n001 16:04:44 16:34:47\n001 07:30:29 07:54:39\n000 23:17:18 23:29:33\n```\n\n### 输出样例2:\n\n```out\n001 00:54:13\n002 00:54:13\n000 00:21:56\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "37",
                        "name": "排序",
                        "isLeaf": false,
                        "enName": "Sorting"
                    },
                    {
                        "id": "45",
                        "name": "快速排序",
                        "isLeaf": true,
                        "enName": "Quick Sort"
                    }
                ]
            }
        ],
        "res": "[{'name':'数组', 'description':'数组是一种存储多个相同类型数据的连续内存空间的数据结构，可以通过下标访问和修改数组中的元素。在本题中，可以使用数组来存储每个同学刷快手的总时间。'}, {'name':'排序算法', 'description':'排序算法是将一组数据按照一定的规则进行排列的算法。在本题中，可以使用排序算法对每个同学的刷快手总时间进行排序。'}, {'name':'字符串处理', 'description':'字符串处理是对字符串进行各种操作的技术。在本题中，需要对输入的时间进行字符串处理，以获取每个同学刷快手的总时间。'}, {'name':'时间计算', 'description':'时间计算是对时间进行各种运算的技术。在本题中，需要对每个同学的进入时间和退出时间进行计算，以获取刷快手的总时间。'}]"
    },
    {
        "sortId": 745,
        "id": "1319979732403343360",
        "title": "容斥原理求阴影部分面积",
        "content": "容斥原理是一种重要的组合数学方法，可以让你求解任意大小的集合，或者计算复合事件的概率。它可以描述为要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。\n\n![5.png](~/5711f0ca-02c7-430b-96e2-abf9157e6623.png)\n![6.png](~/ae56a1c2-0ee6-4ebf-99ef-b1ee7b8b9440.png)\n\n如上图所示，  若已知集合A,B,那么|A∪B| = |A| + |B |- |A∩B|;\n                      若已知集合A,B,C,那么|A∪B∪C| = |A| + |B| + |C| - |A∩B| - |B∩C| - |C∩A| + |A∩B∩C|。现已知矩形ABCD，以AB为半径作扇形交AD的延长线于F，以CB为半径作扇形交CD于F，如下图所示，已知矩形的长宽分别为X,Y求阴影部分的面积。\n\n![7.png](~/690a83f2-f404-48c3-bb42-78a851fd40b4.png)\n\n注：1.扇形的面积公式：S = nπr^2 / 360 = Lr / 2(其中n为扇形圆心角度数，r为扇形半径，L为弧长，π = 3.1415926)\n   2.矩形的面积公式：S = ab(其中a,b分别为长，宽)\n                                \n### 输入格式:\n\n输入在一行中给出两个不超过100的正实数X和Y，并且保证X >= Y >= 1。\n\n### 输出格式:\n\n在一行中输出阴影部分的面积，结果保留两位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n6 5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n17.91\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "316",
                        "name": "中学信息学",
                        "isLeaf": false,
                        "enName": "Middle School Informatics"
                    },
                    {
                        "id": "319",
                        "name": "相关数学知识和技巧",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "320",
                        "name": "集合运算",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'容斥原理','description':'容斥原理是一种重要的组合数学方法，可以让你求解任意大小的集合，或者计算复合事件的概率。它可以描述为要计算几个集合并集的大小，我们要先将所有单个集合的大小计算出来，然后减去所有两个集合相交的部分，再加回所有三个集合相交的部分，再减去所有四个集合相交的部分，依此类推，一直计算到所有集合相交的部分。'}, {'name':'矩形面积公式','description':'矩形的面积公式：S = ab(其中a,b分别为长，宽)'}]"
    },
    {
        "sortId": 746,
        "id": "1319223837012643840",
        "title": "数学函数调用",
        "content": "编程完成下面公式计算。\ny=sin(x)+cos(x)\n\n### 输入格式:\n\n输入一个实数。\n\n### 输出格式:\n\n输出按公式运算的结果，保留两位小数。\n\n### 输入样例:\n\n\n```in\n1.5\n```\n\n### 输出样例:\n\n\n```out\n1.07\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 80,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数学函数','description':'数学函数是C语言中的一种常用函数，用于进行数学运算。常见的数学函数包括sin、cos等。在本题中，需要使用sin和cos函数来计算给定实数的公式结果。'}]"
    },
    {
        "sortId": 747,
        "id": "1319212533883457536",
        "title": "输入数据范围的简单判断",
        "content": "输入一个三位整数，按照对称原则扩充为5位整数。\n\n### 输入格式:\n\n输入一个三位整数。\n注意：如果输入的不是三位数（两位或者四位）则不处理，没有任何输出。\n### 输出格式:\n\n当输入三位整数时则输出一个5位整数，将这个三位数的前后各增加一位，分别复制三位数的百位和个位。\n当输入数据不是三位时，没有输出信息。\n\n### 输入样例:\n\n\n\n```in\n123\n```\n\n### 输出样例:\n\n\n```out\n11233\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 50,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何进行输入和输出操作，包括读取输入数据和输出结果。'}, {'name':'数据类型','description':'学习不同的数据类型，如整数、浮点数、字符等，并了解它们的特点和使用方法。'}, {'name':'条件语句','description':'学习如何使用条件语句进行判断和控制程序的执行流程。'}, {'name':'循环语句','description':'学习如何使用循环语句进行重复执行某段代码的操作。'}, {'name':'字符串处理','description':'学习如何处理字符串，包括字符串的输入、输出、拼接等操作。'}, {'name':'数学运算','description':'学习如何进行数学运算，包括加减乘除、取余等操作。'}, {'name':'变量和赋值','description':'学习如何定义变量和进行赋值操作，以及变量的作用和使用方法。'}, {'name':'函数和模块','description':'学习如何定义和调用函数，以及如何使用模块进行代码的组织和复用。'}, {'name':'数组和指针','description':'学习如何定义和使用数组和指针，以及它们在C语言中的特点和应用。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作，包括打开文件、读取文件内容、写入文件等操作。'}, {'name':'错误处理','description':'学习如何处理程序中可能出现的错误，包括异常处理、错误提示等操作。'}]"
    },
    {
        "sortId": 748,
        "id": "1319199872181456896",
        "title": "格式化输出",
        "content": "定义两个整型变量，键盘输入数据，然后分行输出求和，乘积。\n\n### 输入格式:\n\n键盘输入2个整数，逗号分隔。\n\n### 输出格式:\n\n第1行输出两个数的和，第二行输出两个数相乘的结果\n\n### 输入样例:\n\n\n```in\n3,5\n```\n\n### 输出样例:\n\n\n```out\n3+5=8\n3*5=15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 60,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量定义与输入输出'，'description':'学习如何定义变量以及如何从键盘输入数据和输出数据'}，{'name':'算术运算'，'description':'学习如何进行加法和乘法运算'}]"
    },
    {
        "sortId": 749,
        "id": "1319186133654900736",
        "title": "数据类型转换",
        "content": "本题目要求定义一个float类型变量，键盘输入大于0且小于100的实数，拆分成整数部分和小数部分。输出乘积\n\n### 输入格式:\n\n输入一个正的实数。\n\n### 输出格式:\n\n拆分成整数部分和小数部分，输出乘积，保留两位小数。\n\n### 输入样例:\n\n\n```in\n12.15\n```\n\n### 输出样例:\n\n\n```out\n1.80\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 80,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'float类型变量','description':'float类型变量用于存储带有小数点的实数。'}, {'name':'键盘输入','description':'键盘输入是指通过键盘输入数据。'}, {'name':'整数部分和小数部分','description':'整数部分是指实数的整数部分，小数部分是指实数的小数部分。'}, {'name':'乘积','description':'乘积是指两个或多个数相乘的结果。'}, {'name':'保留两位小数','description':'保留两位小数是指将小数部分四舍五入到小数点后两位。'}]"
    },
    {
        "sortId": 750,
        "id": "1318936938914189312",
        "title": "读入一个2位的正整数，输出该数的各位数字的和与积。",
        "content": "本题目要求读入1个2位的正整数，输出该数的各位数字的和与积。\n\n### 输入格式:\n\n输入一个10-99之间的数。例如：56\n\n### 输出格式:\n\n在一行中按输出样例的格式输出十位数字与个位数字的和、积；注意逗号后无空格。\n\n### 输入样例:\n\n```in\n56\n```\n\n### 输出样例:\n\n```out\ns is 11,p is 30\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量与数据类型', 'description': '教学内容包括变量的定义、数据类型的分类和使用，以及变量的命名规则和命名规范。'}, {'name': '输入与输出', 'description': '教学内容包括使用scanf函数进行输入，使用printf函数进行输出，以及格式化输出的使用。'}, {'name': '运算符与表达式', 'description': '教学内容包括算术运算符、赋值运算符、关系运算符、逻辑运算符等的使用，以及表达式的构建和求值。'}, {'name': '条件语句', 'description': '教学内容包括if语句、if-else语句、switch语句等的使用，以及条件表达式的构建和求值。'}, {'name': '循环语句', 'description': '教学内容包括while循环、do-while循环、for循环等的使用，以及循环控制语句的使用。'}, {'name': '函数', 'description': '教学内容包括函数的定义、函数的调用、函数的参数传递、函数的返回值等。'}, {'name': '数组', 'description': '教学内容包括数组的定义、数组的初始化、数组的访问、多维数组等。'}, {'name': '指针', 'description': '教学内容包括指针的定义、指针的初始化、指针的运算、指针与数组的关系等。'}, {'name': '字符串', 'description': '教学内容包括字符串的定义、字符串的输入输出、字符串的比较、字符串的拼接等。'}, {'name': '文件操作', 'description': '教学内容包括文件的打开、文件的读写、文件的关闭等。'}]"
    },
    {
        "sortId": 751,
        "id": "1318871866133041152",
        "title": "输入长、宽、高，输出长方体的体积。程序中用到的数据类型均为double类型。",
        "content": "\n\n### 输入样例:\n\n\n```in\n1.2,4.3,6.4\n```\n\n### 输出样例:\n\n\n```out\n33.02\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量声明和赋值', 'description': '教学内容包括变量的声明和赋值操作，学生需要了解如何声明变量以及如何给变量赋值。'}, {'name': '数据类型', 'description': '教学内容包括C语言中的基本数据类型，如整型、浮点型、字符型等，学生需要了解不同数据类型的特点和使用方法。'}, {'name': '运算符', 'description': '教学内容包括C语言中的各种运算符，如算术运算符、关系运算符、逻辑运算符等，学生需要了解运算符的优先级和使用方法。'}, {'name': '控制结构', 'description': '教学内容包括C语言中的控制结构，如条件语句、循环语句等，学生需要了解控制结构的语法和使用方法。'}, {'name': '数组', 'description': '教学内容包括C语言中的数组，学生需要了解如何声明和使用数组，以及数组的特点和限制。'}, {'name': '函数', 'description': '教学内容包括C语言中的函数，学生需要了解如何声明和调用函数，以及函数的参数传递和返回值。'}, {'name': '指针', 'description': '教学内容包括C语言中的指针，学生需要了解指针的概念和使用方法，以及指针和数组、指针和函数的关系。'}, {'name': '文件操作', 'description': '教学内容包括C语言中的文件操作，学生需要了解如何打开、读写和关闭文件，以及文件指针的使用方法。'}, {'name': '字符串操作', 'description': '教学内容包括C语言中的字符串操作，学生需要了解如何声明和使用字符串，以及字符串的常见操作和函数。'}, {'name': '结构体', 'description': '教学内容包括C语言中的结构体，学生需要了解如何声明和使用结构体，以及结构体的成员和嵌套结构体的使用。'}]"
    },
    {
        "sortId": 752,
        "id": "1318439453468774400",
        "title": "printf练习：打印C语言最常见的4种数据类型关键字int float double char，关键字用空格隔开，结尾注意不输出换行。",
        "content": "请打印C语言中最常见的4种数据类型对应的关键字，用空格分隔开。\n\n\n### 输入格式:\n\n无输入。\n\n### 输出格式:\n\n空格隔开4个关键字。\n\n输入样例:\n在这里给出一组输入。例如：\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nint float double char\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型关键字'，'description':'C语言中有四种常见的数据类型，分别是int、float、double和char。int用于表示整数类型的数据，float用于表示单精度浮点数类型的数据，double用于表示双精度浮点数类型的数据，char用于表示字符类型的数据。在C语言中，这四种数据类型都有对应的关键字，分别是int、float、double和char。'}]"
    },
    {
        "sortId": 753,
        "id": "1317643500100898816",
        "title": "简单的正整数逆序",
        "content": "编写程序通过键盘读入1个5位十进制正整数，然后按逆序（万位变为个位，千位变为十位，百位仍在百位，十位变为千为，个位变为万位）输出这个数字。\n\n### 输入格式:\n\n1个五位数m。（输入保证是5为正整数）\n\n### 输出格式:\n\nm逆序后的结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n35425\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n52453\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量和数据类型', 'description': '教学内容包括：变量的定义和声明、数据类型的分类和使用、变量的命名规则和规范等。'}, {'name': '输入和输出', 'description': '教学内容包括：使用scanf函数进行输入、使用printf函数进行输出、格式化输出等。'}, {'name': '运算符和表达式', 'description': '教学内容包括：算术运算符、关系运算符、逻辑运算符、赋值运算符、位运算符等。'}, {'name': '控制结构', 'description': '教学内容包括：顺序结构、选择结构（if语句、switch语句）、循环结构（for循环、while循环、do-while循环）等。'}, {'name': '数组', 'description': '教学内容包括：数组的定义和声明、数组的初始化、数组的访问和操作、多维数组等。'}, {'name': '函数', 'description': '教学内容包括：函数的定义和声明、函数的参数传递、函数的返回值、函数的调用和递归等。'}, {'name': '字符串', 'description': '教学内容包括：字符串的定义和声明、字符串的输入和输出、字符串的操作和处理、字符串的比较和拼接等。'}, {'name': '指针', 'description': '教学内容包括：指针的定义和声明、指针的运算和操作、指针的传递和引用、指针与数组、指针与函数等。'}, {'name': '文件操作', 'description': '教学内容包括：文件的打开和关闭、文件的读写、文件的定位和指针、文件的复制和删除等。'}, {'name': '结构体和联合体', 'description': '教学内容包括：结构体的定义和声明、结构体的访问和操作、结构体的嵌套和指针、联合体的定义和使用等。'}, {'name': '预处理指令', 'description': '教学内容包括：宏定义、条件编译、文件包含等预处理指令的使用和作用。'}]"
    },
    {
        "sortId": 754,
        "id": "1316395221065256960",
        "title": "假设`int a=12；`则执行完语句`a+=a*a;`后，a的值是（     ）。",
        "content": "假设`int a=12；`则执行完语句`a+=a*a;`后，a的值是（     ）。\n@[](2)\n\nA. 12\nB. 144\nC. 156\nD. 288",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '赋值运算符', 'description': '赋值运算符用于将一个值赋给变量，常见的赋值运算符有=、+=、-=、*=、/=等。本题中使用了+=赋值运算符，表示将变量a的值与a的平方相加后再赋给a。'}, {'name': '算术运算符', 'description': '算术运算符用于进行数值运算，常见的算术运算符有+、-、*、/、%等。本题中使用了*算术运算符，表示计算a的平方。'}, {'name': '运算顺序', 'description': '在表达式中，运算符的执行顺序是由运算符的优先级和结合性决定的。本题中，先计算a的平方，然后再与a相加，最后将结果赋给a。'}]"
    },
    {
        "sortId": 755,
        "id": "1315854087570120704",
        "title": "求两点之间的距离",
        "content": "如果某超市坐标(x,y)是(2,3), 给定(x,y)坐标，@[](10)\n\n(1) 写出求(x,y)坐标离超市的距离的计算表达式；（3分）\n\n(2) 用插入代码的方式，写出程序，能输出给定(x,y)坐标距离超市的距离，如有小数，请输出小数。(4分)\n\n(3) 写出判断给定坐标是否距离该超市小于50的条件。(3分)\n",
        "type": "SUBJECTIVE",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '坐标计算', 'description': '学生需要掌握如何计算坐标之间的距离，包括使用勾股定理等方法。'}, {'name': '插入代码', 'description': '学生需要学会在程序中插入代码，以实现特定功能。'}, {'name': '条件判断', 'description': '学生需要学会使用条件语句判断给定坐标是否满足特定条件。'}]"
    },
    {
        "sortId": 756,
        "id": "1315842003759325184",
        "title": "整除和求余运算",
        "content": "对于如下程序，思考如下问题：@[](7)\n\n```\n#include <iostream>\nusing namespace std;\nint main()\n{\nint a,x,y,z;\ncout<<\"请输入一个十进制的三位数：\";\ncin>>a;\nx=a/100;\ny=a/10%10;\nz=a%10; \ncout<<x<<'\\n'<<y<<'\\n'<<z;\nreturn 0;\n}\n```\n\n\n(1)假如输入345，请写出输出结果。(3分)\n\n(2)分析如果输入其它的符合条件的数字，结果是什么？可以得出什么结论？(2分）\n\n(3) 如果要处理的数据是4位数的十进制数，如果设计程序？。(2分)\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 7,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学描述：介绍如何使用cin和cout进行输入输出操作，包括输入数据和输出结果的格式控制。'}, {'name': '算术运算', 'description': '教学描述：介绍算术运算符的使用，包括加法、减法、乘法、除法和取余运算。'}, {'name': '变量和赋值', 'description': '教学描述：介绍变量的概念和使用，以及赋值操作的方法。'}, {'name': '整数运算', 'description': '教学描述：介绍整数运算的规则和注意事项，包括整数除法和取余运算的特点。'}, {'name': '条件语句', 'description': '教学描述：介绍条件语句的使用，包括if语句和if-else语句的基本结构和语法。'}, {'name': '循环语句', 'description': '教学描述：介绍循环语句的使用，包括for循环和while循环的基本结构和语法。'}, {'name': '数据类型', 'description': '教学描述：介绍数据类型的概念和分类，包括整型、浮点型和字符型等常用数据类型。'}, {'name': '命名空间', 'description': '教学描述：介绍命名空间的概念和作用，以及using关键字的使用方法。'}]"
    },
    {
        "sortId": 757,
        "id": "1314919489696751616",
        "title": "C程序设计 实验1-4大小写转换",
        "content": "参考例4.2程序，编程从键盘输入一个小写英文字母，将其转换为大写英文字母，将转换后的大写英文字母及其十进制的ASCII码值显示到屏幕上。\n\n### 输入格式:\n\n从键盘输入一个小写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的大写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\nb\n\n```\n\n### 输出样例:\n\n```out\nB,66\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 25,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': 'C语言中的数据类型包括基本数据类型和派生数据类型。基本数据类型包括整型、浮点型、字符型等，派生数据类型包括数组、结构体、联合体等。在本题中，需要了解字符型数据类型和整型数据类型的转换。'}, {'name': '输入输出', 'description': 'C语言中的输入输出函数包括scanf和printf。scanf函数用于从键盘输入数据，printf函数用于向屏幕输出数据。在本题中，需要使用scanf函数从键盘输入一个小写英文字母。'}, {'name': '字符型数据类型', 'description': 'C语言中的字符型数据类型用于存储单个字符，包括大小写字母、数字、特殊字符等。在本题中，需要将输入的小写英文字母转换为大写英文字母。'}, {'name': 'ASCII码', 'description': 'ASCII码是一种字符编码标准，用于将字符映射为对应的整数值。在本题中，需要将转换后的大写英文字母及其十进制的ASCII码值显示到屏幕上。'}]"
    },
    {
        "sortId": 758,
        "id": "1314916463124733952",
        "title": "C程序设计 实验1-3-2计算球的体积和表面积（const）",
        "content": "计算球的体积和表面积：参考例3.5程序，使用const常量定义π（定义为3.14159）的值，编程计算并输出球的表面积和体积，球半径r的值由用户从键盘输入。\n### 输入格式:\n\n输入一个圆的半径，半径可以为实数。\n\n### 输出格式:\n\n球的表面积和体积在不同行输出，均保留两位小数。参看输出样例。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n\n```\n\n### 输出样例:\n\n```out\ns=50.27\nv=33.51\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'常量定义','description':'使用const关键字定义常量π的值为3.14159'}, {'name':'变量输入','description':'从键盘输入球的半径r的值'}, {'name':'计算表面积和体积','description':'根据球的半径r计算球的表面积和体积'}, {'name':'输出结果','description':'将计算得到的表面积和体积输出，保留两位小数'}]"
    },
    {
        "sortId": 759,
        "id": "1314908203780988928",
        "title": "C程序设计 实验1-3-1计算球的体积和表面积（define）",
        "content": "计算球的体积和表面积：参考例3.4程序，使用宏定义定义π（定义为3.14159）的值，编程计算并输出球的表面积和体积，球半径r的值由用户从键盘输入。\n\n### 输入格式:\n输入一个圆的半径，半径可以为实数。\n\n### 输出格式:\n\n球的体积和表面积在不同行输出，均保留两位小数。参看输出样例。\n\n### 输入样例:\n\n```in\n2\n\n```\n\n### 输出样例:\n\n```out\ns=50.27\nv=33.51\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'宏定义', 'description':'宏定义是C语言中的一种预处理指令，用于定义常量或者简单的函数。在本题中，使用宏定义定义了π的值为3.14159。'}, {'name':'变量输入', 'description':'在本题中，需要从键盘输入球的半径r的值，这涉及到了变量输入的知识点。'}, {'name':'数学运算', 'description':'在本题中，需要进行球的体积和表面积的计算，这涉及到了数学运算的知识点。'}, {'name':'格式化输出', 'description':'在本题中，需要将计算得到的球的体积和表面积进行格式化输出，保留两位小数，这涉及到了格式化输出的知识点。'}]"
    },
    {
        "sortId": 760,
        "id": "1314896212974690304",
        "title": "C程序设计 实验1-2程序填充",
        "content": "熟悉C语言集成开发环境Code::Blocks，并参考例2.1b和例2.2程序，在每一行输出变量的值后，再输出该变量所占内存的字节数。请把程序补充完整，并在Code::Blocks下运行程序，观察程序的运行结果，结果正确后提交程序。\n\n参考程序如下：\n#include <stdio.h>\nint main()  \n{\t  \n  int  a = 1;  \n  float b = 2.5;  \n\tchar  c = 'A';     \n\tprintf(\"a=%d,sizeof(a)=%d\\n\", a,  );       \n\tprintf(\"b=%f,sizeof(b)=%d\\n\",  , sizeof(b));        \n\tprintf(\"c=%c,sizeof(c)=%d\\n\",  ,  );\t     \n\tprintf(\"End of program\\n\");    \n\treturn 0;   \n\t}\n\n\n### 输入格式:\n\n无需从键盘输入数据\n\n### 输出格式:\n\n参照下面输出样例把程序补充完整。\n\n### 输入样例:\n\n```in\n\n\n```\n\n### 输出样例:\n\n```out\na=1,sizeof(a)=4\nb=2.500000,sizeof(b)=4\nc=A,sizeof(c)=1\nEnd of program\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 25,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量的声明和初始化', 'description': '在C语言中，变量的声明和初始化是非常重要的基础知识。在本题中，需要声明和初始化三个变量a、b、c，并分别赋予初始值。'}, {'name': '格式化输出', 'description': '在C语言中，可以使用printf函数进行格式化输出。在本题中，需要使用printf函数输出变量的值，并使用格式化字符串控制输出的格式。'}, {'name': 'sizeof运算符', 'description': 'sizeof运算符用于计算变量所占内存的字节数。在本题中，需要使用sizeof运算符计算变量a、b、c所占内存的字节数，并将结果输出。'}, {'name': '字符型变量', 'description': '在C语言中，字符型变量使用char类型表示。在本题中，变量c是一个字符型变量，需要使用%c格式化字符输出。'}, {'name': '整型变量', 'description': '在C语言中，整型变量使用int类型表示。在本题中，变量a是一个整型变量，需要使用%d格式化整数输出。'}, {'name': '浮点型变量', 'description': '在C语言中，浮点型变量使用float类型表示。在本题中，变量b是一个浮点型变量，需要使用%f格式化浮点数输出。'}, {'name': '代码补全', 'description': '在本题中，需要补充代码，使得程序能够正确输出变量的值和所占内存的字节数。'}]"
    },
    {
        "sortId": 761,
        "id": "1314877674226507776",
        "title": "C程序设计 实验1-1程序改错",
        "content": "下面程序变量x、y、z赋初值2.5，然后在屏幕上打印这些变量的值。程序中存在错误，请改正错误，并提交正确的程序。\n#include <stdio.h>\nint main()\n \n {\n \n\nint  x=y=2.5;\n\nprintf(\"These values are:\\n\" );\n\nprintf(\"x=%d\\n\",x);\n\nprintf(\"y=%d\\n\",y);\n\nprintf(\"z=%d\\n\",z);\n\nreturn 0;\n\n}\n\n\n### 输出格式:\n\n输出x、y、z的值时，每个变量占一行，并保留两位小数，\n\n### 输入样例:\n\n无需从键盘输入数据\n\n```in\n \n \n```\n\n### 输出样例:\n\n```out\nThese values are:\nx=2.50\ny=2.50\nz=2.50\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 25,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '变量赋值', 'description': '在C语言中，可以使用赋值运算符将一个值赋给一个变量。在这个题目中，变量x和y被赋初值2.5。'}, {'name': '格式化输出', 'description': '在C语言中，可以使用printf函数进行格式化输出。在这个题目中，使用printf函数打印变量x、y、z的值，并且要求保留两位小数。'}, {'name': '变量声明', 'description': '在C语言中，需要先声明一个变量，然后才能使用它。在这个题目中，变量z没有被声明，需要先声明变量z才能使用。'}, {'name': '语法错误', 'description': '在这个题目中，存在语法错误，变量x和y的赋值语句应该分开写，而不是写在一起。'}]"
    },
    {
        "sortId": 762,
        "id": "1313373937418756096",
        "title": "世界，你好！",
        "content": "请编写程序，输出下面的文字。\n\n```c\n*****************\n  Hello, world!\n*****************\n```\n\n#### 输入样例\n```in\n\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\n*****************\n  Hello, world!\n*****************\n\n```\n\n---\n\n注：每行末尾没有多余的空白字符。\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输出语句','description':'输出语句用于将程序中的数据显示在屏幕上，通常用于调试和用户交互。在C语言中，可以使用printf函数来实现输出。'}]"
    },
    {
        "sortId": 763,
        "id": "1311141305544990720",
        "title": "重新认识运算符",
        "content": "学过数学的你，一定熟悉加减乘除，那C语言的加减乘除运算符是什么样呢？\n\n先通过一个例子来认识下吧。\n```\n#include <stdio.h>\nint main()\n{\n\tint data;//定义一个整型变量，变量名为data \n\tscanf(\"%d\",&data);//输入变量data的值  \n\tprintf(\"%d\\n\",data+2);\n\tprintf(\"%d\\n\",data-2);\n\tprintf(\"%d\\n\",data*2);\n\tprintf(\"%d\\n\",data/2);\n\treturn 0;\n}\n```\n如果输入数据为5则：\n运行结果如下\n\n\n\n![test.png](~/2b6070d9-2988-44f4-ad53-6407aeb6d2e3.png)\n\n\n聪明的你，是不是也得到这样的运行结果了呢？\n\n如果对除法运算符运算结果困惑的话，那就自己去查查资料，找找原因吧。\n\nC语言的运算符还有好多呢，想认识下吗？去看看课本附录C。\n\n下面我们就小试牛刀，做做这道题吧。\n\n对于一个给定底和高的对于一个给定底和高的直角三角形，输出它的周长和面积。\n\n### 输入格式:\n\n输入一组由空格分隔开的实数，表示直角三角形的底和高（底和高均是大于 0.0，小于等于 1000.0 的实数）。\n\n### 输出格式:\n\n输出第一行是这个直角三角形的周长，保留小数点后 2 位数字（四舍五入）。\n\n输出的第二行是这个直角三角形的面积，保留小数点后 2 位数字（四舍五入）。\n\n提示：根据我们中学学习过的知识，直角三角形周长是两条直角边的长度 a, b 加一条斜边的长度 c，斜边的长度 c 可以由勾股定理计算获得：\n\n![1.png](~/8c00384b-5343-4ae4-900d-dd0c071e4124.png)\n\n开方运算要使用数学函数sqrt()\n\n```c++\n#include <stdio.h>\n#include <math.h> //要使用数学函数，所以要包含math.h头文件\nint main()\n{\n    double a,b,c; //定义三个浮点型变量，a表示底的长度，b表示高的长度，c表示斜边的长度\n    scanf(\"%lf%lf\",&a,&b);//输入a,b的值\n    c=@@[](4); //根据公式计算斜边长度并赋值给变量c\n    printf(\"%.2f\\n\",@@[](2));\n    @@[](4)\n    return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '运算符', 'description': 'C语言的加减乘除运算符是用来进行数值运算的，加法运算符用于两个数相加，减法运算符用于两个数相减，乘法运算符用于两个数相乘，除法运算符用于两个数相除。在C语言中，加法运算符为+，减法运算符为-，乘法运算符为*，除法运算符为/。'}, {'name': '变量', 'description': '变量是用来存储数据的一种数据类型，可以通过变量名来访问和操作存储的数据。在C语言中，变量需要先定义后使用，定义变量时需要指定变量的数据类型和变量名。'}, {'name': '输入输出', 'description': '输入输出是C语言程序与用户或外部设备进行数据交互的方式。在C语言中，可以使用scanf函数从标准输入设备（如键盘）读取数据，使用printf函数将数据输出到标准输出设备（如屏幕）。'}, {'name': '数据类型', 'description': '数据类型是用来表示不同种类的数据的一种属性。在C语言中，有基本数据类型（如整型、浮点型、字符型）和派生数据类型（如数组、结构体、指针）。不同的数据类型在内存中占用的空间大小和表示范围不同。'}, {'name': '数学函数', 'description': '数学函数是用来进行数学运算的函数，可以在C语言程序中使用数学函数来进行数学运算。在C语言中，数学函数需要包含math.h头文件，并使用函数名加上参数来调用数学函数。常用的数学函数有sqrt函数（用于计算平方根）、pow函数（用于计算幂次方）、sin函数（用于计算正弦值）等。'}]"
    },
    {
        "sortId": 764,
        "id": "1310820842595803136",
        "title": "让我们一起说你好",
        "content": "运行下列程序：\n```c++\n#include <stdio.h>\nint main()\n{\n    printf(\"Welcome to Linyi University!\\n\");\n    return 0;\n}\n```\n运行结果为：\n\n![welcome.png](~/5c02191a-8991-444e-912f-8c9a26788819.png)]\n\n是不是很神奇？你可以试试用别的内容代替双引号内的内容。\n那我们就试试输出\"Hello World!\"吧。\n```c++\n\n#include <stdio.h>\n\nint main()\n{\n // 请在下一行写输出语句\n  @@[](5);\n\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': 'printf函数', 'description': 'printf函数是C语言中用于输出的函数，可以将指定的内容输出到屏幕上。在本题中，需要学生了解printf函数的基本用法，包括格式化输出和转义字符的使用。'}, {'name': '注释', 'description': '注释是程序中用于解释代码的文字，不会被编译器执行。在本题中，需要学生了解单行注释和多行注释的写法，以及注释的作用。'}, {'name': 'main函数', 'description': 'main函数是C语言程序的入口函数，程序从main函数开始执行。在本题中，需要学生了解main函数的写法和返回值的含义。'}, {'name': '转义字符', 'description': '转义字符是一些特殊的字符序列，用于表示一些特殊的字符或控制字符。在本题中，需要学生了解转义字符的用法，如换行符\\\\n和双引号\\\\\\\"。'}, {'name': '编译运行', 'description': '编译运行是将源代码转换为可执行文件并执行的过程。在本题中，需要学生了解如何编译和运行C语言程序，以及如何查看程序的输出结果。'}]"
    },
    {
        "sortId": 765,
        "id": "1310475213755506688",
        "title": "3-5.确认相等运算符和关系运算符的运算结果",
        "content": "确认相等运算符和关系运算符的运算结果。@[](5)\n\n请粘贴代码 并说明。 \n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'相等运算符和关系运算符'，'description':'相等运算符用于判断两个值是否相等，关系运算符用于比较两个值的大小。在C语言中，相等运算符包括==（等于）、!=（不等于），关系运算符包括>（大于）、<（小于）、>=（大于等于）、<=（小于等于）。通过使用这些运算符，可以进行条件判断和比较操作。'}]"
    },
    {
        "sortId": 766,
        "id": "1310474511226363904",
        "title": "3-4.比较两个整数值并输出大小结果",
        "content": "编写一段程序， 像下面这样 输入两个整数， \n\n* 如果两数值相等，则显示“A和B相等。”\n\n* 如果A大于B，则显示“A大于B。”\n\n* 如果 A小于B，则显示“A小于B。”\n\n```\n请输入两个整数。\n整数A：54 （回车）\n整数B： 12 （回车）\nA大于B。\n```\n\n### 输入样例:\n\n提示信息后输入整数， 并回车。例如：\n\n```in\n54\n12\n```\n\n### 输出样例:\n\n输出提示信息， 以及结果。例如：\n\n```out\n请输入两个整数。\n整数A：整数B：A大于B。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '条件语句', 'description': '条件语句用于根据不同的条件执行不同的代码块。在C语言中，条件语句使用if、else if和else关键字来实现。在本题中，根据输入的两个整数的大小关系，使用条件语句来判断并输出相应的结果。'}, {'name': '输入输出', 'description': '输入输出是C语言中常用的操作，用于从用户处获取输入数据并将结果输出。在本题中，使用输入输出操作来获取两个整数的输入，并将结果输出。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的容器。在本题中，需要定义两个整数类型的变量来存储输入的整数值。'}, {'name': '比较运算符', 'description': '比较运算符用于比较两个值的大小关系。在C语言中，常用的比较运算符有等于（==）、大于（>）和小于（<）。在本题中，使用大于和小于运算符来比较两个整数的大小关系。'}, {'name': '字符串输出', 'description': '字符串输出是C语言中常用的输出方式，用于将字符串输出到屏幕上。在本题中，需要输出提示信息和结果，使用字符串输出来实现。'}]"
    },
    {
        "sortId": 767,
        "id": "1310403226743988224",
        "title": "已知”`char ch=277;`“,请写出ch的内存存储的二进制形式： (前后不要有多余空格)。",
        "content": "已知”`char ch=277;`“,请写出ch的内存存储的二进制形式：@@[](3) (前后不要有多余空格)。\n\n\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型','description':'数据类型是C语言中的基本概念之一，用于定义变量的类型和占用的内存空间大小。在C语言中，char类型占用1个字节的内存空间，可以存储8位的二进制数据。'}]"
    },
    {
        "sortId": 768,
        "id": "1310401128216256512",
        "title": "写出阴影部分表达式",
        "content": "如图所示，请写出满足如下条件的表达式：任意一点的坐标(x,y)落在阴影内(不包括阴影边界)，则表达式为真，否则为假。@[](5)\n\n\n![2-13.png](~/69aebdc1-a7bb-4af4-b0c7-4e4b464b92e2.png)\n\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对多个条件进行逻辑运算，常用的逻辑运算符有与（&&）、或（||）、非（!）等。在本题中，需要使用逻辑运算符来判断一个点的坐标是否在阴影内。'}]"
    },
    {
        "sortId": 769,
        "id": "1310396092115443712",
        "title": "位运算^的神奇效果",
        "content": "已知`int a=5,b=9;`连续做3个运算`a=a^b;b=b^a;a=a^b;`后，\n\n变量a和变量b的值分别是什么？\n\n能得出什么结论吗？原理是什么？\n\n如果a和b的初值发生变化，结论还成立吗？@[](5)\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '位运算', 'description': '位运算是C语言中的一种运算方式，通过对二进制数的位进行操作来实现特定的功能。常见的位运算符有与（&）、或（|）、异或（^）等。本题中的运算使用了异或运算符，通过异或运算可以实现两个变量的值互换。'}, {'name': '变量赋值', 'description': '变量赋值是C语言中的基本操作之一，通过将一个值赋给变量，可以改变变量的当前值。本题中的运算使用了变量赋值操作，通过连续的赋值操作实现了变量值的互换。'}, {'name': '变量初值', 'description': '变量的初值是指变量在定义时所赋予的初始值。本题中的结论是基于变量a和b的初值为5和9的情况下得出的，如果初值发生变化，结论可能会有所不同。'}]"
    },
    {
        "sortId": 770,
        "id": "1310394864639795200",
        "title": "加减运算的神奇效果",
        "content": "已知`int a=5, b=8;` ,连续做3个运算`a=a+b;b=a-b;a=a-b;`后，\n\n变量a和b的值分别是什么？\n\n能得出什么结论吗？\n\n如果a和b的初值发生变化，结论还成立吗？@[](5)\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符'，'description':'赋值运算符用于将一个值赋给变量。在C语言中，赋值运算符是=，表示将右边的值赋给左边的变量。'},\n{'name':'算术运算符'，'description':'算术运算符用于进行基本的数学运算，包括加法、减法、乘法和除法。在C语言中，加法运算符是+，减法运算符是-。'},\n{'name':'变量'，'description':'变量是用于存储数据的内存位置。在C语言中，变量必须先声明后使用，声明变量时需要指定变量的类型和名称。'},\n{'name':'连续赋值运算'，'description':'连续赋值运算是指将一个变量的值赋给另一个变量，并且连续进行多次赋值操作。在C语言中，连续赋值运算可以通过使用临时变量来实现。'},\n{'name':'变量的值'，'description':'变量的值是存储在变量中的数据。在C语言中，变量的值可以通过赋值运算符来改变。'},\n{'name':'结论'，'description':'根据题目中的连续赋值运算，可以得出结论：变量a的值变为8，变量b的值变为5。'},\n{'name':'初值的变化'，'description':'如果变量a和b的初值发生变化，结论仍然成立。因为连续赋值运算只是改变了变量的值，而不会受到变量的初值影响。'}]"
    },
    {
        "sortId": 771,
        "id": "1309717605629157376",
        "title": "2-6.输入身高计算并显示标准体重",
        "content": "编写一段程序, 像下面那样读取表示身高的整数值, 显示出标准体重的实数值.\n\n标准体重根据公式 $$  (Tall-100)0.9  $$  进行计算(其中Tall代表身高厘米数), 所得结果保留一位小数.\n\n```\n请输入您的身高(cm)：175（回车）\n您的标准体重是67.5公斤。\n```\n\n### 输入样例:\n\n输入身高厘米数, 整数。\n\n```in\n175 (回车)\n```\n\n### 输出样例:\n\n\n```out\n请输入您的身高(cm)：您的标准体重是67.5公斤。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何使用输入输出函数进行数据的输入和输出。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '运算符', 'description': '学习如何使用运算符进行数值计算。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整数、浮点数和字符。'}, {'name': '格式化输出', 'description': '学习如何使用格式化输出函数来控制输出的格式。'}, {'name': '条件语句', 'description': '学习如何使用条件语句来根据条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句来重复执行一段代码。'}, {'name': '数学库函数', 'description': '学习如何使用数学库函数进行数学计算。'}]"
    },
    {
        "sortId": 772,
        "id": "1309700581871968256",
        "title": "2-5.计算并输出整数a占整数b的百分比 (实数)",
        "content": "编写一段程序， 像下面那样读取两个整数， 然后显示出前者是后者的百分之几, 并用实数输出结果。\n\n```\n请输入两个整数。\n整数a：54（回车）\n整数b：84（回车）\nx的值是y的64.285714%。\n```\n\n**输入样例:**\n```in\n54\n84\n```\n\n**输出样例:**\n\n```out\n请输入两个整数。\n整数a：整数b：a是b的64.285714%。\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '教学目标：学生能够使用scanf函数进行输入，使用printf函数进行输出。\\n教学内容：介绍scanf函数和printf函数的使用方法，讲解格式化字符串的概念和常用的格式化字符。\\n教学方法：通过示例代码演示scanf函数和printf函数的使用，引导学生理解格式化字符串的含义和使用方法。\\n教学评价：通过练习题检验学生对输入输出的掌握程度。'}, {'name': '变量定义和赋值', 'description': '教学目标：学生能够定义变量并进行赋值。\\n教学内容：介绍变量的概念和定义方法，讲解赋值操作的含义和方法。\\n教学方法：通过示例代码演示变量的定义和赋值操作，引导学生理解变量的作用和赋值的过程。\\n教学评价：通过练习题检验学生对变量定义和赋值的掌握程度。'}, {'name': '算术运算', 'description': '教学目标：学生能够使用算术运算符进行基本的数学运算。\\n教学内容：介绍算术运算符的种类和使用方法，讲解算术运算的优先级和结合性。\\n教学方法：通过示例代码演示算术运算符的使用，引导学生理解运算符的含义和运算规则。\\n教学评价：通过练习题检验学生对算术运算的掌握程度。'}, {'name': '类型转换', 'description': '教学目标：学生能够进行不同类型之间的转换。\\n教学内容：介绍类型转换的概念和方法，讲解隐式类型转换和显式类型转换。\\n教学方法：通过示例代码演示不同类型之间的转换，引导学生理解类型转换的原理和规则。\\n教学评价：通过练习题检验学生对类型转换的掌握程度。'}, {'name': '格式化输出', 'description': '教学目标：学生能够使用格式化字符串进行输出。\\n教学内容：介绍格式化字符串的概念和使用方法，讲解常用的格式化字符和转义字符。\\n教学方法：通过示例代码演示格式化字符串的使用，引导学生理解格式化输出的原理和规则。\\n教学评价：通过练习题检验学生对格式化输出的掌握程度。'}]"
    },
    {
        "sortId": 773,
        "id": "1309698451568189440",
        "title": "2-4.编写程序验证整型和浮点数计算规则",
        "content": "编写程序对整型常量、浮点型常量、int型变量和double型变量进行乘除等各种运算，从而验证本节介绍的规则。\n\n1. 教材代码清单 2-8 的示例程序，在本地输入并调试通过。 上传源文件得 @[](5)\n\n2. 仿造代码清单2-8，将除法改为乘法运算，输入并调试通过。  上传源文件得 @[](5)",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '整型常量', 'description': '整型常量是指不带小数部分的数字，可以是正数、负数或零。在C语言中，整型常量可以用十进制、八进制或十六进制表示。'}, {'name': '浮点型常量', 'description': '浮点型常量是指带有小数部分的数字。在C语言中，浮点型常量可以用小数形式表示，也可以用指数形式表示。'}, {'name': 'int型变量', 'description': 'int型变量是指用来存储整数值的变量。在C语言中，int型变量的取值范围与机器有关，一般为-32768到32767之间。'}, {'name': 'double型变量', 'description': 'double型变量是指用来存储双精度浮点数值的变量。在C语言中，double型变量的取值范围与机器有关，一般为1.7E-308到1.7E+308之间。'}, {'name': '乘法运算', 'description': '乘法运算是指将两个数相乘的操作。在C语言中，可以使用乘法运算符“*”进行乘法运算。'}, {'name': '除法运算', 'description': '除法运算是指将一个数除以另一个数的操作。在C语言中，可以使用除法运算符“/”进行除法运算。'}]"
    },
    {
        "sortId": 774,
        "id": "1309695026923167744",
        "title": "2-3.读入一个实数并显示6位小数点精度",
        "content": "编写一段程序，像下面那样显示出读取的实数的值（6位小数点精度）。\n```\n请输入一个实数：57.3（回车）\n你输入的是57.300000。\n```\n\n### 输入样例:\n\n输入实数并回车。\n\n```in\n57.3  （回车）\n```\n\n### 输出样例:\n\n```out\n请输入一个实数：你输入的是57.300000。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用printf和scanf函数进行输入输出操作。'}]"
    },
    {
        "sortId": 775,
        "id": "1309691657319997440",
        "title": "2-2.计算并输出整数a和b的和与积",
        "content": "编写一段程序， 像下面那样读取两个整数， 然后输出它们的和以及积。\n```\n请输入两个整数。\n整数x：54（回车）\n整数y：12（回车）\n它们的和是66，积是648。\n```\n\n### 输入格式:\n\n在提示符后输入整数，并回车。例如： 54（回车） 12（回车）。\n\n### 输出格式:\n\n参见题干示例。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n54\n12\n```\n\n### 输出样例:\n\n```out\n请输入两个整数。\n整数x：整数y：它们的和是66，积是648。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本输入输出','description':'学习如何使用scanf函数进行输入和printf函数进行输出。'}, {'name':'变量和运算符','description':'学习如何声明变量并进行基本的算术运算。'}, {'name':'格式化输出','description':'学习如何使用printf函数进行格式化输出。'}, {'name':'数据类型','description':'学习不同的数据类型，如整型、浮点型等。'}, {'name':'算术运算','description':'学习如何进行加法、乘法等基本的算术运算。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的流程。'}, {'name':'函数','description':'学习如何定义和调用函数。'}, {'name':'数组','description':'学习如何声明和使用数组。'}, {'name':'指针','description':'学习如何声明和使用指针。'}, {'name':'字符串','description':'学习如何声明和使用字符串。'}]"
    },
    {
        "sortId": 776,
        "id": "1309381550098997248",
        "title": "1-9.输入3个整数并输出其和",
        "content": "编写一段程序，像下面这样显示读取到的三个整数的和。\n```\n请输入三个整数。\n整数1：7（回车）\n整数2：15（回车）\n整数3：23（回车）\n它们的和是45。\n```\n\n### 输入格式:\n\n在每个提示符后输入整数，并回车。\n\n### 输出格式:\n\n参见题干说明。\n\n### 输入样例:\n\n```in\n7\n15\n23\n```\n\n### 输出样例:\n\n```out\n请输入三个整数。\n整数1：整数2：整数3：它们的和是45。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'在C语言中，变量用于存储数据，数据类型决定了变量可以存储的数据的种类和范围。本题涉及到整数类型的变量和输入输出的操作。'}, {'name':'输入输出'，'description':'在C语言中，可以使用scanf函数从标准输入读取数据，使用printf函数将数据输出到标准输出。本题涉及到从标准输入读取整数，将整数输出到标准输出。'}, {'name':'运算符和表达式'，'description':'在C语言中，可以使用运算符对数据进行运算，表达式是由运算符和操作数组成的。本题涉及到对三个整数进行求和的运算。'}]"
    },
    {
        "sortId": 777,
        "id": "1309378131615408128",
        "title": "1-8.读取两个整数并输出乘积",
        "content": "编写一段程序， 向下面这样显示读取到的两个整数的乘积。\n```\n请输入两个整数。\n整数1：27（回车）\n整数2：35（回车）\n它们的乘积是945。\n```\n\n### 输入格式:\n\n在提示符之后输入， 整数， 并按回车。例如： 27（回车）\n\n\n### 输出格式:\n\n```\n请输入两个整数。\n整数1：\n整数2：\n它们的乘积是945。\n```\n\n### 输入样例:\n\n```in\n27\n35\n```\n\n### 输出样例:\n\n```out\n请输入两个整数。\n整数1:整数2:它们的乘积是945。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何使用输入输出函数进行数据的输入和输出。'}, {'name':'变量','description':'学习如何定义和使用变量来存储数据。'}, {'name':'运算符','description':'学习如何使用运算符进行数值计算。'}, {'name':'数据类型','description':'学习不同的数据类型及其在程序中的使用。'}, {'name':'格式化输出','description':'学习如何使用格式化输出函数进行输出的格式控制。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的执行流程。'}, {'name':'函数','description':'学习如何定义和调用函数来组织程序的结构。'}]"
    },
    {
        "sortId": 778,
        "id": "1309357996884221952",
        "title": "1-6.输入整数,计算并输出减法的结果",
        "content": "编写一段程序， 像右面那样读取一个整数，并显示该整数减去6之后的结果。【详细运行过程如下:】\n```\n请输入一个整数：57（回车）\n该整数减去6的结果是51。\n```\n\n### 输入格式:\n\n在输出的提示信息之后输入整数，并敲回车。例如：57（回车）。\n\n### 输出格式:\n\n1.先输出提示信息，等待用户输入。例如：请输入一个整数：\n\n2.等待用户输入\n\n3.输出这个整数减去6的差。例如：该整数减去6的结果是51。\n\n### 输入样例:\n\n```in\n57【回车】\n```\n\n### 输出样例:\n\n```out\n请输入一个整数：该整数减去6的结果是51。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'教学如何进行输入和输出操作，包括提示信息的输出、等待用户输入、结果的输出等。'}, {'name':'变量和运算','description':'教学如何定义变量、进行运算操作，包括整数的减法运算。'}]"
    },
    {
        "sortId": 779,
        "id": "1309331134254538752",
        "title": "1-5.输入整数,计算并输出加法的结果",
        "content": "编写一段程序， 像右面那样读取一个整数，并显示该整数加上12之后的结果。【参见输入输出样例】\n```\n请输入一个整数：57（回车）\n该整数加上12的结果是69。\n```\n\n### 输入格式:\n\n在输出的提示信息之后输入整数，并敲回车。例如：57（回车）。\n\n### 输出格式:\n\n1.先输出提示信息，等待用户输入。例如：请输入一个整数：\n\n2.等待用户输入\n\n3.输出这个整数与12相加的和。例如：该整数加上12的结果是69。\n\n### 输入样例:\n\n```in\n57【回车】\n```\n\n### 输出样例:\n\n```out\n请输入一个整数：该整数加上12的结果是69。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '输入输出', 'description': '学习如何在程序中进行输入和输出操作，包括提示信息的输出、等待用户输入、结果的输出等。'}, {'name': '变量和运算', 'description': '学习如何定义变量、进行基本的算术运算，以及变量的赋值和使用。'}, {'name': '数据类型', 'description': '学习C语言中的基本数据类型，包括整型、浮点型、字符型等，并了解它们的特点和使用方法。'}, {'name': '控制结构', 'description': '学习C语言中的控制结构，包括条件语句、循环语句等，以实现程序的流程控制和逻辑判断。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值的使用。'}, {'name': '字符串处理', 'description': '学习如何处理字符串，包括字符串的输入输出、拼接、比较等操作。'}, {'name': '数组', 'description': '学习如何定义和使用数组，以及数组的遍历、排序等操作。'}, {'name': '指针', 'description': '学习如何定义和使用指针，以及指针的运算和指针与数组的关系。'}, {'name': '文件操作', 'description': '学习如何进行文件的读写操作，包括文件的打开、关闭、读取和写入等操作。'}]"
    },
    {
        "sortId": 780,
        "id": "1309318118645555200",
        "title": "1-4.int变量使用实数初始化",
        "content": "如果在int型变量的声明中，为变量赋一个实数值的初始值（如3.14或5.7等）会怎样呢？请试着生成程序并确认。\n\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 0,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量初始化'，'description':'变量初始化是指在声明变量的同时为其赋予一个初始值。在C语言中，int型变量的初始化只能使用整数值，如果为int型变量赋一个实数值的初始值，编译器会进行隐式类型转换，将实数值截断为整数值。因此，对于int型变量的初始化，应该使用整数值作为初始值，以避免数据截断的问题。'}]"
    },
    {
        "sortId": 781,
        "id": "1309316191799074816",
        "title": "1-3.单次调用printf输出 打招呼信息",
        "content": "编写一段函数, 调用一次printf函数, 显示右侧内容(参见输出样例)。\n\n#### 输入格式:\n\n无输入。\n\n#### 输出格式:\n\n严格按照输出样例。\n\n#### 输入样例:\n\n无输入。\n\n```in\n\n```\n\n#### 输出样例:\n\n```out\nHello!\n\n您好！\n再见。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'printf函数用于输出指定格式的字符。'}]"
    },
    {
        "sortId": 782,
        "id": "1309310530361090048",
        "title": "1-2.实用printf函数按格式输出\"天地人\"",
        "content": "编写一段程序, 调用一次printf函数, 显示右侧内容(参见输出样例)。  \n  (注意： 只调用一次printf )                                     \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n\n#### 输入格式:\n\n无\n\n#### 输出格式:\n\n请严格参照输出样例。注意行末不要有多余的不可见字符(空格/TAB等).\n\n#### 输入样例:\n\n无输入\n\n```in\n\n```\n\n#### 输出样例:\n\n```out\n天\n地\n人\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'printf函数','description':'调用printf函数显示指定内容'}]"
    },
    {
        "sortId": 783,
        "id": "1309139185115455488",
        "title": "计算两个整数之和",
        "content": "要求输入2个整数A和B，然后输出它们的和。\n\n### 输入格式:\n\n输入在一行中给出整数A和B。\n\n### 输出格式:\n\n输出A+B的值。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3 5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n8\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'输入输出','description':'学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name':'变量','description':'学习如何定义和使用变量，以及变量的命名规则。'}, {'name':'运算符','description':'学习C语言中的各种运算符，如加法运算符、赋值运算符等。'}, {'name':'数据类型','description':'学习C语言中的各种数据类型，如整型、浮点型等。'}, {'name':'控制语句','description':'学习C语言中的各种控制语句，如if语句、for循环语句等。'}, {'name':'函数','description':'学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name':'数组','description':'学习如何定义和使用数组，以及数组的遍历和操作。'}, {'name':'指针','description':'学习如何定义和使用指针，以及指针的运算和指针与数组的关系。'}, {'name':'字符串','description':'学习如何定义和使用字符串，以及字符串的操作和处理。'}, {'name':'文件操作','description':'学习如何打开、读写和关闭文件，以及文件的操作和处理。'}]"
    },
    {
        "sortId": 784,
        "id": "1309086245335982080",
        "title": "1-1.输出计算结果",
        "content": "编写一段程序, 计算出 15 减去 37 的结果， 并以“15减去37的结果是-22。”的格式进行显示。\n\n### 输入格式:\n\n本题目无输入。\n\n### 输出格式:\n\n请严格按引号中的内容进行输出：“15减去37的结果是-22。”\n\n### 输入样例:\n\n```in\n\n```\n\n### 输出样例:\n\n```out\n15减去37的结果是-22。\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本运算','description':'基本运算是C语言程序设计中最基础的知识点之一。它包括了加法、减法、乘法、除法等基本运算操作。在本题中，需要进行减法运算，计算出15减去37的结果。'}, {'name':'输出格式','description':'输出格式是C语言程序设计中常用的知识点之一。它涉及到如何将计算结果以特定的格式进行显示。在本题中，需要将计算结果以“15减去37的结果是-22。”的格式进行显示。'}]"
    },
    {
        "sortId": 785,
        "id": "1309059291467603968",
        "title": "A+B",
        "content": "题目很简单，请输出给出的两个正整数的和。\n\n### 输入格式:\n\n输入为一行，用空格分隔的两个正整数a和b(0<a,b<=2^31)\n\n### 输出格式:\n\na+b的结果。\n\n### 输入样例:\n\n\n\n```in\n1 2\n\n```\n\n### 输出样例:\n\n\n\n```out\n3\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等，可以用来存储不同类型的数据。在本题中，需要使用整型数据类型来存储输入的两个正整数。'}, {'name':'输入输出'，'description':'C语言中可以使用scanf函数来读取输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数读取输入的两个正整数，使用printf函数输出它们的和。'}, {'name':'运算符'，'description':'C语言中的运算符包括加法运算符、减法运算符、乘法运算符等，可以用来进行数值计算。在本题中，需要使用加法运算符来计算两个正整数的和。'}]"
    },
    {
        "sortId": 786,
        "id": "1309056955659706368",
        "title": "致敬",
        "content": "\n![1.png](~/70a64fa7-c473-44b8-abc6-191180823944.png)\n\n为了隆重表彰在抗击新冠肺炎疫情斗争中作出杰出贡献的功勋模范人物，2020年8月11日, 国家主席习近平签署主席令，授予钟南山“共和国勋章”, 授予张伯礼、张定宇、陈薇（女）“人民英雄”国家荣誉称号。\n请你用汉语拼音输出图片中的致敬语。\n\n### 输入格式:\n\n本题没有输入。\n\n### 输出格式:\n\n在一行中按照样例输出，以惊叹号结尾。\n\n### 输入样例:\n```in\n无\n```\n\n\n### 输出样例:\n\n\n\n```out\nZhi jing guo zhi ji liang!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数，包括scanf和printf等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句和switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句，包括for循环、while循环和do-while循环等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组和多维数组等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用和函数的参数传递等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算和指针的应用等。'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的输入输出和字符串的操作等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的成员和结构体的应用等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写和文件的关闭等。'}]"
    },
    {
        "sortId": 787,
        "id": "1307595893667987456",
        "title": "九牛一毛",
        "content": "\n![牛.JPG](~/8f626cd7-3bb8-4679-9cf8-f57826502af6.JPG)\n\n\n这是一道脑筋急转弯题：猪肉一斤 15 元，鸡肉一斤 20 元，那么一毛钱能买多少头牛？\n\n答案是：9 —— 因为“九牛一毛”。\n\n本题就请你按照这个逻辑，计算一下 $$N$$ 块钱能买多少斤猪肉、多少斤鸡肉、多少头牛。\n\n### 输入格式：\n\n输入在一行中给出一个不超过 1000 的正整数 $$N$$，即以“元”为单位的货币量。\n\n### 输出格式：\n\n在一行中顺序输出 $$N$$ 块钱能买多少斤猪肉、多少斤鸡肉、多少头牛。三个数字都只取整数部分，其间以 1 个空格分隔，行首尾不得有多余空格。\n\n### 输入样例：\n```in\n18\n```\n\n### 输出样例：\n```out\n1 0 1620\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'算术运算符'，'description':'C语言中的算术运算符的使用方法和运算规则。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数的使用方法和格式化输出的概念。'}, {'name':'条件语句'，'description':'C语言中的条件语句的使用方法和条件表达式的写法。'}, {'name':'循环语句'，'description':'C语言中的循环语句的使用方法和循环控制语句的写法。'}, {'name':'运算符优先级'，'description':'C语言中各种运算符的优先级和结合性。'}, {'name':'整数除法'，'description':'C语言中整数除法的规则和取整的方法。'}, {'name':'类型转换'，'description':'C语言中不同数据类型之间的转换规则和强制类型转换的方法。'}, {'name':'逻辑运算符'，'description':'C语言中逻辑运算符的使用方法和逻辑表达式的写法。'}, {'name':'字符串处理'，'description':'C语言中字符串的定义和处理方法。'}, {'name':'数组'，'description':'C语言中数组的定义和使用方法。'}, {'name':'函数'，'description':'C语言中函数的定义和调用方法。'}, {'name':'指针'，'description':'C语言中指针的概念和使用方法。'}, {'name':'结构体'，'description':'C语言中结构体的定义和使用方法。'}, {'name':'文件操作'，'description':'C语言中文件的打开、读写和关闭操作。'}, {'name':'预处理指令'，'description':'C语言中预处理指令的使用方法和宏定义的概念。'}, {'name':'错误处理'，'description':'C语言中错误处理的方法和异常处理的概念。'}, {'name':'递归'，'description':'C语言中递归函数的定义和使用方法。'}, {'name':'动态内存分配'，'description':'C语言中动态内存分配的方法和内存管理的概念。'}, {'name':'位运算'，'description':'C语言中位运算符的使用方法和位操作的概念。'}, {'name':'多文件编程'，'description':'C语言中多文件编程的方法和模块化编程的概念。'}, {'name':'数据结构'，'description':'C语言中常用数据结构的定义和操作方法。'}, {'name':'算法'，'description':'C语言中常用算法的实现和优化方法。'}, {'name':'编程风格'，'description':'C语言中良好的编程风格和代码规范的要求。'}, {'name':'调试技巧'，'description':'C语言中常用的调试技巧和错误排查方法。'}, {'name':'性能优化'，'description':'C语言中程序性能优化的方法和技巧。'}, {'name':'代码复用'，'description':'C语言中代码复用的方法和模块化设计的概念。'}, {'name':'软件工程'，'description':'C语言中软件工程的基本原理和开发流程。'}, {'name':'版本控制'，'description':'C语言中版本控制工具的使用方法和代码管理的概念。'}, {'name':'调用库函数'，'description':'C语言中调用库函数的方法和常用库函数的功能。'}, {'name':'编译链接'，'description':'C语言中编译和链接的过程和方法。'}, {'name':'调试工具'，'description':'C语言中常用的调试工具和调试环境的配置。'}, {'name':'代码审查'，'description':'C语言中代码审查的方法和重构的概念。'}, {'name':'项目管理'，'description':'C语言中项目管理的方法和项目开发的流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。'}, {'name':'代码优化'，'description':'C语言中代码优化的方法和优化技巧。'}, {'name':'错误调试'，'description':'C语言中错误调试的方法和调试技巧。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法和重构技巧。'}, {'name':'软件维护'，'description':'C语言中软件维护的方法和维护流程。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法和测试用例的编写。'}, {'name':'性能测试'，'description':'C语言中性能测试的方法和性能评估的指标。"
    },
    {
        "sortId": 788,
        "id": "1303510293221560320",
        "title": "设x和y均为int型变量，语句组`x+=y;y=x-y;x-=y;`的功能是( )。",
        "content": "设x和y均为int型变量，语句组`x+=y;y=x-y;x-=y;`的功能是( )。\n@[](2)\n\nA. 把x和y从小到大排列\nB. 交换x和y中的值\nC. 把x和y从大到小排列\nD. 无确定结果",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'赋值运算符','description':'赋值运算符用于将一个值赋给变量。在这个题目中，x+=y表示将x和y的和赋值给x，即x=x+y；y=x-y表示将x和y的差赋值给y，即y=x-y；x-=y表示将x和y的差赋值给x，即x=x-y。所以，这个语句组的功能是交换x和y中的值。'}]"
    },
    {
        "sortId": 789,
        "id": "1303510196828065792",
        "title": "以下程序段的输出结果是( )。",
        "content": "以下程序段的输出结果是( )。\n```\n#include <stdio.h>\nvoid main()\n{\nint  a=1234；\nprintf(\"%2d＼n\"，a)；\n}\n```\n@[](2)\n\nA. 12\nB. 34\nC. 1234\nD. 提示出错、无结果",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name': '数据类型', 'description': '数据类型是C语言中的基本概念之一，用于定义变量的类型和大小。在C语言中，int是一种整数类型，用于存储整数值。'}, {'name': '变量声明和初始化', 'description': '变量声明是指在程序中声明一个变量，告诉编译器变量的类型和名称。变量初始化是指在声明变量的同时给变量赋初值。在C语言中，变量声明和初始化可以同时进行。'}, {'name': '格式化输出', 'description': '格式化输出是指按照一定的格式将数据输出到屏幕或文件中。在C语言中，可以使用printf函数进行格式化输出。'}, {'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些特殊的字符或控制字符。在C语言中，\\n是一个转义字符，表示换行符。'}]"
    },
    {
        "sortId": 790,
        "id": "1303509997762203648",
        "title": "有以下程序，其输出结果是( )。",
        "content": "有以下程序，其输出结果是( )。\n```\n#include \"stdio.h\"\nmain( )\n{\n  float x=1.0;\n  int y;\n  x++;\n  y=x+1;\n  printf(\"x=%f，y=%d\"，x，y);\n}\n```\n@[](2)\n\nA. x=2，y=3\nB. x=2，y=3．0\nC. x=2.000000，y=3\nD. x=2.0，y=3．000000",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "res": "[{'name':'数据类型转换'，'description':'在C语言中，不同数据类型之间的转换是一种常见的操作。在本题中，涉及到了将浮点数类型转换为整数类型的操作。'}]"
    }
]