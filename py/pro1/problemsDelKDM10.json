[
    {
        "sortId": 4999,
        "id": "1342883349173108736",
        "title": "自然数各位数字的平方和(*)",
        "content": "请编写程序，求自然数各位数字的平方和。\n\n例如：自然数 $$150$$ 各位数字的平方和为 $$1^2 + 5^2 + 0^2 = 1 + 25 + 0 = 26$$。\n\n#### 输入格式\n\n> 自然数\n\n#### 输出格式\n\n> 自然数各位数字的平方和\n\n#### 输入样例\n```in\n150\n```\n#### 输出样例\n```out\n26\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 21,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码，直到满足某个条件才停止循环。在本题中，可以使用循环结构来遍历自然数的每一位数字，并计算它们的平方和。'}, {'name':'变量和数据类型'，'description':'变量是C语言中用于存储数据的一种容器，数据类型指定了变量可以存储的数据的种类。在本题中，需要使用变量来存储输入的自然数和计算得到的平方和。'}, {'name':'算术运算符'，'description':'算术运算符是C语言中用于进行数值计算的一种运算符。在本题中，可以使用算术运算符来计算每个数字的平方，并累加得到平方和。'}, {'name':'输入输出函数'，'description':'输入输出函数是C语言中用于与用户进行交互的一种函数。在本题中，可以使用输入输出函数来获取用户输入的自然数，并将计算得到的平方和输出。'}]"
    },
    {
        "sortId": 5000,
        "id": "1342842976996450304",
        "title": "复数的加法(填空)",
        "content": "定义如下复数结构类型\n\n```c\ntypedef struct\n{\n\tdouble rp, ip;\n} COMPLEX;\n```\n\n说明：结构的成员 rp、ip 分别为复数的实部和虚部系数。\n\n下面的程序输入两个复数 a 和 b，计算两个复数的和 c，并输出 c 的值。\n\n请在空白处填写若干语句，完成该程序。\n\n```c\n#include <stdio.h>\n\ntypedef struct\n{\n\tdouble rp, ip;\n} COMPLEX;\n\nint main()\n{\n\tCOMPLEX a, b, c;\n\n\tscanf(\"%lg%lgi\", &a.rp, &a.ip);\n\tscanf(\"%lg%lgi\", &b.rp, &b.ip);\n\n\t/* 你提交的代码将被嵌在这里 */\n\n\tprintf(\"%g%+gi\\n\", c.rp, c.ip);\n\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\n4.2-2i\n2+0.3i\n\n```\n\n#### 输出样例\n```out\n6.2-1.7i\n\n```\n\n提示：$$(a + b i) + (c + d i) = (a + c) + (b + d) i$$\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 40,
        "res": "[{'name': '结构体定义', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的变量组合在一起，形成一个新的数据类型。在C语言中，使用关键字struct来定义结构体。本题中定义了一个名为COMPLEX的结构体，其中包含两个double类型的成员变量rp和ip，分别表示复数的实部和虚部系数。'}, {'name': '输入输出', 'description': '在C语言中，可以使用标准库函数scanf和printf来进行输入输出操作。本题中使用了scanf函数来输入两个复数的实部和虚部系数，使用printf函数来输出计算得到的复数的实部和虚部系数。'}, {'name': '算术运算', 'description': '本题中需要进行复数的加法运算。根据复数的加法规则，将两个复数的实部和虚部分别相加即可得到结果。'}]"
    },
    {
        "sortId": 5001,
        "id": "1342830715225505792",
        "title": "计算s=1+1/(1+2)+1/(1+2+3)+...+1/(1+2+3+...+n)",
        "content": "从键盘输入正整数$$n$$,计算$$s=1+\\frac{1}{1+2}+\\frac{1}{1+2+3}+\\cdots+\\frac{1}{1+2+3+\\cdots+n}$$的值\n\n### 输入格式:\n\n输入一个整数`n`\n\n### 输出格式:\n\n输出`sum = 实数`的形式, 输出保留10位小数.\n\n### 输入样例:\n\n```in\n10\n```\n\n### 输出样例:\n```out\nsum = 1.8181818182\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 72,
        "res": "[{'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以使用for循环或者while循环来实现。在本题中，可以使用循环来计算每一项的值，并将其累加到总和中。'}, {'name': '变量', 'description': '变量是用来存储数据的容器，可以通过声明变量来创建。在本题中，可以使用一个变量来存储总和的值，并在循环中更新它的值。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在本题中，可以使用算术运算来计算每一项的值，并将其累加到总和中。'}, {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。在本题中，可以使用类型转换来将整数除法的结果转换为实数。'}, {'name': '格式化输出', 'description': '格式化输出是将数据按照一定的格式输出的过程。在本题中，可以使用格式化输出来输出计算结果，并保留10位小数。'}]"
    },
    {
        "sortId": 5002,
        "id": "1342827231038152704",
        "title": "计算s = 1/1! + 1/2! + 1/3! + …+ 1/n!的值",
        "content": "从键盘输入正整数$$n$$，计算$$s=\\frac{1}{1!} + \\frac{1}{2!} + \\frac{1}{3!} + \\cdots+ \\frac{1}{n!}$$的值。\n\n### 输入格式:\n\n输入一个整数n\n\n### 输出格式:\n\n输出 `sum = 实数`的形式,输出保留10位小数\n\n### 输入样例:\n\n```in\n8\n```\n\n### 输出样例:\n```out\nsum = 1.7182787698\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 51,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码，根据题目要求，可以使用循环结构来计算阶乘和求和。'}, {'name':'数据类型'，'description':'C语言中的数据类型用于定义变量的类型，根据题目要求，需要使用整数类型来接收输入的整数n，并使用实数类型来保存计算结果。'}, {'name':'算术运算'，'description':'C语言中的算术运算符用于进行数值计算，根据题目要求，需要使用算术运算符来计算阶乘和求和。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数用于从键盘获取输入和向屏幕输出结果，根据题目要求，需要使用输入输出函数来获取输入的整数n和输出计算结果。'}]"
    },
    {
        "sortId": 5003,
        "id": "1342757846315442176",
        "title": "求简单交错序列的前N项和",
        "content": "本题要求编写程序,计算序列 1- 1/3 + 1/5 - 1/7 + 1/9……的前N项之和。\n\n### 输入格式:\n\n在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n\n```in\n20\n```\n\n### 输出样例:\n\n```out\nsum = 0.773\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 172,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，需要使用循环结构来计算序列的前N项之和。'}, {'name': '数据类型', 'description': '数据类型是C语言中用于存储不同类型数据的一种分类。在本题中，需要使用浮点型数据类型来存储计算结果，并保证精度。'}, {'name': '算术运算', 'description': '算术运算是C语言中的一种基本运算，包括加法、减法、乘法和除法等。在本题中，需要使用算术运算来计算序列的每一项，并累加求和。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件选择执行不同的代码。在本题中，需要使用条件判断来确定每一项的正负号。'}]"
    },
    {
        "sortId": 5004,
        "id": "1342754796238536704",
        "title": "求简单交错序列的前N项和",
        "content": "本题要求编写程序,计算序列 1 - 1/4 + 1/7 - 1/10 + ... 的前N项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出部分和的值S，精确到小数点后三位。题目保证计算结果不超过双精度范围。\n\n### 输入样例:\n\n```in\n20\n```\n\n### 输出样例:\n\n\n```out\nsum = 0.827\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 93,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，需要使用循环结构来计算序列的前N项之和。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，需要使用条件判断来确定每一项的正负号。'}, {'name': '浮点数运算', 'description': '浮点数运算是C语言中的一种数值运算，用于进行小数的计算。在本题中，需要使用浮点数运算来计算每一项的值，并累加求和。'}]"
    },
    {
        "sortId": 5005,
        "id": "1342644597931393024",
        "title": "判断字母的范围",
        "content": "输入一行字符串，判断这行字符串里的英文字母在什么范围之内（最小范围）。\n\n### 输入格式:\n\n输入一行字符串，长度小于100，回车结束。\n\n### 输出格式:\n\n输出这行字符串中英文字母的范围，用大写字母表示，由“-”连接。\n\n### 输入样例:\n\n```in\nhello\n\n```\n\n### 输出样例:\n\n```out\nE-O\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 45,
        "res": "[{'name':'字符串处理','description':'字符串处理是C语言中非常重要的知识点之一，通过对字符串的操作，可以实现很多功能。在这个习题中，需要对输入的字符串进行处理，判断其中的英文字母的范围。'}]"
    },
    {
        "sortId": 5006,
        "id": "1342640146717876224",
        "title": "五级制成绩",
        "content": "### 任务描述\n五级制成绩表示法可以这样来理解，A代表[90-100]、B代表[80-90)、C代表[70-80)、D代表[60-70)、E代表[0-60)。\n给出五级制成绩(一个字符)，请输出这个字符所代表的分数范围。\n\n### 输入格式:\n\n一个大写的英文字符，代表五级制成绩。\n\n### 输出格式:\n\n在一行中输出该成绩所表示的整数成绩范围区间，如果该字符不在五级制定义范围之内，输出：ERROR。\n\n### 输入样例1:\n```in\nA\n```\n### 输出样例1:\n```out\n[90-100]\n```\n### 输入样例2:\n```in\nD\n```\n### 输出样例2:\n```out\n[60-70)\n```\n### 输入样例3:\n```in\nX\n```\n### 输出样例3:\n```out\nERROR\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "69",
                        "name": "switch",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 119,
        "res": "[{'name': '条件语句', 'description': '条件语句用于根据不同的条件执行不同的代码块。在这个题目中，需要使用条件语句判断输入的字符所代表的分数范围。'}, {'name': '字符操作', 'description': '字符操作用于对字符进行比较和判断。在这个题目中，需要对输入的字符进行比较，判断其是否在五级制定义范围之内。'}, {'name': '输出格式', 'description': '输出格式用于规定输出结果的形式。在这个题目中，需要按照指定的格式输出结果，包括整数成绩范围区间和错误提示。'}]"
    },
    {
        "sortId": 5007,
        "id": "1342633188434657280",
        "title": "计算两个数的值",
        "content": "已知两个数x、y的和、差，请计算这两个数的值并输出。\n\n### 输入格式:\n\n输入两个整数a,b，分别表示两个数x,y的和、差。\n\n### 输出格式:\n\n输出x，y的值，用空格隔开。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n8 2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5 3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 35,
        "res": "[{'name':'基本运算','description':'基本运算是C语言程序设计中最基础的知识点之一，包括加法、减法、乘法、除法等运算。在本题中，需要对输入的两个数进行加法和减法运算。'}, {'name':'输入输出','description':'输入输出是C语言程序设计中常用的操作之一，用于从键盘上获取输入数据，并将结果输出到屏幕上。在本题中，需要从输入中获取两个整数，并将计算结果输出。'}, {'name':'变量','description':'变量是C语言程序设计中用于存储数据的容器，可以通过变量来保存计算结果。在本题中，需要定义两个整型变量来保存输入的两个整数和计算结果。'}, {'name':'运算符','description':'运算符是C语言程序设计中用于进行各种运算操作的符号，包括加法运算符、减法运算符等。在本题中，需要使用加法运算符和减法运算符来对输入的两个整数进行运算。'}, {'name':'数据类型','description':'数据类型是C语言程序设计中用于定义变量的属性，包括整型、浮点型、字符型等。在本题中，需要使用整型数据类型来定义保存输入的两个整数和计算结果的变量。'}]"
    },
    {
        "sortId": 5008,
        "id": "1342632063006416896",
        "title": "绝对值",
        "content": "### 任务描述\n输入一个整数，输出它的绝对值。\n### 输入格式:\n一个整数，不超出区间$$[-10000,10000]$$。\n### 输出格式:\n一个整数。\n### 输入样例1:\n```in\n100\n```\n### 输出样例1:\n```out\n100\n```\n### 输入样例2:\n```in\n-100\n```\n### 输出样例2:\n```out\n100\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 73,
        "res": "[{'name': '绝对值', 'description': '学生需要掌握如何判断一个数的绝对值，并能够编写相应的代码来实现求绝对值的功能。'}]"
    },
    {
        "sortId": 5009,
        "id": "1342627811466944512",
        "title": "C语言虐我千百遍，我待C语言如初恋",
        "content": "请输出“C语言虐我千百遍，我待C语言如初恋！”的英文翻译，你不要说你不会啊。\n\n### 输入格式:\n\n没有输入\n\n### 输出格式:\n\n输出一行英文，严格按输出样例显示输出。\n\n### 输入样例:\n\n\n```in\n```\n\n### 输出样例:\n\n```out\nC abused me thousands of times,My first love for C!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 77,
        "res": "[{'name':'基础语法'，'description':'基础语法包括变量、数据类型、运算符、控制语句等基本概念和用法。'}, {'name':'字符串处理'，'description':'字符串处理包括字符串的定义、输入输出、字符串函数的使用等。'}, {'name':'函数'，'description':'函数包括函数的定义、参数传递、返回值等。'}, {'name':'数组'，'description':'数组包括一维数组和多维数组的定义、初始化、访问等。'}, {'name':'指针'，'description':'指针包括指针的定义、指针与数组的关系、指针与函数的关系等。'}, {'name':'结构体'，'description':'结构体包括结构体的定义、结构体的成员、结构体的初始化等。'}, {'name':'文件操作'，'description':'文件操作包括文件的打开、读写、关闭等。'}, {'name':'动态内存分配'，'description':'动态内存分配包括动态内存的申请、释放等。'}, {'name':'预处理指令'，'description':'预处理指令包括宏定义、条件编译等。'}, {'name':'位运算'，'description':'位运算包括位运算符的使用、位操作的应用等。'}, {'name':'递归'，'description':'递归包括递归函数的定义、递归算法的实现等。'}, {'name':'指针与字符串'，'description':'指针与字符串包括指针与字符串的关系、字符串函数的实现等。'}, {'name':'指针与结构体'，'description':'指针与结构体包括指针与结构体的关系、结构体指针的使用等。'}, {'name':'指针与动态内存分配'，'description':'指针与动态内存分配包括指针与动态内存的关系、动态内存的应用等。'}, {'name':'指针与函数'，'description':'指针与函数包括指针与函数的关系、函数指针的使用等。'}, {'name':'指针与数组'，'description':'指针与数组包括指针与数组的关系、指针数组的使用等。'}, {'name':'指针与文件操作'，'description':'指针与文件操作包括指针与文件的关系、文件指针的使用等。'}, {'name':'指针与位运算'，'description':'指针与位运算包括指针与位运算的关系、位运算的应用等。'}, {'name':'指针与递归'，'description':'指针与递归包括指针与递归的关系、递归算法的实现等。'}, {'name':'数组与字符串'，'description':'数组与字符串包括数组与字符串的关系、字符串数组的使用等。'}, {'name':'数组与结构体'，'description':'数组与结构体包括数组与结构体的关系、结构体数组的使用等。'}, {'name':'数组与动态内存分配'，'description':'数组与动态内存分配包括数组与动态内存的关系、动态内存的应用等。'}, {'name':'数组与函数'，'description':'数组与函数包括数组与函数的关系、数组作为函数参数的使用等。'}, {'name':'数组与文件操作'，'description':'数组与文件操作包括数组与文件的关系、文件数组的使用等。'}, {'name':'数组与位运算'，'description':'数组与位运算包括数组与位运算的关系、位运算的应用等。'}, {'name':'数组与递归'，'description':'数组与递归包括数组与递归的关系、递归算法的实现等。'}, {'name':'结构体与字符串'，'description':'结构体与字符串包括结构体与字符串的关系、字符串结构体的使用等。'}, {'name':'结构体与动态内存分配'，'description':'结构体与动态内存分配包括结构体与动态内存的关系、动态内存的应用等。'}, {'name':'结构体与函数'，'description':'结构体与函数包括结构体与函数的关系、结构体作为函数参数的使用等。'}, {'name':'结构体与文件操作'，'description':'结构体与文件操作包括结构体与文件的关系、文件结构体的使用等。'}, {'name':'结构体与位运算'，'description':'结构体与位运算包括结构体与位运算的关系、位运算的应用等。'}, {'name':'结构体与递归'，'description':'结构体与递归包括结构体与递归的关系、递归算法的实现等。'}, {'name':'动态内存分配与字符串'，'description':'动态内存分配与字符串包括动态内存分配与字符串的关系、字符串动态内存的使用等。'}, {'name':'动态内存分配与函数'，'description':'动态内存分配与函数包括动态内存分配与函数的关系、动态内存作为函数参数的使用等。'}, {'name':'动态内存分配与文件操作'，'description':'动态内存分配与文件操作包括动态内存分配与文件的关系、文件动态内存的使用等。'}, {'name':'动态内存分配与位运算'，'description':'动态内存分配与位运算包括动态内存分配与位运算的关系、位运算的应用等。'}, {'name':'动态内存分配与递归'，'description':'动态内存分配与递归包括动态内存分配与递归的关系、递归算法的实现等。'}, {'name':'函数与字符串'，'description':'函数与字符串包括函数与字符串的关系、字符串函数的实现等。'}, {'name':'函数与文件操作'，'description':'函数与文件操作包括函数与文件的关系、文件函数的实现等。'}, {'name':'函数与位运算'，'description':'函数与位运算包括函数与位运算的关系、位运算的应用等。'}, {'name':'函数与递归'，'description':'函数与递归包括函数与递归的关系、递归算法的实现等。'}, {'name':'字符串与文件操作'，'description':'字符串与文件操作包括字符串与文件的关系、文件字符串的使用等。'}, {'name':'字符串与位运算'，'description':'字符串与位运算包括字符串与位运算的关系、位运算的应用等。'}, {'name':'字符串与递归'，'description':'字符串与递归包括字符串与递归的关系、递归算法的实现等。'}, {'name':'文件操作与位运算'，'description':'文件操作与位运算包括文件操作与位运算的关系、位运算的应用等。'}, {'name':'文件操作与递归'，'description':'文件操作与递归包括文件操作与递归的关系、递归算法的实现等。'}, {'name':'位运算与递归'，'description':'位运算与递归包括位运算与递归的关系、递归算法的实现等。'}, {'name':'指针与数组与字符串'，'description':'指针与数组与字符串包括指针与数组与字符串的关系、字符串数组指针的使用等。'}, {'name':'指针与数组与结构体'，'description':'指针与数组与结构体包括指针与数组与结构体的关系、结构体数组指针的使用等。'}, {'name':'指针与数组与动态内存分配'，'description':'指针与数组与动态内存分配包括指针与数组与动态内存的关系、动态内存数组指针的使用等。'}, {'name':'指针与数组与函数'，'description':'指针与数组与函数包括指针与数组与函数的关系、数组指针作为函数参数的使用等。'}, {'name':'指针与数组与文件操作'，'description':'指针与数组与文件操作包括指针与数组与文件的关系、文件数组指针的使用等。'}, {'name':'指针与数组与位运算'，'description':'指针与数组与位运算包括指针与数组与位运算的关系、位运算的应用等。'}, {'name':'指针与数组与递归'，'description':'指针与数组与递归包括指针与数组与递归的关系、递归算法的实现等。'}, {'name':'指针与结构体与字符串'，'description':'指针与结构体与字符串包括指针与结构体与字符串的关系、字符串结构体指针的使用等。'}, {'name':'指针与结构体与动态内存分配'，'description':'指针与结构体与动态内存分配包括指针与结构体与动态内存的关系、动态内存结构体指针的使用等。'}, {'name':'指针与结构体与函数'，'description':'指针与结构体与函数包括指针与结构体与函数的关系、结构体指针作为函数参数的使用等。'}, {'name':'指针与结构体与文件操作'，'description':'指针与结构体与文件操作包括指针与结构体与文件的关系、文件结构体指针的使用等。'}, {'name':'指针与结构体与位运算'，'description':'指针与结构体与位运算包括指针与结构体与位运算的关系、位运算的应用等。'}, {'name':'指针与结构体与递归'，'description':'指针与结构体与递归包括指针与结构体与递归的关系、递归算法的实现等。'}, {'name':'指针与动态内存分配与字符串'，'description':'指针与动态内存分配与字符串包括指针与动态内存分配与字符串的关系、字符串动态内存指针的使用等。'}, {'name':'指针与动态内存分配与函数'，'description':'指针与动态内存分配与函数包括指针与动态内存分配与函数的关系、动态内存指针作为函数参数的使用等。'}, {'name':'指针与动态内存分配与文件操作'，'description':'指针与动态内存分配与文件操作包括指针与动态内存分配与文件的关系、文件动态内存指针的使用等。'}, {'name':'指针与动态内存分配与位运算'，'description':'指针与动态内存分配与位运算包括指针与动态内存分配与位运算的关系、位运算的应用等。'}, {'name':'指针与动态内存分配与递归'，'description':'指针与动态内存分配与递归包括指针与动态内存分配与递归的关系、递归算法的实现等。'}, {'name':'指针与函数与字符串'，'description':'指针与函数与字符串包括指针与函数与字符串的关系、字符串函数指针的使用等。'}, {'name':'指针与函数与文件操作'，'description':'指针与函数与文件操作包括指针与函数与文件的关系、文件函数指针的使用等。'}, {'name':'指针与函数与位运算'，'description':'指针与函数与位运算包括指针与函数与位运算的关系、位运算的应用等。'}, {'name':'指针与函数与递归'，'description':'指针与函数与递归包括指针与函数与递归的关系、递归算法的实现等。'}, {'name':'指针与字符串与文件操作'，'description':'指针与字符串与文件操作包括指针与字符串与文件的关系、文件字符串指针的使用等。'}, {'name':'指针与字符串与位运算'，'description':'指针与字符串与位运算包括指针与字符串与位运算的关系、位运算的应用等。'}, {'name':'指针与字符串与递归'，'description':'指针与字符串与递归包括指针与字符串与递归的关系、递归算法的实现等。'}, {'name':'指针与文件操作与位运算'，'description':'指针与文件操作与位运算包括指针与文件操作与位运算的关系、位运算的应用等。'}, {'name':'指针与文件操作与递归'，'description':'指针与文件操作与递归包括指针与文件操作与递归的关系、递归算法的实现等。'}, {'name':'指针与位运算与递归'，'description':'指针与位运算与递归包括指针与位运算与递归的关系、递归算法的实现等。'}, {'name':'数组与字符串与结构体'，'description':'数组与字符串与结构体包括数组与字符串与结构体的关系、结构体字符串数组的使用等。'}, {'name':'数组与字符串与动态内存分配'，'description':'数组与字符串与动态内存分配包括数组与字符串与动态内存分配的关系、动态内存字符串数组的使用等。'}, {'name':'数组与字符串与函数'，'description':'数组与字符串与函数包括数组与字符串与函数的关系、字符串数组作为函数参数的使用等。'}, {'name':'数组与字符串与文件操作'，'description':'数组与字符串与文件操作包括数组与字符串与文件的关系、文件字符串数组的使用等。'}, {'name':'数组与字符串与位运算'，'description':'数组与字符串与位运算包括数组与字符串与位运算的关系、位运算的应用等。'}, {'name':'数组与字符串与递归'，'description':'数组与字符串与递归包括数组与字符串与递归的关系、递归算法的实现等。'}, {'name':'数组与结构体与动"
    },
    {
        "sortId": 5010,
        "id": "1342459721726828544",
        "title": " 倒序输出上三角数字阵列",
        "content": "本题要求编写程序，**倒序**输出 n行 由 指定数字开始构成的 左上三角形数字阵列。\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个正整数m。\n\n### 输出格式:\n\n**倒序**输出n行由m开始构成的左上三角形阵列。格式见输出样例，其中每个数字后面都有一个空格。\n\n### 输入样例:\n```in\n3 9\n```\n### 输出样例:\n```out\n9 8 7 \n6 5 \n4 \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 43,
        "res": "[{'name':'倒序输出左上三角形数字阵列','description':'本题要求编写程序，倒序输出 n行 由 指定数字开始构成的 左上三角形数字阵列。'}]"
    },
    {
        "sortId": 5011,
        "id": "1342458925601800192",
        "title": " 输出上三角数字阵列",
        "content": "本题要求编写程序，输出 n行 由 指定数字开始构成的 左上三角形数字阵列。\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个正整数m。\n\n### 输出格式:\n\n输出n行由m开始构成的左上三角形阵列。格式见输出样例，其中每个数字后面都有一个空格。\n\n### 输入样例:\n```in\n3 2\n```\n### 输出样例:\n```out\n2 3 4 \n5 6 \n7 \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 73,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制输出的行数和每行的数字个数。'}，{'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储输入的正整数n和m，并在循环中进行递增和输出。'}]"
    },
    {
        "sortId": 5012,
        "id": "1342457615393497088",
        "title": "倒序输出下三角数字阵列",
        "content": "本题要求编写程序，**倒序**输出 n行 由 指定数字开始构成的 左下三角形数字阵列。\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个正整数m。\n\n### 输出格式:\n\n倒序输出n行由m开始构成的左下三角形阵列。格式见输出样例，其中每个数字后面都有一个空格。\n\n### 输入样例:\n```in\n4 9\n```\n### 输出样例:\n```out\n9 \n8 7 \n6 5 4 \n3 2 1 0 \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 50,
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来控制输出的行数和每行的数字个数。'}, {'name':'条件判断语句'，'description':'条件判断语句用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件判断语句来判断是否需要输出空格。'}, {'name':'变量'，'description':'变量用于存储数据，在本题中可以使用变量来存储输入的n和m的值，并在循环中进行递减和输出。'}, {'name':'嵌套循环'，'description':'嵌套循环是指在一个循环内部再嵌套一个或多个循环。在本题中，可以使用嵌套循环来控制输出的行数和每行的数字个数。'}]"
    },
    {
        "sortId": 5013,
        "id": "1342454981571911680",
        "title": " 输出下三角数字阵列",
        "content": "本题要求编写程序，输出 n行 由 指定数字开始构成的 左下三角形数字阵列。\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个正整数m。\n\n### 输出格式:\n\n输出n行由m开始构成的左下三角形阵列。格式见输出样例，其中每个数字后面都有一个空格。\n\n### 输入样例:\n```in\n4 2\n```\n### 输出样例:\n```out\n2 \n3 4 \n5 6 7 \n8 9 10 11 \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 50,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制每行输出的数字个数。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储输入的正整数n和m，以及计算每行输出的数字个数。'}, {'name':'输出格式'，'description':'输出格式是指将数据以特定的格式输出。在本题中，可以使用输出格式来控制每个数字后面的空格，以及每行输出的换行符。'}]"
    },
    {
        "sortId": 5014,
        "id": "1342397139359907840",
        "title": "mystrcmp",
        "content": "写一个函数 int mystrcmp(const char *string1, const char *string2)\n\n函数的功能是比较2个字符串的大小。返回值表示两个字符串比较的结果。\n\n### 函数接口定义：\n```c++\n函数接口：\n int mystrcmp(const char *string1, const char *string2);\n```\n\n函数的功能是比较2个字符串的大小。返回值表示两个字符串比较的结果。\n\n\n![捕获.PNG](~/09c2563a-362d-49ae-9937-15ad745ef844.PNG)\n\n\n字符串比较的规则是对两个字符串自左至右逐个字符相比较（按ASCII码值大小比较），直到出现不同的字符或遇到‘\\0’为止。如全部字符相同，则认为相等；若出现不同的字符，则以第一个不相同的字符的比较结果为准。\n例如：\n\n“A”< “B”，“a”>“A”，“computer”>“compare”，“these”>“that”， “36+54”<“99”， “CHINA”>“CANADA”， “DOG”<“cat”，“abc”<“ax”，“abcde”>“abcd”。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nint mystrcmp(const char *s1, const char *s2);\n\nint main()\n{\n\tchar s1[30], s2[30];\n\tscanf(\"%s\", s1);\n\tscanf(\"%s\", s2);\n\tif (mystrcmp(s1, s2) > 0)\n\t{\n\t\tprintf(\"%s > %s\\n\", s1, s2);\n\t}\n\tif (mystrcmp(s1, s2) == 0)\n\t{\n\t\tprintf(\"%s == %s\\n\", s1, s2);\n\t}\n\tif (mystrcmp(s1, s2) < 0)\n\t{\n\t\tprintf(\"%s < %s\\n\", s1, s2);\n\t}\n\treturn 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n```in\nabcd\nax\n```\n\n### 输出样例：\n\n```out\nabcd < ax\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 8,
        "res": "[{'name': '字符串比较', 'description': '函数的功能是比较2个字符串的大小。返回值表示两个字符串比较的结果。字符串比较的规则是对两个字符串自左至右逐个字符相比较（按ASCII码值大小比较），直到出现不同的字符或遇到‘\\0’为止。如全部字符相同，则认为相等；若出现不同的字符，则以第一个不相同的字符的比较结果为准。例如：“A”< “B”，“a”>“A”，“computer”>“compare”，“these”>“that”， “36+54”<“99”， “CHINA”>“CANADA”， “DOG”<“cat”，“abc”<“ax”，“abcde”>“abcd”。'}]"
    },
    {
        "sortId": 5015,
        "id": "1342394861999628288",
        "title": "mystrcat",
        "content": "编写一个函数 char* mystrcat(char *s1, const char *s2)\n\n函数功能是把字符串s2的所有元素连接到字符串s1之后。函数返回指向字符串s1第一个元素的指针。\n\n### 函数接口定义：\n```c++\n函数接口：\n char* mystrcat(char *s1, const char *s2);\n```\n把字符串s2的所有元素连接到字符串s1之后。函数返回指向字符串s1第一个元素的指针。\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nchar *mystrcat(char *s1, const char *s2);\n\nint main()\n{\n\tchar a[100] = \"abcd\", b[60], c[30];\n\tscanf(\"%s\", b);\n\tscanf(\"%s\", c);\n\tmystrcat(a, mystrcat(b, c));\n\tputs(a);\n\treturn 0;\n}\n\n/* 请在这里填写答案 */\n\n```\n\n### 输入样例：\n\n```in\nfgh\nijk\n```\n\n### 输出样例：\n\n```out\nabcdfghijk\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 17,
        "res": "[{'name': '字符串连接', 'description': '函数功能是把字符串s2的所有元素连接到字符串s1之后。函数返回指向字符串s1第一个元素的指针。'}]"
    },
    {
        "sortId": 5016,
        "id": "1342394478409555968",
        "title": "武松喝酒景阳冈",
        "content": "武松又来景阳冈喝酒了，这次酒老板给他出了个难题：老板拿出很多碗酒，在桌子上摆成圆形，然后告诉武松，本地规矩，喝酒要数数，数到9的倍数或者数字里含有9才能喝，同时，本地人很讨厌7，所以如果数字是7的倍数或者数字里含有7就不能喝。比如，9,19可以喝，数到27就不能喝。老板告诉武松，酒碗按顺时针方向从1开始编号，从1号开始数起。老板说，如果武松能告诉他，他依次喝的酒碗的编号，就让他过去。你能帮帮他吗？\n\n### 输入格式:\n\n输入：在一行中给出1个整数N，表示酒的碗数，N不超过3000。\n\n### 输出格式:\n\n对每一组输入，在一行中输出酒碗的编号，中间用一个空格分隔，首尾不能有多余的空格。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3 1 2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "7",
                        "name": "线性结构",
                        "isLeaf": false,
                        "enName": "Linear Lists"
                    },
                    {
                        "id": "9",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": "Linked Lists"
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 77,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在这个题目中，需要使用循环结构来依次数数酒碗的编号。'}，{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来决定执行哪一段代码。在这个题目中，需要使用条件判断来判断酒碗的编号是否满足喝酒的条件。'}]"
    },
    {
        "sortId": 5017,
        "id": "1342392463310733312",
        "title": "mystrcpy",
        "content": "编写一个函数  char *mystrcpy(char *s1, const char *s2)\n\n它的功能是把字符串s2中的所有字符复制到字符数组s1中。函数返回指向数组s1第一个元素的指针。\n\n### 函数接口定义：\n```c++\n函数接口：\nchar *mystrcpy(char *s1, const char *s2);\n```\n把字符串s2中的所有字符复制到字符数组s1中。函数返回指向数组s1第一个元素的指针。\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nchar *mystrcpy(char *s1, const char *s2);\n\nint main()\n{\n\tchar a[30], b[30], c[30];\n\tgets(c);\n\tmystrcpy(a, mystrcpy(b, c));\n\tputs(a);\n\treturn 0;\n}\n\n/* 请在这里填写答案 */\n\n```\n\n### 输入样例：\n\n```in\nabcd\n```\n\n### 输出样例：\n\n```out\nabcd\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 7,
        "res": "[{'name': '字符串复制', 'description': '编写一个函数char *mystrcpy(char *s1, const char *s2)\\n\\n它的功能是把字符串s2中的所有字符复制到字符数组s1中。函数返回指向数组s1第一个元素的指针。'}]"
    },
    {
        "sortId": 5018,
        "id": "1342332368455483392",
        "title": "指针应用-查找数组元素",
        "content": "编写一个名为findX的函数，该函数的参数p指向一个int数组，数组的容量n由参数2指定。在该数组中，查找数据x所在的位置。如果数据x有**出现多次**，则返回其**最后一次**出现的位置对应的下标。如果没有找到，则固定**返回-2**。\n\nint  findX(int *p,int n,int x);\n\n### 函数接口定义：\n```c++\nint  findX(int *p,int n,int x);\n```\n在这里解释接口参数。例如：其中 `p` 和 `n`以及`x` 都是用户传入的参数。 `p` 是一个指针，指向的数组中有 `n` 个元素，在该数组中查找数据 `x` **最后一次出现**的位置。\n\n**如果找到数据，返回其在数组中的最后一次出现位置的下标；如果没有找到，函数固定返回-2。**\n\n### 裁判测试程序样例：\n```c++\n\n#include<stdio.h>\n#define N 12\n\n//p指向int数组，数组容量为n，要找的数据是x \nint  findX(int *p,int n,int x);\n\nint  main()\n{\n    int a[N];//int数组 \n    int i,x; //循环变量i，要查找的整数x \n    int iRet; //函数调用的返回值\n\t\n\t//接收输入\n\tfor(i=0; i<N;i++) \n\t  iRet = scanf(\"%d\", &a[i]);\n    iRet = scanf(\"%d\",&x);\n    \n    //处理，调用函数 \n    iRet=findX(a,12,x); //在名为a的容量为12的数组中，寻找数据x是否存在 \n    \n    if ( iRet < 0)\n      printf(\"Not Found\\n\");\n    else\n      printf(\"index=%d,value=%d\" ,iRet ,a[iRet]);\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n第一行是数组元素的值。第二行的3，表示要在数组中查找数据3出现位置。\n\n```in\n1 2 3 4 5 6 7 8 9 10 11 12\n3\n```\n\n### 输出样例：\n数据3是数组的第3个元素，所对应的下标是2。\n```out\nindex=2,value=3\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 114,
        "res": "[{'name': '指针', 'description': '在C语言中，指针是一种特殊的变量类型，它存储了一个变量的内存地址。通过指针，我们可以直接访问和修改该内存地址上存储的值。在本题中，参数p是一个指向int数组的指针，通过p可以访问和操作数组中的元素。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，它可以接受输入参数并返回一个值。在本题中，findX函数是一个用于查找数据x在数组中最后一次出现位置的函数。它接受三个参数：指向int数组的指针p，数组的容量n，以及要查找的数据x。函数内部通过遍历数组，找到数据x最后一次出现的位置，并返回该位置的下标。如果没有找到数据x，则返回固定值-2。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在本题中，使用循环变量i来遍历数组中的每个元素，以便查找数据x的位置。通过循环，可以逐个比较数组中的元素与数据x的值，找到最后一次出现的位置。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在本题中，使用条件语句判断是否找到了数据x。如果找到了数据x，则输出该位置的下标和对应的值；如果没有找到，则输出\"Not Found\"。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在本题中，使用scanf函数接收用户输入的数组元素的值和要查找的数据x的值。使用printf函数输出查找结果。'}]"
    },
    {
        "sortId": 5019,
        "id": "1342325986356379648",
        "title": "ZY04-一维整型数组-降序排列",
        "content": "对一个整型数组进行排序。从键盘接收一个整型数据n，用户输入的值**一定位于1到9之间**（含边界）。接下来接收n个整数到数组中，选用任何一种方式对数据元素**降序排列**后，输出数组中的每一个值。\n\n### 输入格式:\n\n输入第一行给出一个不超过9的正整数n。第二行给出n个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中输出从大道小降序排列后的数组元素，两个数字之间**有且仅有**一个空格。**最后一个数字后，没有空格。**\n\n### 输入样例:\n\n第一个整数6，表示要接收6个整数到数组中：\n```in\n6\n6 1 0 2 1 3\n```\n\n### 输出样例:\n\n数值从大到小排列，最后一个数之后没有空格。\n```out\n6 3 2 1 1 0\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 59,
        "res": "[{'name':'数组排序','description':'对一个整型数组进行排序，选用任何一种方式对数据元素降序排列后，输出数组中的每一个值。'}]"
    },
    {
        "sortId": 5020,
        "id": "1342323699089154048",
        "title": "ZY03-循环结构-计算Sin(x)",
        "content": "sin（x）泰勒展开公示为：\n\n![sinx泰勒展开.jpg](~/dcb4fb5b-38aa-4e9c-ac66-885bdc3bed6b.jpg)\n\n注意观察规律，符号位，依次为**正、负、正、负交替**。\n本题中x的值固定为0.523598776，也就是PI/6，角度为30度。从键盘接收**用户输入的一个整数n**，例如输入1，表示上面公示的最少一项绝对值要小于0.1；输入2，小于0.01；输入3，小于0.001，以此类推。如果需要，你可以从下面复制部分代码。\n\n#include <stdio.h>\n\n#include <math.h>\n\ndouble x=0.523598776;\n\n\ndouble getFac(int n)\n\n{\n\n\tdouble dRet=1;\n\t\n\tint i;\n\t\n\tfor(i=2;i<=n; i++)\n\t\n\t{\n\t\n\t\tdRet *=i;\n\t\t\n\t}\n\t\n\t//循环结束，返回阶乘结果\n\treturn  dRet;  \n\t\n}\n\n\n### 输入格式:\n\n一个整数，用户输入的一定在1到10之间，含边界。假定存放用户输入数据的变量是n，则是要求最后一项的绝对值小于pow(10,-1*n)。\n\n### 输出格式:\n\n保留9位小数的Sin(x)的值。\n\n### 输入样例:\n\n表示泰勒展开的最后一项的绝对值，小于0.1。\n\n```in\n1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n0.499674180\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 31,
        "res": "[{'name': '泰勒展开', 'description': '泰勒展开是一种将函数表示为无穷级数的方法，通过使用函数在某一点的各阶导数来逼近函数的值。在本题中，使用泰勒展开来逼近sin(x)的值。'}, {'name': '阶乘', 'description': '阶乘是指从1乘到某个正整数n的连乘积，用符号n!表示。在本题中，使用阶乘来计算泰勒展开中的分母部分。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以根据循环变量的值来控制循环的次数。在本题中，使用循环来计算阶乘。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交互的过程。在本题中，从键盘接收用户输入的整数n，并输出计算结果。'}, {'name': '数学函数', 'description': '数学函数是一种用于进行数学运算的函数，如sin、pow等。在本题中，使用math.h库中的sin函数和pow函数来计算sin(x)的值和最后一项的绝对值。'}]"
    },
    {
        "sortId": 5021,
        "id": "1342314356419600384",
        "title": "ZY02-选择结构-字符变换",
        "content": "接收用户从键盘输入的单个字符。然后根据字符的类型，对它的ASCII编码做加法，**变换指定的字符为其他字符：\n如果是数字，加上2；如果是大写字母，加上3；如果是小写字母，加上4。**\n\n不是上述的字符范围，不变。\n\n### 输入格式:\n\n一个字符。\n\n### 输出格式:\n\n变换或未变换后的字符。\n\n### 输入样例1:\n\n```in\n3\n```\n\n### 输出样例1:\n\n数字是ASCII编码加上的2。\n\n```out\n5\n```\n### 输入样例2:\n\n```in\nB\n```\n\n### 输出样例2:\n\n数字是ASCII编码加上的3。\n\n```in\nE\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 122,
        "res": "[{'name': '字符类型判断', 'description': '根据输入的字符判断其类型，包括数字、大写字母和小写字母。'}, {'name': 'ASCII编码加法', 'description': '根据字符的类型，对其ASCII编码进行加法操作，包括数字加2、大写字母加3和小写字母加4。'}, {'name': '字符变换', 'description': '根据加法操作后的ASCII编码，将字符变换为其他字符。'}]"
    },
    {
        "sortId": 5022,
        "id": "1342311844484489216",
        "title": "ZY01-输出处理输出-理财计算",
        "content": "周博通星期一买了10000元(一万元)的理财产品。该产品周二上涨了2.34，周三下跌了2.34%。请计算周三结束时，周博通**理财产品的净值是多少**。为了完成此任务，你需要定义一个双精度的数，来接收这个涨跌幅。这里假定，恰好是前一天上涨了多少，后一天就下跌了多少。\n注意：用户输入的小数，**一定位于0到10的闭区间之内**，也就是最大涨跌幅小于等于10%。\n\n### 输入格式:\n\n一个浮点数。例如输入5.00，代表涨跌幅是5.00%。\n\n### 输出格式:\n\n保留三位小数的理财产品净值。\n\n### 输入样例:\n\n输入5.00，表示净值是：10000*(1+5%)*(1-5%)\n\n```in\n5.00\n```\n\n### 输出样例:\n\n保留三位小数。\n\n```out\n9975.000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 47,
        "res": "[{'name':'浮点数','description':'浮点数是一种用于表示带有小数部分的数值的数据类型。在C语言中，浮点数类型包括float和double两种。float类型可以表示大约6位有效数字的数值，而double类型可以表示大约15位有效数字的数值。在本题中，需要定义一个双精度的数来接收涨跌幅。'}, {'name':'算术运算符','description':'算术运算符用于执行基本的数学运算，包括加法、减法、乘法和除法。在本题中，需要使用加法和乘法运算符来计算理财产品的净值。'}, {'name':'格式化输出','description':'格式化输出是指按照一定的格式将数据输出到屏幕上。在C语言中，可以使用printf函数来进行格式化输出。在本题中，需要使用printf函数将计算得到的净值输出，并保留三位小数。'}]"
    },
    {
        "sortId": 5023,
        "id": "1342281747660554240",
        "title": "编写程序求一个整数x的y次方。",
        "content": "编写程序求一个整数x的y次方。\n### 函数接口定义：\n```c++\nint fun(int x,int y);\n```\n\n在这里解释接口参数。例如：其中 `N` 和 `D` 都是用户传入的参数。 `N` 的值不超过`int`的范围； `D` 是[0, 9]区间内的个位数。函数须返回 `N` 中 `D` 出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint fun(int x,int y);\nint main()\n{\n  int x, y;\n  scanf(\"%d %d\", &x, &y);\n  printf(\"%d\", fun(x, y));\n  return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2 3\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n8\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 96,
        "res": "[{'name':'函数接口定义'，'description':'解释接口参数'}, {'name':'scanf函数'，'description':'读取输入'}, {'name':'printf函数'，'description':'输出结果'}, {'name':'函数定义'，'description':'定义函数fun'}, {'name':'循环结构'，'description':'使用循环结构计算x的y次方'}, {'name':'变量定义'，'description':'定义变量x和y'}, {'name':'数据类型'，'description':'整数类型'}, {'name':'运算符'，'description':'乘法运算符'}, {'name':'输入样例'，'description':'给出一组输入'}, {'name':'输出样例'，'description':'给出相应的输出'}]"
    },
    {
        "sortId": 5024,
        "id": "1342276437776539648",
        "title": "给定正整数n(包括n)以内的素数和。",
        "content": "给定正整数n以内的素数和。\n\n### 函数接口定义：\n```c++\nint fun(int n);\n```\n\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint fun(int n);\nint main()\n{\n  int n;\n  scanf(\"%d\", &n);\n  printf(\"%d\", fun(n));\n  return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n10\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n17\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 66,
        "res": "[{'name':'素数和', 'description':'给定正整数n以内的素数和。'}]"
    },
    {
        "sortId": 5025,
        "id": "1342271390544052224",
        "title": "输入一个三位数，判断其是否是水仙花数。",
        "content": "输入一个三位数，判断其是否是水仙花数。\n\n### 函数接口定义：\n```c++\nint fun ( int x);\n```\n\n\n### 裁判测试程序样例：\n```c++\n\n#include <stdio.h>\nint fun ( int n);\n\nint main()\n{\n\n  int n;\n  scanf(\"%d \", &n);\n  if(fun(n))\n       printf(\"%d是水仙花数\\n\",n);\n\telse\n\t\tprintf(\"%d不是水仙花数\\n\",n);\n\t\t\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n153\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n153是水仙花数\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 78,
        "res": "[{'name':'函数定义与调用'，'description':'函数是C语言中的一种程序模块，用于封装一段特定的功能代码，可以在程序中多次调用。本题中的函数fun用于判断一个三位数是否是水仙花数。'}，{'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。本题中的if语句用于根据函数fun的返回值来判断是否是水仙花数，并输出相应的结果。'}，{'name':'输入输出函数'，'description':'输入输出函数用于从用户输入获取数据或将结果输出到屏幕上。本题中使用了scanf函数获取输入的三位数，使用了printf函数输出判断结果。'}]"
    },
    {
        "sortId": 5026,
        "id": "1342269250975055872",
        "title": "用辗转相除法求最大公约数",
        "content": "用辗转相除法求最大公约数\n\n### 函数接口定义：\n```c++\nint fun(int a,int b);\n```\n\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint fun(int a,int b);\n\nint main()\n{\n\n  int a, b;\n\n  scanf(\"%d %d\", &a, &b);\n\n  printf(\"%d\", fun(a,b));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n36 48\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n12\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 91,
        "res": "[{'name':'辗转相除法','description':'辗转相除法是一种求两个数的最大公约数的方法，通过反复用较小数除较大数，直到余数为0，最后的除数就是最大公约数。'}]"
    },
    {
        "sortId": 5027,
        "id": "1342267148030713856",
        "title": "求斐波那契数列的前n项的和。",
        "content": "求斐波那契数列的前n项的和。\n### 函数接口定义：\n```c++\nint fun ( int n );\n```\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint fun ( int n );\nint main()\n{\n\n  int n ;\n\n  scanf(\"%d\", &n);\n\n  printf(\"%d\", fun(n));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n4\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 61,
        "res": "[{'name':'递归函数','description':'递归函数是指在函数的定义中调用函数本身的函数。在本题中，可以使用递归函数来求解斐波那契数列的前n项的和。递归函数的特点是函数内部调用自身，并且需要有一个终止条件来结束递归。在本题中，终止条件可以是n=0或n=1时，直接返回n的值。当n大于1时，可以通过调用fun(n-1)和fun(n-2)来递归地求解斐波那契数列的前n项的和。'}]"
    },
    {
        "sortId": 5028,
        "id": "1342264207622283264",
        "title": "判断一个整数是否是素数。",
        "content": "判断一个整数是否是素数。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint fun(int m);\n```\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nint fun(int m);\n\nint main()\n{\n\n  int m;\n\n  scanf(\"%d\", &m);\n\t\n\tif(fun(m)==1)\n\n         printf(\"%d is a prime.\\n\",m);\n\telse\t\t    \n          printf(\"%d is not a prime.\\n\",m);\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n7\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n7 is a prime.\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 192,
        "res": "[{'name': '判断素数', 'description': '学生需要掌握判断一个整数是否是素数的方法，可以通过循环遍历从2到该数的平方根的所有数，判断是否能整除该数来判断是否是素数。'}]"
    },
    {
        "sortId": 5029,
        "id": "1342255583952912384",
        "title": "用函数实现求求 a + aa + aaa + aa…a(n 个 a)之和。 ",
        "content": "用函数实现求求 a + aa + aaa + aa…a(n 个 a)之和。 \n\n### 函数接口定义：\n```c++\nint fun(int a,int n);\n```\n\n。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nint fun(int a,int n);\n\nint main()\n{\n\n\tint a,n;\n\tscanf(\"%d %d\",&a,&n);\n    printf(\"%d\", fun(a,n));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2 3\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n246\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 108,
        "res": "[{'name': '函数定义', 'description': '函数是C语言中的一种程序模块，用于封装一段特定的功能代码。函数通过接口定义来规定输入参数和返回值的类型，可以在程序中被调用和重复使用。'}, {'name': '函数调用', 'description': '函数调用是指在程序中使用函数名和参数列表来调用函数，以执行函数中定义的功能代码。函数调用可以在程序中的任何地方进行，通过函数调用可以将程序的执行流程转移到函数中执行。'}, {'name': '变量定义', 'description': '变量是用于存储数据的内存空间，通过变量名来访问和操作其中的数据。在C语言中，变量需要先进行定义，定义时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用标准库函数来实现输入输出操作，如scanf函数用于从标准输入流中读取数据，printf函数用于向标准输出流中输出数据。'}, {'name': '循环结构', 'description': '循环结构是一种控制程序执行流程的结构，通过循环条件来判断是否继续执行循环体中的代码。在C语言中，常用的循环结构有for循环、while循环和do-while循环。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件判断来选择执行不同代码路径的结构。在C语言中，常用的条件语句有if语句和switch语句。'}, {'name': '数据类型', 'description': '数据类型是用于定义变量的属性和操作的规则。在C语言中，常用的数据类型有整型、浮点型、字符型和指针型等。'}, {'name': '运算符', 'description': '运算符是用于进行数值计算和逻辑判断的符号。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符和赋值运算符等。'}, {'name': '数组', 'description': '数组是一种用于存储多个相同类型数据的连续内存空间。在C语言中，可以通过定义数组来存储和操作一组数据，数组的元素可以通过下标来访问和修改。'}, {'name': '递归', 'description': '递归是一种通过调用自身来解决问题的方法。在C语言中，可以使用递归来实现一些需要重复执行的任务，如求阶乘、斐波那契数列等。'}]"
    },
    {
        "sortId": 5030,
        "id": "1342250588713000960",
        "title": "求一个整数的各位数字之积。",
        "content": "求一个整数的各位数字之积。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint fun(int m);\n```\n\n### 裁判测试程序样例：\n```c++\n\n#include <stdio.h>\n\nint fun(int  n);\n\nint main()\n{\n\n  int  m;\n\n  scanf(\"%d\", &m);\n\n  printf(\"%d\",fun(m));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n1234\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n24\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 73,
        "res": "[{'name':'函数定义与调用'，'description':'函数接口定义和调用的基本知识点'}, {'name':'输入输出'，'description':'使用scanf和printf函数进行输入输出的知识点'}, {'name':'变量定义与赋值'，'description':'变量的定义和赋值操作的知识点'}, {'name':'循环结构'，'description':'使用循环结构求解问题的知识点'}, {'name':'条件判断'，'description':'使用条件判断语句进行逻辑判断的知识点'}, {'name':'数学运算'，'description':'使用数学运算符进行数值计算的知识点'}]"
    },
    {
        "sortId": 5031,
        "id": "1342099663759360000",
        "title": "编写函数，计算给定公式的值。",
        "content": "根据参数，计算给定公式的值。\ny=1/2+1/3+1/4+...+1/(m+2)\n### 函数接口定义：\n```c++\ndouble fun(int m);\n```\n\n\n### 裁判测试程序样例：\n```c++\n\n#include <stdio.h>\n\ndouble fun(int m);\n\nint main()\n{\n\n  int n;\n\n  scanf(\"%d\", &n );\n\n  printf(\" %f\\n\",fun(n));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n1\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n0.833333\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 87,
        "res": "[{'name':'函数定义与调用'，'description':'学习如何定义函数以及如何调用函数'}, {'name':'变量定义与赋值'，'description':'学习如何定义变量以及如何给变量赋值'}, {'name':'循环结构'，'description':'学习如何使用循环结构解决问题'}, {'name':'数据类型'，'description':'学习不同的数据类型以及如何使用它们'}, {'name':'输入输出'，'description':'学习如何从键盘输入数据以及如何向屏幕输出数据'}, {'name':'运算符'，'description':'学习不同的运算符以及它们的优先级和结合性'}, {'name':'条件语句'，'description':'学习如何使用条件语句进行判断和选择'}, {'name':'数组'，'description':'学习如何定义和使用数组'}, {'name':'指针'，'description':'学习如何定义和使用指针'}, {'name':'字符串'，'description':'学习如何定义和使用字符串'}, {'name':'文件操作'，'description':'学习如何进行文件的读写操作'}, {'name':'递归'，'description':'学习如何使用递归解决问题'}, {'name':'结构体'，'description':'学习如何定义和使用结构体'}, {'name':'预处理指令'，'description':'学习如何使用预处理指令进行代码的预处理'}, {'name':'位运算'，'description':'学习如何使用位运算进行高效的计算'}, {'name':'动态内存分配'，'description':'学习如何使用动态内存分配进行灵活的内存管理'}, {'name':'函数指针'，'description':'学习如何定义和使用函数指针'}, {'name':'模块化编程'，'description':'学习如何将程序分解为多个模块进行开发和维护'}, {'name':'异常处理'，'description':'学习如何处理程序中的异常情况'}, {'name':'多线程编程'，'description':'学习如何使用多线程进行并发编程'}, {'name':'网络编程'，'description':'学习如何进行网络通信和编程'}, {'name':'数据结构'，'description':'学习不同的数据结构以及如何使用它们'}, {'name':'算法'，'description':'学习不同的算法以及如何分析和优化算法的效率'}, {'name':'面向对象编程'，'description':'学习如何使用面向对象的思想进行程序设计'}, {'name':'图形界面编程'，'description':'学习如何使用图形界面进行程序的交互和展示'}, {'name':'嵌入式系统'，'description':'学习如何进行嵌入式系统的开发和调试'}, {'name':'并行计算'，'description':'学习如何使用并行计算进行高效的计算'}, {'name':'人工智能'，'description':'学习如何使用人工智能算法进行问题的求解'}, {'name':'编译原理'，'description':'学习编译原理的基本概念和技术'}, {'name':'操作系统'，'description':'学习操作系统的基本原理和功能'}, {'name':'数据库'，'description':'学习数据库的基本概念和操作'}, {'name':'网络安全'，'description':'学习网络安全的基本知识和技术'}, {'name':'软件工程'，'description':'学习软件工程的基本原理和方法'}, {'name':'计算机组成原理'，'description':'学习计算机组成原理的基本概念和结构'}, {'name':'计算机网络'，'description':'学习计算机网络的基本原理和协议'}, {'name':'算法分析'，'description':'学习如何分析和评估算法的效率和复杂度'}, {'name':'数据挖掘'，'description':'学习如何从大量数据中挖掘有用的信息'}, {'name':'机器学习'，'description':'学习如何使用机器学习算法进行数据分析和预测'}, {'name':'深度学习'，'description':'学习如何使用深度学习算法进行图像和语音识别'}, {'name':'自然语言处理'，'description':'学习如何使用自然语言处理算法进行文本分析和处理'}, {'name':'计算机图形学'，'description':'学习计算机图形学的基本原理和技术'}, {'name':'虚拟现实'，'description':'学习虚拟现实的基本概念和技术'}, {'name':'计算机体系结构'，'description':'学习计算机体系结构的基本原理和设计'}, {'name':'计算机安全'，'description':'学习计算机安全的基本知识和技术'}, {'name':'计算机图像处理'，'description':'学习计算机图像处理的基本原理和方法'}, {'name':'计算机音频处理'，'description':'学习计算机音频处理的基本原理和方法'}, {'name':'计算机视觉'，'description':'学习计算机视觉的基本原理和方法'}, {'name':'计算机语音处理'，'description':'学习计算机语音处理的基本原理和方法'}, {'name':'计算机自动控制'，'description':'学习计算机自动控制的基本原理和方法'}, {'name':'计算机仿真'，'description':'学习计算机仿真的基本原理和方法'}, {'name':'计算机模式识别'，'description':'学习计算机模式识别的基本原理和方法'}, {'name':'计算机信息处理'，'description':'学习计算机信息处理的基本原理和方法'}, {'name':'计算机数据压缩'，'description':'学习计算机数据压缩的基本原理和方法'}, {'name':'计算机数据加密'，'description':'学习计算机数据加密的基本原理和方法'}, {'name':'计算机数据恢复'，'description':'学习计算机数据恢复的基本原理和方法'}, {'name':'计算机数据存储'，'description':'学习计算机数据存储的基本原理和方法'}, {'name':'计算机数据传输'，'description':'学习计算机数据传输的基本原理和方法'}, {'name':'计算机数据交换'，'description':'学习计算机数据交换的基本原理和方法'}, {'name':'计算机数据处理'，'description':'学习计算机数据处理的基本原理和方法'}, {'name':'计算机数据管理'，'description':'学习计算机数据管理的基本原理和方法'}, {'name':'计算机数据查询'，'description':'学习计算机数据查询的基本原理和方法'}, {'name':'计算机数据分析'，'description':'学习计算机数据分析的基本原理和方法'}, {'name':'计算机数据建模'，'description':'学习计算机数据建模的基本原理和方法'}, {'name':'计算机数据评估'，'description':'学习计算机数据评估的基本原理和方法'}, {'name':'计算机数据验证'，'description':'学习计算机数据验证的基本原理和方法'}, {'name':'计算机数据测试'，'description':'学习计算机数据测试的基本原理和方法'}, {'name':'计算机数据优化'，'description':'学习计算机数据优化的基本原理和方法'}, {'name':'计算机数据可视化'，'description':'学习计算机数据可视化的基本原理和方法'}, {'name':'计算机数据挖掘'，'description':'学习计算机数据挖掘的基本原理和方法'}, {'name':'计算机数据分发'，'description':'学习计算机数据分发的基本原理和方法'}, {'name':'计算机数据共享'，'description':'学习计算机数据共享的基本原理和方法'}, {'name':'计算机数据保护'，'description':'学习计算机数据保护的基本原理和方法'}, {'name':'计算机数据备份'，'description':'学习计算机数据备份的基本原理和方法'}, {'name':'计算机数据恢复'，'description':'学习计算机数据恢复的基本原理和方法'}, {'name':'计算机数据存储'，'description':'学习计算机数据存储的基本原理和方法'}, {'name':'计算机数据传输'，'description':'学习计算机数据传输的基本原理和方法'}, {'name':'计算机数据交换'，'description':'学习计算机数据交换的基本原理和方法'}, {'name':'计算机数据处理'，'description':'学习计算机数据处理的基本原理和方法'}, {'name':'计算机数据管理'，'description':'学习计算机数据管理的基本原理和方法'}, {'name':'计算机数据查询'，'description':'学习计算机数据查询的基本原理和方法'}, {'name':'计算机数据分析'，'description':'学习计算机数据分析的基本原理和方法'}, {'name':'计算机数据建模'，'description':'学习计算机数据建模的基本原理和方法'}, {'name':'计算机数据评估'，'description':'学习计算机数据评估的基本原理和方法'}, {'name':'计算机数据验证'，'description':'学习计算机数据验证的基本原理和方法'}, {'name':'计算机数据测试'，'description':'学习计算机数据测试的基本原理和方法'}, {'name':'计算机数据优化'，'description':'学习计算机数据优化的基本原理和方法'}, {'name':'计算机数据可视化'，'description':'学习计算机数据可视化的基本原理和方法'}, {'name':'计算机数据挖掘'，'description':'学习计算机数据挖掘的基本原理和方法'}, {'name':'计算机数据分发'，'description':'学习计算机数据分发的基本原理和方法'}, {'name':'计算机数据共享'，'description':'学习计算机数据共享的基本原理和方法'}, {'name':'计算机数据保护'，'description':'学习计算机数据保护的基本原理和方法'}, {'name':'计算机数据备份'，'description':'学习计算机数据备份的基本原理和方法'}, {'name':'计算机数据恢复'，'description':'学习计算机数据恢复的基本原理和方法'}, {'name':'计算机数据存储'，'description':'学习计算机数据存储的基本原理和方法'}, {'name':'计算机数据传输'，'description':'学习计算机数据传输的基本原理和方法'}, {'name':'计算机数据交换'，'description':'学习计算机数据交换的基本原理和方法'}, {'name':'计算机数据处理'，'description':'学习计算机数据处理的基本原理和方法'}, {'name':'计算机数据管理'，'description':'学习计算机数据管理的基本原理和方法'}, {'name':'计算机数据查询'，'description':'学习计算机数据查询的基本原理和方法'}, {'name':'计算机数据分析'，'description':'学习计算机数据分析的基本原理和方法'}, {'name':'计算机数据建模'，'description':'学习计算机数据建模的基本原理和方法'}, {'name':'计算机数据评估'，'description':'学习计算机数据评估的基本原理和方法'}, {'name':'计算机数据验证'，'description':'学习计算机数据验证的基本原理和方法'}, {'name':'计算机数据测试'，'description':'学习计算机数据测试的基本原理和方法'}, {'name':'计算机数据优化'，'description':'学习计算机数据优化的基本原理和方法'}, {'name':'计算机数据可视化'，'description':'学习计算机数据可视化的基本原理和方法'}, {'name':'计算机数据挖掘'，'description':'学习计算机数据挖掘的基本原理和方法'}, {'name':'计算机数据分发'，'description':'学习计算机数据分发的基本原理和方法'}, {'name':'计算机数据共享'，'description':'学习计算机数据共享的基本原理和方法'}, {'name':'计算机数据保护'，'description':'学习计算机数据保护的基本原理和方法'}, {'name':'计算机数据备份'，'description':'学习计算机数据备份的基本原理和方法'}, {'name':'计算机数据恢复'，'description':'学习计算机数据恢复的基本原理和方法'}, {'name':'计算机数据存储'，'description':'学习计算机数据存储的基本原理和方法'}, {'name':'计算机数据传输'，'description':'学习计算机数据传输的基本原理和方法'}, {'name':'计算机数据交换'，'description':'学习计算机数据交换的基本原理和方法'}, {'name':'计算机数据处理'，'description':'学习计算机数据处理的基本原理和方法'}, {'name':'计算机数据管理'，'description':'学习计算机数据管理的基本原理和方法'}, {'name':'计算机数据查询'，'description':'学习计算机数据查询的基本原理和方法'}, {'name':'计算机数据分析'，'description':'学习计算机数据分析的基本原理和方法'}, {'name':'计算机数据建模'，'description':'学习计算机数据建模的基本原理和方法'}, {'name':'计算机数据评估'，'description':'学习计算机数据评估的基本原理和方法'}, {'name':'计算机数据验证'，'description':'学习计算机数据验证的基本原理和方法'}, {'name':'计算机数据测试'，'description':'学习计算机数据测试的基本原"
    },
    {
        "sortId": 5032,
        "id": "1341991417279160320",
        "title": "复数运算",
        "content": "复数是由两个实数分别作为实部和虚部构成的一个复合数，从另一个角度来说复数就是由两个实数构成的有序对，在C语言中适合用结构类型来表示复数。现在要求用结构类型\n```c++\ntypedef struct\n{\n    float x;\n    float y;\n} Comp;\n```\n及其变量来表示与存储复数，编写程序实现复数的加减法运算。\n\n### 输入格式:\n\n在一行输入四个用空格分开的实数`a1 b1 a2 b2`分别表示复数`c1 = a1 + b1i`和`c2 = a2 + b2i`\n\n### 输出格式:\n复数的输出应符合数学上关于复数的表示习惯：实部与虚部都为零时只输出一个0.00； 有一个为零时，只输出非零的部分;  虚部为负时，例如`3-4i`，应输出为`3.00-4.00i`的形式，不要输出为`3.00+-4.00i`。实部与虚部均保留2位小数，例如`3.00-4.00i`\n输出在两行进行，第一行输出求和的结果，第二行输出求差的结果。\n### 输入样例:\n```in\n5.00 4.00 3.00 2.00\n```\n\n### 输出样例:\n```out\n8.00+6.00i\n2.00+2.00i\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 72,
        "res": "[{'name':'结构类型','description':'结构类型是C语言中一种自定义的数据类型，可以将多个不同类型的变量组合在一起，形成一个新的数据类型。在本题中，使用结构类型Comp来表示复数。'}, {'name':'复数的加减法运算','description':'本题要求实现复数的加减法运算。根据输入的四个实数，分别表示两个复数的实部和虚部，通过对实部和虚部进行加减运算，得到两个复数的和与差。最后按照数学上关于复数的表示习惯，输出结果。'}]"
    },
    {
        "sortId": 5033,
        "id": "1341943211350564864",
        "title": "求一个数列前n项和[C]",
        "content": "已知一个数列前三项分别是`1`、`1`和`2`，从第四项开始每项的值都是其前三项之和。数列形式如下：  \n`1、1、2、4、7、13、24、...`  \n现在要求编写程序，输出该数列前n项和(3<n<=20).\n### 输入格式:\n\n输入项数n\n\n### 输出格式:\n\n输出前n项和\n\n### 输入样例:\n```in\n5\n```\n\n### 输出样例:\n```out\nsum = 15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 74,
        "res": "[{'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的控制结构，可以根据条件来控制代码的执行次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构在解决需要重复执行某段代码的问题时非常有用。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的数据结构，可以通过下标来访问数组中的元素。在C语言中，数组的声明和使用非常常见，可以用来存储一系列的数据。数组在解决需要处理大量数据的问题时非常有用。'}, {'name': '变量', 'description': '变量是一种用来存储数据的容器，可以通过变量名来访问和修改变量中的数据。在C语言中，变量的声明和使用非常常见，可以用来存储各种类型的数据。变量在解决需要存储和处理数据的问题时非常有用。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件来选择执行不同代码的控制结构，可以根据条件的真假来决定执行哪段代码。在C语言中，常用的条件语句有if语句和switch语句。条件语句在解决需要根据不同条件执行不同代码的问题时非常有用。'}, {'name': '算术运算', 'description': '算术运算是一种对数值进行加、减、乘、除等操作的运算，可以对变量和常量进行算术运算。在C语言中，常用的算术运算符有加法运算符、减法运算符、乘法运算符、除法运算符等。算术运算在解决需要对数值进行计算的问题时非常有用。'}, {'name': '数据类型', 'description': '数据类型是一种用来表示数据的属性和范围的分类，可以决定变量的存储方式和可操作的数据范围。在C语言中，常用的数据类型有整型、浮点型、字符型等。数据类型在解决需要存储和处理不同类型数据的问题时非常有用。'}, {'name': '函数', 'description': '函数是一种封装了一段代码的模块，可以通过函数名来调用和执行这段代码。在C语言中，函数的声明和定义非常常见，可以用来封装和组织代码。函数在解决需要重复执行某段代码的问题时非常有用。'}, {'name': '递归', 'description': '递归是一种函数调用自身的技术，可以通过递归来解决一些需要重复执行相同操作的问题。在C语言中，递归的使用非常常见，可以用来解决一些需要处理递归结构的问题。递归在解决需要重复执行相同操作的问题时非常有用。'}, {'name': '运算符', 'description': '运算符是一种用来进行特定操作的符号，可以对变量和常量进行各种运算。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符等。运算符在解决需要对数据进行操作和计算的问题时非常有用。'}, {'name': '输入输出', 'description': '输入输出是一种与用户交互的方式，可以通过输入获取用户的数据，通过输出显示程序的结果。在C语言中，常用的输入输出函数有scanf函数和printf函数。输入输出在解决需要与用户交互的问题时非常有用。'}, {'name': '指针', 'description': '指针是一种用来存储变量地址的变量，可以通过指针来访问和修改变量中的数据。在C语言中，指针的使用非常常见，可以用来处理动态内存分配和数据结构等问题。指针在解决需要处理内存和数据结构的问题时非常有用。'}, {'name': '字符串', 'description': '字符串是一种由字符组成的数据类型，可以用来表示文本和字符序列。在C语言中，字符串的使用非常常见，可以用来处理文本和字符序列的操作。字符串在解决需要处理文本和字符序列的问题时非常有用。'}, {'name': '常量', 'description': '常量是一种固定不变的数据，可以直接在代码中使用。在C语言中，常用的常量有整型常量、浮点型常量、字符常量等。常量在解决需要使用固定数据的问题时非常有用。'}, {'name': '条件运算', 'description': '条件运算是一种根据条件的真假来选择执行不同操作的运算，可以用来简化条件语句的写法。在C语言中，常用的条件运算符有三目运算符。条件运算在解决需要根据条件选择执行不同操作的问题时非常有用。'}, {'name': '逻辑运算', 'description': '逻辑运算是一种对逻辑值进行操作的运算，可以对逻辑值进行与、或、非等操作。在C语言中，常用的逻辑运算符有与运算符、或运算符、非运算符等。逻辑运算在解决需要对逻辑值进行操作和判断的问题时非常有用。'}, {'name': '条件判断', 'description': '条件判断是一种根据条件的真假来选择执行不同操作的判断，可以根据条件的真假来决定执行哪段代码。在C语言中，常用的条件判断语句有if语句和switch语句。条件判断在解决需要根据不同条件选择执行不同操作的问题时非常有用。'}, {'name': '循环控制', 'description': '循环控制是一种控制循环执行的方式，可以根据条件来控制循环的执行次数和方式。在C语言中，常用的循环控制语句有break语句和continue语句。循环控制在解决需要控制循环执行的问题时非常有用。'}, {'name': '文件操作', 'description': '文件操作是一种对文件进行读写和处理的操作，可以通过文件操作来读取和写入文件中的数据。在C语言中，常用的文件操作函数有fopen函数、fclose函数、fread函数、fwrite函数等。文件操作在解决需要读写和处理文件数据的问题时非常有用。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起。在C语言中，结构体的声明和使用非常常见，可以用来表示复杂的数据结构。结构体在解决需要处理复杂数据结构的问题时非常有用。'}, {'name': '指针运算', 'description': '指针运算是一种对指针进行操作的运算，可以对指针进行加、减、比较等操作。在C语言中，常用的指针运算符有加法运算符、减法运算符、比较运算符等。指针运算在解决需要处理指针和内存的问题时非常有用。'}, {'name': '位运算', 'description': '位运算是一种对二进制位进行操作的运算，可以对二进制位进行与、或、非等操作。在C语言中，常用的位运算符有与运算符、或运算符、非运算符等。位运算在解决需要对二进制位进行操作和处理的问题时非常有用。'}, {'name': '宏定义', 'description': '宏定义是一种用来定义常量和函数的预处理指令，可以在编译之前将宏定义替换为相应的代码。在C语言中，常用的宏定义有#define指令。宏定义在解决需要定义常量和函数的问题时非常有用。'}, {'name': '类型转换', 'description': '类型转换是一种将一个数据类型转换为另一个数据类型的操作，可以通过类型转换来改变数据的表示和处理方式。在C语言中，常用的类型转换有强制类型转换和隐式类型转换。类型转换在解决需要改变数据类型的问题时非常有用。'}, {'name': '指针数组', 'description': '指针数组是一种数组，其中的元素都是指针类型，可以通过指针数组来存储和处理指针。在C语言中，指针数组的使用非常常见，可以用来处理多个指针的操作。指针数组在解决需要处理多个指针的问题时非常有用。'}, {'name': '二维数组', 'description': '二维数组是一种数组，其中的元素也是数组，可以通过二维数组来存储和处理二维数据。在C语言中，二维数组的使用非常常见，可以用来处理矩阵和图像等问题。二维数组在解决需要处理二维数据的问题时非常有用。'}, {'name': '指针函数', 'description': '指针函数是一种函数，其返回值是指针类型，可以通过指针函数来返回指针。在C语言中，指针函数的使用非常常见，可以用来返回动态分配的内存和处理复杂的数据结构。指针函数在解决需要返回指针的问题时非常有用。'}, {'name': '动态内存分配', 'description': '动态内存分配是一种在程序运行时分配和释放内存的方式，可以根据需要动态地分配和释放内存。在C语言中，常用的动态内存分配函数有malloc函数、free函数等。动态内存分配在解决需要动态管理内存的问题时非常有用。'}, {'name': '预处理指令', 'description': '预处理指令是一种在编译之前对源代码进行处理的指令，可以用来定义常量、宏定义和条件编译等。在C语言中，常用的预处理指令有#include指令、#define指令、ifdef指令等。预处理指令在解决需要在编译之前对源代码进行处理的问题时非常有用。'}, {'name': '文件指针', 'description': '文件指针是一种指向文件的指针，可以通过文件指针来读写和处理文件中的数据。在C语言中，文件指针的使用非常常见，可以用来处理文件的读写和操作。文件指针在解决需要读写和处理文件数据的问题时非常有用。'}, {'name': '结构体指针', 'description': '结构体指针是一种指向结构体的指针，可以通过结构体指针来访问和修改结构体中的成员。在C语言中，结构体指针的使用非常常见，可以用来处理结构体的操作。结构体指针在解决需要处理结构体的问题时非常有用。'}, {'name': '函数指针', 'description': '函数指针是一种指向函数的指针，可以通过函数指针来调用和执行函数。在C语言中，函数指针的使用非常常见，可以用来实现回调函数和动态调用函数等功能。函数指针在解决需要动态调用函数的问题时非常有用。'}, {'name': '位字段', 'description': '位字段是一种用来表示和处理位数据的数据类型，可以将多个位数据组合在一起。在C语言中，位字段的使用非常常见，可以用来表示和处理位数据的操作。位字段在解决需要处理位数据的问题时非常有用。'}, {'name': '枚举类型', 'description': '枚举类型是一种用来表示一组具名常量的数据类型，可以用来定义一组相关的常量。在C语言中，枚举类型的使用非常常见，可以用来表示状态、选项和标志等。枚举类型在解决需要表示一组常量的问题时非常有用。'}, {'name': '类型定义', 'description': '类型定义是一种用来定义新的数据类型的方式，可以通过类型定义来创建自定义的数据类型。在C语言中，类型定义的使用非常常见，可以用来创建自定义的数据类型。类型定义在解决需要创建自定义数据类型的问题时非常有用。'}, {'name': '位域', 'description': '位域是一种用来表示和处理位数据的数据结构，可以将多个位数据组合在一起。在C语言中，位域的使用非常常见，可以用来表示和处理位数据的操作。位域在解决需要处理位数据的问题时非常有用。'}, {'name': '链表', 'description': '链表是一种动态数据结构，可以通过指针将多个节点连接在一起。在C语言中，链表的使用非常常见，可以用来表示和处理动态数据结构。链表在解决需要处理动态数据结构的问题时非常有用。'}, {'name': '栈', 'description': '栈是一种后进先出的数据结构，可以通过指针和数组来实现栈的操作。在C语言中，栈的使用非常常见，可以用来实现函数调用和表达式求值等功能。栈在解决需要后进先出的数据结构的问题时非常有用。'}, {'name': '队列', 'description': '队列是一种先进先出的数据结构，可以通过指针和数组来实现队列的操作。在C语言中，队列的使用非常常见，可以用来实现进程调度和消息传递等功能。队列在解决需要先进先出的数据结构的问题时非常有用。'}, {'name': '树', 'description': '树是一种非线性的数据结构，可以通过指针和递归来实现树的操作。在C语言中，树的使用非常常见，可以用来表示和"
    },
    {
        "sortId": 5034,
        "id": "1341705567169429504",
        "title": "求一个数列前n项和[B]",
        "content": "已知一个数列前两项分别是`1`和`2`，从第三项开始每项的值都是其前两项之积。数列形式如下：   \n`1、2、2、4、8、32、...    `  \n现在要求编写程序，输出该数列前n项和(2<n<20).\n\n### 输入格式:\n\n输入项数n\n\n### 输出格式:\n\n输出前n项和\n\n### 输入样例:\n```in\n5\n```\n\n### 输出样例:\n```out\nsum = 17\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 98,
        "res": "[{'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的控制结构，可以根据条件来控制代码的执行次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构在解决需要重复执行某段代码的问题时非常有用。'}, {'name': '变量', 'description': '变量是用来存储数据的一种数据类型，可以通过变量名来访问和操作存储的数据。在C语言中，变量需要先声明后使用，可以通过赋值操作来给变量赋初值。变量在解决问题时可以用来存储中间结果，方便后续的计算和处理。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在C语言中，常用的算术运算符有加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等。算术运算可以用来实现数列中每项的计算和求和。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来决定程序的执行路径。在C语言中，常用的条件判断语句有if语句和switch语句。条件判断可以用来判断输入的项数是否符合要求，以及控制循环的执行次数。'}, {'name': '数组', 'description': '数组是一种用来存储多个相同类型数据的数据结构。在C语言中，数组需要先声明后使用，可以通过下标来访问和操作数组中的元素。数组可以用来存储数列的每一项，方便后续的计算和处理。'}]"
    },
    {
        "sortId": 5035,
        "id": "1341628298132471808",
        "title": "创建两个链表",
        "content": "本题**要求使用自定义链表或使用STL之list实现**。\n\n输入一个整数，要求取该整数的奇数位数字创建逆序链表（奇数位逆序链表），取该整数的偶数位数字创建顺序链表（偶数位顺序链表）。该整数从左往右的位序依次为1、2、3、4、5……\n\n### 输入格式:\n\n首先输入测试组数T，然后输入T组测试数据。每组测试输入一个整数（长度至少2位、至多100位）。\n\n### 输出格式:\n\n对于每组测试，输出两行，第一行是遍历奇数位逆序链表的结果，第二行是遍历偶数位顺序链表的结果，每行的每两个数据之间间隔一个空格。    \n\n### 输入样例:\n\n```in\n1\n123456789\n```\n\n### 输出样例:\n\n```out\n9 7 5 3 1\n2 4 6 8\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 59,
        "res": "[{'name':'链表操作'，'description':'链表操作是C语言程序设计中的重要知识点，通过链表可以实现动态存储和数据的灵活操作。本题要求使用自定义链表或使用STL之list实现。'}, {'name':'奇偶数位操作'，'description':'本题要求根据输入的整数，将奇数位和偶数位的数字分别创建成逆序链表和顺序链表。奇偶数位操作是C语言程序设计中的常见操作，可以通过取余和除法运算来实现。'}]"
    },
    {
        "sortId": 5036,
        "id": "1341620190316347392",
        "title": "求一个数列前n项和[A]",
        "content": "已知一个数列前两项分别是`1`和`2`，从第三项开始每项的值都是其前两项之和。数列形式如下：   \n`1、2、3、5、8、13、...    `  \n现在要求编写程序，输出该数列前n项和(2<n<20).\n\n### 输入格式:\n\n输入项数n\n\n### 输出格式:\n\n输出前n项和\n\n### 输入样例:\n```in\n4\n```\n\n### 输出样例:\n```out\nsum = 11\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 77,
        "res": "[{'name': '数列求和', 'description': '通过循环计算数列前n项的和'}]"
    },
    {
        "sortId": 5037,
        "id": "1341591836376702976",
        "title": "后天是星期几",
        "content": "如果今天是星期三，后天就是星期五；如果今天是星期六，后天就是星期一。我们用数字1到7对应星期一到星期日。给定某一天，请你输出那天的`后天`是星期几。\n\n### 输入格式:\n\n输入一个1~7之间的正整数。\n\n### 输出格式:\n\n输出一个1~7之间的正整数。\n\n### 输入样例:\n```in\n3\n```\n\n### 输出样例:\n```out\n5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 32,
        "res": "[{'name':'条件语句'，'description':'条件语句是根据条件的真假来执行不同的代码块，常用的条件语句有if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}]"
    },
    {
        "sortId": 5038,
        "id": "1341588492623028224",
        "title": "前天是星期几",
        "content": "如果今天是星期三，前天就是星期一；如果今天是星期一，前天就是星期六。我们用数字1到7对应表示星期一到星期日。给定某一天，请你输出那天的“前天”是星期几。\n### 输入格式:\n\n输入一个1~7之间的正整数。\n\n### 输出格式:\n\n输出一个1~7之间的正整数。\n\n### 输入样例:\n\n```in\n3\n```\n\n### 输出样例:\n\n```out\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 19,
        "res": "[{'name':'条件判断语句'，'description':'根据给定的条件判断执行不同的代码块'}, {'name':'变量'，'description':'用于存储和操作数据的内存位置'}, {'name':'算术运算符'，'description':'用于执行基本的数学运算'}, {'name':'输入输出'，'description':'用于从用户获取输入和向用户输出结果'}, {'name':'循环结构'，'description':'重复执行一段代码块'}, {'name':'数组'，'description':'用于存储多个相同类型的数据'}, {'name':'函数'，'description':'用于封装可重用的代码块'}, {'name':'指针'，'description':'用于直接访问内存地址'}, {'name':'字符串'，'description':'用于存储和操作文本数据'}, {'name':'文件操作'，'description':'用于读写文件数据'}]"
    },
    {
        "sortId": 5039,
        "id": "1341565459241902080",
        "title": "统计字符串中小写字母个数",
        "content": "本题要求编写函数，统计给定的字符串中小写英文字母的个数。\n\n### 函数接口定义：\n```c++\nint StringCount( char *s );\n```\n\n函数StringCount统计字符串char s中小写英文字母的个数，并返回。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#include <string.h>\nint StringCount( char *s);\nint main()\n{\n   char str[80] ;    \n   gets(str);\n   printf(\"There are %d lowercase letters\" ,  StringCount(str ) );\n  return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n\n```in\nDear Ella , Wish you good luck!\n```\n\n### 输出样例：\n\n\n```out\nThere are 20 lowercase letters\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 70,
        "res": "[{'name': '字符串处理', 'description': '本知识点主要涉及字符串的处理，包括字符串的输入、输出、长度计算、字符统计等操作。在本题中，需要对给定的字符串进行遍历，统计其中小写英文字母的个数。'}]"
    },
    {
        "sortId": 5040,
        "id": "1341414048671744000",
        "title": "折半查找[A]",
        "content": "下面程序中`IsIn()`函数的功能是用二分(折半)法查找某个元素是否在数组中，如果找到了返回元素在数组中的位置，找不到则返回-1. 请将`IsIn()`函数中缺失的表达式或者语句补上。\n```c++\n#include <stdio.h>\n#define N 15\nint IsIn(int x,int *S, int Size){\n\tint Left=0,Right=@@[](2); \n\tint Mid=(Right+Left)/2;\n\twhile (Right>=Left){\n\t\tif(@@[](2)) return Mid;\n\t\telse if(x<S[Mid]) Right=@@[](2);\n\t\t    else Left=@@[](2);\n\t\tMid=(Right+Left)/2;\n\t}\n\treturn -1;\n}\nint main(){\n\tint S[N]={8,14,18,21,23,27,29,32,34,36,40,43,47,50,56};\n\tint x=40;\n\tif(IsIn(x,S,N)!=-1) printf(\"%d is in the set S\\n\",x);\n\telse printf(\"%d is not in the set S\\n\",x);\n\tx=37;\n\tif(IsIn(x,S,N)!=-1) printf(\"%d is in the set S\\n\",x);\n\telse printf(\"%d is not in the set S\\n\",x);\n\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 113,
        "res": "[{'name': '二分法查找', 'description': '二分法查找是一种高效的查找算法，通过将查找范围逐渐缩小一半来快速定位目标元素的位置。在该题中，需要补充的表达式或语句就是二分法查找的核心部分，包括确定左右边界、计算中间位置、比较目标元素与中间元素的大小，并根据比较结果更新左右边界。最终，如果找到目标元素，则返回其位置；如果未找到，则返回-1。'}]"
    },
    {
        "sortId": 5041,
        "id": "1341401015308263424",
        "title": "从键盘输入n个整数，找出其中的最小数及其输入顺序号",
        "content": "下面的程序是从键盘输入n个整数，找出其中的最小数及其输入顺序号(输入顺序起始号从0开始)。请将程序中缺失的表达式或者语句补上。\n\n```c++\n#include <stdio.h>\nint main()\n{\n    int i,j,n,a,min;\n    scanf(\"%d\",&n);\n    scanf(\"%d\",&a);\n    @@[](2);\n    j=@@[](2);\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d\",&a);\n        if(@@[](2))\n        {\n            min=a;\n            @@[](2);\n        }\n    }\n    printf(\"Min=%d j=%d\\n\",min,j);\n    return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 117,
        "res": "[{'name':'输入语句的使用'，'description':'使用scanf函数从键盘输入数据'}，{'name':'循环语句的使用'，'description':'使用for循环语句进行迭代操作'}，{'name':'条件语句的使用'，'description':'使用if语句进行条件判断'}，{'name':'变量的声明和赋值'，'description':'声明和赋值变量'}]"
    },
    {
        "sortId": 5042,
        "id": "1341398881930059776",
        "title": "从键盘输入一整数序列，找出输入序列中的最大数及其输入顺序号",
        "content": "下面的程序是从键盘输入n个整数找出其中最大数及其输入顺序号（输入顺序的起始编号从0开始）。请将程序中缺失的表达式或者语句填上。\n\n```c++\n#include <stdio.h>\nint main()\n{\n    int i,j,n,a,max;\n    scanf(\"%d\",&n);//输入整数的个数\n    scanf(\"%d\",&a);\n    ;//确定首次遇到的最大数；\n    j=;//确定首次遇到的最大数的序号；\n    for(i=1;i<n;i++)\n    {\n        scanf(\"%d\",&a);\n        if()\n        {\n            max=a;\n           ;\n        }\n    }\n    printf(\"Max=%d j=%d\\n\",max,j);\n    return 0;\n}\n\n```",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 59,
        "res": "[{'name':'输入输出函数','description':'使用scanf函数从键盘输入整数，使用printf函数输出结果'}, {'name':'变量定义和赋值','description':'定义整型变量i、j、n、a、max，并对其进行赋值'}, {'name':'循环结构','description':'使用for循环进行n次输入和判断'}, {'name':'条件判断','description':'使用if语句判断是否找到更大的数'}, {'name':'变量更新','description':'更新max和j的值'}]"
    },
    {
        "sortId": 5043,
        "id": "1341395683974594560",
        "title": "找两个字符串相同的最大字符串长度",
        "content": "读入两个字符串A与B。求出A的后缀中，与B的前缀中，相等的最长字符串的长度。例：A中的字符串为“abcdefghi”，B中的字符串为“fghijklmn”，A字符串的后缀字符串“fghi”构成与B字符串前缀中相等的最长字符串，该字符串长度为4。A、B字符串的最大长度不超过 19999。\n\n注：字符串的前缀是指字符串的任意首部。比如字符串“abbc”的前缀有“a”,“ab”,“abb”,“abbc”。同样,字符串的任意尾部是字符串的后缀,“abbc”的后缀有“c”,“bc”,“bbc”,“abbc”。\n\n### 函数接口定义：\n```c++\nint scmp(char a[],char b[]);  \n函数返回a数组中字符串的最长后缀的长度，该最长后缀字符串正好为b数组中字符串的前缀\n```\n\n在这里解释接口参数。例如：其中 `N` 和 `D` 都是用户传入的参数。 `N` 的值不超过`int`的范围； `D` 是[0, 9]区间内的个位数。函数须返回 `N` 中 `D` 出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include<stdio.h>\n#include<string.h>\n#define N 20000\nint scmp(char a[],char b[]);\nint main()\n{\n\tchar a[N]={0};\n\tchar b[N]={0};\n\n\tgets(a);\n\tgets(b);\n\tprintf(\"%d\",scmp(a,b));\n\n\treturn 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例1：\n```in\nabcdee\ncdeefgijklmn\n```\n### 输出样例1：\n```out\n4\n```\n### 输入样例2：\n```in\nabcdefgijk\nBcdefgijklmn\n```\n### 输出样例2：\n```out\n0\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 2,
        "res": "[{'name': '字符串处理', 'description': '本题涉及字符串的处理，包括字符串的读入、比较和长度计算。需要注意字符串的前缀和后缀的概念，以及如何找到两个字符串中相等的最长字符串。'}, {'name': '函数定义', 'description': '本题需要定义一个函数scmp，该函数接受两个字符串作为参数，返回一个整数值。函数的功能是找到第一个字符串的最长后缀，该后缀与第二个字符串的前缀相等，并返回该后缀的长度。函数的实现需要使用字符串的比较和长度计算。'}]"
    },
    {
        "sortId": 5044,
        "id": "1341378311138066432",
        "title": "行走",
        "content": "在一个$n × n$的方阵区域内，某些小方格内存在障碍物，小明在左上角的方格内，想走到右下角的方格内。若某方格内存在障碍物则不能走，且小明只能往下或往右走。请问从左上角方格$(0, 0)$ 走到右下角方格$(n-1, n-1)$ 总共有多少种走法？\n\n例如，$4 × 4$ 的方阵区域如下图所示，左上角方格为$(0, 0)$，右下角为$(3, 3)$。从左上角方格到右下角方格共有10种走法。\n\n![xz.png](~/5e8c8cad-8bbf-47fe-8bd3-3031a3a52fbe.png)\n\n### 输入格式:\n\n首先输入一个正整数$T(T≤20)$，表示测试数据的组数。然后输入$T$组测试数据。对于每组测试，第一行输入一个整数$n(1<n≤20)$；接着输入$n$行，每行$n$个字符，其中，字符“.”表示该方格可以走，“#”表示该方格存在障碍物不能走。\n\n### 输出格式:\n\n对于每组测试，输出一个整数，表示从左上角方格走到右下角方格的走法总数（结果保证小于$2^{31}$）。\n\n### 输入样例:\n\n```in\n2\n4\n..#.\n...#\n#...\n....\n15\n...#...........\n..............#\n...............\n...............\n...............\n...............\n...............\n......#........\n...............\n...............\n.....#......#..\n...............\n...............\n#..............\n...............\n```\n\n### 输出样例:\n\n```out\n10\n17029962\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 20,
        "res": "[{'name':'递归', 'description':'递归是一种解决问题的方法，它把一个问题分解为越来越小的子问题，直到问题的规模小到可以被直接解决。在本题中，可以使用递归的方法来求解从左上角到右下角的走法总数。具体而言，可以定义一个递归函数，该函数接受当前所在方格的坐标作为参数，然后根据当前方格的情况（是否存在障碍物）来决定向下走或向右走，直到到达右下角方格。递归函数的返回值即为从当前方格到右下角方格的走法总数。'}]"
    },
    {
        "sortId": 5045,
        "id": "1341261741015449600",
        "title": "时间的输出(12小时制) ",
        "content": "请编写函数，采用12小时制按 hh:mm:ss.ss(AM/PM) 的格式输出时间。说明：规定12点之前为上午(AM)，之后为下午(PM)。例如12:00，应该为下午(PM)。\n\n### 函数接口定义：\n```c\nvoid TimeOutput2(int hour, int minute, double second);\n```\n\n说明：hour、minute和second 分别为时数、分数和秒数，函数将采用12小时制按“hh:mm:ss.ss(AM/PM)”的格式显示时间。\n### 裁判测试程序样例：\n```c\n#include<stdio.h>\nvoid TimeInput(int *hour, int *minute, double *second);\nvoid TimeOutput2(int hour, int minute, double second);\n\nint main()\n{\n    int hour, minute;\n    double second;\n    TimeInput(&hour, &minute, &second);\n    TimeOutput2(hour, minute, second);\n    return 0;\n}\n\nvoid TimeInput(int *hour, int *minute, double *second)\n{\n  /* ............省略*/\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例1：\n\n\n```in\n8:10:5.5\n```\n\n### 输出样例1：\n\n```out\n08:10:05.50(AM)\n```\n### 输入样例2：\n\n```in\n18:25:3.25\n```\n\n### 输出样例2：\n\n```out\n06:25:03.25(PM)\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 111,
        "res": "[{'name': '函数定义', 'description': '函数定义是指在程序中定义一个函数，函数是一段完成特定任务的代码块，通过函数可以将一个大的问题分解成若干个小的问题，提高代码的可读性和重用性。在C语言中，函数的定义包括函数名、参数列表、返回值类型和函数体。'}, {'name': '函数调用', 'description': '函数调用是指在程序中使用函数完成特定任务。在C语言中，函数调用的格式为函数名(参数列表)，通过函数调用可以执行函数体中的代码。'}, {'name': '变量定义', 'description': '变量定义是指在程序中定义一个变量，变量是用来存储数据的内存空间，通过变量可以在程序中保存和操作数据。在C语言中，变量的定义包括变量类型和变量名。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在C语言中，条件语句包括if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}, {'name': '循环语句', 'description': '循环语句是根据条件的真假来重复执行一段代码块。在C语言中，循环语句包括while循环、do-while循环和for循环。while循环根据条件的真假来重复执行一段代码块，do-while循环先执行一次代码块，然后根据条件的真假来重复执行，for循环根据初始条件、循环条件和循环后操作来重复执行一段代码块。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行操作和处理。在C语言中，可以使用字符串处理函数来实现字符串的复制、连接、比较等操作。'}, {'name': '数组', 'description': '数组是一种存储相同类型数据的集合，通过数组可以方便地存储和访问多个数据。在C语言中，数组的定义包括数组类型、数组名和数组长度。'}, {'name': '指针', 'description': '指针是存储内存地址的变量，通过指针可以访问和操作内存中的数据。在C语言中，可以使用指针来实现对变量的间接访问和操作。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，通过结构体可以将多个不同类型的数据组合在一起。在C语言中，结构体的定义包括结构体名和结构体成员，结构体成员可以是不同类型的变量。'}, {'name': '文件操作', 'description': '文件操作是指对文件进行读写操作。在C语言中，可以使用文件指针和文件操作函数来实现对文件的打开、关闭、读取和写入等操作。'}, {'name': '错误处理', 'description': '错误处理是指在程序中对可能出现的错误进行处理。在C语言中，可以使用错误处理机制来捕获和处理程序中的错误，提高程序的健壮性和可靠性。'}, {'name': '递归', 'description': '递归是指一个函数调用自身的过程。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数包括递归调用和递归终止条件。'}, {'name': '指针运算', 'description': '指针运算是指对指针进行加减运算，通过指针运算可以实现对数组和字符串的遍历和操作。在C语言中，可以使用指针运算来访问和操作内存中的数据。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行时根据需要分配和释放内存空间。在C语言中，可以使用动态内存分配函数malloc和free来实现对内存的动态分配和释放。'}, {'name': '位运算', 'description': '位运算是指对二进制位进行操作的运算。在C语言中，可以使用位运算符来实现对二进制位的与、或、非、异或等操作。'}, {'name': '函数指针', 'description': '函数指针是指指向函数的指针变量，通过函数指针可以实现对函数的间接调用。在C语言中，可以使用函数指针来实现回调函数和动态函数调用。'}, {'name': '预处理指令', 'description': '预处理指令是指在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、条件编译等。'}, {'name': '类型转换', 'description': '类型转换是指将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用类型转换运算符来实现不同类型之间的转换。'}, {'name': '枚举', 'description': '枚举是一种自定义的数据类型，通过枚举可以定义一组具有相同属性的常量。在C语言中，枚举的定义包括枚举名和枚举常量，枚举常量可以是整型或字符型。'}, {'name': '宏定义', 'description': '宏定义是指在程序中定义一个宏，宏是一种简单的文本替换机制，通过宏定义可以将一段代码或常量定义为一个标识符。在C语言中，宏定义使用#define指令来定义。'}, {'name': '多文件编程', 'description': '多文件编程是指将程序分成多个文件进行编写和管理。在C语言中，可以使用头文件和源文件来实现多文件编程，头文件包含函数声明和宏定义，源文件包含函数定义和全局变量。'}, {'name': '数据结构', 'description': '数据结构是指将数据按照一定的方式组织和存储的方式。在C语言中，可以使用数组、链表、栈、队列、树等数据结构来实现对数据的组织和操作。'}, {'name': '指针数组', 'description': '指针数组是指数组中的元素是指针变量，通过指针数组可以存储多个指针变量。在C语言中，可以使用指针数组来存储和操作多个指针变量。'}, {'name': '字符串数组', 'description': '字符串数组是指数组中的元素是字符串，通过字符串数组可以存储和操作多个字符串。在C语言中，可以使用字符串数组来存储和操作多个字符串。'}, {'name': '结构体数组', 'description': '结构体数组是指数组中的元素是结构体变量，通过结构体数组可以存储和操作多个结构体变量。在C语言中，可以使用结构体数组来存储和操作多个结构体变量。'}, {'name': '指针与数组', 'description': '指针与数组是指指针和数组之间的关系。在C语言中，可以使用指针来访问和操作数组中的元素，也可以使用数组名来表示数组的首地址。'}, {'name': '递归与回溯', 'description': '递归与回溯是指使用递归函数解决一些需要穷举所有可能情况的问题。在C语言中，可以使用递归和回溯来解决排列组合、迷宫问题等。'}, {'name': '指针与字符串', 'description': '指针与字符串是指指针和字符串之间的关系。在C语言中，可以使用指针来访问和操作字符串中的字符，也可以使用字符串名来表示字符串的首地址。'}, {'name': '指针与结构体', 'description': '指针与结构体是指指针和结构体之间的关系。在C语言中，可以使用指针来访问和操作结构体中的成员，也可以使用结构体变量的地址来表示结构体指针。'}, {'name': '指针与函数', 'description': '指针与函数是指指针和函数之间的关系。在C语言中，可以使用函数指针来实现对函数的间接调用，也可以将函数作为参数传递给其他函数。'}, {'name': '指针与动态内存分配', 'description': '指针与动态内存分配是指使用指针来管理动态分配的内存。在C语言中，可以使用指针来访问和操作动态分配的内存，也可以使用指针来释放动态分配的内存。'}, {'name': '指针与文件操作', 'description': '指针与文件操作是指使用指针来进行文件的读写操作。在C语言中，可以使用文件指针和指针运算来实现对文件的读写操作。'}, {'name': '指针与数据结构', 'description': '指针与数据结构是指使用指针来实现对数据结构的操作。在C语言中，可以使用指针来访问和操作数据结构中的元素，也可以使用指针来实现数据结构的动态分配和释放。'}, {'name': '指针与多文件编程', 'description': '指针与多文件编程是指使用指针来实现多文件之间的数据传递和共享。在C语言中，可以使用指针来传递和共享数据，也可以使用指针来访问和操作其他文件中的变量。'}, {'name': '指针与错误处理', 'description': '指针与错误处理是指使用指针来处理程序中可能出现的错误。在C语言中，可以使用指针来判断和处理指针为空的情况，避免程序崩溃或出现异常。'}, {'name': '指针与位运算', 'description': '指针与位运算是指使用指针来进行位运算操作。在C语言中，可以使用指针来访问和操作二进制位，也可以使用指针来实现位运算的高效操作。'}, {'name': '指针与函数指针', 'description': '指针与函数指针是指使用指针来操作函数指针。在C语言中，可以使用指针来访问和操作函数指针，也可以使用函数指针来实现函数的动态调用和回调。'}, {'name': '指针与预处理指令', 'description': '指针与预处理指令是指使用指针来操作预处理指令。在C语言中，可以使用指针来访问和操作预处理指令，也可以使用预处理指令来定义和操作指针。'}, {'name': '指针与类型转换', 'description': '指针与类型转换是指使用指针来进行不同类型之间的转换。在C语言中，可以使用指针来进行类型转换，也可以使用类型转换运算符来实现不同类型之间的转换。'}, {'name': '指针与枚举', 'description': '指针与枚举是指使用指针来操作枚举类型。在C语言中，可以使用指针来访问和操作枚举类型，也可以使用枚举类型来定义和操作指针。'}, {'name': '指针与宏定义', 'description': '指针与宏定义是指使用指针来操作宏定义。在C语言中，可以使用指针来访问和操作宏定义，也可以使用宏定义来定义和操作指针。'}, {'name': '指针与多文件编程', 'description': '指针与多文件编程是指使用指针来实现多文件之间的数据传递和共享。在C语言中，可以使用指针来传递和共享数据，也可以使用指针来访问和操作其他文件中的变量。'}, {'name': '指针与数据结构', 'description': '指针与数据结构是指使用指针来实现对数据结构的操作。在C语言中，可以使用指针来访问和操作数据结构中的元素，也可以使用指针来实现数据结构的动态分配和释放。'}, {'name': '指针与错误处理', 'description': '指针与错误处理是指使用指针来处理程序中可能出现的错误。在C语言中，可以使用指针来判断和处理指针为空的情况，避免程序崩溃或出现异常。'}, {'name': '指针与位运算', 'description': '指针与位运算是指使用指针来进行位运算操作。在C语言中，可以使用指针来访问和操作二进制位，也可以使用指针来实现位运算的高效操作。'}, {'name': '指针与函数指针', 'description': '指针与函数指针是指使用指针来操作函数指针。在C语言中，可以使用指针来访问和操作函数指针，也可以使用函数指针来实现函数的动态调用和回调"
    },
    {
        "sortId": 5046,
        "id": "1341245345745346560",
        "title": "求分数序列的前n项和",
        "content": "有一个分数序列：$$\\frac{2}{1},\\frac{3}{2},\\frac{5}{3},\\frac{8}{5},\\frac{13}{8},\\frac{21}{13}$$。本题要求编写程序，求出该数列的前n项和。\n### 输入格式:\n\n键盘输入n（1$$\\leq$$n$$\\leq$$1000）\n### 输出格式:\n\nsum=S,S为数列前n项和，结果保留小数点后四位。\n\n### 输入样例:\n\n\n```in\n10\n```\n\n### 输出样例:\n\n\n\n```out\nsum=16.4799\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 87,
        "res": "[{'name': '分数序列求和', 'description': '本题要求编写程序，求出分数序列的前n项和。'}]"
    },
    {
        "sortId": 5047,
        "id": "1341236429556817920",
        "title": "求Fibonacci（斐波那契）数列的n项和",
        "content": "已知斐波那契数列有如下特点：第1,2两个数为1,1。从第三个数开始，该数是其前面两个数之和。即该数列为1,1,2,3,5,8,13，……。本题要求编写程序，计算该数列的前n项和。\n### 输入格式:\n\n键盘输入n(2$$\\leq$$n$$\\leq$$40)。\n\n### 输出格式:\n\nsum=S,S为斐波那契数列的前n项和。\n\n### 输入样例:\n\n\n```in\n10\n```\n\n### 输出样例:\n\n```out\nsum=143\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 283,
        "res": "[{'name': '斐波那契数列', 'description': '斐波那契数列是一个数列，第1,2两个数为1,1。从第三个数开始，该数是其前面两个数之和。即该数列为1,1,2,3,5,8,13，……。本题要求编写程序，计算该数列的前n项和。'}]"
    },
    {
        "sortId": 5048,
        "id": "1341228336594632704",
        "title": "计算e的近似值",
        "content": "本题要求编写程序，利用$$e=1+\\frac{1}{1!}+\\frac{1}{2!}+\\frac{1}{3!}+...+\\frac{1}{n!}$$计算e的近似值，直到最后一项的绝对值小于eps时为止，输出e的值并统计累加的项数。\n### 输入格式:\n\n键盘输入精度eps。\n### 输出格式:\n\ne=S,count=N,S为eps精度下的多项式的和,结果保留小数点后三位，N为累加的项数。\n\n### 输入样例:\n\n```in\n0.0001\n```\n\n### 输出样例:\n\n```out\ne=2.718,count=9\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 78,
        "res": "[{'name': '循环控制', 'description': '循环控制是C语言中的一种重要的控制结构，用于重复执行一段代码块。在本题中，需要使用循环控制来计算e的近似值，直到最后一项的绝对值小于eps为止。'}, {'name': '浮点数运算', 'description': '浮点数运算是C语言中的一种基本运算，用于进行实数的计算。在本题中，需要使用浮点数运算来计算每一项的值，并累加求和。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，需要使用条件判断来判断最后一项的绝对值是否小于eps，从而确定循环的结束条件。'}, {'name': '变量定义和赋值', 'description': '变量定义和赋值是C语言中的基本操作，用于声明变量并给变量赋值。在本题中，需要定义和赋值变量eps、e和count，分别用于存储精度、e的近似值和累加的项数。'}, {'name': '数学运算', 'description': '数学运算是C语言中的一种基本运算，用于进行数学计算。在本题中，需要使用数学运算来计算阶乘和每一项的值。'}]"
    },
    {
        "sortId": 5049,
        "id": "1341209265366974464",
        "title": "π的近似值",
        "content": "本题目要求编写程序，利用$$\\frac{\\pi}{4}=1-\\frac{1}{3}+\\frac{1}{5}-\\frac{1}{7}+...$$计算π的近似值，直到最后一项的绝对值小于eps时为止，输出π的值。\n### 输入格式:\n\n在一行中键盘输入精度eps（eps<=1e-2）。\n\n### 输出格式:\n在一行中输出pi=S,S为eps精度下π的近似值，结果保留小数点后6位。\n\n### 输入样例:\n\n\n```in\n0.0001\n```\n\n### 输出样例:\n\n\n```out\npi=3.141793\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 47,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，需要使用循环结构来计算π的近似值，直到最后一项的绝对值小于eps为止。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，需要使用变量来存储π的近似值和每一项的值。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行数学运算的符号。在本题中，需要使用运算符来进行加减乘除等运算，计算π的近似值。'}, {'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件来执行不同的代码。在本题中，可以使用条件语句来判断最后一项的绝对值是否小于eps，从而确定是否终止循环。'}, {'name': '输入输出', 'description': '输入输出是C语言中用于与用户交互的一种功能。在本题中，需要使用输入输出来获取用户输入的eps值，并输出计算得到的π的近似值。'}]"
    },
    {
        "sortId": 5050,
        "id": "1340926635849052160",
        "title": "特殊时期",
        "content": "人的一生经常会有一些特殊时期。现在HY就处在他的某个人生特殊时期中。这个时期中一个月是按4个星期来计算的（每4个星期算作1个月）。这个时期是从2008.10.05开始的，这一天正好是个星期天。我们约定，星期天是一个星期中的第一天。告诉你日期，请你确定现在是HY特殊时期中的第几个星期和第几个月（都是从1开始编号）。如2008.10.05是第一个星期，第一个月；2008.10.12是第二个星期，第一个月；2008.11.02是第五个星期，第二个月。\n\n### 输入格式:\n\n测试数据有多组，先输入测试组数t。然后输入t组测试数据，每组测试是一个现在的日期，形式为yyyy.mm.dd，如2008.10.05。输入的日期保证在\\[2008.10.05，2009.07.11\\]范围内。\n\n### 输出格式:\n\n对于每组测试，在一行上输出所输入的日期在HY特殊时期中的星期编号w和月编号n，w和n之间一个空格。\n\n### 输入样例:\n\n```in\n4\n2008.10.05\n2008.10.13\n2009.07.11\n2009.02.28\n```\n\n### 输出样例:\n\n```out\n1 1\n2 1\n40 10\n21 6\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 25,
        "res": "[{'name':'日期计算','description':'根据给定的日期计算在特殊时期中的星期编号和月编号'}]"
    },
    {
        "sortId": 5051,
        "id": "1340918130358697984",
        "title": "完美与普通",
        "content": "诺诺看到三角形，觉得很好玩。有等边三角形、直角三角形、等腰三角形……她最喜欢等边三角形，认为它是完美的，评价为`Perfect`；而直角三角形评价为`Very Good`，等腰三角形评价为`Good`，其他三角形评价为`Ordinary`。\n\n### 输入格式:\n\n有多组测试数据。每组测试数据第一行是正整数$n(n<=20)$，表示有$n$组测试。每组测试输入三个正整数$a,b,c(1<=a,b,c<=1000)$，表示三角形的三条边长，$a,b,c$之间以一个空格分隔。\n\n### 输出格式:\n\n对于每组测试数据，在一行上输出诺诺对该三角形的评价；若不是三角形，输出单词`Sorry`。\n\n### 输入样例:\n\n```in\n3\n3 4 5\n1 1 1\n1 2 1\n```\n\n### 输出样例:\n\n```out\nVery Good\nPerfect\nSorry\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 80,
        "res": "[{'name':'三角形判断'，'description':'根据给定的三条边长判断是否构成三角形，如果构成三角形则判断其类型'}]"
    },
    {
        "sortId": 5052,
        "id": "1340888567939416064",
        "title": "求1到n的阶乘和",
        "content": "本题要求实现一个计算非负整数阶乘的简单函数，使得可以利用该函数，计算1!+2!+⋯+n!的值。\n\n### 函数接口定义：\n```c\ndouble fact( int n );\n```\n\n其中`n`是用户传入的参数，其值不超过`10`。如果`n`是非负整数，则该函数必须返回`n`的阶乘。\n\n### 裁判测试程序样例：\n```c\n#include <stdio.h>\n\ndouble fact( int n );\n\nint main()\n{    \n    int i,n;\n    double sum; \n    scanf(\"%d\",&n)\n    sum = 0; \n    for(i = 1; i <= n; i++) \n        sum = sum + fact(i); \n\n    printf(\"1!+2!+...+%d! = %.2f\\n\", n,sum); \n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n```in\n3\n```\n\n### 输出样例：\n\n```out\n1!+2!+...+3! = 9.00\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 174,
        "res": "[{'name': '函数定义', 'description': '本题要求实现一个计算非负整数阶乘的简单函数，使得可以利用该函数，计算1!+2!+⋯+n!的值。函数接口定义：double fact( int n ); 其中n是用户传入的参数，其值不超过10。如果n是非负整数，则该函数必须返回n的阶乘。'}, {'name': '循环结构', 'description': '在主函数中，使用for循环结构计算1!+2!+⋯+n!的值。'}, {'name': '输入输出', 'description': '使用scanf函数从标准输入读取n的值，使用printf函数输出计算结果。'}]"
    },
    {
        "sortId": 5053,
        "id": "1340876953165053952",
        "title": "程序员",
        "content": "二战后期，催生了世上第一台通用型计算机——“ENIAC”的开发。关于ENIAC，很少有人知道，ENIAC的诞生离不开6位女程序员。她们是Jean Bartik、Kathleen Antonelli、Ruth Teitelbaum、Frances Spence、Marlyn Meltzer和Betty Holberton，她们在ENIAC的发明过程中，负责给机器编程。这6位女程序员虽然都是数学系的顶尖毕业生, 但面对第一台通用型电脑，没人知道怎么下手，她们有的只是一叠资料和接线图。她们在这台大家伙上不断的研究调试，每天要费力的去拔各种缆线、托盘，有时甚至需要爬进检修管道检修故障，更换损坏的零件.... 最终她们还是完成了这项艰难的任务，编出了程序让机器运作。\n\n程序员是一群善于学习、进取心超强的人。他们总是喜欢学习、尝试新事物，求知欲望相当强。我们常常能在程序员的身上看到不竭的激情与满满的正能量。\n\n1024是2的十次方，二进制计数的基本计量单位之一，因此每年的10月24日被大家亲切称为程序员节。我们知道，二进制数系统中，每个0或1就是一个位(bit)，位是数据存储的最小单位。其中8bit就称为一个字节（Byte）,1024B=1KB，1024 KB=1MB，1024 MB=1GB等等。\n\n请根据输入的KB数，输出位数。\n### 输入格式:\n\n在一行中给出一个小于100的整数，表示KB数。\n\n### 输出格式:\n\n输出二进制位数。\n\n### 输入样例:\n\n```in\n10\n```\n### 输出样例\n\n```out\n81920\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 40,
        "res": "[{'name': '二进制数系统', 'description': '二进制数系统中，每个0或1就是一个位(bit)，位是数据存储的最小单位。其中8bit就称为一个字节（Byte）,1024B=1KB，1024 KB=1MB，1024 MB=1GB等等。'}, {'name': '输入输出', 'description': '输入一个小于100的整数，表示KB数，输出二进制位数。'}]"
    },
    {
        "sortId": 5054,
        "id": "1340872738535141376",
        "title": "嫦娥奔月",
        "content": "2020年11月24日，中国用长征五号遥五运载火箭成功发射嫦娥五号探测器，并将其送入预定轨道。11月28日，嫦娥五号进入环月轨道飞行。12月1日，嫦娥五号在月球正面预选着陆区着陆。12月2日，嫦娥五号完成月面自动采样封装。\n\n北京时间12月3日23时10分，嫦娥五号上升器从月面起飞，携带月球样品成功进入预定环月轨道，这是中国首次实现地外天体起飞。\n\n在完成采样任务上升起飞前，着陆器携带的一面“织物版”五星红旗在月面成功展开，这是我国在月球表面首次实现国旗的“独立展示”。12月17日凌晨，嫦娥五号返回器携带月球样品着陆地球。\n\n太空中的每一小步，对应着科研领域的一大步。“嫦娥奔月”的背后，是中国科技领域创新自强的盛大图景。\n\n据媒体报道，嫦娥五号返回器在接近大气层时，飞行的速度将接近第二宇宙速度，也就是每秒11.2公里。这个速度相当于民航客机高空巡航速度的约45倍。\n\n假设某民航客机的速度为900公里/小时，请根据输入分钟的分钟数，输出飞行的距离是多少公里？\n\n### 输入格式:\n\n在一行中给出一个小于100的整数，表示飞行的时间，单位为分钟数。\n\n### 输出格式:\n\n输出客机飞行的距离。\n\n### 输入样例:\n```in\n3\n```\n### 输出样例\n```out\n45\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 57,
        "res": "[{'name': '变量', 'description': '变量是计算机程序中用于存储和表示数据的一种抽象概念。在C语言中，可以使用变量来存储各种类型的数据，如整数、浮点数、字符等。变量在使用前需要先声明，并且可以通过赋值操作来改变其存储的值。'}, {'name': '输入输出', 'description': '输入输出是C语言程序中常用的操作之一。通过输入操作，程序可以从外部获取数据；通过输出操作，程序可以将结果输出到外部。在C语言中，可以使用标准库函数scanf和printf来实现输入输出操作。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行各种运算操作的符号。C语言提供了多种运算符，包括算术运算符、关系运算符、逻辑运算符等。通过使用运算符，可以对变量进行各种数学运算、比较操作和逻辑判断。'}, {'name': '条件语句', 'description': '条件语句是C语言中用于根据条件执行不同代码块的结构。C语言提供了if语句和switch语句来实现条件语句。通过使用条件语句，可以根据不同的条件选择不同的执行路径。'}, {'name': '循环语句', 'description': '循环语句是C语言中用于重复执行一段代码的结构。C语言提供了while循环、do-while循环和for循环来实现循环语句。通过使用循环语句，可以方便地重复执行某个代码块，实现重复操作。'}, {'name': '数据类型', 'description': '数据类型是C语言中用于表示不同种类数据的一种属性。C语言提供了多种数据类型，包括整型、浮点型、字符型等。通过使用不同的数据类型，可以更好地管理和操作不同种类的数据。'}, {'name': '函数', 'description': '函数是C语言中用于封装一段可重用代码的结构。C语言中的函数可以接受参数并返回一个值。通过使用函数，可以将程序分解为多个模块，提高代码的可读性和可维护性。'}, {'name': '数组', 'description': '数组是C语言中用于存储多个相同类型数据的一种数据结构。通过使用数组，可以方便地管理和操作多个数据。C语言中的数组可以一维或多维，可以通过下标访问数组中的元素。'}, {'name': '指针', 'description': '指针是C语言中用于存储变量地址的一种数据类型。通过使用指针，可以直接访问和修改变量的值，还可以动态分配内存空间。指针在C语言中是一种强大而灵活的工具，但也需要谨慎使用，以避免出现错误和安全问题。'}, {'name': '字符串', 'description': '字符串是C语言中用于表示文本数据的一种数据类型。C语言中的字符串实际上是由字符组成的字符数组，以空字符\\0结尾。通过使用字符串，可以方便地处理和操作文本数据。'}]"
    },
    {
        "sortId": 5055,
        "id": "1340869798496124928",
        "title": "停课不停教",
        "content": "2020年伊始，新型冠状病毒肺炎疫情发生后，为认真贯彻落实教育部、山东省教育厅及学校关于“停课不停教、停课不停学”的要求，我校全体任课教师在各自学院的安排部署下，在这个“史上最长寒假”里，有效利用中国大学MOOC、学堂在线、智慧树和山东省高等学校在线课程等平台，积极开展各种形式的线上授课，指导学生开展线上学习，保证疫情防控期间的教学进度和质量。\n\n根据输入的某一位教师授课课程的总学时数，以及授课遍数，请你帮着算算该教师线上授课分钟数。\n\n### 输入格式:\n\n在一行中给出两个均小于100，大于0的整数，其间以空格分隔。第一个整数表示该课程的总学时数，一个学时45分钟；第二个整数表示该课程的授课遍数。\n\n### 输出格式:\n\n输出线上授课总分钟数。\n\n### 输入样例:\n```in\n64  3\n```\n\n### 输出样例\n```out\n8640\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 46,
        "res": "[{'name':'基本语法'，'description':'包括C语言的基本数据类型、变量、常量、运算符、控制语句等基本语法知识点。'}, {'name':'函数'，'description':'包括函数的定义、调用、参数传递、返回值等知识点。'}, {'name':'数组'，'description':'包括数组的定义、初始化、访问、多维数组等知识点。'}, {'name':'指针'，'description':'包括指针的定义、指针与数组的关系、指针与函数的关系等知识点。'}, {'name':'结构体'，'description':'包括结构体的定义、结构体成员的访问、结构体数组等知识点。'}, {'name':'文件操作'，'description':'包括文件的打开、读写、关闭等知识点。'}, {'name':'动态内存分配'，'description':'包括动态内存分配的函数malloc、free等知识点。'}, {'name':'预处理指令'，'description':'包括预处理指令的使用、宏定义等知识点。'}, {'name':'递归'，'description':'包括递归函数的定义、递归调用、递归终止条件等知识点。'}, {'name':'字符串处理'，'description':'包括字符串的定义、字符串的输入输出、字符串的处理等知识点。'}, {'name':'位运算'，'description':'包括位运算的基本操作、位运算的应用等知识点。'}, {'name':'指针与数组'，'description':'包括指针与数组的关系、指针与字符串的关系等知识点。'}, {'name':'函数指针'，'description':'包括函数指针的定义、函数指针的应用等知识点。'}, {'name':'多文件编程'，'description':'包括多文件编程的原理、多文件编程的实现等知识点。'}, {'name':'数据结构'，'description':'包括数据结构的定义、数据结构的操作等知识点。'}, {'name':'算法'，'description':'包括算法的设计、算法的分析等知识点。'}, {'name':'错误处理'，'description':'包括错误处理的方法、错误处理的技巧等知识点。'}, {'name':'调试技巧'，'description':'包括调试技巧的使用、调试技巧的原理等知识点。'}, {'name':'编程实践'，'description':'包括编程实践的方法、编程实践的技巧等知识点。'}, {'name':'其他'，'description':'包括其他与C语言程序设计相关的知识点。'}]"
    },
    {
        "sortId": 5056,
        "id": "1340863203300896768",
        "title": "爱心捐款",
        "content": "自新冠肺炎疫情暴发以来，疫情防控态势一直牵动着全国人民的心弦：白衣战士身先士卒、守护生命；各行各业立足岗位、共克时艰；无数志愿者众志成城、默默奉献……\n\n在这场战“疫”中，每个中国人都情系武汉，做出自己应该做的贡献。\n\n信息学院党员教师积极行动起来，主动向湖北武汉等疫情严重地区捐款，为武汉加油，为中国加油。\n\n学院领导每人捐款两千元，普通党员教师每人捐款一千元，请根据输入的人数，打印捐款总金额。\n\n### 输入格式:\n在一行中给出两个均小于100且大于0的整数，其间以空格分隔。第一个整数表示领导人数，第二个整数表示普通党员教师人数。\n\n### 输出格式:\n输出金额总数。\n \n### 输入样例:\n\n```in\n10  60\n```\n### 输出样例\n```out\n80000\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 56,
        "res": "[{'name':'变量定义与赋值'，'description':'在程序中定义变量并给变量赋值，用于存储数据。'}, {'name':'算术运算'，'description':'使用算术运算符进行加法运算。'}, {'name':'输入输出'，'description':'从标准输入读取数据，将结果输出到标准输出。'}, {'name':'条件语句'，'description':'使用条件语句判断输入的人数是否满足要求。'}, {'name':'循环语句'，'description':'使用循环语句计算捐款总金额。'}]"
    },
    {
        "sortId": 5057,
        "id": "1340850646989488128",
        "title": "游戏玩家",
        "content": "某游戏公司年末推出一款新游戏，共设置100层关卡，邀请游戏玩家们内测，根据到达关卡层级对玩家授予不同称号，并对获得神级玩家称号的玩家进行奖励，赠送高级游戏装备一套。已知到达关卡90-100的玩家授予神级玩家称号（S），到达关卡80-89的玩家授予牛级玩家称号（N），达到关卡70-79的玩家授予高级玩家称号（G），到达70以下关卡的授予普通玩家称号（C）。请你帮助该公司记录玩家称号，并统计能够获得高级游戏装备的玩家人数。\n### 输入格式:\n\n输入为2行，第一行为一个正整数n（n<=10）,代表玩家人数，随后n行，每行为一个玩家信息，包括玩家ID（长度为9的不带空格的数字串）、昵称（长度不超过20的不带空格的一串字符）、到达关卡层级数（大于等于0的整数且小于等于100的整数）。\n\n### 输出格式:\n\n按照输入顺序输出所有玩家的等级信息，一个玩家信息占一行，包括玩家ID、昵称、称号，中间用一个空格分隔，随后一行输出能够获赠高级游戏装备的人数。\n\n### 输入样例:\n\n\n\n```in\n2\n000001 li 90\n000002 zhang 79\n```\n\n### 输出样例:\n\n\n\n```out\n000001 li S\n000002 zhang G\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 114,
        "res": "[{'name':'条件语句'，'description':'根据不同的条件执行不同的代码块'}，{'name':'循环语句'，'description':'重复执行一段代码块'}，{'name':'字符串处理'，'description':'对字符串进行操作和处理'}]"
    },
    {
        "sortId": 5058,
        "id": "1340845690202648576",
        "title": "寻找完美数",
        "content": "所有真因子之和小于其本身的数称为亏数。如：4 的真因子 1、2 之和为 3，小于 4，是亏数。\n\n所有真因子之和大于其本身的数称为盈数。如：12 的真因子 1、2、3、4、6 之和为 16，大于 12，是盈数。\n\n不盈不亏的数，即：所有真因子之和等于其本身的数，称为完美数。如：6 的真因子 1、2、3 之和恰为 6，是完美数。\n\n考生只需要编写函数`FindPerfect`，具体接口定义见下面。函数`SumProperFactor`已经在裁判程序中实现，无需自己实现。其功能是求一个整数的因子和。\n\n### 函数接口定义：\n```c\nvoid FindPerfect(int lower, int upper);\n```\n\n说明：参数 `lower` 和 `upper` 分别为整数区间的下限和上限。若在该范围内存在完美数，则函数输出范围内的所有完美数，否则输出`None`。\n\n### 裁判测试程序样例：\n```c\n#include <stdio.h>\n\nint SumProperFactor(int x);\nvoid FindPerfect(int lower, int upper);\n\nint main()\n{\n    int a, b;\n    scanf(\"%d%d\", &a, &b);\n    FindPerfect(a, b);\n    return 0;\n}\n\n......\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n### 输入样例：\n\n```in\n0 30\n```\n\n### 输出样例：\n\n```out\n6\n28\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 128,
        "res": "[{'name':'函数定义和调用'，'description':'函数FindPerfect的定义和调用，以及函数SumProperFactor的调用'}, {'name':'循环结构'，'description':'使用循环结构遍历整数区间'}, {'name':'条件判断'，'description':'判断一个数是否为完美数'}, {'name':'数组'，'description':'使用数组存储完美数'}, {'name':'输入输出'，'description':'从标准输入读取整数区间，向标准输出打印完美数'}]"
    },
    {
        "sortId": 5059,
        "id": "1340844225354874880",
        "title": "大会员",
        "content": "某超市年末对一年的会员消费进行统计，对消费额度达到S级的超级会员赠送一张价值100的超市储值卡。规定一年消费额度达到10000的会员为S级，5000-9999的评为B级，1000-4999的评为C级，低于1000以下的评为D级，请你帮助超市记录会员等级，并统计能够被赠送储值卡的会员人数。\n\n### 输入格式:\n\n输入第一行为一个正整数n（n<=10）,代表会员人数，随后n行，每行为一个会员信息，包括会员卡号（长度为9的不带空格的数字串）、姓名（长度不超过20的不带空格的一串字符）、一年消费额（大于等于0的整数）。\n\n### 输出格式:\n\n按照输入顺序输出所有会员的等级信息，一个会员信息占一行，包括会员卡号、姓名、消费等级，中间用一个空格分隔，随后一行输出能够获赠储值卡的人数。\n\n### 输入样例:\n\n\n```in\n2\n000001 li 10000\n000002 zhang 9999\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n000001 li S\n000002 zhang B\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 82,
        "res": "[{'name':'条件语句'，'description':'根据不同的条件执行不同的代码块'}，{'name':'循环语句'，'description':'重复执行一段代码块'}，{'name':'变量'，'description':'存储数据的容器'}，{'name':'输入输出'，'description':'从键盘获取输入，向屏幕输出结果'}]"
    },
    {
        "sortId": 5060,
        "id": "1340828555397066752",
        "title": "学分统计",
        "content": "已知某大学校选课成绩选用四级制，分别为A、B、C、D，其中A、B、C级获得学分，D级没有学分。规定学业成绩大于等于85的为A级，70-84的评为B级，60-69的评为C级，60分以下的评为D级，请你写一个程序将得分转换为等级，并统计没有获得学分的人数。\n\n### 输入格式:\n\n输入第一行为一个正整数n（n<=10）,代表选课学生人数，随后n行，每行为一个学生信息，包括学号（长度为12的不带空格的数字串）、姓名（长度不超过20的不带空格的一串字符）、得分（大于等于0且小于等于100的整数）。\n\n### 输出格式:\n\n按照输入顺序输出所有选课学生的最终成绩等级信息，一个选课学生信息占一行，包括学号、姓名、成绩等级，中间用一个空格分隔，随后一行输出没有获得学分的人数。\n### 输入样例:\n\n\n\n```in\n2\n201001010101 li 85\n201200000101 zhang 59\n```\n\n### 输出样例:\n\n\n\n```out\n201001010101 li A\n201200000101 zhang D\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 168,
        "res": "[{'name':'条件语句'，'description':'根据学生成绩判断等级'}, {'name':'循环语句'，'description':'统计没有获得学分的人数'}]"
    },
    {
        "sortId": 5061,
        "id": "1340819424883798016",
        "title": "演员请就位",
        "content": "电视台举办演技大赛，每一场比赛评委都对演员进行评级，获得S级的演员直接晋级到下一场比赛，其它级别则需要继续本场比拼。规定得分大于等于90的评为S级，80-89的评为A级，70-79的评为B级，70分以下的评为C级，请你帮助主办方自动生成等级，并统计直接晋级人数。\n\n### 输入格式:\n\n输入第一行为一个正整数n（n<=10）,代表参加比赛的演员人数，随后n行，每行为一个表演者信息，包括编号（长度为3不带空格的数字串）、姓名（长度不超过20的不带空格的一串字符）、得分（大于0且小于等于100的整数）。\n\n### 输出格式:\n\n按照输入顺序输出所有参赛演员的最终等级信息，一个参赛演员信息占一行，包括编号、姓名、等级，中间用一个空格分隔，随后一行输出直接晋级人数。\n\n### 输入样例:\n\n\n\n```in\n2\n000 li 90\n010 zhang 80\n```\n\n### 输出样例:\n\n\n\n```out\n000 li S\n010 zhang A\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 154,
        "res": "[{'name':'条件语句'，'description':'根据不同的条件执行不同的代码块'}, {'name':'循环语句'，'description':'重复执行一段代码块'}, {'name':'变量'，'description':'存储数据的容器'}, {'name':'数组'，'description':'存储多个相同类型的数据'}, {'name':'字符串'，'description':'存储字符序列的容器'}, {'name':'输入输出'，'description':'与用户进行交互，输入和输出数据'}, {'name':'函数'，'description':'封装一段可重复使用的代码'}, {'name':'数据类型'，'description':'定义数据的类型'}, {'name':'运算符'，'description':'进行数学和逻辑运算'}, {'name':'控制流'，'description':'控制程序的执行流程'}, {'name':'指针'，'description':'存储变量地址的变量'}, {'name':'结构体'，'description':'自定义的复合数据类型'}, {'name':'文件操作'，'description':'读写文件中的数据'}, {'name':'预处理指令'，'description':'在编译之前对代码进行处理'}, {'name':'递归'，'description':'函数调用自身'}, {'name':'位运算'，'description':'对二进制位进行操作'}, {'name':'动态内存分配'，'description':'在程序运行时分配和释放内存'}, {'name':'错误处理'，'description':'处理程序运行中的错误'}, {'name':'多文件编程'，'description':'将程序分成多个文件进行编写和组织'}, {'name':'指针与数组'，'description':'指针和数组的关系和使用'}, {'name':'指针与字符串'，'description':'指针和字符串的关系和使用'}, {'name':'指针与结构体'，'description':'指针和结构体的关系和使用'}, {'name':'指针与函数'，'description':'指针和函数的关系和使用'}, {'name':'指针与动态内存分配'，'description':'指针和动态内存分配的关系和使用'}, {'name':'指针与文件操作'，'description':'指针和文件操作的关系和使用'}, {'name':'指针与多文件编程'，'description':'指针和多文件编程的关系和使用'}, {'name':'指针与错误处理'，'description':'指针和错误处理的关系和使用'}, {'name':'指针与位运算'，'description':'指针和位运算的关系和使用'}, {'name':'指针与递归'，'description':'指针和递归的关系和使用'}, {'name':'指针与预处理指令'，'description':'指针和预处理指令的关系和使用'}, {'name':'数组与字符串'，'description':'数组和字符串的关系和使用'}, {'name':'数组与结构体'，'description':'数组和结构体的关系和使用'}, {'name':'数组与函数'，'description':'数组和函数的关系和使用'}, {'name':'数组与动态内存分配'，'description':'数组和动态内存分配的关系和使用'}, {'name':'数组与文件操作'，'description':'数组和文件操作的关系和使用'}, {'name':'数组与多文件编程'，'description':'数组和多文件编程的关系和使用'}, {'name':'数组与错误处理'，'description':'数组和错误处理的关系和使用'}, {'name':'数组与位运算'，'description':'数组和位运算的关系和使用'}, {'name':'数组与递归'，'description':'数组和递归的关系和使用'}, {'name':'数组与预处理指令'，'description':'数组和预处理指令的关系和使用'}, {'name':'字符串与结构体'，'description':'字符串和结构体的关系和使用'}, {'name':'字符串与函数'，'description':'字符串和函数的关系和使用'}, {'name':'字符串与动态内存分配'，'description':'字符串和动态内存分配的关系和使用'}, {'name':'字符串与文件操作'，'description':'字符串和文件操作的关系和使用'}, {'name':'字符串与多文件编程'，'description':'字符串和多文件编程的关系和使用'}, {'name':'字符串与错误处理'，'description':'字符串和错误处理的关系和使用'}, {'name':'字符串与位运算'，'description':'字符串和位运算的关系和使用'}, {'name':'字符串与递归'，'description':'字符串和递归的关系和使用'}, {'name':'字符串与预处理指令'，'description':'字符串和预处理指令的关系和使用'}, {'name':'结构体与函数'，'description':'结构体和函数的关系和使用'}, {'name':'结构体与动态内存分配'，'description':'结构体和动态内存分配的关系和使用'}, {'name':'结构体与文件操作'，'description':'结构体和文件操作的关系和使用'}, {'name':'结构体与多文件编程'，'description':'结构体和多文件编程的关系和使用'}, {'name':'结构体与错误处理'，'description':'结构体和错误处理的关系和使用'}, {'name':'结构体与位运算'，'description':'结构体和位运算的关系和使用'}, {'name':'结构体与递归'，'description':'结构体和递归的关系和使用'}, {'name':'结构体与预处理指令'，'description':'结构体和预处理指令的关系和使用'}, {'name':'函数与动态内存分配'，'description':'函数和动态内存分配的关系和使用'}, {'name':'函数与文件操作'，'description':'函数和文件操作的关系和使用'}, {'name':'函数与多文件编程'，'description':'函数和多文件编程的关系和使用'}, {'name':'函数与错误处理'，'description':'函数和错误处理的关系和使用'}, {'name':'函数与位运算'，'description':'函数和位运算的关系和使用'}, {'name':'函数与递归'，'description':'函数和递归的关系和使用'}, {'name':'函数与预处理指令'，'description':'函数和预处理指令的关系和使用'}, {'name':'动态内存分配与文件操作'，'description':'动态内存分配和文件操作的关系和使用'}, {'name':'动态内存分配与多文件编程'，'description':'动态内存分配和多文件编程的关系和使用'}, {'name':'动态内存分配与错误处理'，'description':'动态内存分配和错误处理的关系和使用'}, {'name':'动态内存分配与位运算'，'description':'动态内存分配和位运算的关系和使用'}, {'name':'动态内存分配与递归'，'description':'动态内存分配和递归的关系和使用'}, {'name':'动态内存分配与预处理指令'，'description':'动态内存分配和预处理指令的关系和使用'}, {'name':'文件操作与多文件编程'，'description':'文件操作和多文件编程的关系和使用'}, {'name':'文件操作与错误处理'，'description':'文件操作和错误处理的关系和使用'}, {'name':'文件操作与位运算'，'description':'文件操作和位运算的关系和使用'}, {'name':'文件操作与递归'，'description':'文件操作和递归的关系和使用'}, {'name':'文件操作与预处理指令'，'description':'文件操作和预处理指令的关系和使用'}, {'name':'多文件编程与错误处理'，'description':'多文件编程和错误处理的关系和使用'}, {'name':'多文件编程与位运算'，'description':'多文件编程和位运算的关系和使用'}, {'name':'多文件编程与递归'，'description':'多文件编程和递归的关系和使用'}, {'name':'多文件编程与预处理指令'，'description':'多文件编程和预处理指令的关系和使用'}, {'name':'错误处理与位运算'，'description':'错误处理和位运算的关系和使用'}, {'name':'错误处理与递归'，'description':'错误处理和递归的关系和使用'}, {'name':'错误处理与预处理指令'，'description':'错误处理和预处理指令的关系和使用'}, {'name':'位运算与递归'，'description':'位运算和递归的关系和使用'}, {'name':'位运算与预处理指令'，'description':'位运算和预处理指令的关系和使用'}, {'name':'递归与预处理指令'，'description':'递归和预处理指令的关系和使用'}]"
    },
    {
        "sortId": 5062,
        "id": "1340673773118504960",
        "title": " 判断水仙花数",
        "content": "所谓水仙花数（也称自幂数、自恋数、阿姆斯特朗数），它是一个 3 位数，其每位数字的 3 次幂之和等于它本身。如果输入的不是三位数直接是NO\n请编写函数，判断水仙花数。\n\n### 函数接口定义：\n```c++\nint IsNarc(int x);\n```\n\n说明：参数 x 是任意自然数。若 x 是水仙花数，则函数值为 1 (真)，否则为 0 (假),如果不是三位数返回0\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\n#define Cube(x) x*x*x\n\nint IsNarc(int x);\n\nint main()\n{\n    int x;\n    scanf(\"%d\", &x);\n    if (IsNarc(x))\n    {\n        puts(\"Yes\");\n    }\n    else\n    {\n        puts(\"No\");\n    }\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n153\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nYes\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 133,
        "res": "[{'name':'函数定义与调用'，'description':'函数接口定义、函数实现、函数调用'}，{'name':'条件语句'，'description':'if-else语句的使用'}，{'name':'输入输出'，'description':'scanf函数的使用、puts函数的使用'}]"
    },
    {
        "sortId": 5063,
        "id": "1340668895772098560",
        "title": "输入多个单词，统计以指定字母开头的单词个数",
        "content": "本题目：先输入一个含有多个单词的字符串，然后再输入一个字母，然后调用函数getWordNum统计该行字符中以指定字母开始的单词的个数（**不区分大小写**）。所谓“单词”是指连续不含空格的字符串，各单词之间用空格分隔，空格数可以是多个。\n\n### 函数接口定义：\n```c++\nint getWordNum(char ar1[], char ch) ;\n```\n\n函数返回以形参变量ch中的字符开头的字符数组ar1中的单词数\n\n### 裁判测试程序样例：\n```c\n#include<stdio.h>\nint getWordNum(char ar1[],char ch) ;\nint main()\n{ \n    char string[81],c,n; \n    gets(string);                           \n    c=getchar();\n    n=getWordNum(string,c);\n    printf(\"%d\",n); \n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\naf Adf Dad abdde\na\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n3\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 117,
        "res": "[{'name':'字符串处理','description':'本知识点主要包括字符串的输入输出、字符串的处理和字符串函数的使用等内容。在本题中，需要使用字符串输入函数gets()和字符输入函数getchar()来获取输入的字符串和字符。同时，还需要对字符串进行处理，统计以指定字符开头的单词的个数。'}，{'name':'字符数组','description':'本知识点主要包括字符数组的定义、字符数组的输入输出和字符数组的处理等内容。在本题中，需要定义一个字符数组来存储输入的字符串，并通过字符数组来进行字符串的处理和统计。'}，{'name':'函数定义和调用','description':'本知识点主要包括函数的定义和函数的调用等内容。在本题中，需要定义一个函数getWordNum()来统计以指定字符开头的单词的个数，并在主函数中调用该函数来获取结果并输出。'}]"
    },
    {
        "sortId": 5064,
        "id": "1340662729704816640",
        "title": " 歌唱比赛打分",
        "content": "某歌唱比赛计分规则是：对于评委给出的分数，**去掉一个最高分，去掉一个最低分**，剩余分数求算术平均值并保留2位小数，作为选手最终得分。\n本题要求实现这样一个计分函数。评委给出的分数存在数组中，分数均为0~100之间的整数，并且保证评委人数在3~20之间\n\n### 函数接口定义：\n```c++\ndouble getScore(int *score, int total);\n```\n\n其中score和total是传入的参数，score是评委打分数组的首地址，total是评委人数；函数将选手的得分以double类型返回\n注意：**函数返回的分数只需保证小数点后至少2位精确数字即可，打印2位小数得分的操作由函数调用者进行**。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\ndouble getScore(int *score, int total);\nint main(){\n    int i,score[20],N;   \n    scanf(\"%d\\n\",&N);\n    for(i=0;i<N;i++)\n    \tscanf(\"%d\",&score[i]);\n\tprintf(\"%.2f\\n\", getScore(score, N) );  /* getScore( )函数只负责返回分值，由main函数中的代码负责按照2位小数打印输出 */\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n5\n92 93 95 99 98\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n95.33\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 151,
        "res": "[{'name':'数组','description':'数组是一种存储多个相同类型数据的连续内存空间的数据结构。在本题中，评委给出的分数存储在一个数组中。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块。在本题中，需要实现一个计分函数getScore()来计算选手的最终得分。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构。在本题中，可以使用循环来读取评委给出的分数。'}, {'name':'条件判断','description':'条件判断是根据条件的真假来决定执行不同的代码块。在本题中，可以使用条件判断来判断评委人数是否在规定范围内。'}, {'name':'排序','description':'排序是将一组数据按照一定的规则进行排列的过程。在本题中，可以使用排序算法来去掉最高分和最低分。'}, {'name':'求和','description':'求和是将一组数据相加得到总和的过程。在本题中，可以使用求和算法来计算剩余分数的总和。'}, {'name':'平均值','description':'平均值是将一组数据的总和除以数据个数得到的结果。在本题中，可以使用平均值算法来计算选手的最终得分。'}, {'name':'数据类型转换','description':'数据类型转换是将一种数据类型转换为另一种数据类型的过程。在本题中，可以使用数据类型转换来将整数类型的分数转换为浮点数类型的得分。'}]"
    },
    {
        "sortId": 5065,
        "id": "1340648056108118016",
        "title": "转换字符串中数字为整数",
        "content": "函数conv的功能：提取一个字符串中的所有数字字符（'0'……'9'），将其转换为一个整数作为函数的返回值。 程序输入：在一行中给出一个不超过80个字符且以回车结束的字符串（字符串中数字字符的个数为0到10个之间）。\n\n### 函数接口定义：\n```c++\nint conv(char arr[]);\n```\n\n其中arr[]是用户传入的参数。如果arr[]满足条件，则该函数返回一整数\n\n### 裁判测试程序样例：\n```c++\n#include<stdio.h>\n#include<string.h>\nint conv(char arr[]);\nint main()\n{\n    int x=0;\n    char c[81];\n    gets(c);\n    x=conv(c);\n    printf(\"%d\",x);\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\nafd0d1cd2vda3cd43fd\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n12343\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 139,
        "res": "[{'name':'字符串处理','description':'字符串处理是C语言中非常重要的知识点之一。在本题中，需要对输入的字符串进行处理，提取其中的数字字符，并将其转换为整数。可以使用循环遍历字符串的每个字符，判断是否为数字字符，如果是则将其转换为整数并累加。最后返回累加的结果作为函数的返回值。'}]"
    },
    {
        "sortId": 5066,
        "id": "1340642940906926080",
        "title": "字符串最小化去重",
        "content": "编写程序，删除输入的字符串中的重复字符，使得余下的字符串最小（按字符的字典排列比较规则），且余下的字符在原来字符串的相对位置保持不变。\n说明：1）字符串中均为小写字母；2）字符串长度在9998以内。\n\n### 输入样例1:\n一个由小写字母组成的字符串：\n```in\nbbcaac\n```\n### 输出样例1:\n去除重复字符串后的最小的字符串：\n```out\nbac\n```\n\n### 输入样例2:\n一个由小写字母组成的字符串：\n```in\ncbacdcbc\n```\n### 输出样例2:\n去除重复字符串后的最小的字符串：\n```out\nacdb\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 74,
        "res": "[{'name': '字符串处理', 'description': '字符串处理是C语言程序设计中的一个重要知识点。在本题中，需要对输入的字符串进行处理，删除重复字符，并保持余下字符的相对位置不变。学生需要掌握字符串的遍历、比较和删除等操作。'}, {'name': '字符排序', 'description': '字符排序是C语言程序设计中的另一个重要知识点。在本题中，需要对删除重复字符后的字符串进行排序，按照字符的字典排列比较规则。学生需要掌握字符数组的排序算法，如冒泡排序、快速排序等。'}, {'name': '数组操作', 'description': '数组操作是C语言程序设计中的基础知识点。在本题中，需要使用字符数组来存储和处理字符串。学生需要掌握数组的定义、初始化、遍历和操作等基本操作。'}, {'name': '循环结构', 'description': '循环结构是C语言程序设计中的基本知识点。在本题中，需要使用循环结构来遍历字符串和进行比较操作。学生需要掌握循环结构的使用方法，如for循环、while循环等。'}, {'name': '条件判断', 'description': '条件判断是C语言程序设计中的基本知识点。在本题中，需要使用条件判断来判断字符是否重复，并进行相应的操作。学生需要掌握条件判断语句的使用方法，如if语句、switch语句等。'}]"
    },
    {
        "sortId": 5067,
        "id": "1340527557348716544",
        "title": "输出二维数组每一列的最小值",
        "content": "本题要求编写程序，输出一个给定的m×n矩阵各列元素的最小值。\n\n### 输入格式:\n\n输入第一行给出两个正整数m和n（1≤m,n≤10）。随后m行，每行给出n个整数，其间以空格分隔。\n\n### 输出格式:\n\n每行输出对应矩阵列元素的最小值。\n\n### 输入样例:\n\n\n```in\n3 4\n3 1 5 2\n1 -4 6 7\n1 0 2 3\n```\n\n### 输出样例:\n\n```out\n1\n-4\n2\n2\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 155,
        "res": "[{'name':'二维数组','description':'二维数组是一种特殊的数组，可以表示矩阵等数据结构。在C语言中，可以使用二维数组来表示矩阵，并进行相关的操作。本题要求输出一个给定的m×n矩阵各列元素的最小值，需要使用二维数组来存储矩阵，并使用循环遍历数组来找到每列的最小值。'}, {'name':'循环结构','description':'循环结构是C语言中的一种重要的控制结构，可以重复执行一段代码块。在本题中，需要使用循环结构来遍历二维数组，找到每列的最小值。可以使用for循环或者while循环来实现。'}, {'name':'条件判断','description':'条件判断是C语言中的一种重要的控制结构，可以根据条件的真假来执行不同的代码块。在本题中，可以使用条件判断来判断当前元素是否为最小值，并更新最小值。可以使用if语句来实现。'}]"
    },
    {
        "sortId": 5068,
        "id": "1340519292938567680",
        "title": "输出二维数组每一列的最大值",
        "content": "本题要求编写程序，输出一个给定的m×n矩阵各列元素的最大值。\n\n### 输入格式:\n\n输入第一行给出两个正整数m和n（1≤m,n≤10）。随后m行，每行给出n个整数，其间以空格分隔。\n\n### 输出格式:\n\n每行输出对应矩阵列元素的最大值。\n\n### 输入样例:\n\n\n```in\n3 4\n3 1 5 2\n1 -4 6 7\n1 0 2 3\n```\n\n### 输出样例:\n\n```out\n3\n1\n6\n7\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 109,
        "res": "[{'name':'二维数组','description':'二维数组是一种特殊的数组，可以表示矩阵等数据结构。在C语言中，可以使用二维数组来存储和操作矩阵数据。本题中，需要使用二维数组来存储输入的矩阵数据。'}, {'name':'循环结构','description':'循环结构是一种重复执行某段代码的结构。在C语言中，可以使用循环结构来遍历二维数组的每一列，并找到每一列的最大值。本题中，需要使用循环结构来遍历矩阵的每一列，并找到每一列的最大值。'}, {'name':'条件判断','description':'条件判断是一种根据条件的真假来执行不同代码的结构。在C语言中，可以使用条件判断来判断是否找到了每一列的最大值。本题中，需要使用条件判断来判断是否找到了每一列的最大值。'}, {'name':'输出格式控制','description':'输出格式控制是一种控制输出结果的格式的技巧。在C语言中，可以使用输出格式控制来按照要求输出结果。本题中，需要使用输出格式控制来按照要求输出每一列的最大值。'}]"
    },
    {
        "sortId": 5069,
        "id": "1340514215003766784",
        "title": "输出二维数组每一行的最小值",
        "content": "本题要求编写程序，输出一个给定的m×n矩阵各行元素的最小值。\n\n### 输入格式:\n\n输入第一行给出两个正整数m和n（1≤m,n≤10）。随后m行，每行给出n个整数，其间以空格分隔。\n\n### 输出格式:\n\n每行输出对应矩阵行元素的最小值。\n\n### 输入样例:\n\n\n\n```in\n3 4\n3 1 5 2\n1 -4 6 7\n1 0 2 3\n```\n\n### 输出样例:\n\n```out\n1\n-4\n0\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 166,
        "res": "[{'name':'二维数组','description':'二维数组是一种特殊的数组，它可以表示为一个表格或矩阵。在C语言中，可以使用二维数组来表示矩阵，并对其进行操作。本题中，需要使用二维数组来存储输入的矩阵，并找出每行元素的最小值。'}, {'name':'循环结构','description':'循环结构是一种重复执行某段代码的结构。在C语言中，可以使用循环结构来遍历二维数组的每一行，并找出每行元素的最小值。本题中，可以使用循环结构来遍历矩阵的每一行，并找出每行元素的最小值。'}, {'name':'条件语句','description':'条件语句是一种根据条件判断来执行不同代码的结构。在C语言中，可以使用条件语句来判断是否需要更新每行元素的最小值。本题中，可以使用条件语句来判断是否需要更新每行元素的最小值。'}]"
    },
    {
        "sortId": 5070,
        "id": "1340503962534834176",
        "title": "输出二维数组每一行的最大值",
        "content": "本题要求编写程序，输出一个给定的m×n矩阵各行元素的最大值。\n\n### 输入格式:\n\n输入第一行给出两个正整数m和n（1≤m,n≤10）。随后m行，每行给出n个整数，其间以空格分隔。\n\n### 输出格式:\n\n每行输出对应矩阵行元素的最大值。\n\n### 输入样例:\n\n\n\n```in\n3 4\n3 1 5 2\n1 -4 6 7\n1 0 2 3\n```\n\n### 输出样例:\n\n```out\n5\n7\n3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 174,
        "res": "[{'name':'二维数组','description':'二维数组是一种特殊的数组，可以表示矩阵或表格等数据结构。在C语言中，可以使用二维数组来存储和操作多行多列的数据。本题中，需要使用二维数组来存储输入的矩阵数据。'}, {'name':'循环结构','description':'循环结构是一种重复执行某段代码的控制结构。在C语言中，可以使用循环结构来遍历二维数组的每一行，计算每行元素的最大值。本题中，需要使用循环结构来遍历二维数组的每一行，找到每行元素的最大值。'}, {'name':'条件语句','description':'条件语句是一种根据条件判断来执行不同代码块的控制结构。在C语言中，可以使用条件语句来判断是否为每行的第一个元素，从而确定是否输出换行符。本题中，需要使用条件语句来判断是否为每行的第一个元素，从而确定是否输出换行符。'}]"
    },
    {
        "sortId": 5071,
        "id": "1340369853405753344",
        "title": "左转弯",
        "content": "请编写程序，在屏幕上显示左转弯的路标。\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```out\n// // //\n\\\\ \\\\ \\\\\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 39,
        "res": "[{'name':'基本输出','description':'教学如何使用printf函数进行基本的输出操作'}, {'name':'转义字符','description':'教学转义字符的概念和使用方法'}, {'name':'字符串输出','description':'教学如何输出字符串'}, {'name':'循环结构','description':'教学如何使用循环结构实现左转弯的路标'}, {'name':'注释','description':'教学如何使用注释进行代码的解释和说明'}, {'name':'字符输出','description':'教学如何输出特定字符'}, {'name':'格式化输出','description':'教学如何使用格式化输出控制符进行输出格式的控制'}, {'name':'转义序列','description':'教学转义序列的概念和使用方法'}, {'name':'字符串拼接','description':'教学如何使用字符串拼接实现左转弯的路标的输出'}, {'name':'循环控制','description':'教学如何使用循环控制语句控制循环的次数'}, {'name':'字符拼接','description':'教学如何使用字符拼接实现左转弯的路标的输出'}, {'name':'条件判断','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串处理','description':'教学如何处理字符串，包括字符串的拼接和输出'}, {'name':'循环嵌套','description':'教学如何使用循环嵌套实现左转弯的路标的输出'}, {'name':'字符处理','description':'教学如何处理字符，包括字符的拼接和输出'}, {'name':'条件嵌套','description':'教学如何使用条件嵌套实现左转弯的路标的输出'}, {'name':'循环控制变量','description':'教学如何使用循环控制变量控制循环的次数'}, {'name':'字符数组','description':'教学如何使用字符数组实现左转弯的路标的输出'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串数组','description':'教学如何使用字符串数组实现左转弯的路标的输出'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的路标的输出'}, {'name':'条件判断语句','description':'教学如何使用条件判断语句控制程序的执行流程'}, {'name':'字符串指针','description':'教学如何使用字符串指针实现左转弯的路标的输出'}, {'name':'循环计数变量','description':'教学如何使用循环计数变量控制循环的次数'}, {'name':'字符输入','description':'教学如何输入特定字符'}, {'name':'条件判断变量','description':'教学如何使用条件判断变量控制程序的执行流程'}, {'name':'字符串输入','description':'教学如何输入字符串'}, {'name':'循环计数器','description':'教学如何使用循环计数器控制循环的次数'}, {'name':'字符指针','description':'教学如何使用字符指针实现左转弯的"
    },
    {
        "sortId": 5072,
        "id": "1340363836769255424",
        "title": "乔布斯说创新",
        "content": "史蒂夫·乔布斯说：“领袖和跟风者的区别在于创新。”\n\n请编写程序，输出这句话。\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\nSteven Jobs said, \"Innovation distinguishes between a leader and a follower.\"\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 112,
        "res": "[{'name': '输出语句', 'description': '输出语句用于将程序中的数据打印到屏幕上，可以使用printf函数来实现。在本题中，需要使用printf函数将指定的句子打印到屏幕上。'}]"
    },
    {
        "sortId": 5073,
        "id": "1340356908349472768",
        "title": "爱的宣言",
        "content": "请编写程序，输出爱的宣言。在情人节这一天，鼓起勇气把这个程序送给你的心上人。\n\n#### 输入样例\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n```\nI♥U\n\n```\n\n注：♥ 的 ASCII 码为 3。\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n```out\nI\u0003U\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 55,
        "res": "[{'name':'输出字符','description':'使用printf函数输出字符'}]"
    },
    {
        "sortId": 5074,
        "id": "1340355001375604736",
        "title": "爱音乐",
        "content": "请编写程序输出下面的文字。\n\n![题图.jpg](~/aae75c2a-f65a-4d87-a2d5-a7a3ee16bb0d.jpg)\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```\nI♥♬\n\n```\n\n注：♥ 的 ASCII 码为 3，♬ 的 ASCII 码为 14。\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n```out\nI\u0003\u000e\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 93,
        "res": "[{'name': 'ASCII码', 'description': 'ASCII码是一种将字符映射到数字的编码方式，每个字符对应一个唯一的ASCII码。在C语言中，可以使用整型变量存储和操作ASCII码。'}, {'name': '输出', 'description': '在C语言中，可以使用printf函数进行输出操作。可以使用转义字符来输出特殊字符，如换行符、制表符等。'}]"
    },
    {
        "sortId": 5075,
        "id": "1340346632573108224",
        "title": "Capital Letter Y",
        "content": "请编写程序，在屏幕上显示大写字母 Y。\n\n#### 输入样例\n```in\n\n```\n注：无输入\n\n#### 输出样例\n```out\n\\ /\n |\n |\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 76,
        "res": "[{'name':'基本输出','description':'学习如何在屏幕上输出字符和字符串。'}, {'name':'转义字符','description':'学习如何使用转义字符来输出特殊字符。'}, {'name':'字符常量','description':'学习如何使用字符常量来表示字符。'}, {'name':'ASCII码','description':'学习如何使用ASCII码来表示字符。'}, {'name':'注释','description':'学习如何使用注释来解释代码。'}, {'name':'程序结构','description':'学习如何组织C语言程序的结构。'}, {'name':'变量','description':'学习如何声明和使用变量。'}, {'name':'数据类型','description':'学习C语言的基本数据类型。'}, {'name':'运算符','description':'学习C语言的基本运算符。'}, {'name':'控制流程','description':'学习如何使用条件语句和循环语句控制程序的流程。'}, {'name':'函数','description':'学习如何定义和调用函数。'}, {'name':'数组','description':'学习如何声明和使用数组。'}, {'name':'指针','description':'学习如何声明和使用指针。'}, {'name':'字符串','description':'学习如何声明和使用字符串。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作。'}]"
    },
    {
        "sortId": 5076,
        "id": "1340227685328699392",
        "title": "统计某数每一位数字的偶数和",
        "content": "本题要求实现一个函数，可统计任一整数的每一位数字中的偶数之和。例如对于整数-31254，该函数应该返回6。\n\n### 函数接口定义：\n```c++\nint Count_Digit ( const int N );\n```\n\n其中 `N` 是用户传入的参数。 `N` 的值不超过`int`的范围。函数须返回 `N` 的每一位数字中的偶数之和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Count_Digit ( const int N );\n\nint main()\n{\n\n  int N;\n\n  scanf(\"%d\", &N);\n\n  printf(\"%d\", Count_Digit(N));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n```in\n-31254\n```\n\n### 输出样例：\n\n\n```out\n6\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 53,
        "res": "[{'name': '整数的每一位数字中的偶数之和', 'description': '本知识点要求学生实现一个函数，该函数可以统计任一整数的每一位数字中的偶数之和。学生需要了解整数的位数和位运算，以及如何遍历整数的每一位数字。'}]"
    },
    {
        "sortId": 5077,
        "id": "1340224563411447808",
        "title": "统计某数的每一位数字中偶数出现的次数",
        "content": "本题要求实现一个函数，可统计任一整数的每一位数字中偶数出现的次数。例如-31254中，偶数出现了2次，则该函数应该返回2。注意：0为偶数。\n\n### 函数接口定义：\n```c++\nint Count_Digit ( const int N );\n```\n\n其中 `N` 是用户传入的参数。 `N` 的值不超过`int`的范围。函数须返回 `N` 的每一位数字中偶数出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Count_Digit ( const int N );\n\nint main()\n{\n\n  int N;\n\n  scanf(\"%d\", &N);\n\n  printf(\"%d\", Count_Digit(N));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n```in\n-31254\n```\n\n### 输出样例：\n\n\n```out\n2\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 55,
        "res": "[{'name':'整数的位数统计','description':'本题要求实现一个函数，可统计任一整数的每一位数字中偶数出现的次数。注意：0为偶数。'}]"
    },
    {
        "sortId": 5078,
        "id": "1340219719808217088",
        "title": "统计某数每一位数字的奇数和",
        "content": "本题要求实现一个函数，可统计任一整数的每一位数字中的奇数之和。例如对于整数-31252，该函数应该返回9。\n\n### 函数接口定义：\n```c++\nint Count_Digit ( const int N );\n```\n\n其中 `N` 是用户传入的参数。 `N` 的值不超过`int`的范围。函数须返回 `N` 的每一位数字中的奇数之和。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Count_Digit ( const int N );\n\nint main()\n{\n\n  int N;\n\n  scanf(\"%d\", &N);\n\n  printf(\"%d\", Count_Digit(N));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n```in\n-31252\n```\n\n### 输出样例：\n\n\n```out\n9\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 41,
        "res": "[{'name': '整数的每一位数字', 'description': '本知识点涉及到对整数的每一位数字进行操作，包括提取每一位数字、判断数字的奇偶性等。在本题中，需要统计整数的每一位数字中的奇数之和。'}]"
    },
    {
        "sortId": 5079,
        "id": "1340206139893694464",
        "title": "统计某数的每一位数字中奇数出现的次数",
        "content": "本题要求实现一个函数，可统计任一整数的每一位数字中奇数出现的次数。例如-31252中，奇数出现了3次，则该函数应该返回3。\n\n### 函数接口定义：\n```c++\nint Count_Digit ( const int N );\n```\n\n其中 `N` 是用户传入的参数。 `N` 的值不超过`int`的范围。函数须返回 `N` 的每一位数字中奇数出现的次数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint Count_Digit ( const int N );\n\nint main()\n{\n\n  int N;\n\n  scanf(\"%d\", &N);\n\n  printf(\"%d\", Count_Digit(N));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n```in\n-31252\n```\n\n### 输出样例：\n\n\n```out\n3\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 76,
        "res": "[{'name': '整数的每一位数字', 'description': '本知识点涉及到整数的每一位数字的处理，包括提取每一位数字、判断数字的奇偶性等。在本题中，需要统计整数的每一位数字中奇数出现的次数。'}]"
    },
    {
        "sortId": 5080,
        "id": "1340133395487342592",
        "title": "单向链表的创建与输出",
        "content": "本题目要求补充两个函数，实现如下功能：\n\n输入若干个正整数，以-1结束，采取向链表中添加节点的方式来**建立**一个单链表，并**输出**这个单链表。\n### 向链表尾部添加节点函数：\n`Link AppendNode(Link head,int data);`\n\n其中Link结构定义如下：\n```\ntypedef struct link\n{\n\tint data;\n\tstruct link *next;\n}*Link;\n```\n\n* `head`：链表头指针，如果head为NULL，则会新建头节点 \n* `data`：要添加的节点数据值\n* `函数返回值`：添加节点后的链表头指针\n\n### 输出链表函数：\n`void DisplyNode(Link head);`\n* `head `：链表头指针\n\n### 主函数样例：\n```\n#include <stdio.h>\n#include <stdlib.h>\n\ntypedef struct link\n{\n\tint data;\n\tstruct link *next;\n}*Link;\n\nLink AppendNode(Link head,int data);\nvoid DisplyNode(Link head);\n\nint main()\n{\n\tint\tdata;\n    Link head = NULL;\n\twhile (1)\n    {\n        scanf(\"%d\",&data);\n        if (data==-1)\n            break;\n        head = AppendNode(head,data);\n    }\n    DisplyNode(head);\n    return 0;\n}\n\n\n/*在此实现 AppendNode函数 */\n/*在此实现DisplyNode函数 */\n```\n\n### 输入格式:\n\n从键盘输入若干个正整数（空格分隔），以-1结束。\n\n### 输出格式:\n\n依次输出单链表中各个节点的数据元素值，元素间以逗号分隔。如果链表为空，则输出NULL。参看输出样例。\n\n### 输入样例:\n\n\n```in\n1 3 5 7 9 -1\n```\n\n### 输出样例:\n\n\n```out\n1,3,5,7,9\n```\n### 输入样例:\n\n\n```in\n-1\n```\n\n### 输出样例:\n\n\n```out\nNULL\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 4,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 156,
        "res": "[{'name': '链表', 'description': '链表是一种常用的数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可以动态地添加和删除节点，相比于数组，链表的插入和删除操作更加高效。本题目要求通过向链表中添加节点的方式来建立一个单链表，并输出这个单链表。'}, {'name': '链表节点的添加', 'description': '本题目要求实现一个向链表尾部添加节点的函数，即AppendNode函数。该函数接受链表头指针和要添加的节点数据值作为参数，返回添加节点后的链表头指针。'}, {'name': '链表的输出', 'description': '本题目要求实现一个输出链表的函数，即DisplyNode函数。该函数接受链表头指针作为参数，依次输出单链表中各个节点的数据元素值，元素间以逗号分隔。如果链表为空，则输出NULL。'}]"
    },
    {
        "sortId": 5081,
        "id": "1340105890818768896",
        "title": "#define fun(x,y) (x)* (y)则fun(3+2,4+5)的值为（ ）。",
        "content": "#define fun(x,y) (x)* (y)\n\n则fun(3+2,4+5)的值为（ ）。\n@[](2)\n\nA. 16\nB. 25\nC. 45\nD. 无正确答案",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "90",
                        "name": "编译预处理",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 150,
        "res": "[{'name': '宏定义', 'description': '宏定义是C语言中的一种预处理指令，用于将一个标识符替换为一个字符串或者一个表达式。在这道题中，宏定义了一个函数式宏fun(x,y)，它将两个参数相乘。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前由预处理器处理的指令，用于对源代码进行预处理。宏定义就是一种预处理指令。'}, {'name': '运算符优先级', 'description': '在C语言中，不同的运算符有不同的优先级，优先级高的运算符先于优先级低的运算符进行计算。在这道题中，需要注意加法运算符和乘法运算符的优先级。'}]"
    },
    {
        "sortId": 5082,
        "id": "1339919689331589120",
        "title": "输出1-n间所有5的倍数。",
        "content": "本题要求实现一个函数，可判断一个数是否是5的倍数。主函数调用它输出1-n间所有5的倍数。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint  f ( int n ) ;\n```\n\n其中 n是用户传入的参数。函数须返回 1或 0。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\nint  f ( int n ) ;\n\nint main(void)\n{   int i ,n ;\n\tscanf(\"%d\",&n);  \n    for(i=1; i<=n;  i++)\n\t   if( f(i)==1 )  printf(\"%d\", i )  ;  // 是5的倍数则输出\n  return 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n```in\n16\n```\n\n### 输出样例：\n\n\n```out\n51015\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 46,
        "res": "[{'name':'判断数是否是5的倍数'，'description':'本题要求实现一个函数，可判断一个数是否是5的倍数。主函数调用它输出1-n间所有5的倍数。'}]"
    },
    {
        "sortId": 5083,
        "id": "1339911883069145088",
        "title": "输出指定范围内的3位水仙花数。",
        "content": "本题要求实现一个函数，可判断一个三位数是否是水仙花数。是则返回1，否则返回0。并调用它输出所有指定范围内的水仙花数。\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint sxh (int n );\n```\n\n在中 n是由主函数传入的参数（3位数）。 `\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\nint  sxh ( int n ) ;\n\nint main(void)\n{   int i ,n ;\n\tscanf(\"%d\",&n);  //  n为3位数\n    for(i=100; i<=n;  i++)\n\t   if( sxh(i)==1 )  printf(\"%d\", i )  ;\n  return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n371\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n153370371\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 42,
        "res": "[{'name': '函数定义', 'description': '本题要求实现一个函数，可判断一个三位数是否是水仙花数。是则返回1，否则返回0。'}, {'name': '循环结构', 'description': '调用函数输出所有指定范围内的水仙花数。'}, {'name': '输入输出', 'description': '主函数中使用scanf函数获取输入，使用printf函数输出结果。'}]"
    },
    {
        "sortId": 5084,
        "id": "1339851388089876480",
        "title": "h0080. 菱形",
        "content": "输入一个奇数n，输出一个由‘*’构成的n阶空心菱形。\n\n### 输入格式:\n一个奇数n。\n\n### 输出格式:\n输出一个由‘*’构成的n阶实心菱形。\n\n具体格式参照输出样例。\n\n### 输入样例:\n\n```in\n5\n```\n\n### 输出样例:\n\n```out\n  *  \n * * \n*   *\n * * \n  *  \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 89,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制打印每一行的空格和星号。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来确定每一行的空格和星号的个数。'}, {'name': '字符串输出', 'description': '字符串输出是C语言中的一种输出方式，用于将字符串打印到屏幕上。在本题中，可以使用字符串输出来打印每一行的空格和星号。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储输入的奇数n，并在循环中使用该变量来控制打印的行数和空格的个数。'}, {'name': '嵌套循环', 'description': '嵌套循环是C语言中的一种循环结构，用于在循环内部再次执行循环。在本题中，可以使用嵌套循环来控制打印每一行的空格和星号。'}]"
    },
    {
        "sortId": 5085,
        "id": "1339842201821724672",
        "title": "计算字符串长度",
        "content": "从键盘任意输入一个字符串，计算其实际字符个数并输出。不使用字符串处理函数strlen（），编程实现strlen的功能。\n\n### 函数接口:\n`unsigned int  MyStrlen(const char str[])`\n### 主函数样例\n```\n#include  <stdio.h>\nunsigned int  MyStrlen(const char str[]);\n\nint main()\n{\n\tchar   a[80]; unsigned int len;\n\tgets(a);\n\tlen=MyStrlen(a);\n\tprintf(\"%u\\n\", len);\n\treturn 0;\n}\n\n/*在此实现MyStrlen函数*/\n\n```\n### 输入格式:\n\n输入一个字符串，以回车结束。\n\n### 输出格式:\n\n输出字符串长度\n\n### 输入样例:\n\n\n```in\nhello world!\n```\n\n### 输出样例:\n\n\n\n```out\n12\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 62,
        "res": "[{'name': '字符串处理函数', 'description': '字符串处理函数是C语言中用于处理字符串的一类函数，包括计算字符串长度、复制字符串、连接字符串等功能。在本题中，需要实现计算字符串长度的功能，即计算字符串中实际字符的个数。'}]"
    },
    {
        "sortId": 5086,
        "id": "1339835946172497920",
        "title": "h0062. 连续整数相加",
        "content": "读入两个整数值A和N，计算从A开始的N个连续整数的和。\n\n注意，如果读入的N为0或负数，则继续读取数字直至读入N值为正整数为止。1≤A≤100,−100≤N≤100\n\n### 输入格式:\n\n共一行，包含整数A和若干个整数N。\n\n### 输出格式:\n\n一个整数，表示从A开始的N个连续整数的和。\n\n### 输入样例:\n\n```in\n4 -1 -3  2\n```\n\n### 输出样例:\n\n```out\n9\n```\n### 注：\n9表示4+5\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 45,
        "res": "[{'name':'循环结构'，'description':'循环结构是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环结构有for循环、while循环和do-while循环。本题中需要使用循环结构来计算从A开始的N个连续整数的和。'}，{'name':'条件判断'，'description':'条件判断是根据条件的真假来决定程序的执行路径。在C语言中，常用的条件判断语句有if语句和switch语句。本题中需要使用条件判断来判断读入的N值是否为正整数，如果不是则继续读取数字直至读入N值为正整数为止。'}，{'name':'变量和数据类型'，'description':'变量是用来存储数据的一种容器，数据类型决定了变量可以存储的数据的种类和范围。在C语言中，常用的数据类型有整型、浮点型、字符型等。本题中需要使用整型变量来存储读入的整数值A和N，以及计算连续整数的和。'}]"
    },
    {
        "sortId": 5087,
        "id": "1339831512507641856",
        "title": "两数的互换",
        "content": "从键盘任意输入两个整数，用**指针**作函数参数，编程实现将其交换后再重新输出。\n### 函数接口:\n`void  swap(int *x, int *y)`\n\n### 输入格式:\n从键盘输入两个整数。\n\n### 输出格式:\n\n按输出样例的形式输出交换后的两个整数。\n\n### 输入样例:\n\n\n```in\n11 22\n```\n\n### 输出样例:\n\n\n\n```out\nAfter swap:22,11\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 318,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，我们可以直接访问和修改变量的值，而不需要知道变量的名称。在本题中，我们使用指针作为函数参数，实现了两个整数的交换。'}, {'name': '函数', 'description': '函数是C语言中的一种代码组织方式，它可以将一段代码封装起来，以便重复使用。在本题中，我们定义了一个名为swap的函数，它接受两个整数的指针作为参数，并将这两个整数的值进行交换。'}, {'name': '输入输出', 'description': '输入输出是C语言中常用的操作，它可以实现程序与用户之间的交互。在本题中，我们通过键盘输入两个整数，并通过printf函数将交换后的结果输出到屏幕上。'}]"
    },
    {
        "sortId": 5088,
        "id": "1339822191711383552",
        "title": "求最大值",
        "content": "从键盘输入不超过50个非负整数，当输入为负值时，表示输入结束。试编程求出其中的最大值。\n\n### 输入格式:\n\n在一行中给出不超过50个非负整数（空格分隔），以负数结束。\n\n### 输出格式:\n\n按输出样例的形式输出其中的最大值\n### 输入样例:\n\n\n```in\n9 0 62 36 15 28 -1\n```\n\n### 输出样例:\n\n\n\n```out\nmax=62\n```\n### 输入样例:\n\n\n```in\n-1\n```\n\n### 输出样例:\n\n\n\n```out\nNULL!\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 111,
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入和向屏幕输出数据。'}, {'name': '循环结构', 'description': '学习如何使用循环结构来重复执行一段代码。'}, {'name': '条件判断', 'description': '学习如何使用条件判断语句来根据不同的条件执行不同的代码。'}, {'name': '数组', 'description': '学习如何定义和使用数组来存储多个相同类型的数据。'}, {'name': '变量', 'description': '学习如何定义和使用变量来存储数据。'}, {'name': '算术运算', 'description': '学习如何进行基本的算术运算，如加法、减法、乘法和除法。'}, {'name': '最大值', 'description': '学习如何找出一组数中的最大值。'}]"
    },
    {
        "sortId": 5089,
        "id": "1339786749645451264",
        "title": "使用函数求特殊a串数列和",
        "content": "给定两个均不超过9的正整数a和n，要求编写函数求a+aa+aaa++⋯+aa⋯a（n个a）之和以及最后一个数字！\n\n### 函数接口定义：\n```c\nint fn( int a, int n );\nint SumA( int a, int n );\n```\n其中函数fn须返回的是n个a组成的数字；\nSumA返回所有数字的和。\n\n### 裁判测试程序样例：\n```c\n#include<stdio.h>\nint fn( int a, int n );\nint SumA( int a, int n );\n\nint main()\n{\n    int a, n;\n\n    scanf(\"%d %d\", &a, &n);\n    printf(\"fn(%d, %d) = %d\\n\", a, n, fn(a,n));        \n    printf(\"s = %d\\n\", SumA(a,n));    \n\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2 3\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nfn(2, 3) = 222\ns = 246\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 129,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来重复计算a的n次方，并累加求和。'}，{'name':'函数定义'，'description':'函数定义是C语言中的一种语法结构，用于封装一段可重复使用的代码。在本题中，需要定义两个函数fn和SumA来实现对应的功能。'}，{'name':'输入输出'，'description':'输入输出是C语言中的一种基本操作，用于从用户处获取输入数据并将结果输出。在本题中，需要使用scanf函数获取输入数据，使用printf函数输出结果。'}]"
    },
    {
        "sortId": 5090,
        "id": "1339782635645595648",
        "title": "求一批数平均值的函数",
        "content": "首先在main函数中输入10个数，然后在被调函数ave中求出这10个数的平均值，最后在main函数中输出结果。要求写出函数ave。\n\n### 函数接口定义：\n```c++\ndouble ave(double a[],int n);\n```\n其中a和n是由主调函数传入的参数。\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n#define N 10\ndouble ave(double a[],int n);\nint main(void)\n{ double x[N],p;\n int i;\n for(i=0;i<N;i++)\n  scanf(\"%lf\",&x[i]);\n p=ave(x,N);\n printf(\"ave=%.2f\\n\",p);\n return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 7 9 2 4 6 8 10\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nave=5.50\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 181,
        "res": "[{'name':'数组','description':'数组是一种存储多个相同类型数据的连续内存空间的数据结构。在C语言中，数组的声明和使用非常常见。本题中，需要在main函数中声明一个大小为10的数组x，并通过循环输入10个数。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块，可以通过函数名来调用执行。本题中，需要编写一个名为ave的函数，用于计算数组中元素的平均值。函数的参数包括一个数组a和一个整数n，分别表示数组的首地址和元素个数。函数的返回值为一个double类型的平均值。'}, {'name':'输入输出','description':'输入输出是C语言中常见的操作，用于从键盘读取数据和向屏幕输出结果。本题中，需要使用scanf函数从键盘读取10个数，并使用printf函数将计算得到的平均值输出到屏幕上。'}]"
    },
    {
        "sortId": 5091,
        "id": "1339780064646610944",
        "title": "赢利几何-I",
        "content": "给定一个正整数数组，它的第 i 个数表示特定股票第 i 天的价格。请编写程序，计算只进行一次买卖时可获得的最大利润：\n说明：1-若不可能获得利润，输出零。2-这只是事后推算。\n### 输入格式:\n第一行一个整数，表示可进行交易的天数N。\n第二行，N个正整数（中间以空格分隔）。\n\n### 输出格式:\n只允许进行一次买卖时的最大利润。\n\n### 输入样例:\n```in\n11\n5 3 2 8 4 9 7 9 7 1 7\n\n```\n\n### 输出样例:\n一次买卖最大利润为8(9-1=8)。\n\n```out\n7\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 9,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 31,
        "res": "[{'name':'数组', 'description':'数组是一种存储多个相同类型数据的数据结构，可以通过下标访问和修改数组中的元素。在本题中，需要使用数组来存储股票的价格数据。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构，可以使用循环来遍历数组中的元素。在本题中，可以使用循环来遍历股票价格数组，计算最大利润。'}, {'name':'变量', 'description':'变量是一种用于存储数据的容器，可以使用变量来存储最大利润的值。在本题中，需要使用变量来存储最大利润的值，并在循环中更新该变量的值。'}, {'name':'条件判断', 'description':'条件判断是一种根据条件的真假来执行不同代码的结构，可以使用条件判断来判断是否可以获得利润。在本题中，可以使用条件判断来判断是否可以获得利润，并输出最大利润的值。'}]"
    },
    {
        "sortId": 5092,
        "id": "1339780060548460544",
        "title": "自然数的任意位数字",
        "content": "请编写函数，用循环方法求自然数的任意一位数字.\n\n### 函数接口定义：\n```c\nint Digit(int number, int index);\n```\n\n说明：参数 number 为非负整数，index 为数位的索引号：个位编号为 0，十位编号为 1, 百位编号为 2, ...，以此类推。函数值为 number 的第 index 位数字。\n```c++\n#include <stdio.h>\nint Digit(int number, int index);\nint main()\n{\n    int n, i;\n    scanf(\"%d%d\", &n, &i);\n    printf(\"%d\\n\", Digit(n,i));\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n4567 0\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n7\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 143,
        "res": "[{'name':'循环方法','description':'使用循环来求解自然数的任意一位数字。'}]"
    },
    {
        "sortId": 5093,
        "id": "1339774892167688192",
        "title": "最小公倍数",
        "content": "请编写函数，求两个整数的最小公倍数。\n\n### 函数接口定义：\n```c++\nint Lcm(int x, int y);\n```\n\n说明：参数 x 和 y 是两个任意整数（包括正整数、零和负整数），函数值为最小公倍数。\n要求：规定最小公倍数为非负整数。当 x 和 y 中有一个为 0 时，最小公倍数规定为 0。当其中有负数时，先进行绝对值，后再求最小公倍数\n\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint Lcm(int x, int y);\nint main()\n{\n    int a,b,c;\n    scanf(\"%d%d\", &a,&b);\n    c=Lcm(a,b);\n    printf(\"%d\\n\",c);\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n-60 72\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n360\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 131,
        "res": "[{'name': '函数定义', 'description': '在C语言中，函数是一段完成特定任务的代码块，可以通过函数名来调用执行。函数定义包括函数的返回类型、函数名、参数列表和函数体。在本题中，需要编写一个函数来求两个整数的最小公倍数。'}, {'name': '函数接口定义', 'description': '函数接口定义是指函数的声明部分，包括函数的返回类型、函数名和参数列表。在本题中，函数接口定义为int Lcm(int x, int y)，表示函数名为Lcm，返回类型为int，参数列表为两个整数x和y。'}, {'name': '输入输出', 'description': '输入输出是指程序与用户或外部设备之间进行数据交互的过程。在本题中，需要从标准输入中读取两个整数，然后调用函数计算最小公倍数，并将结果输出到标准输出。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在本题中，需要判断x和y的值，当其中有一个为0时，最小公倍数规定为0；当其中有负数时，先进行绝对值，再求最小公倍数。可以使用if语句来实现条件判断。'}, {'name': '循环语句', 'description': '循环语句是重复执行某段代码的语句。在本题中，可以使用循环语句来求两个整数的最小公倍数。可以使用while循环或者for循环来实现。'}, {'name': '数学运算', 'description': '数学运算是指对数值进行各种数学操作的过程。在本题中，需要进行绝对值运算和求最小公倍数运算。可以使用abs函数来求绝对值，可以使用循环和条件语句来求最小公倍数。'}]"
    },
    {
        "sortId": 5094,
        "id": "1339771288392646656",
        "title": "判断满足条件的三位数以内有几个完全平方数",
        "content": "本题要求实现一个函数，统计给定区间内[$$101,n$$]的三位数中有几个两位数字相同的完全平方数的个数（$$n\\le 1000$$）。例如输入500，其中121（11的完全平方数） 144（12的平方数） 225（15的完全平方数） 400 441 484都是满足条件的平方数，共计6个。\n\n\n### 函数接口定义：\n```c\nint search( int n );\n\n```\n\n其中传入的参数int n是一个三位数的正整数（最高位数字非0）。函数search返回[101, n]区间内所有满足条件的数的个数。\n\n### 裁判测试程序样例：\n```c\n#include <stdio.h>\n#include <math.h>\n\nint search( int n );\nint main()\n{\n    int number;\n    scanf(\"%d\",&number);\n    printf(\"count=%d\\n\",search(number));\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n500\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\ncount=6\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 126,
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来遍历区间内的所有数。'}, {'name':'条件判断语句'，'description':'条件判断语句用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断语句来判断一个数是否是完全平方数，并统计满足条件的数的个数。'}, {'name':'函数'，'description':'函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在本题中，需要实现一个函数来统计满足条件的数的个数。'}, {'name':'数学库函数'，'description':'数学库函数是C语言提供的一些数学计算相关的函数，可以用来进行数学运算。在本题中，可以使用数学库函数来计算平方根。'}]"
    },
    {
        "sortId": 5095,
        "id": "1339761832065843200",
        "title": "判断素数",
        "content": "输入一个正整数m，判断该数是不是素数。素数是除了1和本身之外，不能被其他数整除的数（1不是素数，2是素数）。\n\n### 输入格式:\n输入一个正整数\n\n### 输出格式:\n\n是素数输出\"Yes\"，不是素数输出“No\"。\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n17\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nYes\n```\n\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n111\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\nNo\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 211,
        "res": "[{'name':'素数判断'，'description':'判断一个正整数是否为素数'}]"
    },
    {
        "sortId": 5096,
        "id": "1339447669552345088",
        "title": " 倒序输出下三角字符阵列",
        "content": "本题要求编写程序，**倒序**输出 n行 由 指定大写英文字符 开始构成的 左下三角形字符阵列。如果显示过程中，字符低于了A，请回到Z继续显示\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个大写英文字符startChar。\n\n### 输出格式:\n\n倒序输出n行由大写字母startChar开始构成的左下三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。\n\n### 输入样例:\n```in\n4 X\n```\n### 输出样例:\n```out\nX \nW V \nU T S \nR Q P O \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 21,
        "res": "[{'name':'循环语句', 'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来控制每行输出的字符个数和字符的值。'}, {'name':'条件判断语句', 'description':'条件判断语句用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件判断语句来判断字符是否低于A，并回到Z继续显示。'}, {'name':'字符输出', 'description':'字符输出是将字符显示在屏幕上。在本题中，需要将指定的字符按照倒序输出，并构成左下三角形字符阵列。'}]"
    },
    {
        "sortId": 5097,
        "id": "1339446548414885888",
        "title": "倒序输出上三角字符阵列",
        "content": "本题要求编写程序，**倒序**输出 n行 由 指定小写英文字符 开始构成的 左上三角形字符阵列。如果显示过程中，字符低于了a，请回到z继续显示\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个小写英文字符startChar。\n\n### 输出格式:\n\n倒序输出n行由小写字母startChar开始构成的左上三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。\n\n### 输入样例:\n```in\n4 x\n```\n### 输出样例:\n```out\nx w v u \nt s r \nq p \no \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 15,
        "res": "[{'name':'循环语句', 'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来控制每行输出的字符个数和行数。'}, {'name':'条件语句', 'description':'条件语句用于根据条件来执行不同的代码块。在本题中，可以使用条件语句来判断是否需要回到字母z继续显示。'}, {'name':'字符类型', 'description':'字符类型用于表示单个字符，可以进行字符之间的比较和运算。在本题中，需要使用字符类型来表示输入的startChar，并进行字符的递减和比较。'}]"
    },
    {
        "sortId": 5098,
        "id": "1339444395340546048",
        "title": " 输出上三角字符阵列",
        "content": "本题要求编写程序，输出 n行 由 指定小写英文字符 开始构成的 左上三角形字符阵列。如果显示过程中，字符超过了z，请从回到a继续显示\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个小写英文字符startChar。\n\n### 输出格式:\n\n输出n行由小写字母startChar开始构成的左上三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。\n\n### 输入样例:\n```in\n4 b\n```\n### 输出样例:\n```out\nb c d e \nf g h \ni j \nk \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 25,
        "res": "[{'name':'循环语句', 'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来控制每行输出的字符个数和行数。'}, {'name':'字符运算', 'description':'字符运算可以实现字符的自增和自减操作。在本题中，可以使用字符运算来实现每个字符的递增。'}, {'name':'条件判断', 'description':'条件判断用于根据不同的条件执行不同的代码。在本题中，可以使用条件判断来判断是否需要换行。'}]"
    },
    {
        "sortId": 5099,
        "id": "1339440791246422016",
        "title": " 输出下三角字符阵列",
        "content": "本题要求编写程序，输出 n行 由 指定大写英文字符 开始构成的 左下三角形字符阵列。如果显示过程中，字符超过了Z，请从回到A继续显示\n\n### 输入格式:\n\n输入在一行中给出一个正整数n（1≤n<7）和一个大写英文字符startChar。\n\n### 输出格式:\n\n输出n行由大写字母startChar开始构成的左下三角形字符阵列。格式见输出样例，其中每个字母后面都有一个空格。\n\n### 输入样例:\n```in\n4 B\n```\n### 输出样例:\n```out\nB \nC D \nE F G \nH I J K \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 30,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来控制每行输出的字符数量。'}, {'name':'字符运算'，'description':'字符运算是C语言中的一种运算方式，可以对字符进行加减操作。在本题中，可以使用字符运算来实现字符的循环显示。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件选择执行不同的代码。在本题中，可以使用条件判断来判断字符是否超过了Z，并进行相应的处理。'}]"
    },
    {
        "sortId": 5100,
        "id": "1339326615962337280",
        "title": "SWPU水仙花数",
        "content": "水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=1³ +5³ +3³ 。\n\n特别提醒：水仙花数不只限于3位数，也可以是4位数、5位数... \n\n本题要求编写函数，判断给定整数是否水仙花数，函数接口定义：int narcissistic( int number )。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint narcissistic( int number );\n```\n\n在这里解释接口参数。例如：其中 `number` 是用户传入的参数，根据此参数是否是水仙花数，返回0或者1，其中0代表不是。\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n#include<math.h>\nint narcissistic( int number );\nvoid printAllNar( int m, int n );\nint main()\n{\n    int m, n;\n\n    scanf(\"%d %d\", &m, &n);\n    printAllNar(m, n); \n\n    return 0;\n}\n\nvoid printAllNar(int m, int n)\n{\n    int i,iFlag = 0;\n\tfor(i = m;i <=n;i++)\n\t{\n\t\tif(narcissistic(i) == 1)\n\t\t{\n\t\t\tiFlag = 1;\n\t\t\tprintf(\"%d\\n\",i);\n\t\t}\n\t}\n\tif(iFlag == 0)\n\t\tprintf(\"no narcissistic number\\n\");\n}\n\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例1：\n\n\n```in\n150 370\n```\n\n### 输出样例1：\n\n每个水仙花数单独占一行。\n\n```out\n153\n370\n```\n\n### 输入样例2：\n\n\n```in\n375 400\n```\n\n### 输出样例2：\n\n建议复制此输出，不要手工键入。\n```out\nno narcissistic number\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 48,
        "res": "[{'name': '水仙花数', 'description': '水仙花数是指一个N位正整数（N≥3），它的每个位上的数字的N次幂之和等于它本身。例如：153=1³ +5³ +3³ 。特别提醒：水仙花数不只限于3位数，也可以是4位数、5位数... 本题要求编写函数，判断给定整数是否水仙花数，函数接口定义：int narcissistic( int number )。'}, {'name': '函数接口定义', 'description': '在这里描述函数接口。例如：int narcissistic( int number );\\n\\n在这里解释接口参数。例如：其中 `number` 是用户传入的参数，根据此参数是否是水仙花数，返回0或者1，其中0代表不是。'}, {'name': '裁判测试程序样例', 'description': '在这里给出函数被调用进行测试的例子。例如：\\n#include <stdio.h>\\n#include<math.h>\\nint narcissistic( int number );\\nvoid printAllNar( int m, int n );\\nint main()\\n{\\n    int m, n;\\n\\n    scanf(\"%d %d\", &m, &n);\\n    printAllNar(m, n); \\n\\n    return 0;\\n}\\n\\nvoid printAllNar(int m, int n)\\n{\\n    int i,iFlag = 0;\\n\\tfor(i = m;i <=n;i++)\\n\\t{\\n\\t\\tif(narcissistic(i) == 1)\\n\\t\\t{\\n\\t\\t\\tiFlag = 1;\\n\\t\\t\\tprintf(\"%d\\n\",i);\\n\\t\\t}\\n\\t}\\n\\tif(iFlag == 0)\\n\\t\\tprintf(\"no narcissistic number\\n\");\\n}\\n\\n\\n/* 请在这里填写答案 */'}, {'name': '输入样例1', 'description': '\\n\\n```in\\n150 370\\n```'}, {'name': '输出样例1', 'description': '\\n\\n每个水仙花数单独占一行。\\n\\n```out\\n153\\n370\\n```'}, {'name': '输入样例2', 'description': '\\n\\n```in\\n375 400\\n```'}, {'name': '输出样例2', 'description': '\\n\\n建议复制此输出，不要手工键入。\\n```out\\nno narcissistic number\\n```'}]"
    },
    {
        "sortId": 5101,
        "id": "1339135663696068608",
        "title": "找两个字符串相同的最长子串长度",
        "content": "读入两个字符串A与B。求出A的后缀中，与B的前缀中，相等的最长字符串的长度。例：A中的字符串为“abcdefghi”，B中的字符串为“fghijklmn”，A字符串的后缀字符串“fghi”构成与B字符串前缀中相等的最长字符串，该字符串长度为4。A、B字符串的最大长度不超过 19999。\n\n注：字符串的前缀是指字符串的任意首部。比如字符串“abbc”的前缀有“a”,“ab”,“abb”,“abbc”。同样,字符串的任意尾部是字符串的后缀,“abbc”的后缀有“c”,“bc”,“bbc”,“abbc”。\n### 输入样例1:\n```in\nabcdee\ncdeefgijklmn\n```\n### 输出样例1:\n```out\n4\n```\n### 输入样例2:\n```in\nabcdefgijk\nBcdefgijklmn\n```\n### 输出样例2:\n```out\n0\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 4,
        "res": "[{'name': '字符串处理', 'description': '字符串处理是C语言程序设计中的一个重要知识点。在本题中，需要对输入的字符串进行处理，包括求字符串的后缀和前缀，以及比较两个字符串的相等部分。学生需要掌握字符串的基本操作，如字符串的读入、比较、截取等。'}, {'name': '循环结构', 'description': '循环结构是C语言程序设计中的基本知识点之一。在本题中，可以使用循环结构来遍历字符串的后缀和前缀，以及比较两个字符串的相等部分。学生需要掌握循环结构的基本语法和用法，如for循环、while循环等。'}, {'name': '条件语句', 'description': '条件语句是C语言程序设计中的基本知识点之一。在本题中，可以使用条件语句来判断两个字符串的相等部分是否存在，并计算相等部分的长度。学生需要掌握条件语句的基本语法和用法，如if语句、else语句等。'}, {'name': '变量与赋值', 'description': '变量与赋值是C语言程序设计中的基本知识点之一。在本题中，需要定义变量来存储输入的字符串和计算结果，并进行赋值操作。学生需要掌握变量的声明、定义和赋值的基本语法和用法。'}, {'name': '函数的定义与调用', 'description': '函数的定义与调用是C语言程序设计中的基本知识点之一。在本题中，可以将字符串处理、循环结构、条件语句等功能封装成函数，方便代码的复用和管理。学生需要掌握函数的定义和调用的基本语法和用法。'}]"
    },
    {
        "sortId": 5102,
        "id": "1339104929194995712",
        "title": "简单的基数排序",
        "content": "桶式排序是一种简单的基数排序。桶式排序（这里以对若干个正整数的排序为例描述求解过程）：待排序的正整数存放在一维数组中，此外还有一个整型的二维数组，其中行下标从0～9，列下标从0～n – 1。在这里，n是待排序的数组中元素的数目。二维数组的每行称为一个桶。编写一个程序，读入15个正整数，并按从小到大的顺序排序。桶式排序的算法如下：\n\n遍历一维数组中的每个元素，并根据它的个位将每个值安排在桶数组的某行中。例如，97安排在行7，3安排在行3，而100安排在行0——这个过程叫分桶。\n\n在桶数组内循环，并将值复制回到最初的数组——这个过程叫收集。上面的数值在一维数组中的新顺序是100、3和97。\n\n接下来依次取一维数组中所有数字的十位，百位，千位等等，并按取出的十位，百位，千位等位上的数字不断分桶和放回原数组；重复这个过程（分桶---收集），当处理完了一维数组中最大数字的最高位时，就停止这个过程。\n\n例如，在对数组进行第2轮处理时，100安排在行0，3安排在行0（它仅有一个数位），而97安排在行9。一维数组中值的顺序是100、3和97。在第3轮处理时，100安排在行1，3安排在行0，而97安排在行0（在3之后）。桶式排序可以确保在处理了最大数字的最高位之后正确排列所有值的顺序。\n\n注意，桶的二维数组的大小是要排序的整数数组大小的10倍。这种排序方法的性能比冒泡排序方法要高，但需要更多的存储空间。冒泡排序仅仅需要为待排序的数据配置内存空间，整个排序过程中不再需要额外的空间；然而，桶式排序中待排数据需要存放空间，此外排序过程中用到的桶也需要内存空间。桶式排序使用更多的内存，但性能更好，这是一种以空间换时间的做法。\n本题目源自重庆科技学院的伍建全老师，在此特向伍老师致谢！！！\n\n### 输入格式:\n\n输入为15个不超出int数值范围的非负整数。\n\n### 输出格式:\n\n运用上面介绍的桶排序规则编制程序，输出每次分派收集之后得到的一维数组，每个整数之间以空格隔开。每次输出占一行。（注意每行末尾有1个空格）\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n6634 9796 435 1405 6123 10001 11459 12018 10372 19874 12860 11326 7096 30205 27010\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n12860 27010 10001 10372 6123 6634 19874 435 1405 30205 9796 11326 7096 12018 11459 \n10001 1405 30205 27010 12018 6123 11326 6634 435 11459 12860 10372 19874 9796 7096 \n10001 27010 12018 7096 6123 30205 11326 10372 1405 435 11459 6634 9796 12860 19874 \n10001 30205 10372 435 11326 1405 11459 12018 12860 6123 6634 27010 7096 9796 19874 \n435 1405 6123 6634 7096 9796 10001 10372 11326 11459 12018 12860 19874 27010 30205 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 32,
        "res": "[{'name':'桶式排序', 'description':'桶式排序是一种基数排序的方法，通过将待排序的正整数按照个位、十位、百位等位数进行分桶和收集的过程，最终实现排序。桶式排序的算法包括分桶和收集两个步骤，分桶是根据每个元素的个位将其放入对应的桶中，收集是将桶中的元素按照顺序放回原数组。重复进行分桶和收集的过程，直到处理完最大数字的最高位。桶式排序需要额外的存储空间来存放桶和待排序的数据，但是排序性能较高。'}]"
    },
    {
        "sortId": 5103,
        "id": "1339033561120456704",
        "title": "写函数求得十位上的数字 ",
        "content": "本题要求实现一个函数，可以求出一个输入的三位数的十位上的数。例如输入123，求得十位数上的数为2。\n\n### 函数接口定义：\n```c++\nvoid fun(int *op, int *presult);\n```\n其中， `*op` 是输入的三位数， `*presult` 是计算得出的十位上的数字。函数无返回值\n\n### 裁判测试程序样例：\n```c++\n\n#include <stdio.h>\nvoid fun(int *op, int *presult);\n\nint main()\n{\n\n  int a, b=0;\n  scanf(\"%d\", &a);\n  fun(&a, &b);\n  printf(\"%d\", b);\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n\n```in\n123\n```\n\n### 输出样例：\n\n```out\n2\n```\n\n### 输入样例：\n\n\n```in\n-123\n```\n\n### 输出样例：\n\n```out\n2\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 27,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，函数的参数op和presult都是指针类型，通过指针可以获取输入的三位数和计算得出的十位数。'}, {'name': '输入输出', 'description': '输入输出是C语言中常用的操作，通过scanf函数可以从标准输入中读取数据，通过printf函数可以将结果输出到标准输出中。在本题中，通过scanf函数读取输入的三位数，通过printf函数将计算得出的十位数输出。'}, {'name': '函数定义和调用', 'description': '函数是C语言中的一种代码组织方式，可以将一段代码封装成一个函数，通过函数名和参数来调用。在本题中，函数fun的定义和调用是解决问题的关键。fun函数的参数op和presult分别表示输入的三位数和计算得出的十位数，通过函数体内的代码实现计算逻辑。'}]"
    },
    {
        "sortId": 5104,
        "id": "1338708587868090368",
        "title": "冒泡法排序",
        "content": "本题要求读入10个整数存入数组中，并将这10个数从小到大排序，要求使用冒泡法排序。\n\n### 输入格式:\n\n输入10个整数，存入数组中。\n\n### 输出格式:\n\n直接输出从小到大排好序的数组，每个数输出占5列列宽。\n\n### 输入样例:\n\n\n```in\n10 9 13 17 29 30 11 7 8 3\n```\n\n### 输出样例:\n\n\n\n```out\n    3    7    8    9   10   11   13   17   29   30\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 112,
        "res": "[{'name':'冒泡排序'，'description':'冒泡排序是一种简单的排序算法，它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。'}]"
    },
    {
        "sortId": 5105,
        "id": "1338676277949001728",
        "title": "计算圆的面积",
        "content": "本题目要求读入圆的半径1个整数r，计算并输出圆的面积。圆周率取值为3.14。\n\n### 输入格式:\n\n输入在一行中给出1个圆的半径整数值r。\n\n### 输出格式:\n\narea=圆的面积，面积值保留2位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\narea=12.56\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 143,
        "res": "[{'name': '变量', 'description': '变量是存储数据的一种方式，可以通过变量名来访问和操作数据。在C语言中，变量需要先声明后使用，声明时需要指定变量的类型和名称。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交互的方式。在C语言中，可以使用scanf函数进行输入操作，使用printf函数进行输出操作。'}, {'name': '运算符', 'description': '运算符是用于进行数学和逻辑运算的符号。在C语言中，常见的运算符有算术运算符、关系运算符、逻辑运算符等。'}, {'name': '数据类型', 'description': '数据类型是用来表示不同种类的数据的属性。在C语言中，常见的数据类型有整型、浮点型、字符型等。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子，用来进行计算和求值。在C语言中，可以使用表达式进行数学运算、逻辑运算等。'}, {'name': '控制语句', 'description': '控制语句用于控制程序的执行流程。在C语言中，常见的控制语句有条件语句、循环语句、跳转语句等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用和执行。在C语言中，可以自定义函数和使用标准库函数。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的容器。在C语言中，可以通过下标来访问和操作数组中的元素。'}, {'name': '指针', 'description': '指针是用来存储变量地址的变量。在C语言中，可以通过指针来间接访问和操作变量。'}, {'name': '字符串', 'description': '字符串是由字符组成的序列，用来表示文本。在C语言中，可以使用字符数组或指针来表示和操作字符串。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起。在C语言中，可以使用结构体来表示复杂的数据结构。'}]"
    },
    {
        "sortId": 5106,
        "id": "1338653902406709248",
        "title": "求100以内的奇数和",
        "content": "本题目要求计算1至100以内所有奇数的和，并输出计算结果。\n\n### 输入格式:\n\n本题无输入。\n\n### 输出格式:\n\nsum=奇数和\n\n### 输入样例:\n\n本题无输入。\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nsum=2500\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 106,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历1至100的所有奇数，并计算它们的和。'}]"
    },
    {
        "sortId": 5107,
        "id": "1338648032923172864",
        "title": "输出一条语句",
        "content": "本题目要求输出一条简单语句。\n\n### 输入格式:\n\n本题无输入。\n\n### 输出格式:\n\n在一行中输出\"Hello Word!\"。（注意：单词首字母大写，标点为英文。）\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nHello Word!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 52,
        "res": "[{'name':'输出语句'，'description':'本知识点主要讲解如何使用printf函数进行输出操作。'}]"
    },
    {
        "sortId": 5108,
        "id": "1338603246899720192",
        "title": "正弦函数",
        "content": "根据麦克劳林公式计算正弦值。\n\n![题图.jpg](~/5224d057-495b-4086-8b5f-03a494dcdc3a.jpg)\n\n#### 输入格式\n> $$x$$ $$\\varepsilon$$\n\n注：$$x$$ 为角(弧度)，$$\\varepsilon$$ 为计算精度。\n\n#### 输出格式\n> $$y$$\n\n注：$$y$$ 为 $$x$$ 的正弦值，输出 6 位小数。\n\n#### 输入样例1\n```in\n0.5235987755982989 0.00000001\n\n```\n#### 输出样例1\n```out\n0.500000\n\n```\n\n#### 输入样例2\n```in\n314.6828641345776 0.000001\n\n```\n#### 输出样例2\n```out\n0.500000\n\n```\n\n要求：所计算的最后一项的绝对值恰好小于 $$\\varepsilon$$。\n\n注：$$\\pi = 3.1415926535897932384626...$$。\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 105,
        "res": "[{'name': '麦克劳林公式', 'description': '麦克劳林公式是一种用于近似计算函数值的方法，通过将函数展开成无穷级数的形式，然后截取其中的有限项来进行计算。在计算正弦值时，可以使用麦克劳林公式来近似计算。'}, {'name': '角度和弧度的转换', 'description': '在计算正弦值时，需要将角度转换为弧度。角度和弧度是两种不同的表示角度大小的方式，需要进行相互转换才能进行计算。'}, {'name': '计算精度', 'description': '计算精度是指计算结果与真实值之间的差距。在计算正弦值时，可以通过控制计算精度来控制计算结果的准确程度。'}]"
    },
    {
        "sortId": 5109,
        "id": "1338481936110796800",
        "title": "攒金币",
        "content": "小明觉得小木虫论坛是个好去处。每天在论坛上攒金币也很爽。每天，小明先领取冒险红包，有时得到5金币，有时被扣4金币；然后他选几个回帖就送金币的主题回复，每回一个可得若干金币。请你计算小明每天能攒到多少论坛金币。\n\n### 输入格式:\n\n首先输入一个整数T（1<=T<=10），表示测试组数。\\\n每组测试输入一行，包含若干个整数，第一个整数是当天小明领冒险红包得到的金币（其值等于5或-4），其余整数是他每回一帖得到的金币（范围：\\[1，9\\]）。\n\n### 输出格式:\n\n对于每组测试，在一行上输出小明得到了多少金币。\n\n### 输入样例:\n\n```in\n2\n5 3 2 1\n-4 5 2\n```\n\n### 输出样例:\n\n```out\n11\n3\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 45,
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法，包括整型、浮点型、字符型等。'}, {'name':'运算符'，'description':'C语言中的各种运算符的使用方法，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'条件语句'，'description':'C语言中的条件语句的使用方法，包括if语句、switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句的使用方法，包括for循环、while循环、do-while循环等。'}, {'name':'数组'，'description':'C语言中的数组的概念和使用方法，包括一维数组、多维数组等。'}, {'name':'函数'，'description':'C语言中的函数的概念和使用方法，包括函数的定义、函数的调用等。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法，包括指针的定义、指针的运算等。'}, {'name':'文件操作'，'description':'C语言中的文件操作的概念和使用方法，包括文件的打开、读写文件等。'}, {'name':'字符串'，'description':'C语言中的字符串的概念和使用方法，包括字符串的定义、字符串的操作等。'}, {'name':'结构体'，'description':'C语言中的结构体的概念和使用方法，包括结构体的定义、结构体的操作等。'}, {'name':'指针与数组'，'description':'C语言中指针与数组的关系和使用方法，包括指针与一维数组、指针与多维数组等。'}, {'name':'动态内存分配'，'description':'C语言中动态内存分配的概念和使用方法，包括malloc函数、free函数等。'}, {'name':'递归'，'description':'C语言中递归的概念和使用方法，包括递归函数的定义、递归函数的调用等。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令的概念和使用方法，包括宏定义、条件编译等。'}, {'name':'位运算'，'description':'C语言中的位运算的概念和使用方法，包括按位与、按位或等。'}, {'name':'结构体与指针'，'description':'C语言中结构体与指针的关系和使用方法，包括结构体指针的定义、结构体指针的操作等。'}, {'name':'函数指针'，'description':'C语言中函数指针的概念和使用方法，包括函数指针的定义、函数指针的调用等。'}, {'name':'多文件编程'，'description':'C语言中多文件编程的概念和使用方法，包括头文件的引用、函数的声明等。'}, {'name':'错误处理'，'description':'C语言中错误处理的概念和使用方法，包括错误码的定义、错误处理的方式等。'}, {'name':'数据结构'，'description':'C语言中常用的数据结构的概念和使用方法，包括链表、栈、队列等。'}, {'name':'算法'，'description':'C语言中常用的算法的概念和使用方法，包括排序算法、查找算法等。'}, {'name':'输入输出'，'description':'C语言中的输入输出的概念和使用方法，包括标准输入输出、文件输入输出等。'}, {'name':'指针与字符串'，'description':'C语言中指针与字符串的关系和使用方法，包括指针与字符串的操作、字符串的输入输出等。'}, {'name':'指针与结构体'，'description':'C语言中指针与结构体的关系和使用方法，包括指针与结构体的操作、结构体的输入输出等。'}, {'name':'指针与函数'，'description':'C语言中指针与函数的关系和使用方法，包括指针与函数的调用、函数指针的传递等。'}, {'name':'指针与动态内存分配'，'description':'C语言中指针与动态内存分配的关系和使用方法，包括指针与malloc函数、指针与free函数等。'}, {'name':'指针与多文件编程'，'description':'C语言中指针与多文件编程的关系和使用方法，包括指针与头文件的引用、指针与函数的声明等。'}, {'name':'指针与数据结构'，'description':'C语言中指针与数据结构的关系和使用方法，包括指针与链表、指针与栈等。'}, {'name':'指针与算法'，'description':'C语言中指针与算法的关系和使用方法，包括指针与排序算法、指针与查找算法等。'}, {'name':'指针与输入输出'，'description':'C语言中指针与输入输出的关系和使用方法，包括指针与标准输入输出、指针与文件输入输出等。'}, {'name':'指针与错误处理'，'description':'C语言中指针与错误处理的关系和使用方法，包括指针与错误码的定义、指针与错误处理的方式等。'}, {'name':'字符串与结构体'，'description':'C语言中字符串与结构体的关系和使用方法，包括字符串与结构体的操作、结构体的输入输出等。'}, {'name':'字符串与函数'，'description':'C语言中字符串与函数的关系和使用方法，包括字符串与函数的调用、函数的返回值等。'}, {'name':'字符串与动态内存分配'，'description':'C语言中字符串与动态内存分配的关系和使用方法，包括字符串与malloc函数、字符串与free函数等。'}, {'name':'字符串与多文件编程'，'description':'C语言中字符串与多文件编程的关系和使用方法，包括字符串与头文件的引用、字符串与函数的声明等。'}, {'name':'字符串与数据结构'，'description':'C语言中字符串与数据结构的关系和使用方法，包括字符串与链表、字符串与栈等。'}, {'name':'字符串与算法'，'description':'C语言中字符串与算法的关系和使用方法，包括字符串与排序算法、字符串与查找算法等。'}, {'name':'字符串与输入输出'，'description':'C语言中字符串与输入输出的关系和使用方法，包括字符串与标准输入输出、字符串与文件输入输出等。'}, {'name':'字符串与错误处理'，'description':'C语言中字符串与错误处理的关系和使用方法，包括字符串与错误码的定义、字符串与错误处理的方式等。'}, {'name':'结构体与函数'，'description':'C语言中结构体与函数的关系和使用方法，包括结构体与函数的调用、函数的返回值等。'}, {'name':'结构体与动态内存分配'，'description':'C语言中结构体与动态内存分配的关系和使用方法，包括结构体与malloc函数、结构体与free函数等。'}, {'name':'结构体与多文件编程'，'description':'C语言中结构体与多文件编程的关系和使用方法，包括结构体与头文件的引用、结构体与函数的声明等。'}, {'name':'结构体与数据结构'，'description':'C语言中结构体与数据结构的关系和使用方法，包括结构体与链表、结构体与栈等。'}, {'name':'结构体与算法'，'description':'C语言中结构体与算法的关系和使用方法，包括结构体与排序算法、结构体与查找算法等。'}, {'name':'结构体与输入输出'，'description':'C语言中结构体与输入输出的关系和使用方法，包括结构体与标准输入输出、结构体与文件输入输出等。'}, {'name':'结构体与错误处理'，'description':'C语言中结构体与错误处理的关系和使用方法，包括结构体与错误码的定义、结构体与错误处理的方式等。'}, {'name':'函数与动态内存分配'，'description':'C语言中函数与动态内存分配的关系和使用方法，包括函数与malloc函数、函数与free函数等。'}, {'name':'函数与多文件编程'，'description':'C语言中函数与多文件编程的关系和使用方法，包括函数与头文件的引用、函数与函数的声明等。'}, {'name':'函数与数据结构'，'description':'C语言中函数与数据结构的关系和使用方法，包括函数与链表、函数与栈等。'}, {'name':'函数与算法'，'description':'C语言中函数与算法的关系和使用方法，包括函数与排序算法、函数与查找算法等。'}, {'name':'函数与输入输出'，'description':'C语言中函数与输入输出的关系和使用方法，包括函数与标准输入输出、函数与文件输入输出等。'}, {'name':'函数与错误处理'，'description':'C语言中函数与错误处理的关系和使用方法，包括函数与错误码的定义、函数与错误处理的方式等。'}, {'name':'动态内存分配与多文件编程'，'description':'C语言中动态内存分配与多文件编程的关系和使用方法，包括动态内存分配与头文件的引用、动态内存分配与函数的声明等。'}, {'name':'动态内存分配与数据结构'，'description':'C语言中动态内存分配与数据结构的关系和使用方法，包括动态内存分配与链表、动态内存分配与栈等。'}, {'name':'动态内存分配与算法'，'description':'C语言中动态内存分配与算法的关系和使用方法，包括动态内存分配与排序算法、动态内存分配与查找算法等。'}, {'name':'动态内存分配与输入输出'，'description':'C语言中动态内存分配与输入输出的关系和使用方法，包括动态内存分配与标准输入输出、动态内存分配与文件输入输出等。'}, {'name':'动态内存分配与错误处理'，'description':'C语言中动态内存分配与错误处理的关系和使用方法，包括动态内存分配与错误码的定义、动态内存分配与错误处理的方式等。'}, {'name':'多文件编程与数据结构'，'description':'C语言中多文件编程与数据结构的关系和使用方法，包括多文件编程与链表、多文件编程与栈等。'}, {'name':'多文件编程与算法'，'description':'C语言中多文件编程与算法的关系和使用方法，包括多文件编程与排序算法、多文件编程与查找算法等。'}, {'name':'多文件编程与输入输出'，'description':'C语言中多文件编程与输入输出的关系和使用方法，包括多文件编程与标准输入输出、多文件编程与文件输入输出等。'}, {'name':'多文件编程与错误处理'，'description':'C语言中多文件编程与错误处理的关系和使用方法，包括多文件编程与错误码的定义、多文件编程与错误处理的方式等。'}, {'name':'数据结构与算法'，'description':'C语言中数据结构与算法的关系和使用方法，包括数据结构与排序算法、数据结构与查找算法等。'}, {'name':'数据结构与输入输出'，'description':'C语言中数据结构与输入输出的关系和使用方法，包括数据结构与标准输入输出、数据结构与文件输入输出等。'}, {'name':'数据结构与错误处理'，'description':'C语言中数据结构与错误处理的关系和使用方法，包括数据结构与错误码的定义、数据结构与错误处理的方式等。'}, {'name':'算法与输入输出'，'description':'C语言中算法与输入输出的关系和使用方法，包括算法与标准输入输出、算法与文件输入输出等。'}, {'name':'算法与错误处理'，'description':'C语言中算法与错误处理的关系和使用方法，包括算法与错误码的定义、算法与错误处理的方式等。'}, {'name':'输入输出与错误处理'，'description':'C语言中输入输出与错误处理的关系和使用方法，包括输入输出与错误码的定义、输入输出与错误处理的方式等。'}, {'name':'指针与字符串与结构体'，'description':'C语言中指针与字符串与结构体的关系和使用方法，包括指针与字符串与结构体的操作、结构体的输入输出等。'}, {'name':'指针与字符串与函数'，'description':'C语言中指针与字符串与函数的关系和使用方法，包括指针与字符串与函数的调用、函数的返回值等。'}, {'name':'指针与字符串与动态内存分配'，'description':'C语言中指针与字符串与动态内存分配的关系和使用方法，包括指针与字符串与malloc函数、指针与字符串与free函数等。'}, {'name':'指针与字符串与多文件编程'，'description':'C语言中指针与字符串与多文件编程的关系和使用方法，包括指针与字符串与头文件的引用、指针与字符串与函数的声明等。'}, {'name':'指针与字符串与数据结构'，'description':'C语言中指针与"
    },
    {
        "sortId": 5110,
        "id": "1338478498265985024",
        "title": "手指游戏",
        "content": "有时候，小诺诺会和爸爸玩手指游戏。游戏规则是：拇指 胜 食指， 食指 胜 中指，中指 胜 无名指，无名指 胜 小指，小指 胜 拇指；反之，食指 败给 拇指，中指 败给 食指，……；其它情况不分胜负，如拇指与中指不分胜负。拇指、食指、中指、无名指、小指分别用英文表示为：“thumb”、“forefinger”、“middle finger”、“third finger”、“little finger”。请你根据两人所出的手指判断小诺诺是否获胜。\n\n### 输入格式:\n\n首先输入测试组数T （0<T<20），然后输入T组测试数据；每组测试先输入2个字符串a,b（a，b值为描述中的手指的英文表示，以英文逗号“,”分隔），a为小诺诺出的手指，b为她爸爸出的手指。\n\n### 输出格式:\n\n对于每组测试，在一行上输出“Win”或“Lose”或“Draw”表示小诺诺胜或败或和（不分胜负）。\n\n### 输入样例:\n\n```in\n3\nlittle finger,middle finger\nthumb,forefinger\nthird finger,middle finger\n```\n\n### 输出样例:\n\n```out\nDraw\nWin\nLose\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 70,
        "res": "[{'name': '字符串处理', 'description': '本题需要对输入的字符串进行处理，包括分割字符串和比较字符串。'}, {'name': '条件判断', 'description': '根据题目中的规则，需要使用条件判断语句来判断小诺诺是否获胜。'}, {'name': '循环', 'description': '本题需要使用循环来处理多组测试数据。'}]"
    },
    {
        "sortId": 5111,
        "id": "1338476083995557888",
        "title": "你会计算时间复杂度吗？",
        "content": "温馨提示： \n\n实际上代码复杂度的估计，需要靠自己经验，没有特定的方法，本题的估计方法不是正确的，只是为了配合题目而假设计的，同学们如果需要学习，可以通过课本资料来学习正确估计方法。\n\n### 题目描述\n\n你是否在刷题的时候，经常被TLE（Time Limit Exceeded 运⾏超时）困扰呢？   就拿这次比赛来说，尝试解决后面附加题的时候，是不是也遇到运行超时了呢？（如果没遇到，说明你是个超厉害的大佬哈哈）其实在提交代码前，可以通过自己对代码的复杂度估计，加上题目的时间限制，可以大概率知道是否会TLE。很多题目都会给出数据范围，比如\n\nn<=1000之类的。 对于题目时间限制1s，\n\n复杂度为O(n)的时候， n<=3e7\n\n复杂度为O(n^2)的时候，n<=5000\n\n复杂度是O(n^3)的时候，n<=300\n\n……\n\n这些都是初步判断自己代码能否通过的技巧 有个很通用的非正确的估计方法，就是看代码的for循环层数\n#### 例子1：\n```\nfor (int i=0; i<n; i++)\n{\n\tint a=0;\n}\n```\n这个复杂度是O(n) 1s的时候,只有n<=3e7才不会TLE\n\n#### 例子2：\n```\nfor (int i=0; i<n; i++)\n{\n\tfor (int j=0; j<n; j++)\n\t{\n\t\tint a=0;\n\t}\n}\n```\n这里两层for，复杂度估计为O(n^2) 1s的时候,只有n<=5000才不会TLE\n\n#### 例子3：\n```\nfor (int i=0; i<n; i++)\n{\n\tfor (int j=0; j<n; j++)\n\t{\n\t\tfor (int k=0; k<n; k++)\n\t\t{\n\t\t\t\tint a=0;\n\t\t}\n\t}\n}\n```\n\n这里三层for，复杂度估计为O(n^3) 1s的时候, 只有n<=300才不会TLE\n\n\n**为了简化，本题的复杂度就看for的最深深度是几层，复杂度就是几次方**\n\n特别的，如果多次嵌套，例如\n\n```\nfor (int i=0; i<n; i++)\n{ \n\tfor (int j=0; j<n; j++)\n\t{\n\t\tint a=0; //这里两层\n\t}\n\tfor (int j=0; j<n; j++)\n\t{\n\t\tfor (int k=0; k<n; k++)\n\t\t{\n\t\t\tint a=0; //这里三层\n\t\t}\n\t}\n}\n```\n\n这种情况，我们只看深度最深的for，这里是深度最深的for是3层，所以复杂度是O(n^3)\n\n\n为了看同学们是否掌握了这个方法，打算考考大家\n\n### 输入格式:\n\n给出一个字符串表示代码，字符串的长度小于**1000000**，包含for和end，不包含空格(可以放心用scanf读取字符串)，\n\nfor表示一个for循环的开始，end表示一个for的结束，用上面举例,\n\n例⼦1： forend  输出  **O(n)**\n\n例⼦2： forforendend   输出  **O(n^2)**\n\n例⼦3： forforforendendend   输出  **O(n^3)**\n\n例⼦4： forforendforforendendend   输出   **O(n^3)**\n\n数据保证嵌套正确，不会出现forendend这种情况\n\n### 输出格式:\n\n输出这个代码的复杂度，见输入描述的例子部分。\n\n### 输入样例1:\n\n\n```in\nforend\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\nO(n)\n```\n\n### 输入样例2:\n\n\n```in\nforforendforforendendend\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\nO(n^3)\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "7",
                        "name": "线性结构",
                        "isLeaf": false,
                        "enName": "Linear Lists"
                    },
                    {
                        "id": "10",
                        "name": "堆栈",
                        "isLeaf": true,
                        "enName": "Stacks"
                    }
                ]
            }
        ],
        "referenceCount": 42,
        "res": "[{'name': 'for循环', 'description': 'for循环是C语言中的一种循环结构，用于重复执行一段代码块。for循环由三个部分组成：初始化部分、循环条件部分和循环迭代部分。通过控制循环条件的真假来控制循环的执行次数。'}, {'name': '复杂度估计', 'description': '复杂度估计是通过分析代码中的循环层数来估计代码的时间复杂度。根据题目给出的时间限制和复杂度估计方法，可以大概判断代码是否会超时。在本题中，复杂度估计方法是根据for循环的最深嵌套层数来确定复杂度的次方数。'}]"
    },
    {
        "sortId": 5112,
        "id": "1338353331715993600",
        "title": " 真因数之和",
        "content": "请编写函数，求正整数的真因数之和。\n例如：20 的真因数有 1、2、4、5 和 10，真因数之和为 1 + 2 + 4 + 5 + 10 = 22。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint SumProperFactor(int x);\n```\n\n说明：参数 x 是整数。若 x 是正整数，则函数值为它的真因数之和，否则函数值为 0。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\n\nint SumProperFactor(int x);\n\nint main()\n{\n    int n, s;\n    scanf(\"%d\", &n);\n    s = SumProperFactor(n);\n    printf(\"%d\\n\", s);\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n20\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n22\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 123,
        "res": "[{'name':'函数定义与调用'，'description':'函数是C语言程序的基本组成单元，通过函数可以实现代码的模块化和重复利用。在本题中，需要编写一个函数SumProperFactor，用于求正整数的真因数之和。函数的参数是一个整数x，函数的返回值是x的真因数之和。在主函数中，通过调用SumProperFactor函数来计算并输出结果。'}]"
    },
    {
        "sortId": 5113,
        "id": "1338135906936766464",
        "title": "判断倍数",
        "content": "请编写函数，判断一个整数是另一个整数的倍数。\n\n### 函数接口定义：\n```c++\nint IsMultiple(int x, int y);\n```\n\n说明：参数 x 和 y 是两个任意非0整数。若 x 是 y 的倍数，则函数值为 1(真)，否则为 0(假)。\n\n### 裁判测试程序样例：\n```c\n#include <stdio.h>\n\nint IsMultiple(int x, int y);\n\nint main()\n{\n    int x, y;\n    scanf(\"%d%d\", &x, &y);\n    if (IsMultiple(x, y))\n    {\n        puts(\"Yes\");\n    }\n    else\n    {\n        puts(\"No\");\n    }\n    return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n18 -299\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nNo\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 122,
        "res": "[{'name':'函数定义和调用'，'description':'函数是一段完成特定任务的代码块，通过函数可以将一个大的问题分解成若干个小的问题，提高代码的可读性和复用性。函数的定义包括函数名、参数列表、返回值类型和函数体，函数的调用通过函数名和参数列表来实现。'}, {'name':'条件语句'，'description':'条件语句用于根据条件的真假来执行不同的代码块。在C语言中，常用的条件语句有if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}, {'name':'输入输出'，'description':'输入输出是程序与用户或外部设备之间进行数据交换的方式。在C语言中，常用的输入输出函数有scanf和printf。scanf函数用于从标准输入读取数据，printf函数用于向标准输出打印数据。'}, {'name':'运算符'，'description':'运算符是用于进行特定操作的符号。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符、赋值运算符等。算术运算符用于进行基本的数学运算，关系运算符用于比较两个值的大小关系，逻辑运算符用于进行逻辑运算，赋值运算符用于将一个值赋给一个变量。'}, {'name':'函数返回值'，'description':'函数的返回值是函数执行完毕后返回给调用者的结果。在C语言中，函数的返回值类型在函数定义时指定，函数体中使用return语句来返回结果。函数的返回值可以是任意类型的数据，包括整数、浮点数、字符、指针等。'}, {'name':'变量定义和赋值'，'description':'变量是用于存储数据的内存空间，变量的定义包括变量类型和变量名，变量的赋值通过赋值运算符将一个值赋给一个变量。在C语言中，变量的类型包括整型、浮点型、字符型、指针等。'}, {'name':'循环语句'，'description':'循环语句用于重复执行一段代码块，根据循环条件的真假来决定是否继续执行。在C语言中，常用的循环语句有for循环、while循环和do-while循环。for循环根据循环变量的取值范围来重复执行代码块，while循环根据循环条件的真假来重复执行代码块，do-while循环先执行一次代码块，然后根据循环条件的真假来决定是否继续执行。'}, {'name':'函数参数'，'description':'函数的参数是函数在调用时传递给函数的数据，函数的参数列表包括参数的类型和参数的名称。在C语言中，函数的参数可以是任意类型的数据，包括整数、浮点数、字符、指针等。函数的参数可以有多个，多个参数之间用逗号分隔。'}, {'name':'逻辑运算'，'description':'逻辑运算是对逻辑值进行操作的运算，逻辑值包括真和假两种。在C语言中，常用的逻辑运算符有逻辑与运算符、逻辑或运算符和逻辑非运算符。逻辑与运算符用于判断多个条件的同时成立，逻辑或运算符用于判断多个条件中至少有一个成立，逻辑非运算符用于取反一个条件的真假值。'}, {'name':'整数运算'，'description':'整数运算是对整数进行操作的运算，整数是没有小数部分的数。在C语言中，常用的整数运算符有加法运算符、减法运算符、乘法运算符、除法运算符和取模运算符。加法运算符用于将两个整数相加，减法运算符用于将一个整数减去另一个整数，乘法运算符用于将两个整数相乘，除法运算符用于将一个整数除以另一个整数，取模运算符用于求两个整数相除的余数。'}, {'name':'条件判断'，'description':'条件判断是根据条件的真假来执行不同的代码块。在C语言中，常用的条件判断语句有if语句和switch语句。if语句根据条件的真假来执行不同的代码块，switch语句根据表达式的值来执行不同的代码块。'}, {'name':'整数倍数'，'description':'整数倍数是指一个整数能够被另一个整数整除，即余数为0。判断一个整数是否是另一个整数的倍数可以通过取模运算符来实现，如果两个整数相除的余数为0，则第一个整数是第二个整数的倍数。'}]"
    },
    {
        "sortId": 5114,
        "id": "1338130574881669120",
        "title": "求闰年总数",
        "content": "请编写函数，求从公元 1 年开始到指定年份之间的闰年总数。\n\n### 函数接口定义：\n```c++\nint TotalLeapYear(int year);\n```\n\n说明：参数 year 为年数。函数值为从公元 1 年到 year 年的闰年总数。\n\n按照现行历法(格里高利历)：四年一闰，百年不闰，四百年再闰。即：年数是 4 的倍数且不是 100 的倍数，或者年数是 400 的倍数，则为闰年，否则为平年。\n\n注：为简化函数设计，作以下限制\n  \n* \t 年数一律为正整数(即不考虑公元前的情况)；\n* \t 不考虑历法演变过程(即假定从一开始就一直使用现行的历法)。\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nint TotalLeapYear(int year);\n\nint main()\n{\n    int y;\n    scanf(\"%d\", &y);\n    printf(\"%d\\n\", TotalLeapYear(y));\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n100\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n24\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 122,
        "res": "[{'name': '闰年判断', 'description': '根据现行历法判断一个年份是否为闰年，即年数是4的倍数且不是100的倍数，或者年数是400的倍数。'}]"
    },
    {
        "sortId": 5115,
        "id": "1338085308518449152",
        "title": "余弦函数",
        "content": "根据麦克劳林公式计算任意角的余弦。\n\n![题图.jpg](~/b02e17a4-c95b-49b7-954f-4df545739385.jpg)\n\n#### 输入格式\n> $$x$$ $$\\varepsilon$$\n\n注：$$x$$ 为角（单位：弧度），$$\\varepsilon$$ 为计算精度。\n\n#### 输出格式\n> $$y$$\n\n注：$$y$$ 为 $$x$$ 的余弦值。用 %f 格式限定符输出 6 位小数。\n\n#### 输入样例1\n```in\n1.047197551196598 0.00000001\n\n```\n#### 输出样例1\n```out\n0.500000\n\n```\n\n#### 输入样例2\n```in\n315.2064629101759 0.000001\n\n```\n#### 输出样例2\n```out\n0.500000\n\n```\n\n要求：所计算的最后一项的绝对值小于 $$\\varepsilon$$。\n\n注：$$pi = 3.1415926535897932384626...$$。\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 86,
        "res": "[{'name':'麦克劳林公式', 'description':'麦克劳林公式是一种用于近似计算函数值的方法，通过将函数展开成无穷级数的形式，然后截取其中的有限项来进行计算。在计算任意角的余弦时，可以使用麦克劳林公式来进行近似计算。'}, {'name':'输入输出格式', 'description':'在C语言程序设计中，输入和输出的格式是非常重要的。在本题中，输入的格式要求是角和计算精度分别以空格分隔的形式输入，输出的格式要求是余弦值以%f格式限定符输出，并保留6位小数。'}]"
    },
    {
        "sortId": 5116,
        "id": "1338014088636743680",
        "title": "读程序写输出结果#include <stdio.h>int main()  {int i,j,m,n;i=8;j=10;m=++",
        "content": "读程序写输出结果\n#include <stdio.h>\nint main()  \n{\n\tint i,j,m,n;\n\ti=8;\n\tj=10;\n\tm=++i;\n\tn=j++;\n\tprintf(\"%d,%d,%d,%d\",i,j,m,n); \n\treturn 0;\n}  \n上面程序的输出是：@@[](3)\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 96,
        "res": "[{'name':'自增运算符','description':'自增运算符是C语言中的一种特殊运算符，用于将变量的值增加1。在表达式中，自增运算符可以放在变量的前面（前缀自增运算符）或者后面（后缀自增运算符）。前缀自增运算符会先将变量的值增加1，然后再使用增加后的值；后缀自增运算符会先使用变量的值，然后再将变量的值增加1。在上面的程序中，m=++i表示先将i的值增加1，然后将增加后的值赋给m；n=j++表示先使用j的值，然后将j的值增加1。'}]"
    },
    {
        "sortId": 5117,
        "id": "1337810416329900032",
        "title": "显示空心直角三角形(嵌套循环版)",
        "content": "请编写函数，用循环方法显示空心直角三角形。\n\n#### 函数原型\n\n```c\nvoid UpLfTrgHollow(int height, char symbol);\n```\n\n说明：参数 `height` 为直角三角形的高，`symbol` 为显示字符。函数将在屏幕上显示高度和底宽为 `height` 由字符 `symbol` 围成的空心直角三角形。若 `height` 小于等于 0，则不输出。\n\n要求：不要使用选择语句，不要调用其它函数，直接利用嵌套的循环语句完成任务。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid UpLfTrgHollow(int height, char symbol);\n\nint main()\n{\n    int n;\n    char s;\n    scanf(\"%d %c\", &n, &s);\n    UpLfTrgHollow(n, s);\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n-3 #\n\n```\n#### 输出样例1\n```out\n\n```\n注：无输出。\n\n#### 输入样例2\n```in\n5 *\n\n```\n#### 输出样例2\n```out\n*\n**\n* *\n*  *\n*****\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 36,
        "res": "[{'name':'循环语句'，'description':'循环语句是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环语句有for循环、while循环和do-while循环。本题中要求使用循环语句完成空心直角三角形的打印。'}，{'name':'嵌套循环'，'description':'嵌套循环是指在一个循环语句内部再嵌套另一个循环语句。在本题中，可以使用嵌套的循环语句来控制空心直角三角形每一行的打印。'}]"
    },
    {
        "sortId": 5118,
        "id": "1337800749004124160",
        "title": "显示空心直角三角形(循环版)",
        "content": "请编写函数，用循环方法显示空心直角三角形。\n\n#### 函数原型\n\n```c\nvoid UpLfTrgHollow(int height, char symbol);\n```\n\n说明：参数 `height` 为直角三角形的高，`symbol` 为显示字符。函数将在屏幕上显示高度和底宽为 `height` 由字符 `symbol` 围成的空心直角三角形。若 `height` 小于等于 0，则不输出。\n\n要求：不要使用选择语句。\n\n提示：可使用 ?: 条件运算符。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid ShowHollow(int number, char symbol, int hollow);\nvoid UpLfTrgHollow(int height, char symbol);\n\nint main()\n{\n    int n;\n    char s;\n    scanf(\"%d %c\", &n, &s);\n    UpLfTrgHollow(n, s);\n    return 0;\n}\n\n......\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n-3 #\n```\n#### 输出样例1\n```out\n\n```\n注：无输出。\n\n#### 输入样例2\n```in\n5 @\n```\n#### 输出样例2\n```out\n@\n@@\n@ @\n@  @\n@@@@@\n```\n\n---\n\n关联习题：重复显示字符(增强循环版)\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 19,
        "res": "[{'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。在C语言中，循环是非常重要的控制结构之一。'}, {'name': '条件运算符', 'description': '条件运算符（?:）是C语言中的一种特殊运算符，用于根据条件的真假选择不同的值。它的语法形式为：条件表达式 ? 表达式1 : 表达式2。当条件表达式为真时，返回表达式1的值；当条件表达式为假时，返回表达式2的值。'}]"
    },
    {
        "sortId": 5119,
        "id": "1337742568127545344",
        "title": "锯齿几何",
        "content": "锯齿是由严格的高低不同的刀片组成，而锯齿数组指的是数组中的相邻元素一高一低严格不同。一个元素和两个不同的元素是齿数较少的锯齿数组，因空集属于任何子集，我们规定，空数组也是锯齿数组。如{2，30，5，7}是锯齿数组，而{2，2，30，8，5，7}不是锯齿数组，但我们可以删除2和8，构成长度为4的新的锯齿数组。编写程序，对输入的整数数组，计算删除若干元素后，构成的最长的锯齿数组（可删除元素，但其它元素的相对位置保持不变）的长度。\n\n### 输入样例1:\n第一行，数组长度N，第二行是空格分隔的N个整数。\n```in\n9\n18 45 30 50 10 17 8 25 19\n\n```\n\n### 输出样例1:\n输出构成的最长的锯齿数组（本例中数据就是锯齿数组，故长度就是9）。\n```out\n9\n\n```\n### 输入样例2:\n```in\n13\n18 19 20 45 30 50 10 17 10 9 8 25 19\n\n\n```\n\n### 输出样例2:\n输出构成的最长的锯齿数组（本例中数据，至少可删除成上例中的锯齿数组，故长度最大长度也是9）。\n```out\n9\n\n```\n### 输入样例3:\n```in\n4\n18 15 9 9\n\n```\n\n### 输出样例3:\n输出构成的最长的锯齿数组（最多只能够留下两个齿）。\n```out\n2\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 57,
        "res": "[{'name': '数组', 'description': '数组是一种数据结构，它由相同类型的元素组成，这些元素在内存中是连续存储的。在C语言中，数组的长度是固定的，一旦定义了数组的长度，就不能再改变。数组可以通过下标来访问和修改元素的值。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环可以根据条件来控制代码的执行次数。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来选择执行不同的代码块。在C语言中，常用的条件语句有if语句和switch语句。if语句根据条件的真假来选择执行不同的代码块，switch语句根据表达式的值来选择执行不同的代码块。'}, {'name': '变量', 'description': '变量是用来存储数据的内存空间的名称。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。变量可以存储不同类型的数据，如整数、浮点数、字符等。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，函数由函数头和函数体组成，函数头包括函数的返回类型、函数名和参数列表，函数体包括函数的具体实现。函数可以返回一个值，也可以不返回值。'}, {'name': '指针', 'description': '指针是一种特殊的变量，它存储的是内存地址。通过指针可以间接访问和修改内存中的数据。在C语言中，可以使用指针来操作数组，通过指针可以实现数组的遍历和修改。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在C语言中，常用的算术运算符有加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等。算术运算可以对整数和浮点数进行操作。'}, {'name': '条件运算', 'description': '条件运算是根据条件的真假来选择执行不同的操作的过程。在C语言中，常用的条件运算符有等于运算符（==）、不等于运算符（!=）、大于运算符（>）、小于运算符（<）、大于等于运算符（>=）、小于等于运算符（<=）等。条件运算可以返回一个布尔值（真或假）。'}, {'name': '逻辑运算', 'description': '逻辑运算是对布尔值进行与、或、非等操作的过程。在C语言中，常用的逻辑运算符有与运算符（&&）、或运算符（||）、非运算符（!）等。逻辑运算可以对多个条件进行组合判断。'}, {'name': '字符串', 'description': '字符串是由字符组成的序列，可以用来表示文本。在C语言中，字符串是以null字符（\\0）结尾的字符数组。可以使用字符串相关的函数来操作字符串，如字符串的拷贝、连接、比较等。'}, {'name': '输入输出', 'description': '输入输出是程序与外部环境进行数据交换的过程。在C语言中，可以使用标准库函数来进行输入输出操作，如scanf函数用于从标准输入读取数据，printf函数用于向标准输出输出数据。'}, {'name': '排序算法', 'description': '排序算法是将一组数据按照特定的顺序进行排列的算法。在C语言中，常用的排序算法有冒泡排序、插入排序、选择排序、快速排序等。排序算法可以对数组进行排序，使得数组中的元素按照升序或降序排列。'}, {'name': '查找算法', 'description': '查找算法是在一组数据中查找指定元素的算法。在C语言中，常用的查找算法有线性查找、二分查找等。查找算法可以根据指定的条件在数组中查找元素，并返回元素的位置或其他信息。'}, {'name': '递归', 'description': '递归是一种通过调用自身的方式来解决问题的方法。在C语言中，可以使用递归来实现一些复杂的算法，如阶乘、斐波那契数列等。递归需要定义递归函数和递归终止条件。'}, {'name': '数据类型', 'description': '数据类型是变量的属性，用来表示变量可以存储的数据的类型。在C语言中，常用的数据类型有整型、浮点型、字符型等。不同的数据类型可以存储不同范围和精度的数据。'}, {'name': '运算符', 'description': '运算符是用来进行特定操作的符号。在C语言中，常用的运算符有算术运算符、赋值运算符、关系运算符、逻辑运算符等。运算符可以对变量和常量进行操作，得到一个结果。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来选择执行不同的代码块的过程。在C语言中，常用的条件判断语句有if语句、if-else语句、if-else if语句等。条件判断可以根据不同的条件来选择执行不同的代码块。'}, {'name': '循环控制', 'description': '循环控制是根据条件来控制循环的执行次数和方式的过程。在C语言中，常用的循环控制语句有break语句、continue语句、goto语句等。循环控制可以在循环中根据条件来跳出循环、终止循环或跳转到指定的代码块。'}, {'name': '数组操作', 'description': '数组操作是对数组进行增删改查等操作的过程。在C语言中，可以使用数组相关的语法和函数来操作数组，如数组的初始化、访问、修改等。数组操作可以对数组中的元素进行增加、删除、修改和查找等操作。'}, {'name': '指针操作', 'description': '指针操作是对指针进行增删改查等操作的过程。在C语言中，可以使用指针相关的语法和函数来操作指针，如指针的初始化、访问、修改等。指针操作可以对指针指向的内存进行增加、删除、修改和查找等操作。'}, {'name': '函数调用', 'description': '函数调用是通过函数名来执行函数的过程。在C语言中，可以使用函数调用来执行函数体中的代码，函数调用可以传递参数给函数，函数可以返回一个值给函数调用处。函数调用可以实现代码的模块化和重用。'}, {'name': '函数定义', 'description': '函数定义是定义函数的过程。在C语言中，函数定义包括函数头和函数体，函数头包括函数的返回类型、函数名和参数列表，函数体包括函数的具体实现。函数定义可以实现代码的封装和抽象，提高代码的可读性和可维护性。'}, {'name': '函数参数', 'description': '函数参数是函数定义中的变量，用来接收函数调用处传递的值。在C语言中，函数参数可以有多个，每个参数都有自己的类型和名称。函数参数可以在函数体中使用，用来完成特定的任务。'}, {'name': '函数返回值', 'description': '函数返回值是函数执行完毕后返回给函数调用处的值。在C语言中，函数可以返回一个值，也可以不返回值。函数返回值的类型需要在函数定义中指定，函数体中可以使用return语句来返回一个值。函数返回值可以用来传递函数的执行结果。'}, {'name': '字符串操作', 'description': '字符串操作是对字符串进行增删改查等操作的过程。在C语言中，可以使用字符串相关的语法和函数来操作字符串，如字符串的拷贝、连接、比较等。字符串操作可以对字符串中的字符进行增加、删除、修改和查找等操作。'}, {'name': '输入输出操作', 'description': '输入输出操作是程序与外部环境进行数据交换的过程。在C语言中，可以使用输入输出相关的函数来进行输入输出操作，如scanf函数用于从标准输入读取数据，printf函数用于向标准输出输出数据。输入输出操作可以实现程序与用户的交互。'}, {'name': '数组遍历', 'description': '数组遍历是对数组中的每个元素进行访问的过程。在C语言中，可以使用循环结构来遍历数组，通过循环控制变量来访问数组中的每个元素。数组遍历可以对数组中的元素进行处理和操作。'}, {'name': '数组修改', 'description': '数组修改是对数组中的元素进行修改的过程。在C语言中，可以通过下标来访问和修改数组中的元素，通过赋值语句来修改数组中的元素的值。数组修改可以改变数组中的元素的值，实现对数组的更新和修改。'}, {'name': '数组长度', 'description': '数组长度是数组中元素的个数。在C语言中，可以使用sizeof运算符来获取数组的长度，数组的长度是数组占用的内存空间大小除以数组元素的大小。数组长度可以用来控制循环的执行次数和数组的遍历范围。'}, {'name': '数组删除', 'description': '数组删除是从数组中删除指定元素的过程。在C语言中，可以使用循环结构和条件判断来遍历数组，通过判断条件来删除数组中的元素。数组删除可以改变数组的长度和元素的位置，实现对数组的删除和缩减。'}, {'name': '数组排序', 'description': '数组排序是将数组中的元素按照特定的顺序进行排列的过程。在C语言中，可以使用排序算法来对数组进行排序，如冒泡排序、插入排序、选择排序等。数组排序可以使得数组中的元素按照升序或降序排列。'}, {'name': '数组查找', 'description': '数组查找是在数组中查找指定元素的过程。在C语言中，可以使用查找算法来在数组中查找元素，如线性查找、二分查找等。数组查找可以根据指定的条件在数组中查找元素，并返回元素的位置或其他信息。'}, {'name': '数组子集', 'description': '数组子集是指数组中的一部分元素组成的集合。在C语言中，可以使用循环结构和条件判断来遍历数组，通过判断条件来选择数组中的元素，将选中的元素组成子集。数组子集可以根据条件来选择数组中的元素，实现对数组的筛选和提取。'}, {'name': '空集', 'description': '空集是不包含任何元素的集合。在C语言中，可以使用条件判断来判断数组是否为空集，即数组的长度是否为0。空集可以作为数组子集的一种特殊情况，也可以作为数组的一种特殊状态。'}, {'name': '锯齿数组', 'description': '锯齿数组是由严格的高低不同的刀片组成，而锯齿数组指的是数组中的相邻元素一高一低严格不同。一个元素和两个不同的元素是齿数较少的锯齿数组，因空集属于任何子集，我们规定，空数组也是锯齿数组。锯齿数组可以通过删除元素来构成新的锯齿数组，删除元素后，其它元素的相对位置保持不变。'}, {'name': '最长子数组', 'description': '最长子数组是指在一个数组中，连续的一部分元素组成的子数组，且该子数组的长度最长。在C语言中，可以使用循环结构和条件判断来遍历数组，通过判断条件来选择数组中的元素，将选中的元素组成子数组，然后比较子数组的长度，找到最长的子数组。'}, {'name': '长度计算', 'description': '长度计算是指计算数组或字符串的长度的过程。在C语言中，可以使用sizeof运算符来计算数组的长度，数组的长度是数组占用的内存空间大小除"
    },
    {
        "sortId": 5120,
        "id": "1337729003584831488",
        "title": "帮小明出主意",
        "content": "小明碰到一个选择题，有3个选项，他不知道怎么做，他决定猜 一个答案，请用程序来模拟猜答案的过程，即：通过键盘输入一个数，用此数对3求余数，输出结果对应为： 0 选A, 1选 B, 2选 C.\n\n### 输入格式:\n\n输入一个整数范围内的数\n\n### 输出格式:\n\nanswer = 输出结果\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nanswer = A\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 49,
        "res": "[{'name':'取余运算','description':'取余运算是指将一个数除以另一个数后所得的余数。在C语言中，取余运算使用%符号表示。例如，6%3的结果为0，表示6除以3的余数为0。'}]"
    },
    {
        "sortId": 5121,
        "id": "1337727801769619456",
        "title": "帮小明出主意",
        "content": "小明想去旅游, 无法决定哪天去,所以他决定猜 一个答案，请用程序来模拟猜答案的过程，即：通过键盘输入一个数，用此数对5求余数，输出结果对应为：\n0 选 Mon,\n1选 Tue ,\n2选 Wen,\n3 选 Thu,\n4选 Fri.\n\n\n### 输入格式:\n\n输入一个整数范围内的数\n\n### 输出格式:\n\nanswer = 选项\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nanswer = Fri\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 52,
        "res": "[{'name': '输入输出', 'description': '教学目标：学会使用键盘输入和屏幕输出\\n教学内容：介绍输入输出的基本概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍输入输出的概念和作用\\n2. 讲解如何使用键盘输入和屏幕输出\\n3. 通过示例演示如何使用输入输出\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '变量和数据类型', 'description': '教学目标：学会声明变量和使用不同的数据类型\\n教学内容：介绍变量的概念和使用方法，介绍不同的数据类型\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍变量的概念和作用\\n2. 讲解如何声明变量和使用不同的数据类型\\n3. 通过示例演示如何声明变量和使用不同的数据类型\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '运算符', 'description': '教学目标：学会使用不同的运算符\\n教学内容：介绍不同的运算符和其作用\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍不同的运算符和其作用\\n2. 讲解如何使用不同的运算符\\n3. 通过示例演示如何使用不同的运算符\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '条件语句', 'description': '教学目标：学会使用条件语句\\n教学内容：介绍条件语句的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍条件语句的概念和作用\\n2. 讲解如何使用条件语句\\n3. 通过示例演示如何使用条件语句\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '循环语句', 'description': '教学目标：学会使用循环语句\\n教学内容：介绍循环语句的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍循环语句的概念和作用\\n2. 讲解如何使用循环语句\\n3. 通过示例演示如何使用循环语句\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '数组', 'description': '教学目标：学会使用数组\\n教学内容：介绍数组的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍数组的概念和作用\\n2. 讲解如何声明和使用数组\\n3. 通过示例演示如何使用数组\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '函数', 'description': '教学目标：学会使用函数\\n教学内容：介绍函数的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍函数的概念和作用\\n2. 讲解如何声明和调用函数\\n3. 通过示例演示如何使用函数\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '字符串', 'description': '教学目标：学会使用字符串\\n教学内容：介绍字符串的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍字符串的概念和作用\\n2. 讲解如何声明和使用字符串\\n3. 通过示例演示如何使用字符串\\n4. 练习题目：编写一个程序，实现输入一个整数并输出对应的结果\\n5. 总结和回顾'}, {'name': '模拟猜答案过程', 'description': '教学目标：学会使用条件语句和输入输出\\n教学内容：介绍条件语句和输入输出的概念和使用方法\\n教学方法：讲解+示例演示\\n教学步骤：\\n1. 介绍条件语句和输入输出的概念和作用\\n2. 讲解如何使用条件语句和输入输出\\n3. 通过示例演示如何使用条件语句和输入输出\\n4. 练习题目：编写一个程序，实现模拟猜答案的过程\\n5. 总结和回顾'}]"
    },
    {
        "sortId": 5122,
        "id": "1337726438826340352",
        "title": "帮小明出主意",
        "content": "小明碰到一个选择题，有4个选项，他不知道怎么做，他决定猜 一个答案，请用程序来模拟猜答案的过程，即：通过键盘输入一个数，用此数对4求余数，输出结果对应为：\n0 选A,\n1选  B,\n2选 C,\n3 选D.\n\n### 输入格式:\n\n输入一个整数范围内的数\n\n### 输出格式:\n\nanswer = 选项\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nanswer = A\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 81,
        "res": "[{'name': '取余运算', 'description': '取余运算是一种常见的数学运算，用于求一个数除以另一个数的余数。在C语言中，取余运算使用%符号表示。'}]"
    },
    {
        "sortId": 5123,
        "id": "1337695478508765184",
        "title": "重复显示字符(增强循环版)",
        "content": "请编写函数，用循环方法重复显示字符。\n\n#### 函数原型\n\n```c\nvoid ShowHollow(int number, char symbol, int hollow);\n```\n\n说明：参数 `number` 为重复次数，`symbol` 为显示字符，`hollow` 为空心标记。若 `hollow` 为 0（假），函数将在屏幕上重复显示 `number` 个 `symbol` 字符。若 `hollow` 为 1（真），则输出的 `number` 个字符中，只有首字符和末字符为 `symbol` 字符，中间的字符均为空格（即空心）。若 `number` 小于等于 0，则不输出。\n\n要求：不要使用选择语句。\n\n提示：使用 ?: 条件运算符。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid ShowHollow(int number, char symbol, int hollow);\n\nint main()\n{\n    int n, h;\n    char s;\n    scanf(\"%d %c %d\", &n, &s, &h);\n    ShowHollow(n, s, h);\n    putchar('\\n');\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n-3 @ 0\n```\n#### 输出样例1\n```out\n\n```\n注：无输出\n\n#### 输入样例2\n```in\n1 @ 1\n```\n#### 输出样例2\n```out\n@\n```\n\n#### 输入样例3\n```in\n2 @ 0\n```\n#### 输出样例3\n```out\n@@\n```\n\n#### 输入样例4\n```in\n5 @ 1\n```\n#### 输出样例4\n```out\n@   @\n```\n\n#### 输入样例5\n```in\n8 @ 0\n```\n#### 输出样例5\n```out\n@@@@@@@@\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 22,
        "res": "[{'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。循环可以根据条件来控制执行次数，可以使用break语句来提前结束循环，可以使用continue语句来跳过本次循环的剩余代码。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。函数可以接受参数，可以返回值。函数可以提高代码的重用性和可读性，可以将复杂的问题分解为多个函数来解决。'}, {'name': '条件运算符', 'description': '条件运算符（?:）是C语言中的一种三元运算符，可以根据条件的真假来选择不同的值。它的语法是：条件表达式 ? 表达式1 : 表达式2，如果条件表达式为真，则返回表达式1的值，否则返回表达式2的值。条件运算符可以简化代码，提高代码的可读性。'}]"
    },
    {
        "sortId": 5124,
        "id": "1337591960292323328",
        "title": "双11",
        "content": "ziquan非常喜欢网购，在一家店铺她看中了一件衣服，她了解到，如果今天是“双11”（11月11日）则这件衣服打7.5折，“双12” （12月12日）则这件衣服打8.5折，如果有优惠券可以额外减75元（优惠券只能在双11或双12使用），求ziquan最终所花的钱数。\n\n### 输入格式:\n\n一行，四个数字，第一个数表示ziquan看中的衣服价格，第二和第三个整数分别表示当天的月份、当天的日期、第四个整数表示是否有优惠券（有优惠券用1表示，无优惠券用0表示）。\n\n### 输出格式:\n\n一行，ziquan实际花的钱数（保留两位小数）。（提示：不要指望商家倒找你钱）\n\n### 输入样例1:\n\n```in\n1000.0 11 11 1\n```\n\n### 输出样例1:\n\n```out\n675.00\n```\n### 输入样例2:\n```in\n999.8 12 12 0\n```\n\n### 输出样例2:\n\n```out\n849.83\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 9,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 126,
        "res": "[{'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在这道题中，可以使用条件语句来判断当天是否是双11或双12，以及是否有优惠券。'}, {'name': '浮点数运算', 'description': '浮点数运算是C语言中的一种数值运算，用于处理带有小数的数值。在这道题中，需要进行浮点数的乘法和减法运算来计算折扣和优惠券的金额。'}, {'name': '格式化输出', 'description': '格式化输出是C语言中的一种输出方式，用于按照指定的格式将数据输出到屏幕上。在这道题中，需要使用格式化输出来保留两位小数输出最终的花费金额。'}]"
    },
    {
        "sortId": 5125,
        "id": "1337395587215290368",
        "title": "零钱换硬币",
        "content": "将一笔零钱换成$$5$$分、$$2$$分和1分的硬币，要求每种硬币至少有一枚，有几种不同的换法？\n\n### 输入格式:\n\n输入在一行中给出待换的零钱数额$$x\\in [8,60]$$。\n\n### 输出格式:\n\n要求按$$5$$分、$$2$$分和$$1$$分硬币的数量依次  **从大到小**的顺序，输出各种换法。每行输出一种换法，格式为：“fen5:5分硬币数量, fen2:2分硬币数量, fen1:1分硬币数量, total:硬币总数量”。最后一行输出“count = 换法个数”。\n\n### 输入样例:\n\n```in\n13\n```\n\n### 输出样例:\n\n```out\nfen5:2, fen2:1, fen1:1, total:4\nfen5:1, fen2:3, fen1:2, total:6\nfen5:1, fen2:2, fen1:4, total:7\nfen5:1, fen2:1, fen1:6, total:8\ncount = 4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 132,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历所有可能的硬币数量组合。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断是否满足每种硬币至少有一枚的要求。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储零钱数额和硬币数量。'}, {'name':'输出格式'，'description':'输出格式是指将结果以特定的格式输出。在本题中，需要按照指定的格式输出各种换法和换法个数。'}]"
    },
    {
        "sortId": 5126,
        "id": "1337300322643165184",
        "title": "冒泡排序的过程",
        "content": "本题要求使用冒泡法排序，将给定的$$n$$个整数从小到大排序后输出，并输出排序过程中每一步的中间结果。\n\n冒泡排序的算法步骤描述如下：\n\n第$$1$$步：在未排序的$$n$$个数（$$a[0]$$ $$\\sim$$ $$a[n-1]$$）中，从$$a[0]$$起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，数组中的最大元素“冒泡”到$$a[n-1]$$；\n\n第$$2$$步：在剩下未排序的$$n-1$$个数（$$a[0]$$ $$\\sim$$ $$a[n-2]$$）中，从$$a[0]$$起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，$$a[0]$$ $$\\sim$$ $$a[n-2]$$中的最大元素“冒泡”到$$a[n-2]$$；\n\n……\n\n第$$i$$步：在剩下未排序的$$n-k$$个数（$$a[0]$$ $$\\sim$$ $$a[n-i]$$）中，从$$a[0]$$起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，$$a[0]$$ $$\\sim$$ $$a[n-i]$$中的最大元素“冒泡”到$$a[n-i]$$；\n\n……\n\n第$$n-1$$步：在剩下未排序的$$2$$个数（$$a[0]$$ $$\\sim$$ $$a[1]$$）中，比较这两个数，若不符合次序要求，则对它们进行交换。本次操作后，$$a[0]$$ $$\\sim$$ $$a[1]$$中的最大元素“冒泡”到$$a[1]$$。\n\n### 输入格式:\n\n输入第一行给出一个不超过$$20$$的正整数$$n$$。第二行给出$$n$$个整数，其间以空格分隔。\n\n### 输出格式:\n\n在每一行中输出排序过程中对应步骤的中间结果，即每一步后$$a[0]$$$$\\sim$$$$ a[n-1]$$的值，每个数字后面有一个空格。\n\n### 输入样例:\n\n```in\n5\n8 7 6 0 1\n```\n\n### 输出样例:\n\n```out\n7 6 0 1 8 \n6 0 1 7 8 \n0 1 6 7 8 \n0 1 6 7 8 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 125,
        "res": "[{'name':'冒泡排序','description':'冒泡排序的算法步骤描述如下：\\n\\n第1步：在未排序的n个数（a[0] ~ a[n-1]）中，从a[0]起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，数组中的最大元素“冒泡”到a[n-1]；\\n\\n第2步：在剩下未排序的n-1个数（a[0] ~ a[n-2]）中，从a[0]起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，a[0] ~ a[n-2]中的最大元素“冒泡”到a[n-2]；\\n\\n……\\n\\n第i步：在剩下未排序的n-k个数（a[0] ~ a[n-i]）中，从a[0]起，依次比较相邻的两个数，若邻接元素不符合次序要求，则对它们进行交换。本次操作后，a[0] ~ a[n-i]中的最大元素“冒泡”到a[n-i]；\\n\\n……\\n\\n第n-1步：在剩下未排序的2个数（a[0] ~ a[1]）中，比较这两个数，若不符合次序要求，则对它们进行交换。本次操作后，a[0] ~ a[1]中的最大元素“冒泡”到a[1]。'}]"
    },
    {
        "sortId": 5127,
        "id": "1337294507446190080",
        "title": "冒泡的交换次数",
        "content": "现有一个含有$$n$$个整数的序列，你要做的就是交换两个数的位置直到整个序列按照升序排列，那么将这个整数序列排好序，使用冒泡排序需要交换多少次？例如，1,2,3,5,4，我们只需要交换一次，将4和5交换即可。\n\n### 输入格式:\n\n第一行输入$$n$$($$n\\le 100$$),第二行依次输入$$n$$个整数\n\n### 输出格式:\n\n对每一组输入，在一行中输出交换的次数。\n\n### 输入样例:\n\n```in\n5\n1 2 3 5 4\n```\n\n### 输出样例:\n\n```out\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 134,
        "res": "[{'name':'冒泡排序','description':'冒泡排序是一种简单的排序算法，它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就交换位置，直到整个数列按照升序排列。'}]"
    },
    {
        "sortId": 5128,
        "id": "1337235817221091328",
        "title": "穷举问题-搬砖",
        "content": "某工地需要搬运砖块，已知男人一人搬$$3$$块，女人一人搬$$2$$块，小孩两人搬$$1$$块。如果想用$$n$$人正好搬$$n$$块砖，问有多少种搬法？\n### 输入格式:\n\n输入在一行中给出一个正整数$$n(0<n\\le 60)$$。\n\n### 输出格式:\n\n输出在每一行显示一种方案，按照\"men = cnt_m, women = cnt_w, child = cnt_c\"的格式，输出男人的数量cnt_m，女人的数量cnt_w，小孩的数量cnt_c。请注意，等号的两侧各有一个空格，逗号的后面也有一个空格。\n\n如果找不到符合条件的方案，则输出\"`None`\"\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n45\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nmen = 0, women = 15, child = 30\nmen = 3, women = 10, child = 32\nmen = 6, women = 5, child = 34\nmen = 9, women = 0, child = 36\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 134,
        "res": "[{'name':'循环','description':'循环是C语言中的一种控制结构，用于重复执行一段代码。在这个题目中，可以使用循环来遍历所有可能的搬运方案。'}, {'name':'条件判断','description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在这个题目中，可以使用条件判断来判断是否找到符合条件的搬运方案。'}, {'name':'变量','description':'变量是C语言中用于存储数据的一种数据类型。在这个题目中，可以使用变量来存储男人、女人和小孩的数量。'}, {'name':'输出','description':'输出是C语言中用于将结果显示在屏幕上的一种操作。在这个题目中，可以使用输出来显示符合条件的搬运方案。'}]"
    },
    {
        "sortId": 5129,
        "id": "1337231751451852800",
        "title": "K趟冒泡",
        "content": "将$$N$$个整数按从小到大排序的冒泡排序法是这样工作的：从头到尾比较相邻两个元素，如果前面的元素大于其紧随的后面元素，则交换它们。通过一遍扫描，则最后一个元素必定是最大的元素。然后用同样的方法对前$$N-1$$个元素进行第二遍扫描。依此类推，最后只需处理两个元素，就完成了对$$N$$个数的排序。\n\n本题要求对任意给定的$$K$$（$$<N$$），输出扫描完第K遍后的中间结果数列。\n\n\n### 输入格式:\n\n输入在第1行中给出$$N$$和$$K$$（$$1\\le K<N\\le 100$$），在第2行中给出N个待排序的整数，数字间以空格分隔。\n\n### 输出格式:\n\n在一行中输出冒泡排序法扫描完第K遍后的中间结果数列，每个整数后面都有一个空格。\n\n### 输入样例:\n\n```in\n6 2\n2 3 5 1 6 4\n```\n\n### 输出样例:\n\n```out\n2 1 3 4 5 6 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 131,
        "res": "[{'name':'冒泡排序法','description':'将$$N$$个整数按从小到大排序的冒泡排序法是这样工作的：从头到尾比较相邻两个元素，如果前面的元素大于其紧随的后面元素，则交换它们。通过一遍扫描，则最后一个元素必定是最大的元素。然后用同样的方法对前$$N-1$$个元素进行第二遍扫描。依此类推，最后只需处理两个元素，就完成了对$$N$$个数的排序。'}]"
    },
    {
        "sortId": 5130,
        "id": "1337230277573427200",
        "title": "百钱买百鸡问题",
        "content": "公鸡每只$$5$$元，母鸡每只$$3$$元，小鸡$$1$$元$$3$$只，而且鸡必须整只买。$$100$$元钱买$$100$$只鸡（每一种鸡都要有），公鸡、母鸡、小鸡各多少只？请编写程序给出各种购买方案。\n\n### 输入格式:\n\n输入为一个正整数$$n$$，表示要求输出前$$n$$种可能的方案。方案的顺序，是按照公鸡只数从少到多排列的。\n\n### 输出格式:\n\n显示前$$n$$种方案中公鸡、母鸡、小鸡各多少只。每行显示一种方案，数字之间空一格，最后一个数字后没有空格。\n\n注意：如果全部方案不到$$n$$种，就顺序输出全部可能的方案。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n4 18 78\n8 11 81\n12 4 84\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 149,
        "res": "[{'name':'基本运算符','description':'C语言中的基本运算符包括加法运算符、减法运算符、乘法运算符、除法运算符、取余运算符等。'}, {'name':'循环结构','description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。'}, {'name':'条件语句','description':'条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。常见的条件语句有if语句和switch语句。'}, {'name':'变量和数据类型','description':'变量是C语言中用于存储数据的一种标识符。C语言中的数据类型包括整型、浮点型、字符型等。'}, {'name':'数组','description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据。数组可以通过下标来访问和修改其中的元素。'}, {'name':'函数','description':'函数是C语言中的一种模块化编程的方式，用于封装一段可重复使用的代码。函数可以接受参数并返回一个值。'}, {'name':'输入输出','description':'输入输出是C语言中的一种操作，用于从键盘上读取输入数据或将数据输出到屏幕上。C语言中常用的输入输出函数有scanf和printf。'}, {'name':'逻辑运算符','description':'逻辑运算符用于对多个条件进行逻辑运算，常见的逻辑运算符有与运算符、或运算符和非运算符。'}, {'name':'算术运算符','description':'算术运算符用于对数字进行基本的算术运算，常见的算术运算符有加法运算符、减法运算符、乘法运算符和除法运算符。'}, {'name':'条件运算符','description':'条件运算符是C语言中的一种特殊运算符，用于根据条件的真假来选择不同的值。条件运算符的语法为：条件 ? 表达式1 : 表达式2。'}]"
    },
    {
        "sortId": 5131,
        "id": "1337225246312525824",
        "title": "满足条件的四位数",
        "content": "按从小到大的顺序输入四个互不相同的一位数字，能组成多少互不相同且无重复数字的四位数？输出这些四位数\n\n### 输入格式:\n\n输入就一行，包含$$4$$个整数，他们之间均以一个空格分隔。\n\n### 输出格式:\n\n按照从小到大的顺序输出满足条件的$$4$$位数。输出每个数之后需要回车换行。\n\n### 输入样例:\n\n```in\n1 2 3 4\n```\n\n### 输出样例:\n\n```out\n1234\n1243\n1324\n1342\n1423\n1432\n2134\n2143\n2314\n2341\n2413\n2431\n3124\n3142\n3214\n3241\n3412\n3421\n4123\n4132\n4213\n4231\n4312\n4321\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 149,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来生成所有可能的四位数。'}, {'name':'数组'，'description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据。在本题中，可以使用数组来存储输入的四个数字，并通过循环结构来生成所有可能的四位数。'}, {'name':'排序算法'，'description':'排序算法是C语言中的一种算法，用于将一组数据按照一定的顺序进行排列。在本题中，可以使用排序算法将生成的四位数按照从小到大的顺序进行排序。'}]"
    },
    {
        "sortId": 5132,
        "id": "1337224143546118144",
        "title": "996",
        "content": "996工作制是指工作日早9点上班，晚上9点下班，中午和傍晚休息1小时（或不到），总计10小时以上，并且一周工作6天的工作制度。2019年3月27日，一个名为“996ICU”的项目在GitHub上传开。程序员们揭露\"996ICU\"互联网公司，抵制互联网公司的996工作制度。2019年12月2日，996入选《咬文嚼字》2019年十大流行语。 同日，入选国家语言资源监测与研究中心发布的“2019年度十大网络用语“。 本题就请你编写程序，将句子中的”996”替换成” 996ICU”。\n\n### 输入格式:\n\n输入在一行中给出一句话，即一个非空字符串，由不超过 1000 个英文字母、数字和空格组成，以回车结束。\n\n### 输出格式:\n\n从左到右扫描输入的句子：如果句子中有\"996\"子串，则将其替换为\"996ICU\"；其他内容不受影响，原样输出。\n\n### 输入样例:\n\n```in\nWorking overtime 996 is not as good as 966.\n```\n\n### 输出样例:\n\n```out\nWorking overtime 996ICU is not as good as 966.\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 106,
        "res": "[{'name':'字符串处理'，'description':'字符串处理是C语言中常见的操作之一，包括字符串的查找、替换、拼接等操作。在本题中，需要对输入的句子进行扫描，查找是否包含\"996\"子串，并将其替换为\"996ICU\"。'}]"
    },
    {
        "sortId": 5133,
        "id": "1337219299317936128",
        "title": "输入整数倒数到1",
        "content": "输入一个正整数$$n$$，递减到1输出。\n当输入的值小于等于0时,提示`重新输入一个正整数`\n\n### 输入格式:\n\n输入一个正整数$$n(n\\le 100)$$\n\n### 输出格式:\n\n如果输入的是正整数，则递减到$$1$$输出，数字间空格隔开。\n如果输入的值小于等于$$0$$时,提示`重新输入一个正整数`\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10\n```\n```in\n-3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n10 9 8 7 6 5 4 3 2 1 \n```\n```out\n重新输入一个正整数\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 120,
        "res": "[{'name': '输入输出', 'description': '学习如何使用输入和输出函数进行数据的输入和输出操作。'}, {'name': '条件语句', 'description': '学习如何使用条件语句进行条件判断和流程控制。'}, {'name': '循环语句', 'description': '学习如何使用循环语句进行重复执行某段代码的操作。'}, {'name': '数据类型', 'description': '学习不同的数据类型及其在程序中的使用方法。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储和操作数据。'}, {'name': '运算符', 'description': '学习不同的运算符及其在程序中的使用方法。'}, {'name': '函数', 'description': '学习如何定义和调用函数来实现代码的模块化和重用。'}]"
    },
    {
        "sortId": 5134,
        "id": "1337216294611140608",
        "title": "求1到n的和",
        "content": "编写一段程序，求1到$$n$$的和。$$n(0\\le n\\le 100)$$的值从键盘输入。\n\n### 输入格式:\n\n输入一个正整数$$n$$。\n\n### 输出格式:\n\n输出和。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n15\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 167,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。在本题中，可以使用for循环来求1到n的和。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用一个变量来存储和的值，并在循环中累加每个数。'}, {'name':'输入输出'，'description':'输入输出是C语言中用于与用户交互的一种操作。在本题中，可以使用scanf函数从键盘输入n的值，并使用printf函数输出和的值。'}]"
    },
    {
        "sortId": 5135,
        "id": "1337213606028406784",
        "title": "输出小于某数的所有奇数",
        "content": "编写一段程序, 输入一个整数值$$n$$, 显示该整数值以下的所有奇数。若非正整数，则什么也不输出。\n\n### 输入格式:\n\n输入一个整数值$$n(-100\\le n\\le 100)$$\n\n### 输出格式:\n\n一组数字，数字间空格隔开\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n15\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1 3 5 7 9 11 13 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 163,
        "res": "[{'name': '整数值判断', 'description': '判断输入的整数值是否为正整数，若非正整数则不输出'}, {'name': '循环结构', 'description': '使用循环结构来遍历整数值以下的所有奇数'}, {'name': '条件判断', 'description': '使用条件判断来判断整数值是否为正整数'}]"
    },
    {
        "sortId": 5136,
        "id": "1337044565368586240",
        "title": "是不是3的倍数",
        "content": "如何判断一个数是不是$$3$$的倍数呢？本题的要求是给你 $$n$$ 个字符串，将每个字符串的数字字符转化为正整数，判断它们是否是$$3$$的倍数。\n\n对于每个正整数：如果是$$3$$的倍数输出`Yes`，否则，输出`No`。\n\n### 输入格式:\n\n输入的第一行，包含一个正整数$$n$$，表示字符串的个数。\n\n以下$$n$$行，每行一个字符串$$a$$。\n\n输入保证数字a的长度不超过$$200$$位，$$n$$不超过$$50$$.\n\n### 输出格式:\n\n输出共$$n$$行，每行输出一个`Yes`或`No`，表示第$$i$$个数是不是$$3$$的倍数。\n\n注意：每行的输出只能是`Yes`或`No`，注意大小写，不要有多余的其它字符（包括空格）。\n\n### 输入样例:\n\n```in\n3\n1c3\n1x2*0\n22*8\n```\n\n### 输出样例:\n\n```out\nNo\nYes\nYes\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 119,
        "res": "[{'name':'字符串转化为正整数', 'description':'将字符串中的数字字符转化为正整数'}, {'name':'判断一个数是否是3的倍数', 'description':'判断一个数是否是3的倍数'}]"
    },
    {
        "sortId": 5137,
        "id": "1337038767703801856",
        "title": "判断顺子",
        "content": "有五张Poker牌，需要进行判断：它是否是一个正常的顺子。 说明：34567890JQKA2wW相信大家知道，为简化操作，0代表10，w和W代表小王和大王。大、小王可代替任意的牌哟。编程判断输入的五张牌是否会构成一个顺子（方案多个时，输出较大的，34567和0JQKA分别是最小和最大的顺子）\n\n### 输入格式:\n\n输入用五个字符代表的五张牌，系统确保输入的数据无误，但并不一定是有序排列。\n\n### 输出格式:\n\n输出这五张牌组成的顺子或输出$$-1$$表示不是顺子，注意大小王可当任意的牌使用，输出的顺子要求是最大的一个，且升序排列（如果有的话）。输出格式中开始和结尾是一对方括号，具体格式见样例。\n\n### 输入样例1:\n\n```in\nA0KJw\n```\n\n### 输出样例1:\n\n```out\n[0JQKA]\n```\n\n### 输入样例2\n\n```in\nA3452\n```\n\n### 输出样例2:\n\n```out\n[-1]\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 21,
        "res": "[{'name': '数组', 'description': '数组是一种存储多个相同类型数据的容器，可以通过下标访问和修改数组中的元素。在本题中，可以使用数组来存储五张牌的信息。'}, {'name': '排序', 'description': '为了判断五张牌是否构成顺子，需要对牌进行排序。可以使用冒泡排序、插入排序等算法对牌进行排序。'}, {'name': '字符串处理', 'description': '题目中输入的五张牌是以字符串的形式给出的，需要对字符串进行处理，提取出每张牌的信息。可以使用字符串的截取、分割等操作来实现。'}, {'name': '条件判断', 'description': '根据题目要求，需要判断输入的五张牌是否构成顺子。可以使用条件判断语句来判断是否满足顺子的条件。'}, {'name': '循环', 'description': '在解决问题的过程中，可能需要使用循环来遍历数组、进行排序等操作。可以使用for循环、while循环等来实现。'}]"
    },
    {
        "sortId": 5138,
        "id": "1336968100199034880",
        "title": "美化",
        "content": "给出一个**非标准**的科学计数法表示的实数 $$123eX$$（$$-10<=X<=10,X!=0,X!=-2$$） ，请你将其转换为**累乘美化计数法**的形式。例如：$$123e2$$ 输出为 $$1.23*10*10*10*10$$ ，$$123e-4$$ 输出为 $$1.23*0.1*0.1$$ 。\n\n### 输入格式:\n\n在一行中给出科学计数法表示的实数 $$S$$ 。\n\n### 输出格式:\n\n在一行中输出 $$S$$ **累乘美化计数法**表示的形式。\n\n### 输入样例:\n\n```in\n123e1\n```\n\n### 输出样例:\n\n\n```out\n1.23*10*10*10\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 6,
        "res": "[{'name':'科学计数法转换','description':'本题考察对科学计数法的理解和转换，需要对科学计数法的表示形式进行解析和处理，然后按照累乘美化计数法的形式输出。'}]"
    },
    {
        "sortId": 5139,
        "id": "1336960977167740928",
        "title": "循环-n个数最大值",
        "content": "求$$n$$个整数的最大值\n\n### 输入格式:\n\n先输入$$n$$的值（$$0<n\\le 10$$），再输入$$n$$个整数\n\n### 输出格式:\n\n输出$$n$$个数的最大值，若$$n\\le 0$$则没有输出\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n6\n11 26 33 51 16 19\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n51\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 8,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 148,
        "res": "[{'name': '变量', 'description': '变量是计算机程序中用于存储和表示数据的一种抽象概念。在C语言中，变量需要先声明后使用，可以存储不同类型的数据，如整数、浮点数、字符等。'}, {'name': '输入输出', 'description': '输入输出是C语言程序与用户或外部设备进行交互的方式。在C语言中，可以使用标准库函数scanf和printf来实现输入和输出操作。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环可以根据条件判断来决定是否继续执行，可以用于处理重复性的任务。'}, {'name': '条件语句', 'description': '条件语句是根据条件判断来选择执行不同的代码块。在C语言中，常用的条件语句有if语句和switch语句。条件语句可以根据条件的真假来决定执行哪个代码块，可以用于根据不同的情况执行不同的操作。'}, {'name': '数组', 'description': '数组是一种用于存储多个相同类型数据的连续内存空间。在C语言中，可以使用数组来存储一组数据，并通过下标访问数组中的元素。数组可以提高数据的存储和访问效率，常用于存储和处理大量数据。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，可以自定义函数来实现特定的功能，函数可以接受参数并返回结果。函数可以提高代码的可读性和重用性，常用于封装和组织代码。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在C语言中，可以使用算术运算符来进行算术运算，如加法运算符+、减法运算符-、乘法运算符*、除法运算符/等。算术运算可以用于数值计算和表达式求值。'}, {'name': '条件运算', 'description': '条件运算是根据条件判断来选择不同的操作的过程。在C语言中，可以使用条件运算符（三目运算符）来实现条件运算，格式为条件?表达式1:表达式2。条件运算可以简化代码，提高代码的可读性。'}, {'name': '逻辑运算', 'description': '逻辑运算是对逻辑值进行与、或、非等操作的过程。在C语言中，可以使用逻辑运算符来进行逻辑运算，如与运算符&&、或运算符||、非运算符!等。逻辑运算可以用于条件判断和逻辑表达式的求值。'}, {'name': '比较运算', 'description': '比较运算是对两个值进行大小、相等性等比较的过程。在C语言中，可以使用比较运算符来进行比较运算，如大于运算符>、小于运算符<、等于运算符==等。比较运算可以用于条件判断和逻辑表达式的求值。'}, {'name': '数据类型', 'description': '数据类型是指变量可以存储的数据的种类和范围。在C语言中，有基本数据类型（如整型、浮点型、字符型）和派生数据类型（如数组、结构体、指针）等。不同的数据类型可以存储不同范围和精度的数据，可以提高程序的效率和可读性。'}, {'name': '语句', 'description': '语句是C语言程序的基本单位，是一条完整的执行指令。在C语言中，常见的语句有赋值语句、条件语句、循环语句等。语句可以按照顺序执行，可以根据条件判断选择执行，可以重复执行。语句可以用于实现特定的功能和逻辑。'}, {'name': '指针', 'description': '指针是一种特殊的变量，存储的是内存地址。在C语言中，可以使用指针来访问和操作内存中的数据。指针可以提高程序的灵活性和效率，常用于动态内存分配、数组访问、函数传参等。'}, {'name': '字符串', 'description': '字符串是由字符组成的一串数据。在C语言中，可以使用字符数组或字符指针来表示和操作字符串。字符串可以进行拼接、比较、复制等操作，常用于处理文本数据。'}, {'name': '库函数', 'description': '库函数是由C语言标准库或其他库提供的函数。在C语言中，可以使用库函数来实现一些常用的功能，如输入输出、数学运算、字符串处理等。库函数可以提高开发效率，常用于解决特定的问题。'}, {'name': '模块化', 'description': '模块化是将程序分解为多个独立的模块，每个模块负责完成特定的功能。在C语言中，可以使用函数来实现模块化编程，将程序分解为多个函数，每个函数负责完成特定的任务。模块化可以提高代码的可读性和重用性，便于程序的维护和扩展。'}, {'name': '注释', 'description': '注释是在代码中添加的说明性文字，用于解释代码的作用和用法。在C语言中，可以使用注释来提高代码的可读性和可维护性，方便他人理解和修改代码。注释不会被编译器执行，不会影响程序的运行。'}, {'name': '错误处理', 'description': '错误处理是在程序中处理异常情况的过程。在C语言中，可以使用条件语句和错误码来处理错误，如if语句和返回值。错误处理可以提高程序的健壮性和可靠性，避免程序崩溃或产生错误结果。'}, {'name': '编译', 'description': '编译是将源代码转换为可执行文件的过程。在C语言中，可以使用编译器将C源代码编译为机器码，然后链接生成可执行文件。编译过程包括词法分析、语法分析、语义分析、代码生成等步骤，可以检查代码的语法错误和逻辑错误。编译可以将高级语言转换为机器语言，使计算机能够执行程序。'}, {'name': '调试', 'description': '调试是在程序中查找和修复错误的过程。在C语言中，可以使用调试器来逐行执行程序，查看变量的值和程序的执行流程，以便找到错误的原因和位置。调试可以提高程序的质量和可靠性，减少错误和异常情况的发生。'}, {'name': '算法', 'description': '算法是解决问题的一系列步骤和规则。在C语言中，可以使用算法来实现特定的功能，如排序、查找、计算等。算法可以提高程序的效率和性能，常用于处理大量数据和复杂问题。'}, {'name': '数据结构', 'description': '数据结构是组织和存储数据的方式。在C语言中，可以使用数据结构来表示和操作数据，如数组、链表、栈、队列等。数据结构可以提高数据的存储和访问效率，常用于解决特定的问题和优化程序的性能。'}, {'name': '文件操作', 'description': '文件操作是对文件进行读写和管理的过程。在C语言中，可以使用文件指针和文件操作函数来打开、读取、写入和关闭文件。文件操作可以用于读取和保存数据，处理文本和二进制文件，常用于文件处理和数据存储。'}, {'name': '预处理', 'description': '预处理是在编译过程中对源代码进行预处理的过程。在C语言中，可以使用预处理指令来进行宏定义、条件编译、文件包含等操作。预处理可以在编译之前对源代码进行处理，如替换宏定义、根据条件编译选择代码块、包含其他文件等。预处理可以提高代码的可读性和可维护性，常用于定义常量、宏和条件编译。'}, {'name': '指针运算', 'description': '指针运算是对指针进行加、减、比较等操作的过程。在C语言中，可以使用指针运算符来对指针进行运算，如加法运算符+、减法运算符-、比较运算符==等。指针运算可以用于数组访问、指针移动、内存操作等，常用于处理复杂的数据结构和算法。'}, {'name': '位运算', 'description': '位运算是对二进制位进行与、或、非等操作的过程。在C语言中，可以使用位运算符来进行位运算，如与运算符&、或运算符|、非运算符~等。位运算可以用于位操作、位掩码、位字段等，常用于处理二进制数据和优化程序的性能。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。在C语言中，可以使用结构体来表示和操作复杂的数据结构，如学生信息、员工信息等。结构体可以提高数据的组织和访问效率，常用于封装和组织相关的数据。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是一个指针。在C语言中，可以使用指针数组来存储多个指针，每个指针指向不同的数据。指针数组可以用于存储和操作多个字符串、多个对象等，常用于处理复杂的数据结构和算法。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存的过程。在C语言中，可以使用动态内存分配函数malloc和free来动态分配和释放内存。动态内存分配可以解决静态内存不足或浪费的问题，常用于处理不确定大小的数据和动态数据结构。'}, {'name': '递归', 'description': '递归是一种函数调用自身的过程。在C语言中，可以使用递归来解决可以分解为相同问题的问题，如阶乘、斐波那契数列等。递归可以简化问题的解决过程，但需要注意递归的终止条件和递归深度，避免出现无限递归和栈溢出等问题。'}, {'name': '指针函数', 'description': '指针函数是返回指针的函数。在C语言中，可以使用指针函数来返回指向特定类型数据的指针。指针函数可以用于返回动态分配的内存、返回数组、返回结构体等，常用于处理复杂的数据结构和算法。'}, {'name': '多文件编程', 'description': '多文件编程是将程序分解为多个源文件，每个源文件负责实现特定的功能。在C语言中，可以使用多文件编程来组织和管理大型程序，提高代码的可读性和可维护性。多文件编程可以将不同的功能模块分开，便于团队协作和代码复用。'}, {'name': '宏定义', 'description': '宏定义是一种在程序中定义的符号常量或代码片段。在C语言中，可以使用宏定义来定义常量、函数、条件编译等。宏定义可以提高代码的可读性和可维护性，常用于定义常量、简化代码、条件编译等。'}, {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程。在C语言中，可以使用类型转换运算符来进行类型转换，如强制类型转换、隐式类型转换等。类型转换可以改变数据的表示和计算方式，常用于处理不同类型的数据和表达式。'}, {'name': '枚举', 'description': '枚举是一种自定义的数据类型，可以定义一组具有相同类型的常量。在C语言中，可以使用枚举来表示一组相关的常量，如星期几、月份等。枚举可以提高代码的可读性和可维护性，常用于定义状态、选项等。'}, {'name': '位字段', 'description': '位字段是一种用于存储和操作二进制位的数据结构。在C语言中，可以使用位字段来表示和操作二进制位，如位掩码、位操作等。位字段可以提高数据的存储和访问效率，常用于处理二进制数据和优化程序的性能。'}, {'name': '结构体指针', 'description': '结构体指针是指向结构体的指针。在C语言中，可以使用结构体指针来访问和操作结构体的成员。结构体指针可以提高程序的灵活性和效率，常用于动态内存分配、结构体数组、链表等。'}, {'name': '文件指针', 'description': '文件指针是指向文件的指针。在C语言中，可以使用文件指针来打开、读取、写入和关闭文件。文件指针可以提高文件的访问效率和灵活性，常用于文件处理和数据存储。'}, {'name': '预定义宏', 'description': '预定义宏是由编译器预定义的一组宏"
    },
    {
        "sortId": 5140,
        "id": "1336944660725710848",
        "title": "进迸进",
        "content": "重新读下标题。**进(jin)迸(beng)进(jin)！**\n\nhahaha，你的视觉会欺骗你。但是 $$YooQ$$ 不会。\n\n接下来他要说明他确实没有骗你，给你一个字符串 $$S$$ ，他告诉你 $$S$$ 中的每个字符都是一样的，这是真的吗？请你自己来判断一下。 \n\n输入数据有多组，每组数据给出一个字符串 $$S$$ ，如果 $$S$$ 中的每个字符都是一样的，请输出“YooQ mei you pian wo”，否则请找出字符串 $$S$$ 中与其他字符不同的字符并输出它。输入数据保证如果存在不同的字符的话，这个字符有且只有一个。\n### 输入格式:\n\n在第一行给出一个正整数 $$T$$（$$1<=T<=100$$） 。表示共有 $$T$$ 组数据。\n\n接下来 $$T$$ 行，每行给出一个字符串 $$S$$（$$3<=|S|<=50$$） 。\n\n### 输出格式:\n\n对于每一组输入数据，输出一行，如果存在某个不同的字符，请输出这个字符，否则请输出“YooQ mei you pian wo”,不带引号。\n\n### 输入样例:\n\n```in\n3\naaoaa\naaaaaa\nbbbbbbbq\n```\n\n### 输出样例:\n\n\n```out\no\nYooQ mei you pian wo\nq\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 17,
        "res": "[{'name':'字符串处理','description':'字符串处理是C语言程序设计中的基础知识点之一。在这个题目中，需要对输入的字符串进行处理，判断字符串中的字符是否都相同，如果不相同则输出不同的字符。'}]"
    },
    {
        "sortId": 5141,
        "id": "1336881316832559104",
        "title": "LC的隐藏分",
        "content": "众所周知，$$LC$$ 是一个老网瘾少年了，他玩的最多的游戏就是 $$LOL$$ ，但自从他上了大学开始搞 $$ACM$$ 之后，他就很少玩了。某天他久违地登上自己的账号，准备玩一把排位释放一下压力，结果发现因为长期没玩游戏，自己的段位从钻石二掉到了白金一，他很难过，但他知道，他的隐藏段位应该还是比较高的，现在我们把段位抽象化成分数，假设 $$LC$$ 现在的分数为 $$P$$ ，赢一把增加 $$X$$ 分，输一把扣除 $$Y$$ 分，隐藏分的计算公式是：**隐藏分** $$\\displaystyle =P*\\frac{X}{Y}$$ 。$$LC$$ 想知道他的隐藏分到底是多少，但他现在忙着打游戏，所以他把这个任务交给你了。 \n\n\n### 输入格式:\n\n在一行中给出三个正整数 $$P,X,Y$$，含义如题面描述。（$$1<=P<=2000$$，$$1<=X,Y<=50$$）\n\n### 输出格式:\n\n在一行中输出一个整数 $$N$$，代表 $$LC$$ 的隐藏分，结果四舍五入，只保留整数部分。\n\n### 输入样例:\n\n\n```in\n1000 10 10\n```\n\n### 输出样例:\n\n```out\n1000\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 20,
        "res": "[{'name': '变量', 'description': '在C语言中，变量是用来存储数据的一种数据类型。在本题中，P、X、Y都是变量，用来存储输入的分数和增减分的值。'}, {'name': '运算符', 'description': '在C语言中，运算符用于对变量进行各种运算操作。在本题中，隐藏分的计算公式中使用了乘法运算符和除法运算符。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数来读取输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数读取输入的P、X、Y的值，使用printf函数输出隐藏分的结果。'}, {'name': '四舍五入', 'description': '在C语言中，可以使用四舍五入的方法来保留整数部分。在本题中，需要对隐藏分进行四舍五入，只保留整数部分。'}]"
    },
    {
        "sortId": 5142,
        "id": "1336876263379595264",
        "title": "帮小明出主意",
        "content": "小明想去旅行，他不确定哪个季度去，他决定猜 一个答案，请用程序来模拟猜答案的过程，即：通过键盘输入一个数，用此数对4求余数，输出结果对应为：\n0 选 First 代表第1季度,\n1选 Second 代表第2季度,\n2选 Third 代表第3季度,\n3 选 Fourth 代表第4季度.\n\n### 输入格式:\n\n输入一个整数\n\n### 输出格式:\n\nanswer = 选项\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nanswer = First\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 37,
        "res": "[{'name':'取余运算','description':'取余运算是指将一个数除以另一个数后所得的余数。在C语言中，取余运算使用%符号表示。'}, {'name':'条件语句','description':'条件语句是根据条件的真假来执行不同的代码块。在C语言中，条件语句使用if-else语句来实现。'}, {'name':'键盘输入','description':'键盘输入是指通过键盘输入数据。在C语言中，可以使用scanf函数来实现键盘输入。'}, {'name':'输出格式化','description':'输出格式化是指按照一定的格式输出数据。在C语言中，可以使用printf函数来实现输出格式化。'}]"
    },
    {
        "sortId": 5143,
        "id": "1336857457810763776",
        "title": "方阵除了四条边框之外的元素的和",
        "content": "求$$n\\times n$$方阵除了四条边框之外的元素的和。\n\n### 输入格式:\n\n第一行为$$n(0<n\\le 15)$$，表示方阵的大小。第二行至第$$n+1$$行每行$$n$$个整数，整数间用空格隔开。\n\n### 输出格式:\n\n输出一行，一个整数，表示要求的和。\n\n### 输入样例:\n\n```in\n3\n1 2 3\n4 5 6\n7 8 9\n```\n\n### 输出样例:\n\n```out\n5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 125,
        "res": "[{'name':'二维数组的使用'，'description':'二维数组是C语言中的一种数据结构，可以用来表示矩阵等二维数据。本题中需要使用二维数组来表示方阵，并对其进行操作。'}, {'name':'循环的使用'，'description':'本题中需要使用循环来遍历二维数组，并计算除了四条边框之外的元素的和。循环是C语言中的一种重要的控制结构，可以用来重复执行一段代码。'}, {'name':'变量的定义和使用'，'description':'本题中需要定义一个变量来保存除了四条边框之外的元素的和，并在循环中更新该变量的值。变量是C语言中用来存储数据的一种容器，可以通过赋值和运算来改变变量的值。'}]"
    },
    {
        "sortId": 5144,
        "id": "1336705591739498496",
        "title": "计算矩阵两个对角线之和",
        "content": "计算一个$$n\\times n$$矩阵两个对角线之和。\n\n### 输入格式:\n\n第一行输入一个整数$$n(0<n\\le 10)$$，第二行至第$$n+1$$行，每行输入$$n$$个整数，每行第一个数前没有空格，每行的每个数之间各有一个空格。\n\n### 输出格式:\n\n两条对角线元素和，输出格式见样例。\n\n### 输入样例:\n\n```in\n4\n1 2 3 4\n5 6 7 8\n9 10 11 12\n13 14 15 16\n```\n\n### 输出样例:\n\n```out\nsum = 68\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 170,
        "res": "[{'name':'二维数组','description':'二维数组是一种特殊的数据结构，可以用来表示矩阵等二维结构。在C语言中，可以使用二维数组来存储和操作矩阵。本题中，需要使用二维数组来存储输入的矩阵。'}, {'name':'循环结构','description':'循环结构是一种重复执行某段代码的结构。在C语言中，可以使用循环结构来遍历二维数组中的元素，计算对角线元素的和。本题中，可以使用循环结构来遍历矩阵的对角线元素。'}, {'name':'变量和表达式','description':'变量是用来存储数据的容器，表达式是由变量、常量和运算符组成的式子。在C语言中，可以使用变量和表达式来计算对角线元素的和。本题中，需要定义一个变量来存储对角线元素的和，并使用表达式来计算和的值。'}]"
    },
    {
        "sortId": 5145,
        "id": "1336703947605884928",
        "title": "找出两个集合中相同的数",
        "content": "给定两个正整数的集合，分别含有m个和n个元素，找出在两个集合中都出现过的数并输出。\n\n### 输入格式:\n\n第一行输入两个整数m和n，分别表示两个集合中的整数的个数。\n第二行输入m个用空格隔开的整数，表示第一个集合中的元素。\n第三行输入n个用空格隔开的整数，表示第二个集合中的元素。\n保证n和m的值均不超过50000，且集合中所有元素的值大于0且小于等于1000。\n\n### 输出格式:\n\n找出在两个集合中都有正整数，并按从小到大的顺序输出,每个数后有一个空格。\n\n### 输入样例:\n\n```in\n5 6\n2 9 10 7 19\n22 10 5 6 7 1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n7 10 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 32,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 143,
        "res": "[{'name':'数组','description':'数组是一种存储多个相同类型数据的连续内存空间的数据结构。在C语言中，数组的下标从0开始，可以通过下标访问数组中的元素。本题中可以使用数组来存储两个集合的元素，并通过遍历数组找出在两个集合中都出现过的数。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。本题中可以使用循环来遍历两个集合的元素，判断是否在另一个集合中出现。'}, {'name':'条件判断','description':'条件判断是根据条件的真假来执行不同的代码分支。在C语言中，常用的条件判断结构有if语句和switch语句。本题中可以使用条件判断来判断一个元素是否在另一个集合中出现。'}, {'name':'排序','description':'排序是将一组数据按照一定的规则进行排列的过程。在C语言中，常用的排序算法有冒泡排序、插入排序和快速排序等。本题中可以使用排序算法对两个集合的元素进行排序，然后找出在两个集合中都出现过的数。'}, {'name':'输出','description':'输出是将程序的结果显示给用户的过程。在C语言中，可以使用printf函数来输出结果。本题中可以使用printf函数按照要求输出在两个集合中都出现过的数。'}]"
    },
    {
        "sortId": 5146,
        "id": "1336701403806646272",
        "title": "方阵左下三角元素的和",
        "content": "输入一个$$n\\times n$$的整数组成的方阵，求其左下三角(包括主对角线)元素的和。\n\n### 输入格式:\n\n第一行输入一个整数$$n(0<n\\le 10)$$，第二行至第$$n+1$$行，每行输入$$n$$个整数，每行第一个数前没有空格，每行的每个数之间各有一个空格。\n\n### 输出格式:\n\n直接输出左下三角(包括主对角线)元素的和。没有其它任何附加字符。\n\n### 输入样例:\n\n```in\n4\n1 2 3 4\n5 6 7 8\n9 1 2 3\n4 5 6 7\n```\n\n### 输出样例:\n\n```out\n46\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 156,
        "res": "[{'name': '二维数组', 'description': '二维数组是由多个一维数组组成的数据结构，可以用来表示矩阵等二维结构。在C语言中，可以使用二维数组来表示方阵，并进行相关的操作。'}, {'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的结构，可以使用循环结构来遍历二维数组中的元素，并进行相应的计算。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块的结构，可以使用条件语句来判断是否为左下三角元素，并进行相应的求和操作。'}, {'name': '变量', 'description': '变量是用来存储数据的一种数据类型，可以使用变量来存储输入的整数和计算得到的左下三角元素的和。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的过程，可以使用输入输出函数来获取用户输入的整数和输出计算得到的左下三角元素的和。'}]"
    },
    {
        "sortId": 5147,
        "id": "1336694187460476928",
        "title": "倒立的杨辉三角形",
        "content": "杨辉三角描述如下图所示：\n```\n1\n1 1\n1 2 1\n1 3 3 1\n1 4 6 4 1\n1 5 10 10 5 1\n```\n\n请你输出一个倒立的杨辉三角形\n### 输入格式:\n\n输入只包含一个正整数n（0< n < 40），表示将要输出的倒立杨辉三角层数。\n\n### 输出格式:\n\n输出相应层数的倒立杨辉三角，每一层的整数之间用一个空格隔开。\n\n### 输入样例:\n\n```in\n5\n```\n\n### 输出样例:\n\n```out\n1 4 6 4 1\n1 3 3 1\n1 2 1\n1 1\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 130,
        "res": "[{'name':'倒立杨辉三角形', 'description':'根据输入的层数，输出相应层数的倒立杨辉三角形。'}]"
    },
    {
        "sortId": 5148,
        "id": "1336688354714533888",
        "title": "判断4和7的倍数",
        "content": "输入若干个整数，统计这些数中有多少个是4或7的倍数。\n\n### 输入格式:\n\n输入若干个整数，每个整数的取值在int范围之内，用空格隔开。\n\n### 输出格式:\n\n输出一个整数，为统计的结果。\n\n### 输入样例:\n\n```in\n30 21 5 16 9\n```\n\n### 输出样例:\n\n```out\n2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 117,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历输入的整数，判断每个整数是否是4或7的倍数，并进行统计。'}，{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断每个整数是否是4或7的倍数。'}]"
    },
    {
        "sortId": 5149,
        "id": "1336682213343313920",
        "title": "分段函数",
        "content": "已知：y是x的函数, \n\n当x<10时，y=-x； \n\n当x=10时，y=31； \n\n当x>10,且x<=100时，y=3x-7; \n\n当x>100时，y=  x$$2$$-5x+1;\n\n### 输入格式:\n\n任意输入一个int类型的整数x。\n\n### 输出格式:\n\n输出为一个整数，单独占一行，即x对应的函数值。\n\n### 输入样例:\n\n```in\n5\n```\n\n### 输出样例:\n\n```out\n-5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 127,
        "res": "[{'name': '条件语句', 'description': '条件语句是根据给定的条件来执行不同的操作。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '函数', 'description': '函数是一段可重复使用的代码块，用于执行特定的任务。在这个习题中，y是x的函数，根据不同的x值，计算出对应的y值。'}, {'name': '变量', 'description': '变量是用于存储数据的容器。在这个习题中，x和y都是变量，用于存储输入的值和计算的结果。'}, {'name': '运算符', 'description': '运算符用于执行各种数学和逻辑运算。在这个习题中，使用了加减乘除等运算符来计算y的值。'}, {'name': '循环', 'description': '循环是重复执行一段代码的结构。在这个习题中，没有使用循环。'}, {'name': '数据类型', 'description': '数据类型定义了变量可以存储的数据的类型和范围。在这个习题中，使用了int类型的整数变量。'}, {'name': '输入输出', 'description': '输入输出用于与用户交互和显示结果。在这个习题中，通过输入一个整数x，计算出对应的函数值并输出。'}, {'name': '算术运算', 'description': '算术运算用于执行各种数学运算。在这个习题中，使用了加减乘除等算术运算来计算y的值。'}, {'name': '逻辑运算', 'description': '逻辑运算用于执行各种逻辑判断。在这个习题中，没有使用逻辑运算。'}, {'name': '条件判断', 'description': '条件判断用于根据给定的条件选择不同的操作。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '数学函数', 'description': '数学函数用于执行各种数学运算。在这个习题中，没有使用数学函数。'}, {'name': '控制流程', 'description': '控制流程用于控制程序的执行顺序。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子。在这个习题中，使用了多个表达式来计算y的值。'}, {'name': '赋值语句', 'description': '赋值语句用于给变量赋值。在这个习题中，使用了赋值语句给x和y赋值。'}, {'name': '常量', 'description': '常量是固定的值，不能被修改。在这个习题中，使用了常量10和100。'}, {'name': '运算顺序', 'description': '运算顺序定义了表达式中运算符的执行顺序。在这个习题中，根据运算顺序计算y的值。'}, {'name': '逻辑表达式', 'description': '逻辑表达式用于执行逻辑判断。在这个习题中，没有使用逻辑表达式。'}, {'name': '条件语句', 'description': '条件语句是根据给定的条件来执行不同的操作。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '函数', 'description': '函数是一段可重复使用的代码块，用于执行特定的任务。在这个习题中，y是x的函数，根据不同的x值，计算出对应的y值。'}, {'name': '变量', 'description': '变量是用于存储数据的容器。在这个习题中，x和y都是变量，用于存储输入的值和计算的结果。'}, {'name': '运算符', 'description': '运算符用于执行各种数学和逻辑运算。在这个习题中，使用了加减乘除等运算符来计算y的值。'}, {'name': '循环', 'description': '循环是重复执行一段代码的结构。在这个习题中，没有使用循环。'}, {'name': '数据类型', 'description': '数据类型定义了变量可以存储的数据的类型和范围。在这个习题中，使用了int类型的整数变量。'}, {'name': '输入输出', 'description': '输入输出用于与用户交互和显示结果。在这个习题中，通过输入一个整数x，计算出对应的函数值并输出。'}, {'name': '算术运算', 'description': '算术运算用于执行各种数学运算。在这个习题中，使用了加减乘除等算术运算来计算y的值。'}, {'name': '逻辑运算', 'description': '逻辑运算用于执行各种逻辑判断。在这个习题中，没有使用逻辑运算。'}, {'name': '条件判断', 'description': '条件判断用于根据给定的条件选择不同的操作。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '数学函数', 'description': '数学函数用于执行各种数学运算。在这个习题中，没有使用数学函数。'}, {'name': '控制流程', 'description': '控制流程用于控制程序的执行顺序。在这个习题中，根据不同的x值，选择不同的函数进行计算。'}, {'name': '表达式', 'description': '表达式是由运算符和操作数组成的式子。在这个习题中，使用了多个表达式来计算y的值。'}, {'name': '赋值语句', 'description': '赋值语句用于给变量赋值。在这个习题中，使用了赋值语句给x和y赋值。'}, {'name': '常量', 'description': '常量是固定的值，不能被修改。在这个习题中，使用了常量10和100。'}, {'name': '运算顺序', 'description': '运算顺序定义了表达式中运算符的执行顺序。在这个习题中，根据运算顺序计算y的值。'}, {'name': '逻辑表达式', 'description': '逻辑表达式用于执行逻辑判断。在这个习题中，没有使用逻辑表达式。'}]"
    },
    {
        "sortId": 5150,
        "id": "1336680464339202048",
        "title": "IP几何",
        "content": "请编写程序，将一个仅由数字组成的字符串，拆分成（你可以认为是在帮助公安人员在破解隐藏的IP地址）可能的IP地址形式。这里所说的IP地址是由四个整数构成，其间以点分隔，每个整数的值在0到255之间，除了零外，其它的整数无前导零。\n\n### 输入样例1:\n一个仅由0-9的数字组成的字符串。\n```in\n25525510135\n```\n### 输出样例1:\n在一对{}中输出可能的IP地址，中间以逗号分隔。\n```out\n{255.255.10.135,255.255.101.35}\n```\n\n### 输入样例2:\n一个仅由0-9的数字组成的字符串。\n```in\n0012\n```\n### 输出样例2:\n在一对{}中输出可能的IP地址，中间以逗号分隔。\n```out\n{0.0.1.2}\n```\n\n### 输入样例3:\n一个仅由0-9的数字组成的字符串。\n```in\n00255256\n```\n### 输出样例3:\n在一对{}中输出可能的IP地址，中间以逗号分隔。如果不可能构成IP地址，输出一对空的{}。\n```out\n{}\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 41,
        "res": "[{'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循环结构的基本概念和使用方法，能够使用循环结构解决问题。'}, {'name':'字符串处理','description':'掌握字符串的基本操作，如拆分、连接、截取等。'}, {'name':'数组','description':'了解数组的基本概念和使用方法，能够使用数组解决问题。'}, {'name':'字符串转换为整数','description':'掌握将字符串转换为整数的方法，能够将字符串转换为整数。'}, {'name':'字符串连接','description':'掌握字符串连接的方法，能够将多个字符串连接成一个字符串。'}, {'name':'递归','description':'了解递归的基本概念和使用方法，能够使用递归解决问题。'}, {'name':'条件判断','description':'了解条件判断的基本概念和使用方法，能够使用条件判断解决问题。'}, {'name':'循环结构','description':'了解循"
    },
    {
        "sortId": 5151,
        "id": "1336678778677784576",
        "title": "求一元二次方程的根",
        "content": "求一元二次方程ax2+bx+c=0的根。\n\n### 输入格式:\n\n输入三个用空格隔开的实数a、b、c，分别表示一元二次方程的系数，并保证a不为0。\n\n### 输出格式:\n\n在一行中输出方程的实根，每个根占宽度15，保留5位小数，右对齐，如果有两个相同的实根，只需要输出一个数，如果有两个不同的实根，按从小到大的顺序输出；如果没有实根，请输出字符串“No Answer”。\n\n### 输入样例:\n\n```in\n2 3 -6\n```\n\n### 输出样例:\n\n```out\n       -2.63746        1.13746\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 126,
        "res": "[{'name':'一元二次方程求根','description':'教学如何求解一元二次方程的根，包括判别式、求根公式等知识点。'}]"
    },
    {
        "sortId": 5152,
        "id": "1336635039892664320",
        "title": "分数统计",
        "content": "老师想统计学生考试排名，假定一共有n名学生，学号为1至n。现按学号递增顺序给定每个学生的分数，请编写程序，帮助老师计算：对于每个学生，他的成绩比多少人高。假定考试满分为1000分，成绩均为整数。\n\n### 输入格式:\n\n输入第一行为1个整数$$n(0 < n≤10^{5})$$，为学生人数。第二行为$$n$$个空格间隔的整数$$a_{1} a_{2} … a_{n}$$表示学号1至$$n$$的学生的考试成绩。\n\n### 输出格式:\n\n输出$$n$$个整数$$b_{1}$$ $$b_{2}$$ ... $$b_{n}$$，每个整数后一个空格，$$b_{i} (1≤i≤n)$$表示比学生$$i$$成绩低的学生人数。\n\n### 输入样例1:\n\n```in\n5\n80 10 20 20 30\n\n```\n\n### 输出样例1:\n\n```out\n4 0 1 1 3 \n\n```\n### 解释1:\n$$a_{1}=80，比4个人成绩高。$$\n\n$$a_{2}=10，比0个人成绩高。$$\n\n$$a_{3}=20，比1个人成绩高。$$\n\n$$a_{4}=20，比1个人成绩高。$$\n\n$$a_{5}=30，比3个人成绩高。$$\n\n### 输入样例2:\n\n```in\n9\n10 20 30 40 50 60 70 80 90\n\n```\n\n### 输出样例2:\n\n```out\n0 1 2 3 4 5 6 7 8 \n\n```\n### 数据规模:\n$$测试点0：\tn=10；$$\n\n$$测试点1：\tn=100；$$\n\n$$测试点2：\tn=1000；$$\n\n$$测试点3-4：\tn=100000。$$\n\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "7",
                        "name": "线性结构",
                        "isLeaf": false,
                        "enName": "Linear Lists"
                    },
                    {
                        "id": "8",
                        "name": "顺序表",
                        "isLeaf": true,
                        "enName": "Sequential Lists"
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 202,
        "res": "[{'name':'数组', 'description':'使用数组存储学生的分数'},\n {'name':'循环', 'description':'使用循环遍历学生的分数'},\n {'name':'条件判断', 'description':'根据学生的分数进行条件判断'},\n {'name':'计数', 'description':'统计比每个学生分数低的人数'}]"
    },
    {
        "sortId": 5153,
        "id": "1336565583757733888",
        "title": "三字符串排序",
        "content": "从键盘随机输入三个字符串（不能有空格），从键盘上按从小到大顺序将其输出.\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\npeach  abc  axy\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nabc axy peach\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 22,
        "res": "[{'name': '字符串输入输出', 'description': '教学目标：学生能够使用scanf函数从键盘输入字符串，使用printf函数将字符串输出到屏幕上。教学内容：讲解scanf函数和printf函数的使用方法，以及字符串的输入输出格式。'}, {'name': '字符串排序', 'description': '教学目标：学生能够使用排序算法对字符串进行排序。教学内容：讲解排序算法的原理和实现方法，以及如何在C语言中对字符串进行排序。'}, {'name': '字符串比较', 'description': '教学目标：学生能够使用strcmp函数比较两个字符串的大小。教学内容：讲解strcmp函数的使用方法，以及字符串比较的原理和注意事项。'}]"
    },
    {
        "sortId": 5154,
        "id": "1336534245654687744",
        "title": "有序表的插入",
        "content": "\n回顾我们在PTA上刷过的题，很多题目输入都是先在第一行给出数据个数n，然后第二行输入n个数据。想一想我们怎么存储这些数据的。因为不知道数据到底是多少个，所以需要确认n的最大值MAX，然后定义一个数组，元素个数是MAX，例如：\n```\n#define MAX 100\nint a[MAX];\n```\n但是这MAX个数组空间内并不是全部存放了我们输入的数据，实际元素个数为n。所以我们在访问数组时，既要知道数组首地址，还要知道数组实际元素个数。比如函数调用时，不仅要传送数组名，还要传送数组元素的个数。\n```\nvoid printArr(int *a,int n);//打印数组元素\n```\n能不能把数组和数组元素个数封装在一起，只传递一个参数呢？咱们刚刚接触的结构体就可以完成。\n那我们用这种思路改一改下面这道一维数组题目的做法吧。\n\n![1.png](~/550a212d-2fef-4f45-b1b1-77ff5a776568.png)\n\n### 输入格式:\n输入在第一行先给出非负整数N（<10）；第二行给出N个从小到大排好顺序的整数；第三行给出一个整数X。\n\n### 输出格式:\n在一行内输出将X插入后仍然从小到大有序的整数序列，每个数字后面有一个空格。\n\n### 输入样例:\n```\n5\n1 2 4 5 7\n3\n```\n### 输出样例\n```\n1 2 3 4 5 7 \n```\n\n\n由于输入的第一行是非负整数，而且是小于10的，所以定义一个长度为10的数组。但数组前N个数才使用，所以，我们另一个元素length表示数组元素实际个数。结构体定义如下：\n\n```\nstruct list\n{\n   int a[10];//定义数组a\n   int length;//length表示数组里有效元素的个数\n};\ntypedef struct list list;\n```\n也可以\n```\ntypedef struct list\n{\n   int a[10];\n   int length;\n}list;\n```\n该题的思路是：\n```\n1.输入n\n2.输入n个数放在数组里\n3.输入x\n4.插入x\n5.输出数组元素\n```\n输入的n该放在哪里呢？\n\n奥，应该放在结构体length成员里。所以在具体做之前，应该定义一个结构体变量L，则需要将输入的值放在L.length成员里。\n\n第四步插入x我们使用函数做。需要传送结构体变量L，我们知道，一般情况下，不建议使用结构体变量作为参数，所以传送L的地址吧。\n\n那这个插入函数怎么完成呢？同学们在做这道题的时候，用的都是不同的方法，其实，最简单的方法是\n\n```\n1.从后往前对数组元素(下标为i)与x比较\n  如果小于等于x循环结束\n\t如果大于x，该数组元素下移\n\t（那循环结束条件是不是有两种情况?一种情况是数组元素小于等于x，另一种情况是下标i<0;那循环条件就应该有两个）\n2.将x插入到下标为i+1的位置\n3.length成员的值加1\n```\n```c++\n#include<stdio.h>\ntypedef struct list\n{\n   int a[10];\n   int length;\n}list;\nvoid insert(list* L,int x);\nvoid print(list *L);\nint main()\n{\n    list L;int x;\n    scanf(\"%d\",&L.length);//输入n值送到L.length里\n    //输入有序的数组元素\n    for(int i=0;i<L.length ;i++)\n    {\n        scanf(\"%d\",@@[](1));\n    }\n    scanf(\"%d\",&x);\n    insert(@@[](1),x);//调用插入函数\n    print(&L); //调用输出函数\n\treturn 0;\n}\nvoid print(list *L)\n{\n\t  //输出数组元素\n    for(int i=0;i<@@[](1);i++)\n    {\n        printf(\"%d \",L->a[i]);\n    } \n}\nvoid insert(list* L,int x)\n{\n    int i;\n    for(i=L->length-1;@@[](1);i--)\n    {\n        @@[](1)=L->a[i];//数组元素下移\n    }\n   @@[](1)=x;//插入\n    L->length++;//实际长度加1\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 98,
        "res": "[{'name': '数组的定义和访问', 'description': '讲解了如何定义数组以及如何访问数组元素。'}, {'name': '结构体的定义和使用', 'description': '介绍了结构体的定义和使用，以及如何将数组和数组元素个数封装在一起。'}, {'name': '函数的定义和调用', 'description': '讲解了函数的定义和调用，以及如何传递结构体变量作为参数。'}, {'name': '循环语句的使用', 'description': '介绍了循环语句的使用，包括for循环和while循环。'}, {'name': '条件语句的使用', 'description': '讲解了条件语句的使用，包括if语句和switch语句。'}]"
    },
    {
        "sortId": 5155,
        "id": "1336498264893321216",
        "title": "结构体指针-复数乘积",
        "content": "小可爱们，还记得我们做过实现一个计算复数之积的简单函数吗？\n\n若两个复数分别为：c1=x1+y1i和c2=x2+y2i ，则它们的乘积为 c1×c2=(x1x2−y1y2)+(x1y2+x2y1)i。\n```\n#include <stdio.h>\nstruct complex{\n    int real;\n    int imag;\n};\nstruct complex multiply(struct complex x, struct complex y);\nint main()\n{\n    struct complex product, x, y;\n    scanf(\"%d%d%d%d\", &x.real, &x.imag, &y.real, &y.imag);\n    product = multiply(x, y);\n    printf(\"(%d+%di) * (%d+%di) = %d + %di\\n\", \n            x.real, x.imag, y.real, y.imag, product.real, product.imag);\n    return 0;\n}\nstruct complex multiply(struct complex x, struct complex y)\n{\n    struct complex result;\n    result.real=x.real*y.real-x.imag*y.imag;\n    result.imag=x.real*y.imag+x.imag*y.real;\n    return result;\n}\n```\nC 语言中提供了一种为某一已知类型添加别名的方式——typedef(表示 type define)\n\n使用的方法是：\n\ntypedef 原类型名 类型别名\n\n那复数的类型定义可以改为\n```\ntypedef struct complex{\n    int real;\n    int imag;\n}complex;\n```\n那struct complex和complex都是复数的类型名。\n\n那函数接口定义也可以为：\n\n`complex multiply(complex x, complex y);`\n\n在这题中函数的参数是以结构体变量值的形式进行传递的,这种传值的方式的效率相对来说是低的(如果结构体内成员特别多,效率就会低得很明显)。\n\n其实没有必要采用会使用额外内存并且需要复制传入的值到额外内存的“传值”作参数的方式，可以将传入的参数改写成指针形式。\n\n那在下面的代码中可将multiply函数的参数改为:\n\n`complex multiply(complex *x, complex *y);`\n \n\n相应的， multiply函数体中的原来x和y都改成取指针x和y的指向的形式（要使用取值符）\n\n`x.real`\n\n改为\n\n`(*x).real`\n\n因为$$*$$运算符的优先级小于圆点运算符，所以$$*$$x要加括号。\n\n不过，聪明的你可能发现了，在函数中，通过(*x).real的方式取结构体指针的指向的值,并访问它的成员元素似乎很麻烦。\n\n设计 C 语言的程序员为我们提供了一种更简单的写法。当x是一个结构体的指针时,我们可以通过x->real访问x指向的结构体的成员real。\n\n那以后再用到\n`（*结构体指针名）.结构体成员元素名`形式的代码时，我们都可以将其写为\n\n`结构体指针名->结构体成员元素名`\n\n那小伙伴们，我们就试着改改复数相乘的代码吧。\n\n```c++\n#include <stdio.h>\ntypedef struct complex{\n    int real;\n    int imag;\n}complex;\ncomplex multiply(complex*, complex*);\nint main()\n{\n    complex product, x, y;\n    scanf(\"%d%d%d%d\", &x.real, &x.imag, &y.real, &y.imag);\n    product = multiply(@@[](1));\n    printf(\"(%d+%di) * (%d+%di) = %d + %di\\n\", \n            x.real, x.imag, y.real, y.imag, product.real, product.imag);\n    return 0;\n}\ncomplex multiply( complex @@[](1), complex *y)\n{\n    complex result;\n    result.real=@@[](2);//计算乘积的实部\n    result.imag=@@[](2);//计算乘积的虚部\n    return result;\n}\n```\n小伙伴们，思考下：如果返回值也改为结构体指针，那我们返回result的地址可不可以呢？",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 84,
        "res": "[{'name': 'typedef', 'description': 'typedef是C语言中为某一已知类型添加别名的方式。可以使用typedef将原类型名定义为类型别名。'}, {'name': '结构体', 'description': '结构体是C语言中一种自定义的数据类型，可以将多个不同类型的变量组合在一起，形成一个新的数据类型。结构体可以包含多个成员，每个成员可以是不同的数据类型。'}, {'name': '指针', 'description': '指针是C语言中一种特殊的变量类型，用于存储内存地址。通过指针，可以间接访问和操作内存中的数据。指针可以指向任意类型的数据，包括基本类型、数组、结构体等。'}, {'name': '函数参数传递', 'description': 'C语言中函数参数传递有两种方式：传值和传址。传值是将实际参数的值复制给形式参数，函数内部对形式参数的修改不会影响实际参数。传址是将实际参数的地址传递给形式参数，函数内部对形式参数的修改会影响实际参数。传址方式可以提高程序的效率，特别是对于大型结构体等复杂数据类型。'}, {'name': '指针访问结构体成员', 'description': '通过指针访问结构体成员可以使用(*指针变量名).成员名的方式，也可以使用指针变量名->成员名的方式。后一种方式更简洁，推荐使用。'}]"
    },
    {
        "sortId": 5156,
        "id": "1336497981605834752",
        "title": "简单密码构建",
        "content": "近期校园“电信诈骗案”的一桩连着一桩的发生，让FJ对自己的银行账户提了个心，为了防止这类事情发生在自己身上，决定给银行卡设计一个密码，可是FJ却遇到这样的烦恼:如果为了好记用生日吧，容易被破解，不是很安全；如果设置不好记的密码，又担心自己会忘记；如果写在纸上呢？又怕纸被人发现或者弄丢……\n\n在一番绞尽脑汁之后，FJ自己设计了一个程序，这个程序的任务就是将一串拼音字母转换为6位数字（密码）。\n\nFJ可以使用任何好记的拼音串（比如名字，钟佳闱，就写：zhongjiawei）作为输入，最后输出6位数字。\n\n程序变换过程如下： 第一步：把拼音串6个一组折叠起来，比如zhongjiawei则变为： zhongj iawei\n\n第二步:把所有垂直在同一位置的字符的ascll码值相加，得出6个数字，如上面的例子，z(122)与i(105)、h(104)与a(97)、o(111)与w(119)、n(110)与e(101)、g(103)与i(105)分别相加，j(106)没有字母与之相对，保持不变，则得出的6个数为：\n\n227 201 230 211 208 106\n\n第三步:对每个数字处理，就是把每个位的数字相加，得出的如果不是一个一位数，那么继续处理，直到变成一位。 例如：227 => 2+2+7=11 => 1+1=2\n\n经过以上三步之后，得到的密码为：235417。这就是FJ最后的银行卡密码\n\n### 输入格式:\n\n第一行输入一个T(0 < T < 100),表示测试数据组数 每组数据占一行，代表给定的拼音串，长度不超过40,保证都是小写英文。\n\n### 输出格式:\n\n最后的银行卡密码，一组数据占一行。\n\n### 输入样例:\n\n```in\n2\nzhongjiawei\nhaohaoxuexi\n```\n\n### 输出样例:\n\n```out\n235417\n875843\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 85,
        "res": "[{'name': '字符串处理', 'description': '学生需要掌握字符串的基本操作，包括字符串的输入、输出、拼接、截取等操作。'}, {'name': 'ASCII码转换', 'description': '学生需要了解ASCII码表，并能够将字符转换为对应的ASCII码值。'}, {'name': '循环结构', 'description': '学生需要使用循环结构来实现对字符串的遍历和处理。'}, {'name': '条件判断', 'description': '学生需要使用条件判断语句来判断字符是否为字母，并进行相应的处理。'}, {'name': '数学运算', 'description': '学生需要使用数学运算来对每个数字进行位数相加，直到变成一位数。'}]"
    },
    {
        "sortId": 5157,
        "id": "1336462818641473536",
        "title": "输出最小的正整数",
        "content": "输入n个整数，找出最小的正整数并输出。\n\n### 输入格式:\n第一行输入一个正整数n(n<1000)，第二行输入n个整数，用空格隔开。\n\n### 输出格式:\n\n输出一个整数为n个输入的整数中最小的正整数，如果没有找到，输出\"not found\"。\n\n### 输入样例:\n\n```in\n3\n8 5 9\n```\n\n### 输出样例:\n\n```out\n5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 79,
        "res": "[{'name':'数组遍历'，'description':'通过循环遍历数组中的元素，找出最小的正整数并输出。'}, {'name':'条件判断'，'description':'判断数组中的元素是否为正整数，并找出最小的正整数并输出。'}, {'name':'循环'，'description':'通过循环遍历数组中的元素，找出最小的正整数并输出。'}, {'name':'变量'，'description':'定义变量来存储最小的正整数，并输出该变量的值。'}]"
    },
    {
        "sortId": 5158,
        "id": "1336321444487131136",
        "title": "A±B",
        "content": "输入两个整数A、B，计算A±B\n\n### 输入格式:\n\n输入两个整数，用空格隔开。\n\n### 输出格式:\n\n输出一个整数，如果B的值是正数输出A+B的值，如果B是负数，输出A-B的值，如果B是0，输出A的值。\n\n### 输入样例:\n\n```in\n1 1\n```\n\n### 输出样例:\n\n```out\n2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 66,
        "res": "[{'name':'基本运算','description':'本题涉及到C语言中的基本运算，包括加法和减法。学生需要了解如何使用加法运算符和减法运算符进行整数的加减运算。'}, {'name':'条件判断','description':'本题涉及到C语言中的条件判断，学生需要根据B的值的正负来选择进行加法运算还是减法运算。学生需要了解如何使用if语句进行条件判断。'}, {'name':'输入输出','description':'本题涉及到C语言中的输入输出，学生需要了解如何使用scanf函数进行输入，以及使用printf函数进行输出。'}]"
    },
    {
        "sortId": 5159,
        "id": "1336313524399665152",
        "title": "哥德巴赫猜想",
        "content": "哥德巴赫猜想大家都很熟悉，今日常见的猜想陈述为欧拉的版本，即任一大于2的偶数都可写成两个素数之和，亦称为“强哥德巴赫猜想”或“关于偶数的哥德巴赫猜想”。由于一个偶数可能有多组不同的素数对,所以要求输出两个彼此最接近的素数。\n### 输入格式:\n\n输入有多行，每一行有一个偶整数$$n$$($$5<n\\le 10000$$)\n\n### 输出格式:\n\n对于每个偶数,输出两个彼此最接近的素数,其和等于该偶数(较小的素数放在较大的素数前).\n\n### 输入样例:\n\n```in\n20\n30\n40\n```\n\n### 输出样例:\n\n```out\n7 13\n13 17\n17 23\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 66,
        "res": "[{'name':'素数','description':'素数是只能被1和自身整除的正整数，本题需要找出给定偶数的两个最接近的素数。'}, {'name':'循环','description':'本题需要使用循环来遍历所有可能的素数对。'}, {'name':'条件判断','description':'本题需要使用条件判断来判断一个数是否为素数。'}, {'name':'数组','description':'本题可以使用数组来存储已经找到的素数。'}]"
    },
    {
        "sortId": 5160,
        "id": "1336278652243177472",
        "title": "JPEG压缩中需要的蛇形填充",
        "content": "数字图像中，格式为的JPEG文件生成的过程中需要对8*8方块内像素实施蛇形遍历以进行后续的DFT变换编码。不过这里的任务是需要你按蛇形填充一个规模为n*n的方阵，用1到n平方的数值实施填充。\n蛇形填充方法为：\n对于每一条左下-右上的斜线，从左上到右下依次编号1,2,...,2n-1；按编号从小到大的顺序，将数字从小到大填入各条斜线，其中编号为奇数的从左下向右上填写，编号为偶数的从右上到左下填写。\n比如n=4时，方阵填充为如下形式：\n   1   2   6   7\n   3   5   8  13\n   4   9  12  14\n  10  11  15  16\n\n### 输入格式:\n\n输入只有一个整数n（n是不超过15的正整数），即方阵的大小\n\n### 输出格式:\n\n输出蛇形填充后得到的整数方阵。每个数字占4个字符宽。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n   1   2   6   7\n   3   5   8  13\n   4   9  12  14\n  10  11  15  16\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 12,
        "res": "[{'name':'蛇形填充','description':'数字图像中，格式为的JPEG文件生成的过程中需要对8*8方块内像素实施蛇形遍历以进行后续的DFT变换编码。不过这里的任务是需要你按蛇形填充一个规模为n*n的方阵，用1到n平方的数值实施填充。蛇形填充方法为：对于每一条左下-右上的斜线，从左上到右下依次编号1,2,...,2n-1；按编号从小到大的顺序，将数字从小到大填入各条斜线，其中编号为奇数的从左下向右上填写，编号为偶数的从右上到左下填写。比如n=4时，方阵填充为如下形式：1   2   6   7 3   5   8  13 4   9  12  14 10  11  15  16'}]"
    },
    {
        "sortId": 5161,
        "id": "1336207709256839168",
        "title": "找最大数和最小数",
        "content": "本题目要求读入3个整数A、B、C，找到最大数和最小数，并输出结果。\n\n### 输入格式:\n\n输入在一行中给出3个绝对值不超过1000的整数A、B和C，以空格分隔。\n\n### 输出格式:\n\n在一行中最大数和最小数，“max=?,min=?”。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n18 98 59\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nmax=98,min=18\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 170,
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'输入输出'，'description':'C语言中的输入输出函数，包括scanf和printf等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句和switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句，包括for循环、while循环和do-while循环等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、关系运算符和逻辑运算符等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组和多维数组等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用和函数的参数传递等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算和指针的应用等。'}, {'name':'字符串'，'description':'C语言中的字符串，包括字符串的定义、字符串的输入输出和字符串的处理等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的成员和结构体的应用等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、文件的读写和文件的关闭等。'}, {'name':'错误处理'，'description':'C语言中的错误处理，包括错误码的定义、错误处理函数的编写和错误处理的应用等。'}]"
    },
    {
        "sortId": 5162,
        "id": "1336190732245168128",
        "title": "有以下函数，它的作用是（ ）```fun(char *pa,char *pb){    while((*pa!='\\0')&&(",
        "content": "有以下函数，它的作用是（ ）\n```\nfun(char *pa,char *pb)\n{\n    while((*pa!='\\0')&&(*pb!='\\0')&&(*pa==*pb))\n    {\n        pa++;\n        pb++;\n    }\n    return (*pa-*pb);\n}\n```\n@[](2)\n\nA. 计算pa和pb所指向字符串的长度之差\nB. 将pb所指字符串复制到pa所指字符串中\nC. 将pb所指字符串连接到pa所指字符串后面\nD. 比较pa和pb所指字符串的大小",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 107,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，函数的参数是指针类型，通过指针可以操作字符串的内容。'}, {'name': '字符串', 'description': '字符串是由字符组成的数组，在C语言中以字符数组的形式表示。在本题中，函数的参数是指向字符数组的指针，通过指针可以访问和操作字符串的内容。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在本题中，使用了while循环来遍历字符串，直到遇到字符串结束符或者遇到不相等的字符为止。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在本题中，使用了条件语句来判断字符串是否相等，并根据判断结果返回不同的值。'}]"
    },
    {
        "sortId": 5163,
        "id": "1336184574470025216",
        "title": "以下程序的输出结果是（ ）```#include<stdio.h>void main(){   char s[]=\"159\",*",
        "content": "以下程序的输出结果是（ ）\n```\n#include<stdio.h>\nvoid main()\n{\n   char s[]=\"159\",*p;\n   p=s;\n   printf(\"%c\",*p++);\n   printf(\"%c\",*p++);\n}\n```\n@[](2)\n\nA. 16\nB. 15\nC. 12\nD. 59",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 86,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，指针p被赋值为数组s的首地址，通过*p++可以依次访问数组中的元素。'}, {'name': '字符数组', 'description': '字符数组是一种特殊的数组，用于存储字符类型的数据。在本题中，数组s存储了一个字符串\"159\"，通过指针p可以逐个访问数组中的字符。'}, {'name': '输出格式', 'description': 'printf函数用于输出格式化的数据。在本题中，通过printf(\"%c\",*p++)可以输出指针p所指向的字符。'}]"
    },
    {
        "sortId": 5164,
        "id": "1336183351172218880",
        "title": "以下语句或语句组中，能正确进行字符串赋值的是（ ）",
        "content": "以下语句或语句组中，能正确进行字符串赋值的是（ ）\n\n\n@[](2)\n\nA. ```\nchar *p;\n*p=\"right!\";\n```\nB. ```\nchar s[10];\ns=\"right!\";\n```\nC. ```\nchar s[10];\n*s=\"right!\";\n```\nD. ```\nchar *p=\"right!\";\n```",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 280,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，用于存储变量的内存地址。通过指针可以间接访问和修改变量的值。在本题中，选项A和D中使用了指针来进行字符串赋值。'}]"
    },
    {
        "sortId": 5165,
        "id": "1336180402400346112",
        "title": "恢复基因链",
        "content": "世界上最富有的人想必大家都已经知道了，是garden，由于garden钱实在是太多了，他投了大量的钱给科学研究室，但是最近科学研究室发现了一些缺失的基因链，他们一时间不能马上恢复这个基因链，于是，garden打算重金悬赏能恢复这些基因链的勇士。 首先给出一条字符串，仅含有$$'A'$$, $$'C'$$, $$'G'$$, $$'T'$$, $$'?'$$，$$5$$种字符，其中$$'?'$$代表缺失的基因，已知该基因为猛犸象基因，即基因链中，$$ACGT$$每一种核苷酸数量相等，现在要求大家能恢复其原来的基因链，如果答案存在多种情况，输出字典序最小的基因链。所谓字典序最小是指字母的顺序排在前的为字典序小的，例如$$ABC$$的字典序比$$BAC$$的字典序要小，因为字母序上，$$'A'$$排在$$'B'$$之前。如果字符串第一个字母相同，则比较第二个字母的字典序，例如$$ABC$$的字典序比$$ACB$$的要小。\n\n### 输入格式:\n\n第一行包含整数$$n$$（$$4\\le n\\le 255$$） - 基因组的长度。\n\n第二行包含长度为$$n$$的字符串编码的基因组。它由字符$$'A'$$，$$'C'$$，$$'G'$$，$$'T'$$和$$'?'$$组成。\n\n### 输出格式:\n\n如果可以解码基因组，输出。如果有多个答案，输出字典序最小的基因链。如果不可能，输出$$-1$$\n\n### 输入样例:\n\n```in\n8\nAG?C??CT\n```\n\n### 输出样例:\n\n```out\nAGACGTCT\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 70,
        "res": "[{'name':'字符串处理'，'description':'对给定的字符串进行处理，包括字符替换、字符比较、字符串拼接等操作。'}, {'name':'条件判断'，'description':'根据给定的条件进行判断，决定程序的执行路径。'}, {'name':'循环'，'description':'使用循环结构对给定的字符串进行遍历和处理。'}, {'name':'字典序排序'，'description':'对给定的字符串进行字典序排序，找到字典序最小的基因链。'}]"
    },
    {
        "sortId": 5166,
        "id": "1336177743337123840",
        "title": "以下程序的输出结果是（ ）```#include<stdio.h>void main(){    int a[3][3],*p,",
        "content": "以下程序的输出结果是（ ）\n```\n#include<stdio.h>\nvoid main()\n{\n    int a[3][3],*p,i;\n    p=a;\n    for(i=0;i<9;i++)\n        p[i]=i;\n    for(i=0;i<3;i++)\n        printf(\"%d\",a[1][i]);\n}\n```\n@[](2)\n\nA. 012\nB. 234\nC. 123\nD. 345",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 116,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，通过指针p来访问和修改二维数组a的元素。'}, {'name': '数组', 'description': '数组是一种存储相同类型数据的集合。在本题中，数组a是一个二维数组，用于存储整型数据。通过数组下标可以访问和修改数组中的元素。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在本题中，使用for循环来给数组a赋值和输出数组元素。'}]"
    },
    {
        "sortId": 5167,
        "id": "1336169022947409920",
        "title": "图书馆模拟系统",
        "content": "这是一个主观题模板。请在这里写题目描述。\n",
        "type": "SUBJECTIVE",
        "difficulty": 2,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 6,
        "res": "[{'name':'C语言基础','description':'C语言基础知识点包括数据类型、变量、运算符、控制语句等，是学习C语言的基础。'}, {'name':'函数','description':'函数是C语言中的重要概念，包括函数的定义、调用、参数传递等。'}, {'name':'数组','description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据。学习数组可以提高对数据的处理能力。'}, {'name':'指针','description':'指针是C语言中的重要概念，用于处理内存地址和数据的关系。学习指针可以提高对内存的理解和操作能力。'}, {'name':'字符串','description':'字符串是C语言中的一种特殊的数组，用于存储字符序列。学习字符串可以提高对字符处理的能力。'}, {'name':'结构体','description':'结构体是C语言中的一种自定义数据类型，用于存储多个不同类型的数据。学习结构体可以提高对复杂数据的处理能力。'}, {'name':'文件操作','description':'文件操作是C语言中的一种重要功能，用于读写文件。学习文件操作可以提高对文件的处理能力。'}]"
    },
    {
        "sortId": 5168,
        "id": "1336159850776313856",
        "title": "以下程序的输出结果是（ ）```prt(int *m,int n){    int i;    for(i=0;i<n;i++)",
        "content": "以下程序的输出结果是（ ）\n```\nprt(int *m,int n)\n{\n    int i;\n    for(i=0;i<n;i++)\n        m[i]++;\n}\n#include<stdio.h>\nvoid main()\n{\n    int a[]={1,2,3,4,5},i;\n    prt(a,5);\n    for(i=0;i<5;i++)\n        printf(\"%d,\",a[i]);\n}\n```\n@[](2)\n\nA. 1,2,3,4,5,\nB. 2,3,4,5,6,\nC. 3,4,5,6,7,\nD. 2,3,4,5,1,",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 89,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改该地址上存储的值。在本题中，函数prt的参数m是一个指向整型变量的指针，通过对m[i]的操作，可以修改a数组中的元素值。'}, {'name': '函数', 'description': '函数是C语言中的一种代码组织方式，它可以接受输入参数并返回一个值。在本题中，函数prt是一个没有返回值的函数，它接受一个指向整型变量的指针和一个整型参数n作为输入，通过对指针所指向的变量进行操作，实现了对数组a的元素进行递增的功能。'}, {'name': '数组', 'description': '数组是C语言中的一种数据结构，它可以存储多个相同类型的元素。在本题中，数组a存储了5个整型元素，通过循环遍历数组，可以输出数组中的元素值。'}]"
    },
    {
        "sortId": 5169,
        "id": "1336126144887681024",
        "title": "运行以下程序时，输入1(空格)2(空格)3(回车)的输出结果为(1、2、3之间有空格)( )```#include<stdio.",
        "content": "运行以下程序时，输入1(空格)2(空格)3(回车)的输出结果为(1、2、3之间有空格)( )\n```\n#include<stdio.h>\nvoid main()\n{\n    int a[3][2]={0},(*p)[2],i,j;\n    for(i=0;i<2;i++)\n    {\n        p=a+i;\n        scanf(\"%d\",p);\n        p++;\n    }\n    for(i=0;i<3;i++)\n    {\n        for(j=0;j<2;j++)\n            printf(\"%2d\",a[i][j]);\n        printf(\"\\n\");\n    }\n}\n```\n@[](2)\n\nA. ```\n1 0\n2 0\n3 0\n```\nB. ```\n1 2\n3 0\n0 0\n```\nC. ```\n1 0\n2 0\n0 0\n```\nD. 产生错误信息",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 66,
        "res": "[{'name': '二维数组', 'description': '二维数组是由多个一维数组组成的数据结构，可以用来表示矩阵或表格等数据结构。在C语言中，可以通过指针和下标的组合来访问二维数组的元素。'}, {'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，用来存储变量的内存地址。通过指针，可以间接访问和修改变量的值，还可以动态分配内存空间。在本题中，使用指针p来指向二维数组a的每一行。'}, {'name': '输入输出', 'description': '输入输出是C语言程序中常用的操作，可以通过标准库函数scanf和printf来实现。在本题中，使用scanf函数从标准输入读取数据，使用printf函数将结果输出到标准输出。'}, {'name': '循环', 'description': '循环是C语言中的一种控制结构，用来重复执行一段代码。在本题中，使用for循环来遍历二维数组a，并使用嵌套的for循环来输出数组的元素。'}]"
    },
    {
        "sortId": 5170,
        "id": "1336121967365091328",
        "title": "以下程序的输出结果是( )```#include<stdio.h>void main(){    int a[]={1,2,3,",
        "content": "以下程序的输出结果是( )\n```\n#include<stdio.h>\nvoid main()\n{\n    int a[]={1,2,3,4,5,6,7,8,9,0},*p;\n\t\tfor(p=a;p<a+10;p++)\n\t\t      printf(\"%d,\",*p);\n\t}\n```\n\n@[](1)\n\nA. 1,2,3,4,5,6,7,8,9,0,\nB. 2,3,4,5,6,7,8,9,10,1,\nC. 0,1,2,3,4,5,6,7,8,9,\nD. 1,1,1,1,1,1,1,1,1,1,",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 1,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 104,
        "res": "[{'name':'指针','description':'指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。本题涉及到了指针的使用，通过指针p遍历数组a，并输出数组元素的值。'}, {'name':'数组','description':'数组是一种存储相同类型数据的集合。本题中的变量a是一个整型数组，存储了10个整数。通过数组名和下标可以访问数组中的元素。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构。本题中使用了for循环，通过指针p遍历数组a，并输出数组元素的值。循环条件为p<a+10，即指针p小于数组a的末尾地址。'}, {'name':'输出','description':'输出是将程序运行结果显示在屏幕上的过程。本题中使用了printf函数，通过循环输出数组a中的元素值。'}]"
    },
    {
        "sortId": 5171,
        "id": "1335920274241253376",
        "title": "YooQ与《Charlotte》",
        "content": "众所周知，$$YooQ$$ 胆大包天（bushi），竟趁着队友在机房刻苦训练之时，一个人待在寝室里开开心心地看动漫——《Charlotte》。这彻底惹怒了身为老二刺螈却刻苦训练而没去看动漫的 $$LC$$，于是某天的 $$HH:MM$$ 时刻，$$LC$$ 把 $$YooQ$$ 关在了机房，让他刷一套共有 $$N(1<=N<=15)$$ 道题的训练题集，不刷完不准看《Charlotte》。现已知每道题都有一个对应的难度 $$i(1<=i<=5)$$ ，且 $$YooQ$$ 解决一道难度为 $$i$$ 的题目要花费的时间为 $$T_i$$ 分钟 ，他想知道自己什么时刻才能刷完这套题集，然后去看自己最喜欢的友利奈绪，但他的数学不是很好，算了半天也没算出来，你能帮帮他吗？\n\n### 输入格式:\n在第一行中给出一个正整数 $$N$$，表示总共有 $$N$$ 道题目、以及一个时刻  $$HH:MM$$，代表开始刷题的时刻。\n\n接下来一行，给出 $$N$$ 个整数 $$a_1,a_2......a_n$$ ，$$a_i$$ 代表第 $$i$$ 道题的难度。$$(1<=a_i<=5)$$\n\n最后一行，给出五个整数 $$T_1,T_2,T_3,T_4,T_5$$ ，$$T_i$$ 代表解决难度为 $$i$$ 的题目所要花费的时间。$$(T_1<T_2<T_3<T_4<T_5)$$\n\n输入数据保证开始时刻是一个 $$24$$ 小时制合法时刻，且刷完这套题集所花费的总时间不会超过 $$1440$$ 分钟（毕竟 $$LC$$ 也不是什么魔鬼）。\n### 输出格式:\n\n在一行中以 $$hh:mm$$ 的格式输出一个时刻，代表 $$YooQ$$ 刷完题集时的时刻。\n\n注意，小时和分钟都请保留两位输出，例如，一点零一分请输出 $$01:01$$。\n\n### 输入样例:\n\n\n\n```in\n7 18:00\n1 2 5 3 4 5 1 \n1 2 3 4 5\n```\n\n### 输出样例:\n\n\n\n```out\n18:21\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 11,
        "res": "[{'name':'输入输出','description':'输入格式:在第一行中给出一个正整数 N，表示总共有 N 道题目、以及一个时刻  HH:MM ，代表开始刷题的时刻。接下来一行，给出 N 个整数 a1,a2......an ，ai 代表第 i 道题的难度。(1<=ai<=5)最后一行，给出五个整数 T1,T2,T3,T4,T5 ，Ti 代表解决难度为 i 的题目所要花费的时间。(T1<T2<T3<T4<T5)输入数据保证开始时刻是一个 24 小时制合法时刻，且刷完这套题集所花费的总时间不会超过 1440 分钟（毕竟 LC 也不是什么魔鬼）。输出格式:在一行中以 hh:mm 的格式输出一个时刻，代表 YooQ 刷完题集时的时刻。注意，小时和分钟都请保留两位输出，例如，一点零一分请输出 01:01。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构可以根据条件判断来决定是否继续执行循环体内的代码。'}, {'name':'条件判断','description':'条件判断是根据给定的条件来决定程序的执行路径。在C语言中，常用的条件判断结构有if语句和switch语句。if语句根据条件的真假来决定是否执行某段代码，switch语句根据表达式的值来选择执行哪个分支。'}, {'name':'数组','description':'数组是一种存储多个相同类型数据的结构。在C语言中，数组的声明和使用非常灵活。数组可以通过下标来访问和修改其中的元素，下标从0开始。'}, {'name':'变量','description':'变量是程序中用于存储数据的一种数据类型。在C语言中，变量需要先声明后使用。变量的声明包括变量的类型和名称，变量的使用可以进行赋值和读取操作。'}, {'name':'数学运算','description':'数学运算是程序中常用的操作之一。在C语言中，常用的数学运算符有加法、减法、乘法、除法和取余等。数学运算可以对常量和变量进行操作，得到一个结果。'}, {'name':'字符串处理','description':'字符串处理是程序中常用的操作之一。在C语言中，字符串是由字符组成的数组，可以通过下标来访问和修改其中的字符。字符串处理包括字符串的拼接、截取、查找和替换等操作。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，函数可以有返回值和参数，可以根据需要进行定义和调用。函数的定义包括函数的返回类型、函数名和参数列表，函数的调用可以传递参数并获取返回值。'}, {'name':'指针','description':'指针是一种特殊的变量，用于存储内存地址。在C语言中，指针可以通过取地址和解引用操作来获取和修改内存中的数据。指针的使用可以提高程序的效率和灵活性，但也需要注意指针的安全性和正确性。'}, {'name':'文件操作','description':'文件操作是程序中常用的操作之一。在C语言中，可以通过文件指针来打开、读取、写入和关闭文件。文件操作可以对文本文件和二进制文件进行操作，可以进行文件的读取和写入操作。'}, {'name':'结构体','description':'结构体是一种自定义的数据类型，可以包含多个不同类型的成员变量。在C语言中，结构体可以通过定义和声明来使用，可以通过成员运算符来访问和修改其中的成员变量。结构体的使用可以方便地组织和管理多个相关的数据。'}, {'name':'指针运算','description':'指针运算是对指针进行操作的一种方式。在C语言中，可以对指针进行加法、减法和比较等运算。指针运算可以用于数组的遍历和访问，也可以用于动态内存的分配和释放。'}, {'name':'递归','description':'递归是一种函数调用自身的方式。在C语言中，递归可以用于解决一些需要重复执行相同操作的问题。递归函数需要有一个终止条件，否则会导致无限递归。递归的使用可以简化程序的实现，但也需要注意递归的效率和栈空间的使用。'}, {'name':'指针数组','description':'指针数组是一个数组，其中的元素都是指针。在C语言中，可以通过指针数组来存储多个指针，每个指针可以指向不同类型的数据。指针数组的使用可以方便地管理多个指针，可以用于存储和操作动态分配的内存。'}, {'name':'动态内存分配','description':'动态内存分配是在程序运行时根据需要分配和释放内存的一种方式。在C语言中，可以使用malloc函数来动态分配内存，使用free函数来释放内存。动态内存分配可以解决静态内存不足的问题，但也需要注意内存泄漏和内存溢出的情况。'}, {'name':'字符串数组','description':'字符串数组是一个数组，其中的元素都是字符串。在C语言中，可以通过字符串数组来存储多个字符串，每个字符串可以有不同的长度。字符串数组的使用可以方便地存储和操作多个字符串，可以用于字符串的排序和查找等操作。'}, {'name':'二维数组','description':'二维数组是一个数组，其中的元素都是数组。在C语言中，可以通过二维数组来存储多个相同类型的数据，可以用于表示矩阵和表格等结构。二维数组的使用可以方便地访问和修改其中的元素，可以用于多维数据的存储和处理。'}, {'name':'字符数组','description':'字符数组是一个数组，其中的元素都是字符。在C语言中，可以通过字符数组来存储和处理字符串，可以用于字符串的拼接、截取和比较等操作。字符数组的使用可以方便地操作字符串，但也需要注意字符数组的长度和结束符的处理。'}, {'name':'指针函数','description':'指针函数是一种返回指针的函数。在C语言中，可以定义和调用返回指针的函数，可以通过指针函数来返回动态分配的内存和数组等数据。指针函数的使用可以方便地返回和操作指针，可以用于实现一些复杂的数据结构和算法。'}, {'name':'结构体数组','description':'结构体数组是一个数组，其中的元素都是结构体。在C语言中，可以通过结构体数组来存储多个结构体，每个结构体可以有不同的成员变量。结构体数组的使用可以方便地存储和操作多个结构体，可以用于实现一些复杂的数据结构和算法。'}, {'name':'指针结构体','description':'指针结构体是一个结构体，其中的成员变量都是指针。在C语言中，可以通过指针结构体来存储和操作动态分配的内存和数组等数据。指针结构体的使用可以方便地管理多个指针，可以用于实现一些复杂的数据结构和算法。'}, {'name':'链表','description':'链表是一种动态数据结构，可以根据需要分配和释放内存。在C语言中，可以通过链表来存储和操作大量的数据，可以实现插入、删除和查找等操作。链表的使用可以方便地处理动态数据，但也需要注意链表的指针和内存管理。'}, {'name':'文件指针','description':'文件指针是用于操作文件的一种指针。在C语言中，可以通过文件指针来打开、读取、写入和关闭文件。文件指针的使用可以方便地进行文件的操作，可以实现文件的读取和写入等功能。文件指针的使用需要注意文件的打开和关闭，以及文件的读写权限。'}, {'name':'位运算','description':'位运算是对二进制位进行操作的一种方式。在C语言中，可以使用位运算符来进行位与、位或、位异或和位取反等操作。位运算可以用于对二进制数据进行处理和优化，可以提高程序的效率和灵活性。'}, {'name':'枚举','description':'枚举是一种自定义的数据类型，可以列举出一组有限的取值。在C语言中，可以通过枚举来定义一组常量，可以用于表示状态、选项和错误码等信息。枚举的使用可以方便地管理和操作一组相关的常量，可以提高程序的可读性和可维护性。'}, {'name':'预处理指令','description':'预处理指令是在编译之前对源代码进行处理的一种方式。在C语言中，可以使用预处理指令来包含头文件、定义宏和进行条件编译等操作。预处理指令可以提高程序的可移植性和可维护性，可以根据不同的编译选项来生成不同的代码。'}, {'name':'类型转换','description':'类型转换是将一种数据类型转换为另一种数据类型的一种操作。在C语言中，可以使用类型转换运算符来进行类型转换，可以将一种数据类型的值赋给另一种数据类型的变量。类型转换可以用于数据的格式化和计算，但也需要注意类型的兼容性和精度的损失。'}, {'name':'逻辑运算','description':'逻辑运算是对逻辑表达式进行操作的一种方式。在C语言中，可以使用逻辑运算符来进行逻辑与、逻辑或和逻辑非等操作。逻辑运算可以用于条件判断和循环控制，可以根据条件的真假来决定程序的执行路径。'}, {'name':'位字段','description':'位字段是一种用于存储和操作二进制位的数据结构。在C语言中，可以使用位字段来定义和操作二进制位的组合，可以用于节省内存和提高程序的效率。位字段的使用需要注意位的顺序和对齐方式，以及位字段的大小和访问方式。'}, {'name':'宏定义','description':'宏定义是一种用于替换文本的预处理指令。在C语言中，可以使用宏定义来定义一组常量、函数和代码片段等，可以用于简化程序的编写和调试。宏定义可以提高程序的可读性和可维护性，但也需要注意宏的作用域和展开方式。'}, {'name':'指针运算','description':'指针运算是对指针进行操作的一种方式。在C语言中，可以对指针进行加法、减法和比较等运算。指针运算可以用于数组的遍历和访问，也可以用于动态内存的分配和释放。'}, {'name':'递归','description':'递归是一种函数调用自身的方式。在C语言中，递归可以用于解决一些需要重复执行相同操作的问题。递归函数需要有一个终止条件，否则会导致无限递归。递归的使用可以简化程序的实现，但也需要注意递归的效率和栈空间的使用。'}, {'name':'指针数组','description':'指针数组是一个数组，其中的元素都"
    },
    {
        "sortId": 5172,
        "id": "1335914859235405824",
        "title": "反转的最大矩阵",
        "content": "对于给定的M行N列的位矩阵A（值只取0或1），你可以对矩阵的某行或某列整体进行按位取反（指整个行或列中0和1的互换），我们称之为反转，请编写函数，返回该矩阵通过适当的反转后，按行的二进制位组成的整数之和的最大值。\n\n### 输入样例：\n第一行两个整数M,N：位矩阵的行数与列数，余下M行N列由空格分隔的0或1的整数（你可以认为是M行的二进制数，每行N个二进制位）。\n```in\n4 4\n0 0 1 1\n1 0 1 0\n1 1 0 0\n0 1 1 0\n```\n### 输出样例：\n```out\n49\n```\n函数返回一个整数，反转后各行二进制位组成的整数和的最大值：\n一种可能行的方案是（先反转的首，末行，再对后两列进行了反转）：\n\n1 1 1 1  --->15\n\n1 0 0 1  -->9\n\n1 1 1 1  -->15\n\n1 0 1 0  -->10\n\n15+9+15+10=49\n\n\n### 函数接口定义：\n```c\nunsigned int fun (char **D, int M,int N);\n```\n/* 请在这里填写答案 */\n\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 19,
        "res": "[{'name':'位矩阵反转','description':'对给定的M行N列的位矩阵进行按行或按列的反转操作，返回反转后各行二进制位组成的整数之和的最大值。'}]"
    },
    {
        "sortId": 5173,
        "id": "1335903148692500480",
        "title": "WaWa机",
        "content": "在学校 $$D$$ 栋的一个小隔间里，隐藏着一个神奇的 $$WaWa$$ 机。小隔间只有在星期天的时候才会开门！为什么叫  $$WaWa$$ 机呢?因为在集训队的队员们囤积了一星期的 $$Wa$$ 题次数后，能以去小隔间抓相同次数的 $$WaWa$$。 但是 $$YooQ$$ 不想让大家拿走 $$WaWa$$，也就是说不能拿走 $$WaWa$$，只能抓个开心。\n\n\n\n\\\n$$WaWa$$ 机里有 $$N$$ 个娃娃，从左到右依次摆放。每次抓取只能从左向右地将某个右边的 $$WaWa$$ 抓取到左边，只有当**“抓的 $$WaWa$$ 的高度 $$+$$ 当前经过 $$ WaWa$$ 的高度$$<=$$ $$WaWa$$ 机的高度”**才能通过当前 $$WaWa$$，从而将这个 $$WaWa$$ 抓取到左边。\n\n队员们想把小的 $$WaWa$$ 尽量挪到前面（也就是左边）。现在告诉你 $$N$$ 个 $$WaWa$$ 的摆放情况以及一个数 $$H$$，表示 $$WaWa$$ 机的高度。\n\n请你输出当队员们完成任务时，$$WaWa$$ 机里的 $$WaWa$$ 的高度序列。（从左到右）\n### 输入格式:\n\n在第一行中输入一个整数 $$T$$，表示有 $$T$$ 组测试数据。$$(1<=T<=10)$$\n\n接下来对于每组输入数据，先于第一行给出两个整数 $$N$$ 和 $$H$$，$$N$$ 表示有 $$N$$ 个 $$WaWa$$，$$H$$ 表示当前  $$WaWa$$ 机的高度。$$(1<=N<=5e3,1<=H<=1e8)$$\n\n再于第二行给出 $$N$$ 个整数 $$a_1,a_2......a_n$$， $$a_i$$ 表示原来 $$WaWa$$ 机里面第 $$i$$ 个 $$WaWa$$ 的高度。$$(1<=a_i<=H)$$\n\n### 输出格式:\n对于每组数据，在一行中输出一行数字表示当队员们完成任务时，$$WaWa$$ 机里的 $$WaWa$$ 的高度序列。数字间以空格分割，且行末没有多余空格。\n\n### 输入样例:\n\n\n\n```in\n3\n8 10\n5 1 2 9 2 8 5 2\n5 10\n4 5 3 2 1\n5 8\n7 6 5 4 2\n```\n\n### 输出样例:\n\n\n```out\n1 2 5 9 2 2 8 5\n1 2 3 4 5\n7 2 6 5 4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 14,
        "res": "[{'name':'数组', 'description':'数组是一种存储多个相同类型数据的连续内存空间的数据结构。在C语言中，数组的下标从0开始，可以通过下标访问数组中的元素。本题中，需要使用数组来存储每个WaWa的高度。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环和while循环。本题中，可以使用循环来遍历数组，进行相应的操作。'}, {'name':'条件判断', 'description':'条件判断是根据条件的真假来执行不同的代码分支。在C语言中，常用的条件判断结构有if语句和switch语句。本题中，可以使用条件判断来判断是否满足抓取条件，以及确定抓取的位置。'}]"
    },
    {
        "sortId": 5174,
        "id": "1335845689978601472",
        "title": "简单输入练习",
        "content": "本题目要求输出一条语句\"Hello C!\"。\n\n### 输入格式:\n\n此题无输入\n\n### 输出格式:\n\n本题目要求输出一条语句\"Hello C!\"。注意语句中的均为英文标点。\n\n### 输入样例:\n\n本题无输入\n\n```in\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nHello C!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 38,
        "res": "[{'name':'输出语句','description':'本题目要求输出一条语句\"Hello C!\"。注意语句中的均为英文标点。'}]"
    },
    {
        "sortId": 5175,
        "id": "1335802059762724864",
        "title": "结构体成员使用",
        "content": "在学习了用结构体的方式表示点和矩形之后，你一定会完成一个判断给定点是否在给定矩形中的操作。\n\n### 输入格式:\n输入两行，第一行输入两个整数，由空格分隔，分别表示点的横坐标和纵坐标；\n\n第二行输入四个整数，任意两个整数之间用一个空格分隔，分别表示矩形某一条对角线上的两个顶点，前两个整数表示其中一个顶点的横坐标和纵坐标；后两个整数表示另一个顶点的横坐标和纵坐标。\n\n题目保证所有输入的整数都大于等于 -1000并且小于等于 1000。矩形的横向边平行于 x 轴,纵向边平行于 y 轴,且面积一定大于 0。\n### 输出格式:\n输出为一行,如果给出的点在给出的矩形内或矩形边上,则输出YES，如果给出的点在给出的点在给出的矩形外,则输出NO。\n### 输入样例1:\n```\n1 4\n0 0 5 5\n```\n### 输出样例1:\n```\nYES\n```\n### 输入样例2:\n```\n1 4\n3 3 0 0\n```\n### 输出样例2:\n```\nNO\n```\n思路：只要给定点在矩阵两个横坐标之间和两个纵坐标之间，则在该矩阵内。\n```c++\n#include <stdio.h>\n#include <math.h>\nstruct point {\n    int x;\n    int y;\n};\n typedef struct rectangle{\n   struct point p1;\n   struct point p2;\n}rectangle;\nvoid swap(int *,int *);\nint main() {\n   struct point p;\n    rectangle r;\n\tscanf(\"%d%d\",@@[](1),&p.y);\n    scanf(\"%d%d%d%d\",@@[](1),&r.p1.y,&r.p2.x,&r.p2.y);\n    if(r.p1.x>r.p2.x) \n\t{\n\t\tswap(@@[](1));//让r.p1.x值小于等于r.p2.x\n\t}\n    if(r.p1.y>r.p2.y) \n\t{\n\t\tswap(@@[](1));//让r.p1.y值小于等于r.p2.y\n\t}\n    if(@@[](1))\n    {\n        printf(\"YES\");\n\t}\n    else \n    {\n    \tprintf(\"NO\");\n\t}\n    return 0;\n}\nvoid swap(int *a,int *b){\n   @@[](1)\n    t=*a;\n    *a=*b;\n    *b=t;\n}\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 111,
        "res": "[{'name':'结构体','description':'结构体是一种自定义的数据类型，可以将不同类型的数据组合在一起，形成一个新的数据类型。在这个习题中，使用了结构体来表示点和矩形。'},\n{'name':'输入输出','description':'在C语言中，可以使用scanf函数来进行输入操作，使用printf函数来进行输出操作。在这个习题中，使用了scanf函数来读取输入的点和矩形的坐标，使用printf函数来输出结果。'},\n{'name':'条件语句','description':'条件语句是根据条件的真假来执行不同的代码块。在这个习题中，使用了if语句来判断给定点是否在给定矩形内。'},\n{'name':'函数','description':'函数是一段完成特定任务的代码块，可以通过函数的调用来执行这段代码。在这个习题中，使用了自定义的swap函数来交换两个整数的值。'},\n{'name':'运算符','description':'运算符是用来进行各种运算操作的符号。在这个习题中，使用了比较运算符（>、<）来判断矩形的坐标顺序是否正确。'}]"
    },
    {
        "sortId": 5176,
        "id": "1335767196175515648",
        "title": "大家加油啊",
        "content": "考试周到了，周围的同学们都在赶着趟去图书馆复习、刷题，而可怜的 $$LC$$ 却还要为了ACM集训队和校赛的事情忙东忙西的，出题、验题、组织考核、写PPT、准备讲题，他真的太难了，与此同时，他也深知大家作为苦逼的大学牲在考试周将会有多么折磨，所以，他想给大家、同时也给自己加油。\n### 输入格式:\n\n本题无任何输入。\n\n### 输出格式:\n在一行中输出\"minna ganbate\"，不带引号。\n\n### 输入样例:\n\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nminna ganbate\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 11,
        "res": "[{'name':'基本语法'，'description':'C语言的基本语法，包括变量、数据类型、运算符、控制语句等。'}, {'name':'函数'，'description':'C语言中函数的定义、调用、参数传递等。'}, {'name':'数组'，'description':'C语言中数组的定义、访问、操作等。'}, {'name':'指针'，'description':'C语言中指针的定义、使用、指针与数组的关系等。'}, {'name':'字符串'，'description':'C语言中字符串的定义、操作、字符串与字符数组的关系等。'}, {'name':'结构体'，'description':'C语言中结构体的定义、访问、结构体与指针的关系等。'}, {'name':'文件操作'，'description':'C语言中文件的打开、读写、关闭等操作。'}, {'name':'动态内存分配'，'description':'C语言中动态内存分配的方法、使用、释放等。'}, {'name':'预处理指令'，'description':'C语言中预处理指令的使用、宏定义、条件编译等。'}, {'name':'递归'，'description':'C语言中递归的概念、递归函数的编写、递归与循环的比较等。'}, {'name':'位运算'，'description':'C语言中位运算的概念、位运算符的使用、位运算与逻辑运算的区别等。'}, {'name':'指针与函数'，'description':'C语言中指针与函数的关系、指针作为函数参数、指针作为函数返回值等。'}, {'name':'多文件编程'，'description':'C语言中多文件编程的方法、头文件的使用、函数的声明与定义等。'}, {'name':'数据结构'，'description':'C语言中常见的数据结构，如链表、栈、队列、树等。'}, {'name':'算法'，'description':'C语言中常见的算法，如排序、查找、递归算法等。'}, {'name':'错误处理'，'description':'C语言中错误处理的方法、错误码的定义、异常处理等。'}, {'name':'编码规范'，'description':'C语言中的编码规范，如命名规范、注释规范、缩进规范等。'}, {'name':'调试技巧'，'description':'C语言程序调试的技巧、常见的调试工具、调试方法等。'}, {'name':'性能优化'，'description':'C语言程序性能优化的方法、常见的优化技巧、性能测试等。'}, {'name':'并发编程'，'description':'C语言中并发编程的方法、线程的创建、同步与互斥等。'}, {'name':'网络编程'，'description':'C语言中网络编程的方法、套接字的使用、网络通信等。'}, {'name':'图形界面编程'，'description':'C语言中图形界面编程的方法、图形库的使用、界面设计等。'}, {'name':'嵌入式编程'，'description':'C语言中嵌入式编程的方法、硬件接口的使用、外设驱动等。'}, {'name':'面向对象编程'，'description':'C语言中面向对象编程的方法、类的定义、继承与多态等。'}, {'name':'异常处理'，'description':'C语言中异常处理的方法、异常的捕获、异常的抛出等。'}, {'name':'模块化编程'，'description':'C语言中模块化编程的方法、模块的划分、接口设计等。'}, {'name':'代码重构'，'description':'C语言中代码重构的方法、重构的原则、重构的技巧等。'}, {'name':'软件工程'，'description':'C语言中软件工程的基本概念、开发流程、项目管理等。'}, {'name':'安全编程'，'description':'C语言中安全编程的方法、常见的安全漏洞、安全测试等。'}, {'name':'代码审查'，'description':'C语言中代码审查的方法、代码审查的目的、代码审查的流程等。'}, {'name':'版本控制'，'description':'C语言中版本控制的方法、常见的版本控制工具、版本控制的流程等。'}, {'name':'软件测试'，'description':'C语言中软件测试的方法、测试用例的设计、测试报告的编写等。'}, {'name':'项目实践'，'description':'C语言中项目实践的方法、项目的规划、项目的实施等。'}, {'name':'面试准备'，'description':'C语言面试的准备、常见的面试题、面试技巧等。'}, {'name':'其他'，'description':'C语言中其他的知识点，如编码规范、调试技巧、性能优化等。'}]"
    },
    {
        "sortId": 5177,
        "id": "1335514277941112832",
        "title": "超级玛丽",
        "content": "超级玛丽是一个非常经典的游戏。现在请你用字符画的形式输出一个超级玛丽。\n\n### 输入格式:\n\n\n### 输出格式:\n\n\n### 输入样例:\n\n```in\n无\n```\n\n### 输出样例:\n\n\n```out\n                ********\n               ************\n               ####....#.\n             #..###.....##....\n             ###.......######              ###            ###\n                ...........               #...#          #...#\n               ##*#######                 #.#.#          #.#.#\n            ####*******######             #.#.#          #.#.#\n           ...#***.****.*###....          #...#          #...#\n           ....**********##.....           ###            ###\n           ....****    *****....\n             ####        ####\n           ######        ######\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 22,
        "res": "[{'name':'字符画输出', 'description':'字符画输出是指通过字符组成的图案来展示图像或文字的一种方式。在C语言中，可以使用字符数组和循环结构来实现字符画的输出。'}]"
    },
    {
        "sortId": 5178,
        "id": "1335456528679071744",
        "title": "寻找自守数(递归版)",
        "content": "所谓自守数(也称守形数)，是指其平方数的低位部分恰为该数本身的自然数。例如：$$25^2 = 625$$, 因此 $$25$$ 是自守数。其中：$$0$$ 和 $$1$$ 也是自守数。\n\n请编写函数，输出指定范围内的所有自守数。\n\n#### 函数原型\n\n```\nvoid FindAutomorphic(long long lower, long long upper);\n```\n\n说明：参数 lower 和 upper 分别为整数区间的下限和上限。若在该范围内存在自守数，则输出这些自守数，否则输出“None”。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\n#define Sqr(x) ...(略)...\n\nint IsLowerPart(long long x, long long y);\nint IsAutomorphic(long long x);\nvoid FindAutomorphic(long long lower, long long upper);\n\nint main()\n{\n\tlong long a, b;\n\tscanf(\"%lld%lld\", &a, &b);\n\tFindAutomorphic(a, b);\n\treturn 0;\n}\n\n...(略)...\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n10 80\n\n```\n#### 输出样例1\n```out\n25\n76\n\n```\n#### 输入样例2\n```in\n400 600\n\n```\n#### 输出样例2\n```out\nNone\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 28,
        "res": "[{'name':'自守数','description':'自守数是指其平方数的低位部分恰为该数本身的自然数。'}, {'name':'函数原型','description':'函数原型是指函数的声明，包括函数名、参数列表和返回值类型。'}, {'name':'宏定义','description':'宏定义是一种预处理指令，用于将一个标识符替换为一个字符串或一个表达式。'}, {'name':'条件判断','description':'条件判断是指根据条件的真假来执行不同的代码块。'}, {'name':'循环结构','description':'循环结构是指重复执行一段代码块的结构。'}, {'name':'输入输出','description':'输入输出是指程序与用户或外部设备之间的数据交换。'}, {'name':'数据类型','description':'数据类型是指变量或表达式的值的种类和范围。'}, {'name':'变量','description':'变量是指用于存储数据的内存空间。'}, {'name':'运算符','description':'运算符是指用于进行数学运算或逻辑运算的符号。'}, {'name':'函数调用','description':'函数调用是指通过函数名和参数列表来执行函数的代码。'}, {'name':'数组','description':'数组是指一组相同类型的数据元素的集合。'}, {'name':'指针','description':'指针是指存储变量地址的变量。'}, {'name':'字符串','description':'字符串是指由字符组成的序列。'}, {'name':'文件操作','description':'文件操作是指对文件进行读取或写入的操作。'}, {'name':'预处理指令','description':'预处理指令是指在编译之前对源代码进行处理的指令。'}, {'name':'递归','description':'递归是指一个函数调用自身的过程。'}, {'name':'结构体','description':'结构体是指将不同类型的数据组合在一起的数据类型。'}, {'name':'指针运算','description':'指针运算是指对指针进行加减操作的运算。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'错误处理','description':'错误处理是指在程序运行过程中处理错误的方法。'}, {'name':'内存管理','description':'内存管理是指对程序中的内存进行分配和释放的操作。'}, {'name':'数据结构','description':'数据结构是指组织和存储数据的方式。'}, {'name':'算法','description':'算法是指解决问题的一系列步骤。'}, {'name':'编程风格','description':'编程风格是指编写代码时的规范和习惯。'}, {'name':'调试技巧','description':'调试技巧是指在程序出现错误时进行排查和修复的方法。'}, {'name':'性能优化','description':'性能优化是指提高程序执行效率的方法。'}, {'name':'代码复用','description':'代码复用是指重复使用已经编写过的代码。'}, {'name':'模块化编程','description':'模块化编程是指将程序分解为多个模块进行开发和维护的方法。'}, {'name':'版本控制','description':'版本控制是指对代码进行管理和追踪的方法。'}, {'name':'软件工程','description':'软件工程是指对软件开发过程进行管理和控制的方法。'}, {'name':'面向对象编程','description':'面向对象编程是一种以对象为基础的编程方法。'}, {'name':'并发编程','description':'并发编程是指多个任务同时执行的编程方法。'}, {'name':'网络编程','description':'网络编程是指通过网络进行数据交换的编程方法。'}, {'name':'图形界面编程','description':'图形界面编程是指通过图形界面进行交互的编程方法。'}, {'name':'嵌入式编程','description':'嵌入式编程是指在嵌入式系统中进行开发的编程方法。'}, {'name':'算术运算','description':'算术运算是指对数字进行加减乘除等运算的操作。'}, {'name':'逻辑运算','description':'逻辑运算是指对逻辑值进行与或非等运算的操作。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'条件语句','description':'条件语句是指根据条件的真假来执行不同的代码块。'}, {'name':'循环语句','description':'循环语句是指重复执行一段代码块的语句。'}, {'name':'数组','description':'数组是指一组相同类型的数据元素的集合。'}, {'name':'字符串','description':'字符串是指由字符组成的序列。'}, {'name':'指针','description':'指针是指存储变量地址的变量。'}, {'name':'结构体','description':'结构体是指将不同类型的数据组合在一起的数据类型。'}, {'name':'文件操作','description':'文件操作是指对文件进行读取或写入的操作。'}, {'name':'函数','description':'函数是指一段完成特定任务的代码块。'}, {'name':'递归','description':'递归是指一个函数调用自身的过程。'}, {'name':'指针运算','description':'指针运算是指对指针进行加减操作的运算。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'错误处理','description':'错误处理是指在程序运行过程中处理错误的方法。'}, {'name':'内存管理','description':'内存管理是指对程序中的内存进行分配和释放的操作。'}, {'name':'数据结构','description':'数据结构是指组织和存储数据的方式。'}, {'name':'算法','description':'算法是指解决问题的一系列步骤。'}, {'name':'编程风格','description':'编程风格是指编写代码时的规范和习惯。'}, {'name':'调试技巧','description':'调试技巧是指在程序出现错误时进行排查和修复的方法。'}, {'name':'性能优化','description':'性能优化是指提高程序执行效率的方法。'}, {'name':'代码复用','description':'代码复用是指重复使用已经编写过的代码。'}, {'name':'模块化编程','description':'模块化编程是指将程序分解为多个模块进行开发和维护的方法。'}, {'name':'版本控制','description':'版本控制是指对代码进行管理和追踪的方法。'}, {'name':'软件工程','description':'软件工程是指对软件开发过程进行管理和控制的方法。'}, {'name':'面向对象编程','description':'面向对象编程是一种以对象为基础的编程方法。'}, {'name':'并发编程','description':'并发编程是指多个任务同时执行的编程方法。'}, {'name':'网络编程','description':'网络编程是指通过网络进行数据交换的编程方法。'}, {'name':'图形界面编程','description':'图形界面编程是指通过图形界面进行交互的编程方法。'}, {'name':'嵌入式编程','description':'嵌入式编程是指在嵌入式系统中进行开发的编程方法。'}, {'name':'算术运算','description':'算术运算是指对数字进行加减乘除等运算的操作。'}, {'name':'逻辑运算','description':'逻辑运算是指对逻辑值进行与或非等运算的操作。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'条件语句','description':'条件语句是指根据条件的真假来执行不同的代码块。'}, {'name':'循环语句','description':'循环语句是指重复执行一段代码块的语句。'}, {'name':'数组','description':'数组是指一组相同类型的数据元素的集合。'}, {'name':'字符串','description':'字符串是指由字符组成的序列。'}, {'name':'指针','description':'指针是指存储变量地址的变量。'}, {'name':'结构体','description':'结构体是指将不同类型的数据组合在一起的数据类型。'}, {'name':'文件操作','description':'文件操作是指对文件进行读取或写入的操作。'}, {'name':'函数','description':'函数是指一段完成特定任务的代码块。'}, {'name':'递归','description':'递归是指一个函数调用自身的过程。'}, {'name':'指针运算','description':'指针运算是指对指针进行加减操作的运算。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'错误处理','description':'错误处理是指在程序运行过程中处理错误的方法。'}, {'name':'内存管理','description':'内存管理是指对程序中的内存进行分配和释放的操作。'}, {'name':'数据结构','description':'数据结构是指组织和存储数据的方式。'}, {'name':'算法','description':'算法是指解决问题的一系列步骤。'}, {'name':'编程风格','description':'编程风格是指编写代码时的规范和习惯。'}, {'name':'调试技巧','description':'调试技巧是指在程序出现错误时进行排查和修复的方法。'}, {'name':'性能优化','description':'性能优化是指提高程序执行效率的方法。'}, {'name':'代码复用','description':'代码复用是指重复使用已经编写过的代码。'}, {'name':'模块化编程','description':'模块化编程是指将程序分解为多个模块进行开发和维护的方法。'}, {'name':'版本控制','description':'版本控制是指对代码进行管理和追踪的方法。'}, {'name':'软件工程','description':'软件工程是指对软件开发过程进行管理和控制的方法。'}, {'name':'面向对象编程','description':'面向对象编程是一种以对象为基础的编程方法。'}, {'name':'并发编程','description':'并发编程是指多个任务同时执行的编程方法。'}, {'name':'网络编程','description':'网络编程是指通过网络进行数据交换的编程方法。'}, {'name':'图形界面编程','description':'图形界面编程是指通过图形界面进行交互的编程方法。'}, {'name':'嵌入式编程','description':'嵌入式编程是指在嵌入式系统中进行开发的编程方法。'}, {'name':'算术运算','description':'算术运算是指对数字进行加减乘除等运算的操作。'}, {'name':'逻辑运算','description':'逻辑运算是指对逻辑值进行与或非等运算的操作。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'条件语句','description':'条件语句是指根据条件的真假来执行不同的代码块。'}, {'name':'循环语句','description':'循环语句是指重复执行一段代码块的语句。'}, {'name':'数组','description':'数组是指一组相同类型的数据元素的集合。'}, {'name':'字符串','description':'字符串是指由字符组成的序列。'}, {'name':'指针','description':'指针是指存储变量地址的变量。'}, {'name':'结构体','description':'结构体是指将不同类型的数据组合在一起的数据类型。'}, {'name':'文件操作','description':'文件操作是指对文件进行读取或写入的操作。'}, {'name':'函数','description':'函数是指一段完成特定任务的代码块。'}, {'name':'递归','description':'递归是指一个函数调用自身的过程。'}, {'name':'指针运算','description':'指针运算是指对指针进行加减操作的运算。'}, {'name':'位运算','description':'位运算是指对二进制位进行操作的运算。'}, {'name':'错误处理','description':'错误处理是指在程序运行过程中处理错误的方法。'}, {'name':'内存管理','description':'内存管理是指对程序中的内存进行分配和释放的操作。'}, {'name':'数据结构','description':'数据结构是指组织和存储数据的方式。'}, {'name':'算法','description':'算法是指解决问题的一系列步骤。'}, {'name':'编程风格','description':'编程风格是指编写代码时的规范和习惯。'}, {'name':'调试技巧','description':'调试技巧是指在程序出现错误时进行排查和修复的方法。'}, {'name':'性能优化','description':'性能优化是指提高程序执行效率的方法。'}, {'name':'代码复用','description':'代码复用是指重复使用已经编写过的代码。'}, {'name':'模块化编程','description':'模块化编程是指将程序分解为多个模块进行开发和维护的方法。'}, {'name':'版本控制','description':'版本控制是指对代码进行管理和追踪的方法。'}, {'name':'软件工程','description':'软件工程是指对软件开发过程进行管理和控制的方法。'}, {'name':'面向对象编程','description':'面向对象编程是一种以对象为基础的编程方法。'}, {'name':'并发编程','description':'并发编程是指多个任务同时执行的编程方法。'}, {'name':'网络编"
    },
    {
        "sortId": 5179,
        "id": "1335447969731997696",
        "title": "判断自守数",
        "content": "所谓自守数(也称守形数)，是指其平方数的低位部分恰为该数本身的自然数。例如：$$25^2 = 625$$, 因此 $$25$$ 是自守数。其中：$$0$$ 和 $$1$$ 也是自守数。\n\n请编写函数，判断自守数。\n\n#### 函数原型\n\n```c\nint IsAutomorphic(long long x);\n```\n\n说明：参数 $$x$$ 为自然数。若 $$x$$ 为自守数，则函数值为 $$1$$ (真)，否则为 $$0$$ (假)。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\n#define Sqr(x) ...(略)...\n\nint IsLowerPart(long long x, long long y);\nint IsAutomorphic(long long x);\n\nint main()\n{\n\tlong long a;\n\tscanf(\"%lld\", &a);\n\tif (IsAutomorphic(a))\n\t{\n\t\tputs(\"Yes\");\n\t}\n\telse\n\t{\n\t\tputs(\"No\");\n\t}\n\treturn 0;\n}\n\n...(略)...\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n25\n\n```\n#### 输出样例1\n```out\nYes\n\n```\n#### 输入样例2\n```in\n26\n\n```\n#### 输出样例2\n```out\nNo\n\n```\n\n要求：不使用循环语句。\n\n提示：调用前面练习中编写的带参数的宏替换命令 Sqr “平方函数”和判断自然数低位部分 IsLowerPart 函数。\n\n---\n\n关联习题：平方函数(宏)、判断自然数的低位部分。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 26,
        "res": "[{'name': '平方函数(宏)', 'description': '该知识点涉及到编写一个带参数的宏替换命令，用于计算一个数的平方。'}, {'name': '判断自然数的低位部分', 'description': '该知识点涉及到编写一个函数，用于判断一个数的平方的低位部分是否与该数本身相等。'}, {'name': '自守数', 'description': '该知识点涉及到编写一个函数，用于判断一个数是否为自守数。'}]"
    },
    {
        "sortId": 5180,
        "id": "1335423267039166464",
        "title": "简单计算器（加减乘除）",
        "content": "输入两个数和运算符，根据运算符对两个数进行运算，输出结果。\n\n### 输入格式:\n\n输入按照   运算数1运算符运算数2  的格式输入。\n\n### 输出格式:\n\n输出运算结果（保留2位小数）。\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n3+2\n```\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n5.00\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n-7/0\n```\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n除数为0！\n```\n### 输入样例3:\n\n在这里给出一组输入。例如：\n\n```in\n3#2\n```\n### 输出样例3:\n\n在这里给出相应的输出。例如：\n\n```out\nERROR!\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 41,
        "res": "[{'name':'基本运算符','description':'基本运算符包括加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等，用于对两个数进行运算。'}, {'name':'条件语句','description':'条件语句用于根据条件的真假来执行不同的代码块。在本题中，需要根据输入的运算符来判断执行不同的运算操作。'}, {'name':'输入输出','description':'输入输出是C语言中常用的操作，用于从键盘上获取输入数据，并将结果输出到屏幕上。在本题中，需要从输入中获取运算数和运算符，并将运算结果输出。'}, {'name':'错误处理','description':'错误处理是程序设计中的重要部分，用于处理可能出现的错误情况。在本题中，需要处理除数为0的情况，并输出相应的错误信息。'}]"
    },
    {
        "sortId": 5181,
        "id": "1335422359442202624",
        "title": "若干整数求和(递归版)",
        "content": "请编写递归函数，输入若干整数，求这些整数的和。\n\n#### 函数原型\n\n```c\nint Sum(int number);\n```\n\n说明：参数 `number` 为整数的数量。此函数从键盘输入 `number` 个整数，函数值是这些整数的和。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nint Sum(int number);\n\nint main()\n{\n    int n, x, s;\n    scanf(\"%d\", &n);\n    s = Sum(n);\n    printf(\"%d\\n\", s);\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n0\n```\n#### 输出样例1\n```out\n0\n```\n#### 输入样例2\n```in\n5\n8 -1 3 6 -9\n```\n#### 输出样例2\n```out\n7\n```\n\n要求：不要使用循环语句。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 16,
        "res": "[{'name': '递归函数', 'description': '递归函数是指在函数的定义中调用函数本身的函数。递归函数可以通过不断调用自身来解决问题，每次调用函数时，问题的规模都会减小，直到达到基本情况，然后逐层返回结果。递归函数在解决一些问题时非常方便，但需要注意递归的终止条件和递归的层数，以避免出现无限递归的情况。在本题中，需要编写一个递归函数来求输入整数的和。'}]"
    },
    {
        "sortId": 5182,
        "id": "1335415606499426304",
        "title": "超市购物打折",
        "content": "某超市促销规定：购物不超过50元按原价付款；超过50元不超过150元，超过部分按九折付款；超过150元的，超过部分按八折付款。编程序完成超市的计费打折。\n\n### 输入格式:\n\n输入一个实数即货物的原价。\n\n### 输出格式:\n\n输出打折后的价格，保留两位小数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n105\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n99.50\n```\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n210\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n188.00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 153,
        "res": "[{'name':'条件语句'，'description':'根据购物金额的不同，使用条件语句判断打折的比例'}, {'name':'浮点数运算'，'description':'使用浮点数运算计算打折后的价格'}, {'name':'保留小数位数'，'description':'使用格式化输出保留两位小数位数'}]"
    },
    {
        "sortId": 5183,
        "id": "1335404707617357824",
        "title": "显示等腰梯形(上)(递归版)",
        "content": "请编写递归函数，显示等腰梯形(向上)。\n\n#### 函数原型\n\n```c\nvoid UpTrp(int width, int height, char symbol);\n```\n\n说明：参数 `width`、`height` 分别为等腰梯形的下底和高，`symbol` 为显示字符。函数将在屏幕上显示下底宽为 `width`、高度为 `height` 由字符 `symbol` 组成的等腰梯形(向上)。若 `width` 或 `height` 的值不正确，则不输出。\n\n提示：需要利用前面作业中的 Show 函数，此外需要增加自用的内部函数。\n\n### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid Show(int number, char symbol);\nvoid UpTrp(int width, int height, char symbol);\n\nint main()\n{\n    int w, h;\n    char s;\n    scanf(\"%d %d %c\", &w, &h, &s);\n    UpTrp(w, h, s);\n    return 0;\n}\n\n......\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n-3 0 #\n```\n#### 输出样例1\n```out\n\n```\n注：无输出。\n\n#### 输入样例2\n```in\n5 5 &\n```\n#### 输出样例2\n```out\n\n```\n注：无输出。\n\n#### 输入样例3\n```in\n20 5 @\n```\n#### 输出样例3\n```out\n    @@@@@@@@@@@@\n   @@@@@@@@@@@@@@\n  @@@@@@@@@@@@@@@@\n @@@@@@@@@@@@@@@@@@\n@@@@@@@@@@@@@@@@@@@@\n```\n\n要求：不要使用循环语句。\n\n---\n\n关联习题：重复显示字符(递归版)\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 13,
        "res": "[{'name': '递归函数', 'description': '递归函数是指在函数的定义中调用函数本身的函数。递归函数可以解决一些需要重复执行相同操作的问题，通过不断调用自身来实现。在C语言中，递归函数需要注意递归的终止条件，以避免无限递归导致程序崩溃。'}, {'name': '字符显示', 'description': '字符显示是指在屏幕上输出指定字符的操作。在C语言中，可以使用printf函数来显示字符，也可以自定义函数来实现字符的显示。在本题中，需要使用自定义的Show函数来显示字符。'}, {'name': '函数参数', 'description': '函数参数是指在函数定义中用于接收传入值的变量。在C语言中，函数可以有多个参数，每个参数都有自己的类型和名称。在本题中，需要使用函数参数来接收输入的下底宽度、高度和显示字符。'}, {'name': '条件判断', 'description': '条件判断是指根据条件的真假来执行不同的操作。在C语言中，可以使用if语句来进行条件判断，根据条件的结果来决定执行哪个分支。在本题中，需要根据输入的下底宽度和高度的值来判断是否输出等腰梯形。'}, {'name': '递归调用', 'description': '递归调用是指在函数的定义中调用函数本身的操作。在递归函数中，通过不断调用自身来实现重复执行相同操作的效果。在本题中，需要在递归函数中调用自身来实现逐行输出等腰梯形的效果。'}, {'name': '内部函数', 'description': '内部函数是指在一个函数内部定义的函数。在C语言中，可以在一个函数内部定义另一个函数，这个被定义的函数就是内部函数。在本题中，需要在UpTrp函数内部定义一个用于递归调用的内部函数。'}]"
    },
    {
        "sortId": 5184,
        "id": "1335287194023804928",
        "title": "九连环问题",
        "content": "九连环是一种流传于山西省的传统民间的智力玩具，由九个圆环相连成串，以解开为胜。\n\n![题图1.jpg](~/34dc398b-7154-4a18-9afd-4a06a6598ac8.jpg)\n\n九连环的九个环，一环扣一环地套在钗上。除了第 $$1$$ 号环可以随时装上或卸下以外，其它环装上或卸下的条件是：在它的前面仅有紧靠它那一个环在钗上。即：当第 $$1$$ ~ $$i - 2$$ 号环都不在钗上，第 $$i - 1$$ 号环在钗上，这时可以装上或卸下第 $$i$$ 号环。\n\n请编写两个函数，分别完成装环和缷环的任务。\n\n#### 函数原型\n```c\nvoid RingUp(int number);\nvoid RingDn(int number);\n```\n\n说明：参数 `number` 是环的数量。函数 RingUp 的任务是在前 `number` 个环全都不在钗上的情况下，把这前 `number` 个环全都装上；而函数 RingDn 的任务是在前 `number` 个环全都在钗上的情况下，把这前 `number` 个环全都缷下。若环的数量为 0，则什么也不做。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid RingUp(int number);\nvoid RingDn(int number);\n\nint main()\n{\n    int n;\n    char p;\n    scanf(\"%d %c\", &n, &p);\n    switch (p)\n    {\n    case 'U':\n        RingUp(n);\n        break;\n    case 'D':\n        RingDn(n);\n        break;\n    }\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入格式\n> 环数 操作(U表示装上, D表示卸下)\n\n#### 输出格式\n> 装上或卸下九连环的操作步骤  \n> 每行显示一步操作，具体格式为：  \n> 环号: U或D (U表示装上，D表示卸下)\n\n#### 输入样例1\n```in\n3 U\n```\n#### 输出样例1\n```out\n1: U\n2: U\n1: D\n3: U\n1: U\n```\n#### 输入样例2\n```in\n4 D\n```\n#### 输出样例2\n```out\n2: D\n1: D\n4: D\n1: U\n2: U\n1: D\n3: D\n1: U\n2: D\n1: D\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 18,
        "res": "[{'name':'环装上和缷下','description':'九连环的九个环，一环扣一环地套在钗上。除了第 1 号环可以随时装上或卸下以外，其它环装上或卸下的条件是：在它的前面仅有紧靠它那一个环在钗上。即：当第 1 ~ i - 2 号环都不在钗上，第 i - 1 号环在钗上，这时可以装上或卸下第 i 号环。'}, {'name':'RingUp','description':'函数 RingUp 的任务是在前 number 个环全都不在钗上的情况下，把这前 number 个环全都装上'}, {'name':'RingDn','description':'函数 RingDn 的任务是在前 number 个环全都在钗上的情况下，把这前 number 个环全都缷下'}]"
    },
    {
        "sortId": 5185,
        "id": "1334775450695921664",
        "title": "计算给定整数的各位数字平方的和。 ",
        "content": "计算给定的整数的各位数字平方的和。 \n\n### 函数接口定义：\n```c\nint  s_quart(int n)\n```\n\n\n### 裁判测试程序样例：\n```c\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\nint  s_quart(int n);\n\nint main()\n{\n    int n;\n\t  scanf(\"%d\", &n);\n\t  printf(\"%d\\n\", s_quart(n));\n\t\n    return 0;\n\n}\n\n\n/* 请在这里填写答案 */\n```\n\n\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n1234\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n30\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 82,
        "res": "[{'name': '函数定义', 'description': '在C语言中，函数是一段可重复使用的代码块，用于完成特定的任务。函数定义包括函数的返回类型、函数名、参数列表和函数体。在本题中，函数接口定义了一个名为s_quart的函数，该函数的返回类型为int，参数为一个整数n。'}, {'name': '输入输出', 'description': '在C语言中，可以使用标准库函数scanf和printf来进行输入输出操作。scanf函数用于从标准输入流中读取数据，printf函数用于向标准输出流中输出数据。在本题中，使用scanf函数从标准输入中读取一个整数n，使用printf函数将计算结果输出到标准输出中。'}, {'name': '循环结构', 'description': '在C语言中，可以使用循环结构来重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。在本题中，可以使用循环结构来遍历整数n的各位数字，并计算它们的平方和。'}, {'name': '算术运算', 'description': '在C语言中，可以使用算术运算符来进行数值计算。常见的算术运算符有加法运算符+、减法运算符-、乘法运算符*、除法运算符/和求余运算符%。在本题中，可以使用算术运算符来计算整数n的各位数字的平方和。'}]"
    },
    {
        "sortId": 5186,
        "id": "1334731833671761920",
        "title": "绝对值函数(宏)*",
        "content": "C 函数库中提供整数绝对值 abs 函数和实数绝对值 fabs 函数，函数声明如下：\n\n#### 函数原型\n\n```c\nint abs(int x);\ndouble fabs(double x);\n```\n\n说明：函数值为参数 $$x$$ 的绝对值 $$| x |$$。\n\n请在空白处填写适当内容，用带参数的宏替换命令来实现相同的功能，将上面两个函数合并为一个，并命名为 Abs。\n\n#### 裁判程序1\n\n```c\n#include <stdio.h>\n\n__________\n\nint main()\n{\n    int a, b;\n    double x, y;\n    scanf(\"%d %lg\", &a, &x);\n    b = Abs(a);\n    y = Abs(x);\n    printf(\"%d %g\\n\", b, y);\n    return 0;\n}\n```\n\n#### 输入样例1\n```in\n-5 -2.5\n\n```\n\n#### 输出样例1\n```out\n5 2.5\n\n```\n\n#### 输入样例2\n```in\n7 3.8\n\n```\n\n#### 输出样例2\n```out\n7 3.8\n\n```\n\n#### 输入样例3\n```in\n0 0\n\n```\n\n#### 输出样例3\n```out\n0 0\n\n```\n\n#### 输入样例4\n```in\n-0 -0\n\n```\n#### 输出样例4\n```out\n0 0\n\n```\n\n---\n\n注：裁判程序有很多，不止一个。\n\n特别提示：注意实数为 -0.0 和 0.0 的情况。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "90",
                        "name": "编译预处理",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 58,
        "res": "[{'name': '宏定义', 'description': '宏定义是C语言中的一种预处理指令，用于将一个标识符替换为一个字符串或者一个表达式。在这道题中，需要使用带参数的宏定义来实现函数的功能。'}, {'name': '函数库', 'description': 'C语言函数库是一组预定义的函数，可以直接调用来完成特定的功能。在这道题中，需要了解C函数库中提供的整数绝对值函数abs和实数绝对值函数fabs的使用方法。'}, {'name': '输入输出', 'description': '输入输出是C语言中常用的操作，用于从键盘读取输入数据和向屏幕输出结果。在这道题中，需要使用scanf函数从键盘读取输入数据，使用printf函数向屏幕输出结果。'}, {'name': '数据类型', 'description': '数据类型是C语言中用于存储不同类型数据的变量的分类。在这道题中，需要了解int和double两种数据类型的使用方法。'}, {'name': '控制流程', 'description': '控制流程是C语言中用于控制程序执行顺序的语句。在这道题中，需要使用if语句来判断输入数据的正负情况，并根据情况调用不同的函数。'}]"
    },
    {
        "sortId": 5187,
        "id": "1334486794274160640",
        "title": "在被调函数中计算任意日期的星期值",
        "content": "以下程序的功能是：首先在main函数中输入任意一个日期的年、月、日的值，然后在被调函数weekday中求出该日期是星期几。要求写出函数weekday。\n假定从公元第一天开始，就实施格里高利历法。格里高利历法的置闰规则是400年97闰，也可以概括为：四闰百不闰，四百闰。\n\n### 函数接口定义：\n```c++\nvoid weekday(int y,int m,int d);\n```\n\n其中y、m、d是由主调函数传入的参数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nvoid weekday(int y,int m,int d);\nint main(void)\n{int y,m,d;\n scanf(\"%d%d%d\",&y,&m,&d);\n weekday(y,m,d);\n return 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n```in\n2012 3 25\n```\n\n### 输出样例：\n\n```out\n星期日\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 4,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 11,
        "res": "[{'name':'函数定义和调用'，'description':'函数定义和调用是C语言程序设计中的基本知识点。在本题中，需要定义一个名为weekday的函数，并在主函数中调用该函数。函数的定义和调用是C语言程序的基本组成部分，通过函数的定义和调用，可以实现代码的模块化和重复利用。'}, {'name':'变量的定义和赋值'，'description':'变量的定义和赋值是C语言程序设计中的基本知识点。在本题中，需要定义三个变量y、m、d，并通过scanf函数从标准输入中获取用户输入的值，并将这些值赋给相应的变量。变量的定义和赋值是C语言程序中存储和处理数据的基本操作。'}, {'name':'条件语句'，'description':'条件语句是C语言程序设计中的基本知识点。在本题中，需要使用条件语句判断输入的日期是星期几。条件语句根据给定的条件判断是否执行某段代码，通过条件语句可以实现程序的分支控制和逻辑判断。'}, {'name':'输入输出函数'，'description':'输入输出函数是C语言程序设计中的基本知识点。在本题中，需要使用scanf函数从标准输入中获取用户输入的日期，并使用printf函数将计算得到的结果输出到标准输出。输入输出函数是C语言程序中与用户交互和数据显示的重要部分。'}, {'name':'运算符'，'description':'运算符是C语言程序设计中的基本知识点。在本题中，需要使用运算符进行日期的计算和判断。运算符是C语言程序中用于进行数值计算和逻辑判断的基本工具，通过运算符可以实现各种复杂的计算和判断操作。'}]"
    },
    {
        "sortId": 5188,
        "id": "1334423474020106240",
        "title": "在被调函数中计算任意日期总天数",
        "content": "以下程序的功能是：首先在main函数中输入任意一个日期的年、月、日的值，然后在被调函数getdays中求出从公元1年1月1日到该日期总共有多少天，最后在main函数中输出结果。要求写出函数days。\n假定从公元第一天开始，就实施格里高利历法。格里高利历法的置闰规则是400年97闰，也可以概括为：四闰百不闰，四百闰。\n\n### 函数接口定义：\n```c++\nint getdays(int y,int m,int d);\n```\n\n其中y、m、d是由主调函数传入的参数。\n\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nint getdays(int y,int m,int d);\nint main(void)\n{int y,m,d,days;\n scanf(\"%d%d%d\",&y,&m,&d);\n days=getdays(y,m,d);\n printf(\"days=%d\\n\",days); \n return 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n```in\n2012 3 29\n```\n\n### 输出样例：\n\n```out\ndays=734591\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 29,
        "res": "[{'name': '函数定义', 'description': '在C语言中，函数是一段完成特定任务的代码块，可以通过函数名来调用执行。函数定义包括函数名、参数列表、返回值类型和函数体。在这道题目中，需要定义一个名为getdays的函数，参数列表为int类型的y、m、d，返回值类型为int。'}, {'name': '变量定义和赋值', 'description': '在C语言中，可以使用关键字int来定义整型变量。变量定义的格式为：类型 变量名；变量赋值的格式为：变量名 = 值；在这道题目中，需要定义变量y、m、d、days，并通过scanf函数从标准输入中获取值进行赋值。'}, {'name': '输入输出', 'description': '在C语言中，可以使用scanf函数从标准输入中获取输入值，使用printf函数将结果输出到标准输出。scanf函数的格式为：scanf(\"格式控制字符串\", 变量地址列表)；printf函数的格式为：printf(\"格式控制字符串\", 输出值列表)。在这道题目中，需要使用scanf函数获取y、m、d的值，使用printf函数输出结果。'}, {'name': '函数调用', 'description': '在C语言中，可以通过函数名和参数列表来调用函数。函数调用的格式为：函数名(参数列表)。在这道题目中，需要在main函数中调用getdays函数，并将返回值赋给变量days。'}, {'name': '运算符', 'description': '在C语言中，可以使用运算符进行各种数学运算。常见的运算符包括加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等。在这道题目中，需要在getdays函数中进行数学运算，求出从公元1年1月1日到给定日期的总天数。'}]"
    },
    {
        "sortId": 5189,
        "id": "1334354387077476352",
        "title": "祝福参赛选手",
        "content": "众所周知，今年的我们昌航的第四届程序设计大赛，但跟往年不同的是，今年的决赛获奖者将会有额外奖励。这让队里的某人十分恰柠檬，因为他去年夺（tou）冠（ji）了却啥额外奖励也没拿到，只有个奖状，所以他今年想提（kong）醒（he）一下参赛的各位同学们。\n\n### 输入格式:\n\n本题无任何输入。\n\n### 输出格式:\n\n在一行中输出\"This year is much harder than last year\"，不带引号。\n\n### 输入样例:\n\n\n\n```in\n无\n```\n\n### 输出样例:\n\n```out\nThis year is much harder than last year\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 16,
        "res": "[{'name':'基本语法'，'description':'C语言的基本语法，包括变量定义、数据类型、运算符、控制语句等。'}, {'name':'字符串处理'，'description':'C语言中对字符串的处理，包括字符串的定义、输入输出、字符串的操作等。'}, {'name':'函数'，'description':'C语言中函数的定义、调用、参数传递等。'}, {'name':'数组'，'description':'C语言中数组的定义、初始化、访问等。'}, {'name':'指针'，'description':'C语言中指针的定义、指针与数组的关系、指针与函数的关系等。'}, {'name':'结构体'，'description':'C语言中结构体的定义、结构体的成员、结构体的操作等。'}, {'name':'文件操作'，'description':'C语言中对文件的读写操作，包括文件的打开、关闭、读写等。'}, {'name':'动态内存分配'，'description':'C语言中动态内存分配的方法，包括malloc、free等。'}, {'name':'预处理指令'，'description':'C语言中预处理指令的使用，包括宏定义、条件编译等。'}, {'name':'递归'，'description':'C语言中递归的概念、递归函数的编写等。'}, {'name':'位运算'，'description':'C语言中位运算的使用，包括与、或、异或等位运算符的使用。'}, {'name':'指针与数组'，'description':'C语言中指针与数组的关系，包括指针与一维数组、指针与二维数组等。'}, {'name':'指针与函数'，'description':'C语言中指针与函数的关系，包括指针作为函数参数、指针作为函数返回值等。'}, {'name':'字符串处理函数'，'description':'C语言中字符串处理函数的使用，包括strlen、strcpy等。'}, {'name':'文件操作函数'，'description':'C语言中文件操作函数的使用，包括fopen、fclose等。'}, {'name':'动态内存分配函数'，'description':'C语言中动态内存分配函数的使用，包括malloc、free等。'}, {'name':'预处理指令的使用'，'description':'C语言中预处理指令的使用，包括宏定义、条件编译等。'}, {'name':'递归函数的编写'，'description':'C语言中递归函数的编写，包括递归的概念、递归的终止条件等。'}, {'name':'位运算的使用'，'description':'C语言中位运算的使用，包括与、或、异或等位运算符的使用。'}]"
    },
    {
        "sortId": 5190,
        "id": "1334165133890211840",
        "title": "I'm Feeling Lucky",
        "content": "A lucky day! The 6th China Jiliang University Programming Contest (Personal Contest) is coming soon, test your luck today!\n\nSystem will generate a random integer number between 1 and 10 (inclusive). And you should submit a program which will print one integer. If your number is equal to what system generated, an AC would be returned, or you would get a WA instead. \n\n### Input Specification:\n\nThere is no input in this problem. \n\n### Output Specification:\n\nPrint one integer end with a newline. \n\n### Sample Input:\n\nThere is no input in this problem. \n\n```in\n(no input)\n```\n\n### Sample Output:\n\nPlease note that the sample output is just for an example, it's probably not the correct answer of the problem. \n\n```out\n1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "53",
                        "name": "经典算法",
                        "isLeaf": false,
                        "enName": "Classical Algorithms"
                    },
                    {
                        "id": "58",
                        "name": "随机算法",
                        "isLeaf": true,
                        "enName": "Randomized Algorithms"
                    }
                ]
            }
        ],
        "referenceCount": 41,
        "res": "[{'name':'随机数生成'，'description':'本知识点主要讲解如何在C语言中生成随机数。在本题中，需要生成一个1到10之间的随机整数。可以使用rand()函数结合srand()函数来实现随机数的生成。'}，{'name':'输入输出'，'description':'本知识点主要讲解C语言中的输入输出操作。在本题中，需要输出一个整数，可以使用printf()函数来实现。'}]"
    },
    {
        "sortId": 5191,
        "id": "1334143526052352000",
        "title": "学生成绩录入及查询",
        "content": "学生成绩表中，一名学生的信息包含如下信息：\n学号(11位)、姓名、数学成绩、英语成绩、程序设计成绩、物理成绩。\n\n本题要求编写程序，录入`N`条学生的信息，并且按查询要求显示学生成绩等信息。\n\n### 输入格式:\n\n输入在第一行给出正整数N(N<=10)；随后N行，每行按格式：\n```\n学号 姓名 数学成绩 英语成绩 程序设计成绩 物理成绩\n```\n给出一名学生的信息。\n其中`学号`是11位数字；姓名是不超过10个字符、不包含空格的非空字符串；成绩是<=100的非负整数；\n\n在学生信息输入完成后，给出要查询的姓名。\n\n### 输出格式:\n\n对查询的姓名的每一名学生，在一行中按照如下格式输出：\n```\n学号  姓名 数学成绩 英语成绩 程序设计成绩 物理成绩\n```\n如果有相同姓名的同学，输出全部同学的信息，每名同学一行；\n如果要查询的学生不存在，则输出：\n```\nNot Found!\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4\n20201003012 LiWen 68 90 78 86\n20201003012 HeHua 91 88 80 82\n20201002121 WangFang 78 78 82 90\n20201002112 ZhengYi 56 83 77 80\nZhengYi\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n20201002112 ZhengYi 56 83 77 80\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 199,
        "res": "[{'name': '输入输出', 'description': '学生信息的输入和输出，包括学号、姓名、各科成绩的输入和输出。'}, {'name': '字符串处理', 'description': '对学生姓名进行字符串处理，包括输入和输出。'}, {'name': '数组', 'description': '使用数组存储学生信息，包括学号、姓名、各科成绩。'}, {'name': '循环', 'description': '使用循环结构实现学生信息的录入和查询。'}, {'name': '条件判断', 'description': '根据查询的姓名判断学生是否存在，并输出相应的信息。'}]"
    },
    {
        "sortId": 5192,
        "id": "1334136685989777408",
        "title": "2020 and human upup",
        "content": "众所周知， $$2020$$ 年是个多灾多难的年份——澳大利亚山火、东非蝗灾、菲律宾火山爆发、新冠病毒$$......$$ 但是，2020年终将过去,我们最后还是成功度过了这些灾难，我们人类真实是太厉害辣！现在请你为 $$2020$$ 年、还有我们全体人类加油，输出\"2020 and human upup\"。\n\n### 输入格式:\n\n本题无任何输入。\n\n### 输出格式:\n\n在一行中输出\"2020 and human upup\"，不带引号。\n\n### 输入样例:\n\n\n```in\n无\n```\n\n### 输出样例:\n\n\n```out\n2020 and human upup\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "90",
                        "name": "编译预处理",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 16,
        "res": "[{'name': '输出语句', 'description': '使用printf函数输出指定的字符串或变量的值。'}]"
    },
    {
        "sortId": 5193,
        "id": "1334120809290838016",
        "title": "h0132. 钞票和硬币",
        "content": "读取一个带有两个小数位的浮点数，这代表货币价值。\n\n在此之后，将该值分解为多种钞票与硬币的和，每种面值的钞票和硬币使用数量不限，要求使用的钞票和硬币的数量尽可能少。\n\n钞票的面值是100,50,20,10,5,2。\n\n硬币的面值是1,0.50,0.25,0.10,0.05和0.01。\n\n### 输入格式:\n\n输入一个浮点数N(0≤N≤1000000.00)。\n\n### 输出格式:\n参照输出样例，输出每种面值的钞票和硬币的需求数量。\n### 输入样例:\n\n```in\n112.03\n```\n\n### 输出样例:\n\n```out\nNOTAS:\n1 nota(s) de R$ 100.00\n0 nota(s) de R$ 50.00\n0 nota(s) de R$ 20.00\n1 nota(s) de R$ 10.00\n0 nota(s) de R$ 5.00\n1 nota(s) de R$ 2.00\nMOEDAS:\n0 moeda(s) de R$ 1.00\n0 moeda(s) de R$ 0.50\n0 moeda(s) de R$ 0.25\n0 moeda(s) de R$ 0.10\n0 moeda(s) de R$ 0.05\n3 moeda(s) de R$ 0.01\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 32,
        "res": "[{'name': '输入输出', 'description': '学习如何读取输入和输出结果，包括浮点数的输入和输出。'}, {'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及浮点数和整数数据类型的区别。'}, {'name': '运算符', 'description': '学习如何使用算术运算符进行数值计算，包括加法、减法、乘法和除法。'}, {'name': '条件语句', 'description': '学习如何使用条件语句进行逻辑判断，包括if语句和else语句。'}, {'name': '循环语句', 'description': '学习如何使用循环语句进行重复执行，包括for循环和while循环。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的索引和遍历。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的拼接和比较。'}, {'name': '函数', 'description': '学习如何声明和使用函数，以及函数的参数和返回值。'}, {'name': '文件操作', 'description': '学习如何打开、读取和写入文件，以及文件指针的移动和关闭。'}]"
    },
    {
        "sortId": 5194,
        "id": "1334099004916289536",
        "title": "Drizzle的猜数字",
        "content": "最近Drizzle沉迷猜数字小游戏（1A2B猜数字）这是一款古老的的密码破译类益智类小游戏，于是他想能不能用编程语言设计一款相同玩法的小游戏呢。\n\nDrizzle由于懒得打这么多字就贴出了游戏的规则的链接，请点击下方的链接了解游戏的具体规则模式。\n\n游戏规则详情：https://baike.baidu.com/item/%E7%8C%9C%E6%95%B0%E5%AD%97/83200?fr=aladdin\n\n### 输入格式:\n第一行先输出：`请输入一个确定的不重复四位数字：`  \n然后在第一行输入4位不重复的数字  \n第二行再输出提示：`下面开始猜数字吧，请输入一个不重复的四位数！`  \n下面就开始猜数字过程，每行输入一个不重复的四位数，按下回车后下一行会输出提示，具体看输出格式，只要没猜对正确数字就会一直猜下去，猜对会停止程序并输出\n\n### 输出格式:\n\n输出当前猜数字的判断结果（`提示：?A?b`）如果猜数字结果完全正确则输出：`你猜对啦！`\n\n>##### 也许上面的描述过于简陋，别担心，请看题目最下方的GIF动图演示！\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4789\n6587\n6789\n3214\n0651\n4789\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n请输入一个确定的不重复四位数字：下面开始猜数字吧，请输入一个不重复的四位数！\n提示：1A1B\n提示：3A0B\n提示：0A1B\n提示：0A0B\n你猜对啦！\n```\n\n### GIF演示：\n![avatar](https://s3.ax1x.com/2020/12/02/DoGN59.gif)\n\n动图解释：\nA代表数字正确且位置正确  \nB代表数字存在但是位置错误    \n先输入一个四位不重复的数字作为将要被猜的数字（4789）  \n第一次猜测：6587， 8数字正确且位置正确，7数字存在但是位置错误\n所以输出的提示为1A1B。\n第二次猜测：6789，789数字正确且位置正确。\n所以输出的提示为3A0B。\n第······\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 9,
        "res": "[{'name': '输入输出', 'description': '学习如何进行输入和输出操作，包括使用printf函数输出提示信息和scanf函数接收用户输入。'}, {'name': '变量和数据类型', 'description': '学习如何声明变量和选择合适的数据类型，以及如何进行变量的初始化和赋值操作。'}, {'name': '条件语句', 'description': '学习如何使用条件语句（if语句）进行条件判断，根据不同的条件执行不同的代码块。'}, {'name': '循环语句', 'description': '学习如何使用循环语句（for循环或while循环）进行重复执行某段代码的操作。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的初始化和遍历操作。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的输入输出和常见操作（如拼接、比较、查找等）。'}, {'name': '函数', 'description': '学习如何声明和定义函数，以及函数的调用和参数传递。'}, {'name': '逻辑运算符', 'description': '学习如何使用逻辑运算符进行逻辑判断和组合条件。'}, {'name': '位运算符', 'description': '学习如何使用位运算符进行位操作，如与、或、异或、左移、右移等。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针的运算和指针与数组的关系。'}, {'name': '文件操作', 'description': '学习如何进行文件的打开、读写和关闭操作，以及文件指针的使用。'}]"
    },
    {
        "sortId": 5195,
        "id": "1334096523763167232",
        "title": "机器人走方格",
        "content": "位于平面直角坐标系机器人只能延水平或者垂直道路运动。输入$$4$$个整数代表机器人当前位置$$A(x_1,y_1)$$和目标位置$$B(x_2,y_2)$$，计算机器人最少需要几步才能从$$A$$点走到$$B$$点。\n\n### 输入格式:\n\n连续输入$$4$$个数字代表坐标，中间用空格隔开\n\n### 输出格式:\n\n只包含一行，仅一个整数，表示要求的步数。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2 3 -2 0\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n7\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n-1 1 2 3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2 -1 0 0\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n3\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 7,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 101,
        "res": "[{'name':'平面直角坐标系','description':'平面直角坐标系是指以两条相互垂直的直线为坐标轴的坐标系。在C语言中，可以使用二维数组或结构体来表示平面直角坐标系。'}, {'name':'机器人运动','description':'机器人只能延水平或垂直道路运动，即只能沿x轴或y轴方向移动。在C语言中，可以使用条件语句和循环语句来模拟机器人的运动。'}, {'name':'坐标计算','description':'根据机器人当前位置和目标位置的坐标，计算机器人最少需要几步才能从当前位置走到目标位置。在C语言中，可以使用数学运算和条件判断来进行坐标计算。'}]"
    },
    {
        "sortId": 5196,
        "id": "1334041375300956160",
        "title": "LC想看动漫",
        "content": "众所周知，$$LC$$ 是一个 $$ACMer$$，也是个老二刺螈，为了训练他可以卸载游戏 ，但不看动漫就不行！现在已知今天的训练将在 $$hh1:mm1$$ 开始，持续 $$n$$ 分钟，而动漫的最新一集将在 $$hh2:mm2$$ 更新， $$LC$$ 想知道自己能否赶在动漫更新之前结束训练，但他已经累的神志不清，连基本的加减法都不会做了，你能帮帮他吗？\n### 输入格式:\n在第一行中给出一个整数 $$T(1<=T<=5)$$，代表共有 $$T$$ 组输入数据。\n\n接下来 $$T$$ 行，每行以 $$hh1:mm1 $$ $$hh2:mm2$$ 的格式给出训练开始的时间和动漫最新一集更新的时间，以及一个正整数 $$n(1<=n<1440)$$ ，代表训练将持续$$n$$分钟。\n\n输入数据保证两个时间皆为 $$24$$ 小时制的合法时间，且动漫更新时间一定是训练开始时间之后、间隔不超过 $$24$$ 小时的时间。\n\n### 输出格式:\n对于每一组输入数据，输出一行，如果 $$LC$$ 能赶在动漫更新之前结束训练，输出\"whqf\"，否则输出\"wuwuwu\"，不带引号。\n\n### 输入样例:\n\n```in\n3\n13:00 21:00 480\n23:58 00:02 3\n21:00 01:01 240 \n```\n\n### 输出样例:\n\n\n```out\nwuwuwu\nwhqf\nwhqf\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 15,
        "res": "[{'name':'时间计算'，'description':'根据给定的时间和持续时间，计算出结束时间并进行比较'}]"
    },
    {
        "sortId": 5197,
        "id": "1334000855874850816",
        "title": "将数组倒着放",
        "content": "从键盘上输入10个整数, 让其逆序输出。\n\n### 输入格式:\n\n输入若干整数\n\n### 输出格式:\n\n在同一行逆序输出刚刚输入的整数。（每个数字后面一个空格）\n\n### 输入样例:\n```in\n6  5  4  3  2  7  1  0  9 -1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n-1 9 0 1 7 2 3 4 5 6 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 97,
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘上输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量来存储数据。'}, {'name': '循环', 'description': '学习如何使用循环结构来重复执行一段代码。'}, {'name': '数组', 'description': '学习如何声明和使用数组来存储多个相同类型的数据。'}, {'name': '逆序输出', 'description': '学习如何将输入的数据逆序输出。'}]"
    },
    {
        "sortId": 5198,
        "id": "1333872704322588672",
        "title": "显示空心矩形(递归版)",
        "content": "请编写递归函数，显示空心矩形。\n\n#### 函数原型\n\n```c\nvoid RectHollow(int width, int height, char symbol);\n```\n\n说明：参数 `width` 和 `height` 为矩形的宽和高，`symbol` 为显示字符。函数将在屏幕下显示宽度为 `width`、高度为 `height` 由字符 `symbol` 围成的空心矩形。若 `width` 或 `height` 小于等于 0，则不输出。\n\n提示：需要利用前面作业中的 ShowHollow 函数，此外需要增加自用的内部函数。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nvoid ShowHollow(int number, char symbol, int hollow);\nvoid RectHollow(int width, int height, char symbol);\n\nint main()\n{\n    int w, h;\n    char s;\n    scanf(\"%d %d %c\", &w, &h, &s);\n    HollowRect(w, h, s);\n    return 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n#### 输入样例1\n```in\n-3 -4 #\n```\n#### 输出样例1\n```out\n\n```\n注：无输出。\n\n#### 输入样例2\n```in\n20 5 @\n```\n#### 输出样例2\n```out\n@@@@@@@@@@@@@@@@@@@@\n@                  @\n@                  @\n@                  @\n@@@@@@@@@@@@@@@@@@@@\n```\n\n要求：不得使用循环语句。\n\n---\n\n关联习题：重复显示字符(增强递归版)\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 15,
        "res": "[{'name': '递归函数', 'description': '递归函数是指在函数的定义中调用函数本身的函数。递归函数可以通过不断调用自身来解决问题，通常适用于问题可以被分解为相同或类似子问题的情况。在C语言中，递归函数需要注意递归的终止条件，以避免无限递归导致栈溢出。'}, {'name': '字符输出', 'description': '字符输出是指将指定的字符输出到屏幕上。在C语言中，可以使用printf函数来输出字符。输出字符时可以指定输出的格式，如使用%c格式符来输出字符。'}, {'name': '条件判断', 'description': '条件判断是指根据给定的条件来决定程序的执行路径。在C语言中，可以使用if语句来进行条件判断。if语句根据条件的真假来执行不同的代码块。条件可以是一个表达式，也可以是一个变量的值。'}, {'name': '函数参数传递', 'description': '函数参数传递是指将数据传递给函数的过程。在C语言中，函数可以接受多个参数，参数可以是基本数据类型（如整数、字符等）或者是指针类型。函数在调用时需要提供参数的值，这些值将被传递给函数内部进行处理。函数可以通过参数来接收外部传入的数据，也可以通过参数来返回计算结果。'}, {'name': '输入输出', 'description': '输入输出是指程序与外部环境进行数据交换的过程。在C语言中，可以使用scanf函数来接收用户的输入，使用printf函数来输出结果。输入输出可以是从键盘读取数据，也可以是向屏幕输出结果。输入输出可以是基本数据类型，也可以是字符串或者其他复杂的数据结构。'}, {'name': '字符串处理', 'description': '字符串处理是指对字符串进行各种操作的过程。在C语言中，可以使用字符串相关的函数来进行字符串处理，如strlen函数可以获取字符串的长度，strcpy函数可以复制字符串，strcat函数可以拼接字符串等。字符串处理可以包括字符串的查找、替换、截取等操作。'}, {'name': '循环语句', 'description': '循环语句是指在满足一定条件的情况下，重复执行某段代码的语句。在C语言中，可以使用while循环、do-while循环和for循环来实现循环功能。循环语句可以根据条件的真假来决定是否继续执行循环体内的代码，从而实现重复执行的效果。'}, {'name': '字符比较', 'description': '字符比较是指判断两个字符是否相等或者大小关系的过程。在C语言中，可以使用比较运算符（如==、!=、<、>等）来进行字符的比较。字符比较可以用于判断两个字符是否相等，或者判断一个字符是否大于、小于另一个字符。'}, {'name': '空心矩形', 'description': '空心矩形是指由一定字符组成的矩形，矩形内部为空。在C语言中，可以使用循环语句和条件判断来实现空心矩形的输出。空心矩形的宽度和高度可以通过参数传递给函数，字符可以通过参数指定。空心矩形的输出需要考虑边界条件和内部空白的处理。'}]"
    },
    {
        "sortId": 5199,
        "id": "1333733993232510976",
        "title": "h0131. 钞票",
        "content": "在这个问题中，你需要读取一个整数值并将其分解为多张钞票的和，每种面值的钞票可以使用多张，并要求所用的钞票数量尽可能少。\n\n请你输出读取值和钞票清单。\n\n钞票的可能面值有100,50,20,10,5,2,1。\n\n### 输入格式:\n\n输入一个整数n(0<n<1000000)。\n\n### 输出格式:\n\n参照输出样例，输出读取数值以及每种面值的钞票的需求数量。\n\n### 输入样例:\n\n```in\n326\n```\n\n### 输出样例:\n\n```out\n326\n3 nota(s) de R$ 100,00\n0 nota(s) de R$ 50,00\n1 nota(s) de R$ 20,00\n0 nota(s) de R$ 10,00\n1 nota(s) de R$ 5,00\n0 nota(s) de R$ 2,00\n1 nota(s) de R$ 1,00\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 21,
        "res": "[{'name':'读取整数值','description':'在这个问题中，你需要读取一个整数值并将其分解为多张钞票的和。'}, {'name':'钞票清单','description':'输出读取数值以及每种面值的钞票的需求数量。'}, {'name':'面值','description':'钞票的可能面值有100,50,20,10,5,2,1。'}, {'name':'循环','description':'使用循环来计算每种面值的钞票数量。'}, {'name':'条件判断','description':'根据面值的大小进行条件判断，确定需要的钞票数量。'}]"
    },
    {
        "sortId": 5200,
        "id": "1333650090333351936",
        "title": "旋转矩阵",
        "content": "\n一个 $$n*n$$ 的矩阵。\n\n你需要把矩阵按顺时针旋转 $$90$$° ，一共旋转 $$m$$ 次。\n\n请输出旋转 $$m$$ 次之后的 $$n*n$$ 的矩阵。\n\n### 输入格式:\n\n多组输入。\n\n对于每组输入，\n\n输入一个整数 $$n$$ 和一个正整数 $$m$$ 。\n\n当输入的 $$n=0$$ 时表示输入结束。\n\n接下来 $$n$$ 行，每行 $$n$$ 个正整数。\n\n### 输出格式:\n\n对于每组输入，\n\n请输出一共 $$n$$ 行，\n\n每行 $$n$$ 个正整数，每个数字之间以一个空格隔开，行末不加空格。\n\n表示旋转后的矩阵。\n\n### 输入样例:\n\n\n```in\n3 1\n1 2 3\n4 5 6\n7 8 9\n2 2\n1 2\n3 4\n0\n```\n\n### 输出样例:\n\n\n\n```out\n7 4 1\n8 5 2\n9 6 3\n4 3\n2 1\n```\n### 提示说明\n\n对于矩阵里的每个数  $$num$$ ，\n$$1 <= num <= 1000$$\n\n$$0 <= n <= 100 , 1 <= m <= 1e9$$",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 35,
        "res": "[{'name': '矩阵旋转', 'description': '将一个n*n的矩阵按顺时针旋转90°，旋转m次后输出旋转后的矩阵。'}]"
    },
    {
        "sortId": 5201,
        "id": "1333583680886321152",
        "title": "求矩阵中的最大小值",
        "content": "输入一个n×m的整数矩阵(n<=10,m<=10)，然后输出其中的最大值、最小值，并输出这两个值的下标。\n\n### 输入格式:\n\n输入矩阵的行数n和列数m(n<=10,m<=10)，然后输入所有矩阵中的数据。\n\n### 输出格式:\n\n第一行输出n×m的数组中的最大值及其下标。每两项之间一个空格。 第二行输出n×m的数组中的最小值及其下标。每两项之间一个空格。 (如果有相同的最大的数，要求输出行列最小，行优先)\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3 4\n65 77 21 88\n23 99 18 54\n19 82 73 99\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nmax=99 row=1 col=1\nmin=18 row=1 col=2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 216,
        "res": "[{'name':'二维数组','description':'二维数组是由多个一维数组组成的数据结构，可以用来表示矩阵等二维结构。在C语言中，可以使用二维数组来表示矩阵，并进行相关的操作。'}, {'name':'最大值和最小值','description':'在一个二维数组中，可以通过遍历数组的方式找到其中的最大值和最小值。可以使用两个变量来记录当前的最大值和最小值，并通过比较更新这两个变量的值。'}, {'name':'下标','description':'在C语言中，可以使用下标来访问数组中的元素。对于二维数组，可以使用两个下标来表示元素的位置，第一个下标表示行，第二个下标表示列。可以通过下标来获取数组中的元素，并进行相关的操作。'}]"
    },
    {
        "sortId": 5202,
        "id": "1333425020407173120",
        "title": "实验二",
        "content": "设计一种结构体，用来保存学生信息。假定学生的总人数不超过100人。学生的信息包括学号（<10000000的整数）、姓名（长度不超过19的字符串）、三科成绩（整数）以及综合成绩（实数）。除综合成绩外，各项数据均由键盘输入。综合成绩在计算前，其值为0。现在要求实现如下几种功能，分别有对应的操作方式：\n1）输入若干学生的信息。\n   对应的操作为：\n   在第一行中输入1和整数N，N代表要输入的学生人数。其后是N行数据，每行数据代表一个学生的信息。  \n2）计算所有学生的综合成绩，综合成绩 ＝ 第1科成绩 * r1 + 第2科成绩 * r2 + 第3科成绩 * r3。\n   对应的操作为：\n   在一行中输入2和三个实数r1、r2、r3，其中r1、r2和r3代表计算综合成绩时的加权系数，输入保证时r1 + r2 + r3 = 1.0。\n3）插入学生信息；\n   对应的操作为：\n   在第一行中输入3和整数N，N表示要将新输入的学生信息插入到原来的第N个学生前面。如果N大于当前学生人数，则插入到最后面。\n   第二行数据代表要插入的一个学生的信息。\n4）删除学生；\n   对应的操作为：\n   在第一行中输入4和整数N，N表示将要删除的学生的序号（从1开始）。如果N大于当前的学生人数，则不会删去学生信息。\n5）查询学生；\n   对应的操作为：\n   在第一行中输入5和学生的学号，如果能查询到对应的学生，则在一行中显示学生的信息，如果查询不到，则显示“Not Found.”。\n   还有一种查询方式为按姓名查询，操作如下：\n   在第一行中输入6和学生的姓名，如果能查询到对应的学生，则在一行中显示学生的信息，如果查询不到，则显示“Not Found.”。\n6)显示学生信息。\n   对应的操作为：\n   在第一行中输入7，会显示所有学生的信息，每位学生的信息占一行。\n7）退出系统\n   对应的操作为：\n   在第一行中输入0。\n### 输入格式:\n按上述要求输入信息。\n### 输出格式:\n按上述要求输出信息，同一行的各项信息间用一个空格分隔，综合成绩保留两位小数。并在最后输出一个空行。\n### 输入样例:\n```in\n1 4\n2001 Wang 90 85 75\n2003 Li 78 69 86\n2008 Zhao 85 74 90\n2010 Liu 85 72 85\n7\n2 0.2 0.35 0.45\n7\n6 Li\n5 2002\n3 3\n2005 Bai 80 76 80\n7\n2 0.5 0.5 0.0\n7\n4 1\n7\n0\n```\n### 输出样例:\n```out\n学号:2001 姓名:Wang 成绩1:90 成绩2:85 成绩3:75 综合成绩:0.00\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:0.00\n学号:2008 姓名:Zhao 成绩1:85 成绩2:74 成绩3:90 综合成绩:0.00\n学号:2010 姓名:Liu 成绩1:85 成绩2:72 成绩3:85 综合成绩:0.00\n\n学号:2001 姓名:Wang 成绩1:90 成绩2:85 成绩3:75 综合成绩:81.50\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:78.45\n学号:2008 姓名:Zhao 成绩1:85 成绩2:74 成绩3:90 综合成绩:83.40\n学号:2010 姓名:Liu 成绩1:85 成绩2:72 成绩3:85 综合成绩:80.45\n\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:78.45\n\nNot Found.\n\n学号:2001 姓名:Wang 成绩1:90 成绩2:85 成绩3:75 综合成绩:81.50\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:78.45\n学号:2005 姓名:Bai 成绩1:80 成绩2:76 成绩3:80 综合成绩:0.00\n学号:2008 姓名:Zhao 成绩1:85 成绩2:74 成绩3:90 综合成绩:83.40\n学号:2010 姓名:Liu 成绩1:85 成绩2:72 成绩3:85 综合成绩:80.45\n\n学号:2001 姓名:Wang 成绩1:90 成绩2:85 成绩3:75 综合成绩:87.50\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:73.50\n学号:2005 姓名:Bai 成绩1:80 成绩2:76 成绩3:80 综合成绩:78.00\n学号:2008 姓名:Zhao 成绩1:85 成绩2:74 成绩3:90 综合成绩:79.50\n学号:2010 姓名:Liu 成绩1:85 成绩2:72 成绩3:85 综合成绩:78.50\n\n学号:2003 姓名:Li 成绩1:78 成绩2:69 成绩3:86 综合成绩:73.50\n学号:2005 姓名:Bai 成绩1:80 成绩2:76 成绩3:80 综合成绩:78.00\n学号:2008 姓名:Zhao 成绩1:85 成绩2:74 成绩3:90 综合成绩:79.50\n学号:2010 姓名:Liu 成绩1:85 成绩2:72 成绩3:85 综合成绩:78.50\n\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 31,
        "res": "[{'name': '结构体', 'description': '学生信息通过结构体保存，结构体包括学号、姓名、三科成绩和综合成绩等字段。'}, {'name': '输入学生信息', 'description': '通过输入操作，可以输入若干学生的信息，包括学号、姓名和三科成绩。'}, {'name': '计算综合成绩', 'description': '通过输入操作，可以计算所有学生的综合成绩，综合成绩的计算公式为第1科成绩 * r1 + 第2科成绩 * r2 + 第3科成绩 * r3。'}, {'name': '插入学生信息', 'description': '通过输入操作，可以在指定位置插入新的学生信息，如果位置大于当前学生人数，则插入到最后面。'}, {'name': '删除学生', 'description': '通过输入操作，可以删除指定序号的学生信息，如果序号大于当前学生人数，则不会删除学生信息。'}, {'name': '查询学生', 'description': '通过输入操作，可以按学号或姓名查询学生信息，如果能查询到对应的学生，则显示学生的信息，否则显示“Not Found.”。'}, {'name': '显示学生信息', 'description': '通过输入操作，可以显示所有学生的信息，每位学生的信息占一行。'}, {'name': '退出系统', 'description': '通过输入操作，可以退出系统。'}]"
    },
    {
        "sortId": 5203,
        "id": "1333250197290790912",
        "title": "求两个整数的最大公约数和最小公倍数 ",
        "content": "求两个整数的最大公约数和最小公倍数 。定义一个函数求最大公约数，定义另一个函数根据求出的最大公约数求最小公倍数。在主函数中输出最大公约数和最小公倍数 。\n\n### 输入格式:\n\n在主函数一行中给出2个整数A和B。\n\n### 输出格式:\n\n在主函数中分别输出整数A和B的最大公约数和最小公倍数。\n\n### 输入样例:\n\n\n```in\n6 10\n```\n\n### 输出样例:\n\n\n\n```out\nlarge_n=2,least_n=30\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 173,
        "res": "[{'name':'最大公约数和最小公倍数'，'description':'求两个整数的最大公约数和最小公倍数。定义一个函数求最大公约数，定义另一个函数根据求出的最大公约数求最小公倍数。在主函数中输出最大公约数和最小公倍数。'}]"
    },
    {
        "sortId": 5204,
        "id": "1333245357659574272",
        "title": "直播获奖",
        "content": "某编程竞赛即将举行。为了增加观赏性，组委会决定逐一评出每个选手的成绩，并直播即时的获奖分数线。本次竞赛的获奖率为 w%，即当前排名前 w% 的选手的最低成绩就是即时的分数线。\n\n更具体地，若当前已评出了 p 个选手的成绩，则当前计划获奖人数为 max(1,⌊p∗w%⌋)，其中 w 是获奖百分比，⌊x⌋ 表示对 x 向下取整，max(x,y) 表示 x 和 y 中较大的数。如有选手成绩相同，则所有成绩并列的选手都能获奖，因此实际获奖人数可能比计划中多。\n\n作为评测组的技术人员，请你帮组委会写一个直播程序。\n\n### 输入格式:\n\n第一行有两个整数 n, w。分别代表选手总数与获奖率。\n第二行有 n 个整数，依次代表逐一评出的选手成绩。\n\n### 输出格式:\n\n只有一行，包含 n 个非负整数，依次代表选手成绩逐一评出后，即时的获奖分数线。相邻两个整数间用一个空格分隔。最后一个整数后无空格。\n\n### 输入样例1:\n\n在这里给出一组输入。例如：\n\n```in\n10 60\n200 300 400 500 600 600 0 300 200 100\n```\n\n### 输出样例1:\n\n在这里给出相应的输出。例如：\n\n```out\n200 300 400 400 400 500 400 400 300 300\n```\n\n### 输入样例2:\n\n在这里给出一组输入。例如：\n\n```in\n10 30\n100 100 600 100 100 100 100 100 100 100\n```\n\n### 输出样例2:\n\n在这里给出相应的输出。例如：\n\n```out\n100 100 600 600 600 600 100 100 100 100\n```\n\n### 说明提示\n\n![l453vhow.png](~/f89e012b-9dea-42d7-b667-2a80759a5a9b.png)\n\n\n\n\n### 数据规模与约定\n各测试点的 n 如下：\n\n\t\t  测试点编号         n=\n\t\t\t1∼3\t         10\n\t\t\t4∼6\t         500\n\t\t\t7∼10            2000\n\t\t\t11∼17           10000\n\t\t\t18∼20           100000\n\n对于所有测试点，每个选手的成绩均为不超过 600 的非负整数，获奖百分比 w 是一个正整数且 1≤w≤99。",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 22,
        "res": "[{'name': '数组', 'description': '数组是一种存储多个相同类型数据的连续内存空间的数据结构。在C语言中，可以使用数组来存储一组成绩数据。'}, {'name': '排序算法', 'description': '排序算法是将一组数据按照一定的规则进行排列的算法。在这道题中，需要对选手的成绩进行排序，以便计算获奖分数线。常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。'}, {'name': '取整操作', 'description': '取整操作是将一个浮点数转换为整数的操作。在这道题中，需要使用取整操作来计算获奖人数。可以使用C语言中的floor函数来进行取整操作。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块的语句。在这道题中，可以使用条件语句来判断选手的成绩是否相同，以及计算获奖分数线。常见的条件语句有if语句和switch语句。'}, {'name': '循环语句', 'description': '循环语句是重复执行一段代码块的语句。在这道题中，可以使用循环语句来遍历选手的成绩，并计算获奖分数线。常见的循环语句有for循环、while循环和do-while循环。'}]"
    },
    {
        "sortId": 5205,
        "id": "1333224081624707072",
        "title": "编写一个函数，判断某一正整数是否为素数",
        "content": "编写一个函数isprime(int n)，用于判断某一正整数n是否为素数，如果n是素数则函数的值返回1，否则返回0。用main()函数调用该函数。运行程序，分别输入17和38，查看运行结果。\n\n### 输入格式:\n\n输入任意一个正整数n。\n\n### 输出格式:\n\n若n为素数，则输出1，否则输出0。\n\n### 输入样例:\n\n```in\n17\n```\n\n### 输出样例:\n\n```out\n1\n```\n### 输入样例:\n\n```in\n38\n```\n\n### 输出样例:\n\n```out\n0\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 192,
        "res": "[{'name': '函数', 'description': '函数是一段完成特定任务的独立代码块，可以通过函数名来调用执行。在C语言中，函数由函数头和函数体组成，函数头包括函数的返回类型、函数名和参数列表，函数体包括函数的具体实现代码。本题中需要编写一个函数isprime(int n)来判断一个正整数n是否为素数。'}, {'name': '判断语句', 'description': '判断语句用于根据条件的真假来执行不同的代码块。在C语言中，常用的判断语句是if语句，if语句根据条件的真假来决定是否执行某段代码。本题中可以使用if语句来判断一个数是否为素数。'}, {'name': '循环语句', 'description': '循环语句用于重复执行某段代码，直到满足退出条件为止。在C语言中，常用的循环语句有for循环和while循环。本题中可以使用循环语句来判断一个数是否为素数。'}, {'name': '变量', 'description': '变量是用于存储数据的内存空间，可以通过变量名来访问和操作其中的数据。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。本题中可以使用变量来存储判断结果和输入的数值。'}]"
    },
    {
        "sortId": 5206,
        "id": "1333065327918764032",
        "title": "输出一个整数的所有约数（不包含1和自身）。",
        "content": "本题目要求读入1个整数，输出其所有约数（穷举法。是约数则输出，无需break）。\n\n### 输入格式:\n\n输入一个正整数（int型, 配合%d读入。不必考虑非法输入）。\n\n### 输出格式:\n\n输出该整数的所有约数（注意：不包含1和自身）。简单起见，空格隔开数据，且假设最后一数据结尾也有空格。即如printf(\"%d \"，i)；格式输出每个约数i即可。\n\n### 输入样例:\n\n\n```in\n20\n```\n\n### 输出样例:\n\n\n```out\n2 4 5 10 \n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 138,
        "res": "[{'name': '穷举法', 'description': '穷举法是一种通过遍历所有可能的情况来解决问题的方法。在本题中，使用穷举法来找出给定整数的所有约数。具体步骤是从2开始遍历到给定整数的平方根，如果给定整数能够被当前遍历的数整除，则输出该数作为约数。'}]"
    },
    {
        "sortId": 5207,
        "id": "1332883016531103744",
        "title": "最短路径条数",
        "content": "在一个m行n列的网格中，每个网格的各边的长度均相等，求由A(x1,y1)点到达B(x2,y2)点的最短路径条数，其中1<=m,n<=30。输入保证x2>=x1,y2>=y1\n如有下图网格，起点和终点分别是A(1,1),B（2，3）\n则最短路线是:\n\n           (1,1)->(1,2)->(1,3)->(2,3)\n           (1,1)->(2,1)->(2,2)->(2,3)\n           (1,1(->(1,2)->(2,2)->(2,3)\n共3条最短路线\n\n![网格.png](~/871a7981-0357-4cd1-ac57-893c4c2478f2.png)\n\n### 输入格式:\n\n第一行输入网格的行数m和列数n\n第二行输入A点的坐标\n第三行输入B点的坐标\n\n### 输出格式:\n\n输出一个整数,表示从A点到达B点的最短路线条数\n\n### 输入样例1:\n\n```in\n6 7\n1 1\n2 3\n```\n\n### 输出样例1:\n\n```out\n3\n```\n### 输入样例2:\n\n```in\n30 30\n1 1\n30 30\n```\n\n### 输出样例2:\n\n```out\n51542064\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "53",
                        "name": "经典算法",
                        "isLeaf": false,
                        "enName": "Classical Algorithms"
                    },
                    {
                        "id": "56",
                        "name": "动态规划",
                        "isLeaf": true,
                        "enName": "Dynamic Programming"
                    }
                ]
            }
        ],
        "referenceCount": 42,
        "res": "[{'name': '二维数组', 'description': '二维数组是一种特殊的数组，它可以表示一个具有行和列的表格结构。在C语言中，可以使用二维数组来表示网格。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在解决该问题中，可以使用循环来遍历网格中的每个点。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件判断来执行不同代码的结构。在解决该问题中，可以使用条件语句来判断当前点是否为起点或终点。'}, {'name': '递归', 'description': '递归是一种函数调用自身的技术。在解决该问题中，可以使用递归来计算从起点到终点的最短路径条数。'}, {'name': '动态规划', 'description': '动态规划是一种通过将问题分解为子问题并保存子问题的解来解决复杂问题的方法。在解决该问题中，可以使用动态规划来计算从起点到终点的最短路径条数。'}]"
    },
    {
        "sortId": 5208,
        "id": "1332514124812369920",
        "title": "德才几何",
        "content": "宋朝司马光的德才论大意是：德才双优是圣人，德胜才者是君子，才胜德者是小人，德才不具是愚人。请编写函数，根据所给定的优秀分数线HL，合格分数线L以及长度为N的成绩二维数组（二维数组由N个一维数组构成，每个一维数组的三个分量依次为考号，德育分与技能分），对全部考生进行德与才的分类排序：\n第一类：德才双优（德，才分均优秀）；\n第二类：德优（德分优秀，且才分合格）；\n第三类：德胜才（德，才均合格，且德分高于才分）；\n第四类：有德才（德，才分均达合格的其它人员）；\n第五类：其它（德，才有不合格者）。\n说明：各类内部按德分与才分的总和降序排列。\n\n### 输入样例：\n第一行，空格分隔的三个整数：优秀分数组HL，合格分数线L，学生人数。\n第二行起是N个学生的信息（每行一人：空格分隔的学号，德育分与才能分）。\n```in\n87 78 7\n2 98 77\n4 87 77\n6 90 78\n8 86 99\n10 79 80\n12 79 78\n14 77 99\n```\n### 输出样例：\n你只需要在原数组中根据优秀与合格的分数线，按德、才双优，德优，德胜才，合格的，其它的顺序（同一种情况按总分从高到低排列）进行就地分类重排，输入由测试程序完成。\n```out\n6:90,78\n12:79,78\n8:86,99\n10:79,80\n14:77,99\n2:98,77\n4:87,77\n```\n\n### 函数接口定义：\n```c\n在这里描述函数接口。例如：\nvoid sortFun (int **D,int N,int HL,int L );\n```\n其中 `N` 和 `D` 都是用户传入的参数。 `N` 的值不超过`int`的范围； `D` 是[0, 9]区间内的个位数。函数须返回 `N` 中 `D` 出现的次数。\n\n/* 请在这里填写答案 */\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 13,
        "res": "[{'name':'二维数组', 'description':'C语言中的二维数组是由多个一维数组组成的数据结构，可以用来表示矩阵或表格等数据结构。在本题中，需要使用二维数组来存储学生的信息，每个一维数组表示一个学生的信息，包括学号、德育分和技能分。'}，{'name':'排序算法', 'description':'排序算法是将一组数据按照一定的规则进行排列的算法。在本题中，需要使用排序算法对学生的信息进行排序，按照德分和才分的总和降序排列。常用的排序算法有冒泡排序、插入排序、选择排序、快速排序等。'}]"
    },
    {
        "sortId": 5209,
        "id": "1332451634549927936",
        "title": "计算两个数的和",
        "content": "本题目要求读入2个整数A和B，两数以英文逗号分隔开，然后输出它们的和。\n\n### 输入格式:\n\n输入在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n在一行中输出A+B的值。\n\n### 输入样例:\n\n\n```in\n1,6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n7\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 34,
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型的概念和使用方法。'}, {'name':'输入输出'，'description':'C语言中的输入和输出操作，包括读取和输出整数、字符等。'}, {'name':'运算符'，'description':'C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'控制流程'，'description':'C语言中的控制流程，包括条件语句、循环语句等。'}, {'name':'函数'，'description':'C语言中的函数的定义和使用。'}, {'name':'数组'，'description':'C语言中的数组的定义和使用。'}, {'name':'字符串'，'description':'C语言中的字符串的定义和使用。'}, {'name':'指针'，'description':'C语言中的指针的概念和使用方法。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括打开文件、读写文件等。'}]"
    },
    {
        "sortId": 5210,
        "id": "1332249124526673920",
        "title": "选择排序",
        "content": "本题要求从键盘读入n个整数，对这些数做选择排序。输出选择排序每一步的结果和最终结果。\n\n### 输入格式:\n\n输入的第一行是一个正整数n，表示 在第二行中会有n个整数。\n\n### 输出格式:\n\n输出选择排序每一步的结果和最终结果。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n5\n3 7 2 9 1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nstep 1: 1 7 2 9 3 \nstep 2: 1 2 7 9 3 \nstep 3: 1 2 3 9 7 \nstep 4: 1 2 3 7 9 \nsorted array: 1 2 3 7 9 \n```\n### 注意：\n输出的冒号 : 是英文输入法下的符号，冒号后有一个空格。每个整数后有一个空格。",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 60,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "37",
                        "name": "排序",
                        "isLeaf": false,
                        "enName": "Sorting"
                    },
                    {
                        "id": "40",
                        "name": "选择排序",
                        "isLeaf": true,
                        "enName": "Selection Sort"
                    }
                ]
            }
        ],
        "referenceCount": 431,
        "res": "[{'name': '选择排序', 'description': '选择排序是一种简单直观的排序算法。它的基本思想是每一次从待排序的数据元素中选出最小（或最大）的一个元素，存放在序列的起始位置，直到全部待排序的数据元素排完。'}]"
    },
    {
        "sortId": 5211,
        "id": "1332246363156303872",
        "title": "青青草原",
        "content": "由于羊羊们天天跟灰太狼斗智斗勇，草原上的草都无人打理，羊羊们找到了种草带师 $$Bear$$_ $$2$$ 来帮忙规划种草工程。 $$Bear$$_ $$2$$ 直接把青青草原分成了 $$n*m$$ 的方格，第一天在  $$(X,Y)$$ 播种，每隔一天草就会让相邻格子也长出草来。\n\n说人话就是如果 $$(X,Y)$$ 有草，那么第二天 $$(X+1,Y)(X,Y+1)(X-1,Y)(X,Y-1)$$ 也会长出草\n\n现在，羊羊们想知道多少天后青青草原上又可以长满草。\n\n### 输入格式:\n\n第一行输入样例组数 $$t(1<=t<=100)$$ \n\n每组数据输入四个正整数 $$n,m,X,Y(1<=n,m<=10^9,1<=X,Y<=n)$$ 。分别表示青青草原的规格和 $$Bear$$_ $$2$$ 第一天种草的位置。\n\n### 输出格式:\n\n每组数据，请输出青青草原长满草所需的天数。\n\n### 输入样例:\n```in\n2\n2 2 1 1\n3 3 2 2\n```\n\n### 输出样例:\n\n\n```out\n2\n2\n```\n\n### 提示:\n\n20%的数据，$$1<=n,m<=10$$\n\n40%的数据，$$1<=n,m<=10^3$$\n\n60%的数据，$$1<=n,m<=10^4$$\n\n100%的数据，$$1<=n,m<=10^9$$",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 23,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。常见的循环结构有for循环、while循环和do-while循环。在本题中，可以使用循环结构来模拟每天草的生长过程，直到草原上的草全部长满。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件的真假来决定是否执行某段代码。在本题中，可以使用条件判断来判断相邻格子是否已经长出草，从而确定是否需要继续种草。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储草原的规格和种草的位置，以及记录长满草所需的天数。'}, {'name': '输入输出', 'description': '输入输出是C语言中用于与用户交互的一种操作。在本题中，可以使用输入输出来读取样例数据和输出结果。'}, {'name': '数学运算', 'description': '数学运算是C语言中的一种操作，用于进行数值计算。在本题中，可以使用数学运算来计算相邻格子的位置，以及判断草原是否已经长满草。'}]"
    },
    {
        "sortId": 5212,
        "id": "1332125625380294656",
        "title": "有头结点的链表创建",
        "content": "有一链式结构，定义如下 ： </br>\nstruct stu{\n</br>\n      char name[20];</br>\n       int no;</br>\nstruct stu *next;</br>\n};</br>\n创建一个函数myCreate(head,m)，head为链表的头结点，m为要创建的结点个数。函数功能是创建一个带有头结点的链表，结点个数由ｍ指定，在函数中需要将每个结点的数据域输入，函数的返回值为int类型，1代表创建成功，0代表创建失败（失败的原因可能是输入数据有误或内存空间不足等）。</br>\n</br>创建 函数 show(head)，显示带有头结点的链表head的全部节点信息。没有返回值。</br>\n</br>创建 函数myIndex(head,s) ,在head中查找第一个name域与s相等的结点，返回找到结点的地址，若没有找到，返回NULL。\n</br>创建myDel(head,s)函数。在head中查找第一个name域与s相等的结点，将这个结点从`head`中删除，若删除成功，返回值 为1，没找到结点返0。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nint  myCreate(struct stu *head,int m);\nvoid show(struct stu *head);\nstruct stu * myIndex(struct stu *head,char *s);\nint myDel(struct stu *head,char *s);\n```\n\n其中:</br>\nmyCreate 函数中 `head` 和 `m` 都是用户传入的参数。 `head` 为链表的头结点，数据域为空。 `m` 是1-100之间的整数。myCreate函数须返回整型数，1代表链表创建成功，0代表链表未创建成功。<br>\n<br>show函数中`head` 是用户传入的参数。 `head` 为链表的头结点，数据域为空。功能显示所有结点的信息，每行信息为name no，中间用空格分隔。无返回值。<br><br>\nmyIndex函数中， `head` 和 `s` 都是用户传入的参数。在head中查找第一个name域与s相等的结点，返回找到结点的地址，若没有找到，返回NULL。<br><br>\nmyDel函数中，`head` 和 `s` 都是用户传入的参数。在head中查找第一个name域与s相等的结点，将这个结点从`head`中删除，若删除成功，返回值 为1，没找到结点返0。\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\nstruct stu{\n      char name[20];\n      int no;\n      struct stu *next;\n};\n\nint  myCreate(struct stu *head,int m);\nvoid show(struct stu *head);\nstruct stu * myIndex(struct stu *head,char *s);\nint myDel(struct stu *head,char *s);\n\nint main()\n{\n  struct stu head;\n\tstruct stu *p;\n\tchar name[20];\n  int  m;\n  scanf(\"%d\", &m);// 输入m，代表结点个数\n  if(myCreate(&head,m)==1)//如果创建成功 \n\t  {\n\t\t\tprintf(\"created...\\n\");\n\t\t\tshow(&head);//显示所有结点的信息\n\t\t\t scanf(\"%s\",name);//输入要查找的姓名\n\t\t\t if((p=myIndex(&head,name))!=NULL){//如果找到了显示信息  \n\t\t\t      printf(\"%s %d\\n\",p->name,p->no);\n\t\t\t }\n\t\t\t else\n\t\t\t    printf(\"not found.\\n\");\n\t\t\t scanf(\"%s\",name);//输入要删除的姓名\n\t\t   if(myDel(&head,name)==1) \n\t\t\t\t    printf(\"deleted.\\n\");\n\t\t   else\n\t\t\t\t    printf(\"not found.\\n\");\n\t\t }\n else printf(\"create failure.\");\n return 0;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2\nliming 12\nmaming 34\nliming\nliming\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\ncreated...\nliming 12\nmaming 34\nliming 12\ndeleted.\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2\nliming 12\nmaming pp\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\ncreate failure.\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 24,
        "res": "[{'name': '链表的定义和创建', 'description': '学生定义了一个链表结构，包含姓名、学号和指向下一个节点的指针。要求学生创建一个带有头结点的链表，结点个数由用户输入的m指定，每个结点的数据域需要输入。函数的返回值为int类型，1代表创建成功，0代表创建失败。'}, {'name': '链表的遍历和显示', 'description': '学生定义了一个函数show，用于显示带有头结点的链表的全部节点信息。函数没有返回值。'}, {'name': '链表的查找', 'description': '学生定义了一个函数myIndex，用于在链表中查找第一个name域与s相等的结点，返回找到结点的地址，若没有找到，返回NULL。'}, {'name': '链表的删除', 'description': '学生定义了一个函数myDel，用于在链表中查找第一个name域与s相等的结点，将这个结点从链表中删除，若删除成功，返回值为1，没找到结点返回0。'}]"
    },
    {
        "sortId": 5213,
        "id": "1331985930310692864",
        "title": "单重循环——打印100-x之间的水仙花数。水仙花数是一个三位数，特点是其各位数字的立方和等于其自身。",
        "content": "从键盘输入x的值，打印100-x之间的水仙花数。水仙花数是一个三位数，特点是其各位数字的立方和等于其自身。\n如153是水仙花数。因为各位数字立方和即：1+125+27 正好等于153。\n\n### 输入格式:\n\n输入x的值。（x为100-999之间，不考虑非法输入）\n\n### 输出格式:\n\n输出100到x之间（含x）所有的水仙花数。以空格分隔。简单起见，最后一个数的结尾也有空格。\n\n### 输入样例1:\n\n```in\n400\n```\n### 输入样例2:\n\n```in\n200\n```\n\n### 输出样例1:\n\n```out\n153 370 371 \n```\n### 输出样例2:\n\n```out\n153 \n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 71,
        "res": "[{'name': '循环语句', 'description': '循环语句用于重复执行一段代码，可以使用for循环或while循环来实现。在本题中，可以使用for循环来遍历100到x之间的所有数。'}, {'name': '条件语句', 'description': '条件语句用于根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断一个数是否为水仙花数。'}, {'name': '数学运算', 'description': '数学运算用于进行数值计算，包括加减乘除等运算。在本题中，可以使用数学运算来计算一个数的各位数字的立方和。'}, {'name': '输入输出', 'description': '输入输出用于从键盘获取输入数据，并将结果输出到屏幕上。在本题中，需要从键盘输入x的值，并将水仙花数输出到屏幕上。'}]"
    },
    {
        "sortId": 5214,
        "id": "1331959646322995200",
        "title": "单重循环—数鸡蛋。",
        "content": " 妈妈给小明家新送来 y个鸡蛋。 已知小明家原有鸡蛋的个数x是满足“三个三个的数剩1个，5个5个数剩z个，7个7个数剩3个”的最小数，  请问小明家共有多少个鸡蛋？ （设输入为正数，不考虑非法输入） \n\n### 输入格式:\n\n在一行中输入y（新送的鸡蛋的数目）和z（5个5个数剩z个）的值，以空格分隔。\n\n### 输出格式:\n\n直接输出鸡蛋的总数目。\n\n### 输入样例1:\n\n```in\n3 2\n```\n### 输入样例2:\n\n```in\n5 1\n```\n\n### 输出样例1:\n\n```out\n55\n```\n### 输出样例2:\n\n```out\n36\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 142,
        "res": "[{'name':'基本运算符','description':'C语言中的基本运算符包括加法运算符、减法运算符、乘法运算符、除法运算符、取余运算符等。在本题中，需要使用加法运算符、取余运算符等进行计算。'}, {'name':'条件语句','description':'C语言中的条件语句包括if语句、else语句等。在本题中，可以使用条件语句判断满足题目中给出的条件。'}, {'name':'循环语句','description':'C语言中的循环语句包括for循环、while循环等。在本题中，可以使用循环语句进行迭代计算。'}, {'name':'变量','description':'C语言中的变量用于存储数据。在本题中，需要定义变量来存储鸡蛋的总数目。'}, {'name':'输入输出','description':'C语言中的输入输出函数包括scanf函数、printf函数等。在本题中，需要使用scanf函数接收输入数据，使用printf函数输出结果。'}]"
    },
    {
        "sortId": 5215,
        "id": "1331948840810229760",
        "title": "螺旋方阵",
        "content": "本题要求从右下角开始按螺旋型递减打印数字方阵。\n\n### 输入格式:\n\n输入为一个正整数n (1=<n<=20)。\n\n### 输出格式:\n\n螺旋型递减顺序输出n行n列的数字方阵，每个数字占4个宽度，左对齐。\n\n### 输入样例:\n\n\n```in\n4\n```\n\n### 输出样例:\n\n\n\n```out\n10  9   8   7   \n11  2   1   6   \n12  3   4   5   \n13  14  15  16  \n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 56,
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，可以根据条件来控制循环的次数。在本题中，可以使用循环语句来控制数字的打印顺序。'}, {'name':'二维数组'，'description':'二维数组是一种特殊的数组，可以用来表示矩阵或者表格。在本题中，可以使用二维数组来表示数字方阵，并按照螺旋型递减的顺序进行打印。'}, {'name':'条件判断'，'description':'条件判断用于根据不同的条件执行不同的代码。在本题中，可以使用条件判断来确定数字的打印顺序。'}, {'name':'格式化输出'，'description':'格式化输出用于按照指定的格式输出数据。在本题中，可以使用格式化输出来保证每个数字占4个宽度，并左对齐。'}]"
    },
    {
        "sortId": 5216,
        "id": "1331901484513415168",
        "title": "素数探求",
        "content": "素数，是不能被1和它本身以外的其他整数整除的**正整数**。按这个定义，**负数、0和1都不是素数**，而17之所以是素数，因为除了1和17以外，它不能被2~16之间的任意整数整除。\n\n用  **2 ~ sqrt(m)** （m的平方根） 之间的整数去试商：\n* 若m能被以上范围内的某个整数整除（余数为0），则m不是素数；\n* 若以上范围之间的每个整数都不能整除m，则m是素数。\n\n根据以上算法编写函数 IsPrime()，从键盘任意输入一个整数m，判断m是否为素数。\n### 函数接口定义\n```\nint IsPrime(int m);\n```\n其中，`m`是用户输入的数。\n\n如果`m`是素数，函数返回`1`；否则，函数返回`0`\n\n### 输入格式:\n\n用户输入任意一个正整数 m。\n\n### 输出格式:\n\n参看输出样例：\n\n如果m是素数，则按` \"%d is a prime number\\n\"`的格式输出该数是素数\n\n否则按`\"%d is not a prime number\\n\"`的格式输出该数不是素数\n\n### 输入样例:\n\n\n```in\n7\n\n```\n\n### 输出样例:\n\n\n```out\n7 is a prime number\n\n```\n### 输入样例:\n\n\n```in\n1\n\n```\n\n### 输出样例:\n\n\n```out\n1 is not a prime number\n\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 66,
        "res": "[{'name': '素数判断', 'description': '根据给定的算法编写函数IsPrime()，判断一个数是否为素数。函数接口定义为int IsPrime(int m)，其中m是用户输入的数。如果m是素数，函数返回1；否则，函数返回0。'}]"
    },
    {
        "sortId": 5217,
        "id": "1331890789705101312",
        "title": " 递归法求最大公约数",
        "content": "两个正整数的最大公约数（Greatest Common Divisor，GCD）是能够整除这两个整数的最大整数。请实现程序，用递归方法计算两个数的最大公约数。\n\n##### **递归法：**\n\n* 当`a > b`时，则`a` 和`b`与`a - b` 和` b` 的最大公约数相同，即`Gcd(a,b)=Gcd(a-b.b)`\n* 当`b > a`时，则`a` 和`b`与`a` 和 ` b- a` 的最大公约数相同，即`Gcd(a,b)=Gcd(a.b-a)`\n* 当`a = b`时，a 和 b的最大公约数就是` a` （或`b`）\n* \n### 输入格式:\n\n由用户从键盘输入两个正整数。\n\n### 输出格式:\n\n输出两个正整数的最大公约数。\n\n如果输入的数不是正整数，则程序输出：\n```\nInput Data error!\n```\n### 函数接口定义：\n```\nint Gcd(int a, int b);\n```\n其中，`a`和`b`是用户输入的两个正整数。\n\n函数返回`a`和`b`的最大公约数。\n\n如果`a`或`b`不是不是正整数，则函数返回`-1`。\n### 主程序样例：\n这里给出主函数及对Gcd函数的调用样例：\n```\n#include <stdio.h>\nint Gcd(int a, int b);\nint main()\n{\n    int a, b, c;\n    scanf(\"%d %d\", &a, &b);\n    c = Gcd(a,b);\n    if (c != -1)\n    {\n        printf(\"%d\\n\", c);\n    }\n    else\n    {\n        printf(\"Input Data error!\\n\");\n    }\n    return 0;\n}\n\n/* 请在这里完成 Gcd 函数*/\n```\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n15 20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n5\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 127,
        "res": "[{'name': '递归法', 'description': '递归法是一种通过调用自身的方式解决问题的方法。在计算两个数的最大公约数时，可以使用递归法。具体步骤如下：\\n1. 当a > b时，则a和b与a - b和b的最大公约数相同，即Gcd(a,b)=Gcd(a-b.b)\\n2. 当b > a时，则a和b与a和b - a的最大公约数相同，即Gcd(a,b)=Gcd(a.b-a)\\n3. 当a = b时，a和b的最大公约数就是a（或b）\\n4. 递归终止条件为a或b不是正整数，此时返回-1。'}]"
    },
    {
        "sortId": 5218,
        "id": "1331878828862910464",
        "title": "计算1！+2！+...+n!",
        "content": "已知求阶乘的函数如下，利用这个函数，编程计算并输出1!+2!+...+n!的值。\n\n其中n由用户从键盘输入。\n\n```\nunsigned long  Fact(unsigned int  n)\n{\n    int  i;\n    unsigned long result = 1;\n    for (i=2; i<=n; i++)\n        result *= i;\n    return result;\n}\n```\n### 输入格式:\n\n用户从键盘输入正整数n的值。\n\n### 输出格式:\n\n按输出样例的形式输出计算的结果。\n\n### 输入样例:\n\n\n\n```in\n5\n```\n\n### 输出样例:\n\n\n```out\nsum=153\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 245,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在这个题目中，使用了for循环来计算阶乘。'}, {'name': '函数', 'description': '函数是C语言中的一种代码封装机制，用于实现特定的功能。在这个题目中，使用了一个计算阶乘的函数Fact()。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在这个题目中，使用了变量i和result来存储计算过程中的中间结果。'}, {'name': '输入输出', 'description': '输入输出是C语言中用于与用户交互的一种机制。在这个题目中，使用了从键盘输入n的值，并将计算结果输出到屏幕上。'}]"
    },{
        "sortId": 5219,
        "id": "1331818455002566656",
        "title": "模块化程序设计",
        "content": "采用模块化程序设计的方法完成下面内容：\n\n   （1）调用Input 函数读入N个学生的成绩\t \n\t （2）调用Output 函数输出排序前的学生成绩\t \n\t （3）调用Sort 函数将N个学生的成绩按降序排序\t \n\t （4）调用Output 函数输出排序后的学生成绩。\t \n\t （5）调用Average 函数求出平均分，并在主函数输出平均分的值。\t \n\t （6）调用Max 函数求出最高分，并在主函数输出。\n\n N最大为20，N的值从键盘读入。\n实验要求：\n\n       （1）各功能采用函数实现。\n       （2）不能采用全局量，函数间的数据传递通过参数完成。\n       （3）函数设计合理，具有很好的通用性。\n\t   （4）测试数据完备\n\n\n[《C语言程序设计1A》实验报告模板-11.26.doc](~/d44c9684-83b4-428b-80aa-146c57b7c857.doc)\n",
        "type": "SUBJECTIVE",
        "difficulty": 1,
        "score": 100,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 14,
        "res": "[{'name': '模块化程序设计', 'description': '模块化程序设计是一种将程序分解为多个模块或函数的方法，每个模块或函数负责完成特定的功能。通过模块化程序设计，可以提高程序的可读性、可维护性和重用性。在本题中，要求采用模块化程序设计的方法完成各个功能，即将输入、输出、排序、求平均分和最高分等功能分别封装成不同的函数。'},\n {'name': '函数调用', 'description': '函数调用是指在程序中通过函数名和参数列表来调用函数，以执行函数中定义的操作。在本题中，需要调用Input函数读入学生的成绩，调用Output函数输出排序前和排序后的学生成绩，调用Sort函数对学生成绩进行降序排序，调用Average函数求平均分，调用Max函数求最高分。函数调用可以将程序的功能分解为多个模块，提高程序的可读性和可维护性。'},\n {'name': '数组', 'description': '数组是一种存储多个相同类型数据的数据结构。在本题中，可以使用数组来存储学生的成绩，通过数组下标来访问和修改成绩。通过数组，可以方便地对多个数据进行操作，如排序、求平均分和最高分等。'},\n {'name': '排序', 'description': '排序是将一组数据按照一定的规则进行重新排列的过程。在本题中，需要对学生成绩进行降序排序，即将成绩从高到低排列。可以使用常见的排序算法，如冒泡排序、插入排序或快速排序等。排序可以使数据按照一定的顺序排列，方便后续的操作和分析。'},\n {'name': '平均值', 'description': '平均值是一组数据的总和除以数据的个数得到的结果。在本题中，需要求出学生成绩的平均分。可以通过遍历数组，将所有成绩相加，然后除以学生人数得到平均分。平均值可以反映一组数据的总体水平，是对数据的一种概括和描述。'},\n {'name': '最高值', 'description': '最高值是一组数据中的最大值。在本题中，需要求出学生成绩的最高分。可以通过遍历数组，找到数组中的最大值。最高值可以反映一组数据中的最好水平，是对数据的一种概括和描述。'}]"
    },
    {
        "sortId": 5220,
        "id": "1331752450788208640",
        "title": "链表的基本操作-查询",
        "content": "有一链式结构，定义如下 ： \nstruct stu{</br>\nchar name[20]; </br>\nint no; </br>\nstruct stu *next;</br>\n}; </br>\n创建一个函数myindex(head,name)，在链表head中查找name域为name的结点，返回查找后结果。如果p链表中结点的name域与name相同，返回该结点的地址，如果没找到，返回NULL。 程序中create函数已经为我们创建了一个有10个结点的无头结点的链表。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nstruct stu * myindex(struct stu *head,char *name);\n```\n\n在这里解释接口参数。例如：其中 `head` 和 `name` 都是用户传入的参数。 `head` 是链表的头指针； `name` 是要查找的姓名字符串。函数的返回值为如果p链表中结点的name域与name相同，返回该结点的地址，如果没找到，返回NULL。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstruct stu{\n   char name[20];\n     int no;\n     struct stu *next;};\nstruct stu * create();\nstruct stu * myindex(struct stu *head,char *name);\nvoid show(struct stu *p){\n  while(p){\n       printf(\"%s %d\\n\",p->name,p->no);\n       p=p->next;\n     }\n}\nint main()\n{\n    char name[20];\n    struct stu *p=NULL,*q;\n    gets(name);\n    p=create();\n    q=myindex(p,name);\n    if(q)printf(\"%s %d\",q->name,q->no);\n\t\telse printf(\"no found\");\n  return 0;\n\n}\nstruct stu * create(){\n     struct stu *p,*h=NULL,*q;\n     char name[10][20]={\"liming\",\"maming\",\"zhaoming\",\"yaoming\",\"xiaming\",\"lixiaoming\",\n                         \"zhangming\",\"nieming\",\"zhouming\",\"hanming\"};\n     int i=0;\n     while(i<10){\n          p=(struct stu*)malloc(sizeof(struct stu));\n          strcpy(p->name,name[i]);\n          p->no=i;\n          if(h==NULL){h=p; q=p;}\n          else{ q->next=p;\n                q=p;\n           }\n           i++;\n     }\n     q->next=NULL;\n     return h;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\nxiaoming\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nno found\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 43,
        "res": "[{'name': '链表', 'description': '链表是一种常用的数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。在C语言中，可以使用结构体来定义链表节点，通过指针将各个节点连接起来。本题中的链表是一个无头结点的链表，即第一个节点即为链表的头节点。'}, {'name': '结构体', 'description': '结构体是一种用户自定义的数据类型，它可以包含多个不同类型的成员变量。在C语言中，可以使用struct关键字来定义结构体，并通过.运算符来访问结构体的成员变量。本题中的链表节点就是一个结构体，包含了name、no和next三个成员变量。'}, {'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改该地址上存储的数据。在本题中，使用指针来连接链表节点，通过指针来遍历链表并查找目标节点。'}, {'name': '函数', 'description': '函数是C语言中的一种代码模块，用于完成特定的任务。函数可以接受输入参数，并返回一个结果。在本题中，需要创建一个函数myindex，该函数接受链表头指针和目标姓名作为参数，返回查找结果。函数的返回值类型为struct stu*，表示返回一个指向链表节点的指针。'}]"
    },
    {
        "sortId": 5221,
        "id": "1331583358206783488",
        "title": "求最大数——用指针访问数组",
        "content": "从键盘输入10个整数，求出其中的最大数。要求用指针变量访问数组的元素。\n\n```c++\n#include <stdio.h>\nint main(void)\n{int a[10],max,;\n for(p=a;;p++)\n  scanf(\"%d\",p); \n max=;\n for(p=a+1;;p++)\n {if()\n   max=*p;\n }\n printf(\"max=%d\\n\",max);\n return 0;\n}\n\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 332,
        "res": "[{'name':'指针变量', 'description':'指针变量是一种特殊的变量，它存储的是内存地址。通过指针变量可以访问和操作内存中的数据。在本题中，使用指针变量p来访问数组a的元素。'}, {'name':'数组', 'description':'数组是一种存储相同类型数据的集合。在本题中，使用数组a来存储从键盘输入的10个整数。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构。在本题中，使用循环语句for来遍历数组a的元素。'}, {'name':'条件判断', 'description':'条件判断是根据条件的真假来决定程序的执行路径。在本题中，使用条件判断语句if来判断是否更新最大值max的值。'}, {'name':'输入输出', 'description':'输入输出是程序与外部环境进行数据交互的方式。在本题中，使用scanf函数从键盘输入数据，使用printf函数输出结果。'}]"
    },
    {
        "sortId": 5222,
        "id": "1331574079047389184",
        "title": "求最大数——用指针访问数组",
        "content": "从键盘输入10个整数，求出其中的最大数。要求用指针变量访问数组的元素。\n\n```c++\n#include <stdio.h>\nint main(void)\n{int a[10],max,*p;\nfor(@@[](4))\n  scanf(\"%d\",p); \n max=*a;\n for(@@[](3))\n {if(@@[](3))\n   max=*p;\n }\n printf(\"max=%d\\n\",max);\n return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 139,
        "res": "[{'name':'指针变量', 'description':'指针变量是一种特殊的变量，它存储的是内存地址。通过指针变量可以访问和操作内存中的数据。在本题中，使用指针变量访问数组的元素，可以通过指针变量p来访问数组a的元素。'}, {'name':'循环语句', 'description':'循环语句是一种重复执行某段代码的结构。在本题中，使用循环语句从键盘输入10个整数，并求出其中的最大数。'}, {'name':'条件语句', 'description':'条件语句是一种根据条件判断来执行不同代码的结构。在本题中，使用条件语句判断当前元素是否大于最大数，如果是，则更新最大数的值。'}, {'name':'输入输出函数', 'description':'输入输出函数是用来进行数据输入和输出的函数。在本题中，使用scanf函数从键盘输入整数，使用printf函数输出最大数的值。'}]"
    },
    {
        "sortId": 5223,
        "id": "1331498164296667136",
        "title": "链表的基本操作-删除链表中的一个结点",
        "content": "有一链式结构，定义如下 ： </br>\nstruct stu{</br>\nchar name[20]; </br>\nint no; </br>\nstruct stu *next;</br>\n}; </br>\n创建一个函数mydel(p,name)，删除链表中name域为name的结点，返回链表的头指针。如果中p链表中结点的name域与name相同，删除结点，并返回头指针，如果没找到，在函数中显示没有找到，返回头指针。\n程序中create函数已经为我们创建了一个有10个结点 的无头结点的链表。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nstruct stu * mydel(struct stu *head,char *name);\n```\n\n在这里解释接口参数。例如：其中 `head` 和 `name` 都是用户传入的参数。 `head` 是已经创建好的无头结点的链表的头指针； `name` 是最大为19个字符的字符串。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\nstruct stu{\n   char name[20];\n\t int no;\n\t struct stu *next;};\nstruct stu * create();\nstruct stu * mydel(struct stu *head,char *name);\nvoid show(struct stu *p){\n  while(p){\n\t   printf(\"%s %d\\n\",p->name,p->no);\n\t   p=p->next;\n\t }\n}\nint main()\n{\n    char name[20];\n    struct stu *p=NULL;\n    gets(name);\n\tp=create();\n\tp=mydel(p,name);\n    show(p);\n  return 0;\n\n}\nstruct stu * create(){\n     struct stu *p,*h=NULL,*q;\n     char name[10][20]={\"liming\",\"maming\",\"zhaoming\",\"yaoming\",\"xiaming\",\"lixiaoming\",\n                         \"zhangming\",\"nieming\",\"zhouming\",\"hanming\"};\n     int i=0;\n     while(i<10){\n          p=(struct stu*)malloc(sizeof(struct stu));\n          strcpy(p->name,name[i]);\n          p->no=i;\n          if(h==NULL){h=p; q=p;}\n          else{ q->next=p;\n                q=p;\n           }\n           i++;\n     }\n     q->next=NULL;\n     return h;\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。如果找到删除对应的一个结点，并显示其他结点，例如：\n\n```in\nliming\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nmaming 1\nzhaoming 2\nyaoming 3\nxiaming 4\nlixiaoming 5\nzhangming 6\nnieming 7\nzhouming 8\nhanming 9\n```\n### 输入样例：\n\n如果没有找到，在这里给出一组输入。例如：\n\n```in\nzzzming\n```\n\n### 输出样例：\n\n显示no found 并显示所有结点信息在这里给出相应的输出。例如：\n\n```out\nno found\nliming 0\nmaming 1\nzhaoming 2\nyaoming 3\nxiaming 4\nlixiaoming 5\nzhangming 6\nnieming 7\nzhouming 8\nhanming 9\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 28,
        "res": "[{'name': '链表操作', 'description': '本题涉及链表的创建、遍历和删除操作。首先通过create函数创建一个有10个结点的无头结点的链表，然后通过mydel函数删除链表中name域为name的结点。如果找到了对应的结点，则删除该结点并返回链表的头指针；如果没有找到对应的结点，则在函数中显示\"no found\"并返回链表的头指针。最后通过show函数遍历并显示链表中的所有结点信息。'}]"
    },
    {
        "sortId": 5224,
        "id": "1331485914760523776",
        "title": "链表的基本操作-创建一个链表",
        "content": "有一链式结构，定义如下 ： </br>\nstruct stu{</br>\nchar name[20]; </br>\nint no; </br>\nstruct stu *next;</br>\n}; </br>\n创建一个函数create()，实现无头结点的链表，有m个结点，函数的返回值为链表的头指针。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nstruct stu * create()\n```\n\n在这里解释接口参数。在函数中输入m，及m行数据，完成链表的创建。\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct stu{\n   char name[20];\n\t int no;\n\t struct stu *next;};\nstruct stu * create();\nvoid show(struct stu *p){\n  while(p){\n\t   printf(\"%s %d\\n\",p->name,p->no);\n\t   p=p->next;\n\t }\n\t }\nint main()\n{\n\n  struct stu *p=NULL;\n\tp=create();\n     show(p);\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n2\nliming 23\nmaming 35\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nliming 23\nmaming 35\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 23,
        "res": "[{'name':'链表创建','description':'本题考察链表的创建和使用。需要定义一个结构体，包含姓名、学号和指向下一个结点的指针。通过输入m和m行数据，创建一个无头结点的链表，并返回链表的头指针。'}]"
    },
    {
        "sortId": 5225,
        "id": "1331476409054179328",
        "title": "利用指针，实现字符串复制函数",
        "content": "编写字符串复制函数，strmycpy(s,t,m)，功能:将形参中第二个字符串t中，从第m个字符开始到这个串结束的所有字符，复制到第一个串s中，函数的返回值为第一个串的地址。\n\n### 函数接口定义：\n```c++\n在这里描述函数接口。例如：\nchar *strmcpy ( char *s,char *q,int m );\n```\n\n\n\n### 裁判测试程序样例：\n```c++\n在这里给出函数被调用进行测试的例子。例如：\n#include <stdio.h>\n\nchar *strmycpy ( char *s,char *q,int m );\n\nint main()\n{\n\n  char a[100],b[100];\n\tint m;\n\tgets(b);\n\tscanf(\"%d\",&m);\n \n puts(strmycpy(a));\n\n  return 0;\n\n}\n\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\nhappy new year\n7\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nnew year\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 37,
        "res": "[{'name':'字符串复制函数','description':'编写字符串复制函数，strmycpy(s,t,m)，功能:将形参中第二个字符串t中，从第m个字符开始到这个串结束的所有字符，复制到第一个串s中，函数的返回值为第一个串的地址。'}]"
    },
    {
        "sortId": 5226,
        "id": "1331443260421099520",
        "title": "以下程序的输出结果是（ ）```#include<stdio.h>void main(){    int ia[3][3],*p",
        "content": "以下程序的输出结果是（ ）\n```\n#include<stdio.h>\nvoid main()\n{\n    int ia[3][3],*pi,ii;\n    pi=ia;\n    for(ii=0;ii<9;ii++)\n        pi[ii]=ii;\n    for(ii=0;ii<3;ii++)\n        printf(\"%d\",ia[1][ii]);\n}\n```\n@[](2)\n\nA. 012\nB. 234\nC. 123\nD. 345",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 72,
        "res": "[{'name': '数组', 'description': '数组是一种存储多个相同类型数据的数据结构，可以通过下标访问数组中的元素。本题涉及到了二维数组的定义和访问。'}, {'name': '指针', 'description': '指针是一种特殊的变量，存储的是内存地址。本题涉及到了指针与数组的关系，通过指针访问数组元素。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。本题涉及到了使用循环给数组赋值和打印数组元素。'}]"
    },
    {
        "sortId": 5227,
        "id": "1331427931213058048",
        "title": "以下程序的输出结果是（ ）```prt(int *mi,int in){    int ii;    for(ii=0;ii<i",
        "content": "以下程序的输出结果是（ ）\n```\nprt(int *mi,int in)\n{\n    int ii;\n    for(ii=0;ii<in;ii++)\n        mi[ii]++;\n}\n#include<stdio.h>\nvoid main()\n{\n    int ia[]={1,2,3,4,5},ii;\n    prt(ia,5);\n    for(ii=0;ii<5;ii++)\n        printf(\"%d,\",ia[ii]);\n}\n```\n@[](2)\n\nA. 1,2,3,4,5,\nB. 2,3,4,5,6,\nC. 3,4,5,6,7,\nD. 2,3,4,5,1,",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 98,
        "res": "[{'name':'指针','description':'指针是C语言中的一种数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，函数prt的参数mi是一个指向整型变量的指针，通过对指针所指向的变量进行操作，实现了对数组ia中元素的递增。'}, {'name':'数组','description':'数组是一种存储相同类型数据的集合。在本题中，变量ia是一个整型数组，存储了5个整数。通过循环遍历数组，可以对数组中的元素进行操作和访问。'}, {'name':'函数','description':'函数是一段完成特定任务的代码块。在本题中，函数prt用于对传入的数组进行递增操作。通过函数的调用，可以实现对数组元素的修改。'}, {'name':'循环','description':'循环是一种重复执行特定代码块的结构。在本题中，使用了for循环来遍历数组和打印数组元素。通过循环，可以对数组中的每个元素进行操作和访问。'}, {'name':'输出','description':'输出是将程序运行结果显示在屏幕上的过程。在本题中，使用了printf函数来输出数组元素的值。通过输出，可以验证程序的正确性。'}]"
    }, {
        "sortId": 5228,
        "id": "1331424386980032512",
        "title": "运行以下程序时，输入1 2 3（回车）（1、2、3之间有空格），输出结果为（ ）```#include<stdio.h>void",
        "content": "运行以下程序时，输入1 2 3（回车）（1、2、3之间有空格），输出结果为（ ）\n```\n#include<stdio.h>\nvoid main()\n{\n    int ia[3][2]={0},(*pi)[2],ii,ij;\n    for(ii=0;ii<2;ii++)\n    {\n        pi=ia+ii;\n        scanf(\"%d\",pi);\n        pi++;\n    }\n    for(ii=0;ii<3;ii++)\n    {\n        for(ij=0;ij<2;ij++)\n            printf(\"%2d\",ia[ii][ij]);\n        printf(\"\\n\");\n    }\n}\n```\n\n@[](2)\n\nA.  1 0\n 2 0\n 0 0\nB.  1 2\n 3 0\n 0 0\nC.  1 0\n 2 0\n 3 0\nD. 产生错误信息",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 50,
        "res": "[{'name': '二维数组', 'description': '二维数组是由多个一维数组组成的数据结构，可以用于表示矩阵等二维数据。在C语言中，可以通过指针和下标的组合来访问二维数组的元素。'}, {'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，用于存储变量的内存地址。通过指针，可以间接访问和修改变量的值。在本题中，使用指针pi来访问二维数组ia的元素。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环和while循环。在本题中，使用for循环来遍历二维数组ia的元素。'}, {'name': '输入输出', 'description': '输入输出是C语言中常用的操作，用于从键盘读取输入数据和向屏幕输出结果。在本题中，使用scanf函数从键盘读取输入数据，使用printf函数向屏幕输出结果。'}]"
    },
    {
        "sortId": 5229,
        "id": "1331181979944407040",
        "title": "删除字符串中指定的字符",
        "content": "从键盘读入一个字符串到数组str中，再读入待删除的字符数n 及从键盘读入的n个用空格分隔的字符存放在字符数组cr中。调用自定义函数delet()，删除str字符串中给定的字符。如果字符串中没有指定字符，则不处理。\n### 函数接口定义：\n```c++\nvoid delet(char str[],char cr[],int n); \n```\n\n其中 str、cr与n  都是用户传入的参数。 str中字符串的长度不超过127； cr数组元素不超过52，n为从cr数组中存放的字符个数。\n### 裁判测试程序样例：\n```c++\n#include <stdio.h>\nvoid delet(char str[],char cr[],int n);  \nint main()\n{\n    int i,j,n,digi,sum=0,dt[10];\n    char str[128]; //存放待删除字符的字符串 \n\t  char cr[52];   //存放欲删除的字符 \n    gets(str);\n    scanf(\"%d\",&n);\n    for(i=0;i<n;i++)\n    \tscanf(\" %c\",&cr[i]);\n    \t\n    delet(str,cr,n);\n\n\tprintf(\"%s\",str);\n\treturn 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\nabcdefgLLikl\n4\na e L n\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\nbcdfgikl\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 2,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 9,
        "res": "[{'name':'字符数组操作','description':'本题涉及字符数组的读取、修改和删除操作。学生需要了解字符数组的基本操作，包括读取字符串、读取字符数组、修改字符数组中的元素等。'}, {'name':'自定义函数','description':'本题要求学生调用自定义函数delet()来删除字符串中指定的字符。学生需要了解如何定义和调用自定义函数，并且了解函数参数的传递方式。'}, {'name':'循环结构','description':'本题中需要使用循环结构来遍历待删除的字符数组，并在字符串中删除对应的字符。学生需要了解循环结构的基本语法和使用方法。'}, {'name':'条件判断','description':'本题中需要使用条件判断来判断字符串中是否包含待删除的字符。学生需要了解条件判断的基本语法和使用方法。'}, {'name':'输入输出','description':'本题中需要使用输入输出函数来读取字符串和字符数组，并输出最终结果。学生需要了解输入输出函数的基本用法和格式化输入输出的方法。'}]"
    },
    {
        "sortId": 5230,
        "id": "1331169606709858304",
        "title": "一个字符串按反序存放",
        "content": "编写一个函数，使输入的一个字符串按反序存放，并在主函数中输入和输出该字符串。\n\n```c++\n#include<stdio.h>\nvoid main()\n{\n   void inverse(char cstr[]);\n   char str[80];\n   gets(str);\n   inverse(str);\n   puts(str);\n}\nvoid inverse(char cstr[])\n{\n\tchar ct;\n\tint i,j;\n\tfor(i=0,j=strlen(cstr);@@[](2);i++,j--)\n    {\n        ct=cstr[i];\n       @@[](2);\n        cstr[j-1]=ct;\n    }\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 277,
        "res": "[{'name':'字符串反序', 'description':'本题涉及字符串的反序操作，需要使用循环和临时变量进行字符交换。'}]"
    },
    {
        "sortId": 5231,
        "id": "1331161906420690944",
        "title": "求二维数组转置",
        "content": "编写一个函数，使给定的一个二维数组（3X3）转置，即行列互换。\n\n```c++\n#include<stdio.h>\n#define N 3\nvoid main()\n{\n   @@[](2);\n   int arr[N][N]={{1,2,3},{4,5,6},{7,8,9}};\n   int i,j;\n   convert(arr);\n   for(i=0;i<N;i++)\n   {for(j=0;j<N;j++)\n    printf(\"%3d\",arr[i][j]);\n    printf(\"\\n\");\n   }\n}\nvoid convert(int array[3][3])\n{\n\tint i,j,t;\n\tfor(i=0;i<N;i++)\n        for(j=i+1;j<N;j++)\n    {\n        t=array[i][j];\n        array[i][j]=array[j][i];\n       @@[](2);\n    }\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 315,
        "res": "[{'name':'二维数组', 'description':'二维数组是由多个一维数组组成的数据结构，可以用来表示矩阵等二维结构。在C语言中，可以通过指定行数和列数来定义二维数组，通过两个索引来访问数组中的元素。'}, {'name':'函数', 'description':'函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，函数可以有参数和返回值，可以用来封装一段可重复使用的代码。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环结构有for循环和while循环，可以用来遍历数组、执行特定次数的操作等。'}, {'name':'转置', 'description':'转置是指将矩阵的行和列互换的操作。在C语言中，可以通过循环遍历二维数组的元素，交换对应位置的元素来实现矩阵的转置。'}]"
    },
    {
        "sortId": 5232,
        "id": "1331154402278158336",
        "title": "C语言程序设计 实验6-3 单向链表的插入",
        "content": "在实验6-2的单向链表代码基础上，增加插入节点的函数，实现在链表中**按升序的顺序**将指定的数值 data 插入相应的节点。也就是将data插入在第一个大于data的节点之前。\n\n### 插入节点函数接口：\n```\nstruct link *InsertNode(struct link *head, int data)\n```\n- `head` 是链表头节点的指针\n- `data`是要插入的节点的数值。\n- 函数返回插入相应节点后，头节点的指针。\n\n### 主函数示例：\n```\n#include <stdio.h>\n#include <stdlib.h>\nstruct link\n{\n\tint data;\n\tstruct link *next;\n};\n\nstruct link *AppendNode(struct link *head,int data);\nvoid DisplyNode(struct link *head);\nvoid DeleteMemory(struct link *head);\nstruct link * DeleteNode(struct link *head,int data);\nstruct link *InsertNode(struct link *head, int nodeData);\n\nint main()\n{\n\tchar\tc;\n\tint data = 0;\n\tstruct link *head = NULL;\t  /* 链表头指针 */\n\twhile (1)\n\t{\n\t    scanf(\"%d\",&data);\n\t    if (data==-1)\n            break;\n\n\t\thead = AppendNode(head,data);/* 向head为头指针的链表末尾添加节点 */\n\t}\n    DisplyNode(head);        /* 显示当前链表中的各节点信息 */\n    scanf(\"%d\",&data);\n    head = InsertNode(head,data);\n    DisplyNode(head);        /* 显示当前链表中的各节点信息 */\n\tDeleteMemory(head);           /* 释放所有动态分配的内存 */\n\treturn 0;\n}\n```\n\n### 输入格式:\n\n第一行：\n一系列以`-1`结束的数值，用以构建单向链表。\n\n第二行：\n指定的数值，将此数值插入链表中第一个大于该数值的节点之前。\n\n### 输出格式:\n\n在构建单向链表后，显示整个链表。\n在插入指定数值后，再次显示整个链表。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 7 9 -1\n6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1->3->5->7->9\n1->3->5->6->7->9\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 3 1 -1\n4\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1->3->5->3->1\n1->3->4->5->3->1\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 123,
        "res": "[{'name': '单向链表', 'description': '单向链表是一种常见的数据结构，它由一系列节点组成，每个节点包含一个数据元素和一个指向下一个节点的指针。在C语言中，可以使用结构体来定义链表节点，通过指针来连接各个节点。'}, {'name': '插入节点', 'description': '插入节点是指在链表中插入一个新的节点，使其成为链表的一部分。在本题中，要求按照升序的顺序将指定的数值插入到链表中。插入节点的过程包括找到插入位置、创建新节点、调整指针等步骤。'}, {'name': '链表遍历', 'description': '链表遍历是指按照一定的顺序访问链表中的每个节点。在本题中，需要在构建链表后和插入节点后分别遍历链表，并输出链表中的各个节点的数值。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行过程中根据需要分配和释放内存空间。在本题中，需要使用动态内存分配来创建链表节点，并在程序结束时释放这些节点所占用的内存空间。'}]"
    },
    {
        "sortId": 5233,
        "id": "1331147177581129728",
        "title": "C语言程序设计 实验6-2 单向链表的删除",
        "content": "在实验6-1的新建单向链表代码基础上，增加删除节点的函数，实现在链表中删除**所有**节点的data 为指定数值的节点。\n### 删除节点函数接口：\n```\nstruct link * DeleteNode(struct link *head,int data);\n```\n- `head` 是链表头节点的指针\n- `data`是要删除的节点的数值。\n- 函数返回删除相应节点后，头节点的指针。\n\n### 主函数示例：\n```\n#include <stdio.h>\n#include <stdlib.h>\nstruct link\n{\n\tint data;\n\tstruct link *next;\n};\n\nstruct link *AppendNode(struct link *head,int data);\nvoid DisplyNode(struct link *head);\nvoid DeleteMemory(struct link *head);\nstruct link * DeleteNode(struct link *head,int data);\n\nint main()\n{\n\tchar\tc;\n\tint data = 0;\n\tstruct link *head = NULL;\t  /* 链表头指针 */\n\twhile (1)\n\t{\n\t    scanf(\"%d\",&data);\n\t    if (data==-1)\n            break;\n\n\t\thead = AppendNode(head,data);/* 向head为头指针的链表末尾添加节点 */\n\t}\n    DisplyNode(head);        /* 显示当前链表中的各节点信息 */\n    scanf(\"%d\",&data);\n    head = DeleteNode(head,data);\n    DisplyNode(head);        /* 显示当前链表中的各节点信息 */\n\tDeleteMemory(head);           /* 释放所有动态分配的内存 */\n\treturn 0;\n}\n```\n\n### 输入格式:\n\n第一行：\n一系列以`-1`结束的数值，用以构建单向链表。\n\n第二行：\n指定的数值\n\n### 输出格式:\n\n在构建单向链表后，显示整个链表。\n在删除指定数值后，再次显示整个链表。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 7 9 -1\n5\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1->3->5->7->9\n1->3->7->9\n```\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 3 1 -1\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1->3->5->3->1\n1->5->1\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 146,
        "res": "[{'name': '链表', 'description': '链表是一种常见的数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可以动态地增加和删除节点，相比于数组，链表的插入和删除操作更加高效。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行时根据需要动态地分配内存空间。在C语言中，可以使用malloc函数来动态分配内存，使用free函数来释放已分配的内存。'}, {'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值，还可以动态地分配和释放内存空间。'}, {'name': '函数', 'description': '函数是C语言中的一种代码块，用于执行特定的任务。通过函数，可以将代码模块化，提高代码的可读性和重用性。函数可以接受参数，执行一系列操作，并返回一个值。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环可以根据条件来控制代码的执行次数。'}, {'name': '条件语句', 'description': '条件语句是一种根据条件来选择执行不同代码块的结构。在C语言中，常用的条件语句有if语句和switch语句。条件语句可以根据条件的真假来决定执行哪个代码块。'}, {'name': '输入输出', 'description': '输入输出是指程序与外部环境之间的数据交换。在C语言中，可以使用标准库函数scanf和printf来进行输入输出操作。scanf用于从标准输入读取数据，printf用于向标准输出打印数据。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，它可以包含多个不同类型的成员变量。通过结构体，可以将多个相关的数据组织在一起，方便操作和管理。结构体可以作为函数的参数和返回值，还可以定义结构体数组和指针。'}, {'name': '指针操作', 'description': '指针操作是对指针进行的各种操作，包括指针的赋值、指针的比较、指针的运算等。通过指针操作，可以实现对内存的灵活访问和操作。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来决定程序的执行路径。在C语言中，常用的条件判断语句有if语句和三元运算符。条件判断可以根据条件的真假来执行不同的代码块。'}, {'name': '数据类型', 'description': '数据类型是C语言中的一种属性，用于定义变量的取值范围和操作方式。C语言中常用的数据类型有整型、浮点型、字符型和指针型等。不同的数据类型可以进行不同的运算和操作。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的连续内存空间。在C语言中，可以通过下标来访问数组中的元素，还可以使用循环结构来遍历数组。数组可以用于存储和处理大量数据，提高程序的效率。'}, {'name': '逻辑运算', 'description': '逻辑运算是对逻辑表达式进行的运算，包括与、或、非等运算。在C语言中，常用的逻辑运算符有&&、||和!。逻辑运算可以根据条件的真假来决定程序的执行路径。'}, {'name': '字符串', 'description': '字符串是由字符组成的一串数据。在C语言中，字符串以字符数组的形式存储，以空字符\\0作为字符串的结束标志。可以使用字符串相关的函数来进行字符串的操作，如拷贝、连接、比较等。'}, {'name': '指针传递', 'description': '指针传递是指将指针作为函数的参数进行传递。通过指针传递，可以实现对变量的引用传递，即在函数内部修改变量的值对外部可见。指针传递可以减少内存的开销，提高程序的效率。'}, {'name': '递归', 'description': '递归是一种函数调用自身的方式。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，如计算阶乘、斐波那契数列等。递归需要定义递归终止条件，以避免无限递归导致程序崩溃。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是指针。通过指针数组，可以存储多个指针，每个指针指向不同的数据。指针数组可以用于存储和操作多个字符串、多个结构体等。'}, {'name': '指针操作符', 'description': '指针操作符是用于对指针进行操作的符号。在C语言中，常用的指针操作符有取地址符&、取值符*和箭头符->。指针操作符可以实现对指针的赋值、取值和访问成员等操作。'}, {'name': '链表操作', 'description': '链表操作是对链表进行的各种操作，包括链表的创建、插入、删除和遍历等。通过链表操作，可以实现对链表的动态管理和操作。链表操作需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '结构体指针', 'description': '结构体指针是指向结构体的指针。通过结构体指针，可以直接访问和修改结构体的成员变量，还可以动态地分配和释放结构体的内存空间。结构体指针可以作为函数的参数和返回值，还可以定义结构体指针数组和指针指针等。'}, {'name': '链表节点', 'description': '链表节点是链表中的一个元素，它包含数据和指向下一个节点的指针。通过链表节点，可以构建链表数据结构，实现对数据的动态管理和操作。链表节点可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表遍历', 'description': '链表遍历是指按照一定顺序访问链表中的每个节点。通过链表遍历，可以依次访问链表中的每个节点，并对节点进行相应的操作。链表遍历可以使用循环结构和指针操作来实现。'}, {'name': '链表删除', 'description': '链表删除是指从链表中删除指定节点的操作。通过链表删除，可以删除链表中的某个节点，重新调整链表的结构。链表删除需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '链表添加', 'description': '链表添加是指向链表中添加新节点的操作。通过链表添加，可以在链表的末尾添加新节点，扩展链表的长度。链表添加需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '链表显示', 'description': '链表显示是指将链表中的节点信息打印出来的操作。通过链表显示，可以查看链表中的各个节点的数据和指针信息，以验证链表的正确性。链表显示可以使用循环结构和指针操作来实现。'}, {'name': '链表头节点', 'description': '链表头节点是链表中的第一个节点，它不存储数据，只用于指向链表的第一个实际节点。通过链表头节点，可以方便地对链表进行操作和管理。链表头节点可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表尾节点', 'description': '链表尾节点是链表中的最后一个节点，它存储数据，并指向下一个节点的指针为空。通过链表尾节点，可以方便地在链表的末尾添加新节点。链表尾节点可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表节点数据', 'description': '链表节点数据是链表节点中存储的实际数据。通过链表节点数据，可以对链表节点进行操作和处理。链表节点数据可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表节点指针', 'description': '链表节点指针是指向链表节点的指针。通过链表节点指针，可以访问和操作链表节点的数据和指针。链表节点指针可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表节点数值', 'description': '链表节点数值是链表节点中存储的实际数值。通过链表节点数值，可以对链表节点进行比较和操作。链表节点数值可以根据需要定义不同的数据类型和成员变量。'}, {'name': '链表节点删除', 'description': '链表节点删除是指从链表中删除指定节点的操作。通过链表节点删除，可以删除链表中的某个节点，重新调整链表的结构。链表节点删除需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '链表节点添加', 'description': '链表节点添加是指向链表中添加新节点的操作。通过链表节点添加，可以在链表的末尾添加新节点，扩展链表的长度。链表节点添加需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '链表节点显示', 'description': '链表节点显示是指将链表节点的数据和指针信息打印出来的操作。通过链表节点显示，可以查看链表节点的数据和指针信息，以验证链表的正确性。链表节点显示可以使用循环结构和指针操作来实现。'}, {'name': '链表节点遍历', 'description': '链表节点遍历是指按照一定顺序访问链表节点的操作。通过链表节点遍历，可以依次访问链表节点，并对节点进行相应的操作。链表节点遍历可以使用循环结构和指针操作来实现。'}, {'name': '链表节点指针操作', 'description': '链表节点指针操作是对链表节点指针进行的各种操作，包括指针的赋值、指针的比较、指针的运算等。通过链表节点指针操作，可以实现对链表节点的灵活访问和操作。'}, {'name': '链表节点数据操作', 'description': '链表节点数据操作是对链表节点数据进行的各种操作，包括数据的赋值、数据的比较、数据的运算等。通过链表节点数据操作，可以实现对链表节点的灵活访问和操作。'}, {'name': '链表节点数值操作', 'description': '链表节点数值操作是对链表节点数值进行的各种操作，包括数值的赋值、数值的比较、数值的运算等。通过链表节点数值操作，可以实现对链表节点的灵活访问和操作。'}, {'name': '链表节点删除函数', 'description': '链表节点删除函数是用于从链表中删除指定节点的函数。通过链表节点删除函数，可以删除链表中的某个节点，重新调整链表的结构。链表节点删除函数需要注意指针的正确使用，以避免内存泄漏和指针悬挂等问题。'}, {'name': '链表节点添加函数', 'description': '链表节点添加函数是用于向链表中添加新节点的函数。通过链表节点添加函数，可以在链表的末尾添加新节点，扩展链表的长度。链表节点添加函数需要注意指针的正确使用"
    },
    {
        "sortId": 5234,
        "id": "1331137339778183168",
        "title": "C语言程序设计 实验6-1 单向链表的建立",
        "content": "本题目要求实现下面三个函数，实现如下功能：\n\n输入若干个正整数，以`-1`结束，采取向链表中添加节点的方式来建立一个单向链表。\n遍历并输出这个单向链表。\n\n\n### 向链表尾部添加节点函数：\n```\nstruct link *AppendNode(struct link *head,int data);\n```\n- `head`：链表头节点指针，如果`head`为NULL，则会新建头节点\n\n- `data`：要添加的节点data数值\n\n- 函数返回：添加过节点后的链表头节点指针\n\n### 遍历显示链表函数：\n```\nvoid DisplyNode(struct link *head);\n```\n- `head` ：链表头节点指针\n\n### 删除链表内存函数：\n```\nvoid DeleteMemory(struct link *head);\n```\n- `head`：链表头节点指针\n\n\n### 主函数样例：\n```\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct link\n{\n\tint data;\n\tstruct link *next;\n};\n\nstruct link *AppendNode(struct link *head,int data);\nvoid DisplyNode(struct link *head);\nvoid DeleteMemory(struct link *head);\n\nint main()\n{\n\tchar\tc;\n\tint data = 0;\n\tstruct link *head = NULL;\t  /* 链表头指针 */\n\twhile (1)\n\t{\n\t    scanf(\"%d\",&data);\n\t    if (data==-1)\n            break;\n\n\t\thead = AppendNode(head,data);/* 向head为头指针的链表末尾添加节点 */\n\t}\n    DisplyNode(head);        /* 显示当前链表中的各节点信息 */\n\tDeleteMemory(head);           /* 释放所有动态分配的内存 */\n\treturn 0;\n}\n\n/*在此实现 struct link *AppendNode(struct link *head,int data); */\n\n/*在此实现 void DisplyNode(struct link *head); */\n\n/*在此实现 void DeleteMemory(struct link *head);*/\n```\n\n### 输入格式:\n\n一系列正整数，以`-1`结束\n\n### 输出格式:\n\n输出单向链表中的每一项，每个数之间以`->`连接\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n1 3 5 7 9 -1\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1->3->5->7->9\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 150,
        "res": "[{'name': '链表', 'description': '链表是一种常见的数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可以动态地添加和删除节点，相比于数组，链表的插入和删除操作更加高效。'}, {'name': '指针', 'description': '指针是C语言中的一种特殊数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值，还可以动态地分配和释放内存。'}, {'name': '动态内存分配', 'description': '动态内存分配是指在程序运行过程中，根据需要动态地分配内存空间。C语言提供了malloc、calloc和realloc等函数来实现动态内存分配，通过这些函数可以在堆上分配内存，并返回指向分配内存的指针。'}, {'name': '函数', 'description': '函数是C语言中的一种代码块，它可以接收输入参数并返回一个值。函数可以封装一段特定的功能，通过调用函数可以实现代码的重用和模块化。'}, {'name': '输入输出', 'description': '输入输出是指程序与外部环境之间的数据交换。C语言提供了一系列的输入输出函数，如scanf和printf，可以实现从键盘读取数据和向屏幕输出数据。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。C语言提供了多种循环结构，如for循环、while循环和do-while循环，可以根据条件来控制代码的重复执行。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。C语言提供了if语句和switch语句来实现条件判断，可以根据不同的条件执行不同的代码。'}, {'name': '数据类型', 'description': '数据类型是指变量的存储格式和可操作范围。C语言提供了多种数据类型，如整型、浮点型、字符型和指针型等，可以根据不同的需求选择合适的数据类型。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，它可以包含多个不同类型的成员变量。通过结构体，可以将多个相关的数据组织在一起，方便进行操作和管理。'}, {'name': '指针操作', 'description': '指针操作是通过指针来访问和修改变量的值。C语言提供了多种指针操作符，如取地址符&、间接访问符*和箭头符->，可以实现对指针所指向的变量进行操作。'}]"
    },
    {
        "sortId": 5235,
        "id": "1331126672169947136",
        "title": "计算x的y次方",
        "content": "以下函数的功能是计算x的y次方。\n\n```c++\n#include<stdio.h>\nvoid main()\n{\n\tfloat fun(float,int);\n\tfloat a;\n\tint n;\n\tscanf(\"%f\",&a);\n\tscanf(\"%d\",&n);\n\tprintf(\"%.3f\",fun(a,n));\n}\nfloat fun(float x,int y)\n{\n\tint i=1;\n\tfloat fz=1;\n\tif(y==0)\n\t\treturn 1;\n\twhile(@@[](2))\n\t{\n\t\t@@[](2);\n\t\ti++;\n\t}\n\treturn fz;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 242,
        "res": "[{'name': '函数定义和声明', 'description': '函数定义和声明是C语言中的重要概念，通过定义和声明函数可以实现代码的模块化和重用。在本题中，需要学生理解函数的定义和声明，并能正确地定义和声明函数fun。'}, {'name': '函数参数传递', 'description': '函数参数传递是C语言中的重要概念，通过参数传递可以将数据传递给函数进行处理。在本题中，需要学生理解函数参数传递的方式，并能正确地将参数传递给函数fun。'}, {'name': '循环语句', 'description': '循环语句是C语言中的重要控制结构，通过循环语句可以重复执行一段代码。在本题中，需要学生理解循环语句的使用方法，并能正确地使用循环语句计算x的y次方。'}, {'name': '条件语句', 'description': '条件语句是C语言中的重要控制结构，通过条件语句可以根据条件的真假选择不同的执行路径。在本题中，需要学生理解条件语句的使用方法，并能正确地根据条件判断是否继续循环。'}, {'name': '数据类型', 'description': '数据类型是C语言中的重要概念，不同的数据类型可以存储不同类型的数据。在本题中，需要学生理解浮点型和整型数据类型的区别，并能正确地使用浮点型和整型数据类型存储和计算数据。'}]"
    },
    {
        "sortId": 5236,
        "id": "1331120175939629056",
        "title": "连接两个字符串",
        "content": "以下函数的功能是连接两个字符串\n\n```c++\n#include <stdio.h>\nvoid str_cat(char str1[],char str2[],char str[])\n{\nint i,j;\nfor(i=0;str1[i]!='\\0';i++)\nstr[i]=str1[i];\nfor(j=0;str2[j]!='\\0';j++)\nstr[i+j]=@@[](2);\n@@[](2);\n}\nint main()\n{\n char a[50],b[50],c[50];\n gets(a);\n gets(b);\n str_cat(a,b,c);\n puts(c);\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 196,
        "res": "[{'name':'字符串连接','description':'本知识点主要讲解如何使用循环和数组来实现字符串的连接功能。在本题中，通过遍历str1和str2数组，将其元素逐个复制到str数组中，实现字符串的连接。'}]"
    },
    {
        "sortId": 5237,
        "id": "1331116185143259136",
        "title": "大写转小写",
        "content": "C语言标准函数库中包括 tolower 函数，用于将大写字母转换为小写字母。作为练习，我们自己编写一个功能与之相同的函数。\n\n#### 函数原型\n\n```\nchar ToLower(char x);\n```\n\n说明：参数 x 是任意字符的 ASCII 码。若 x 是大写字母的 ASCII 码，则函数值为对应小写字母的 ASCII 码，否则函数值与 x 相同。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nint IsUpper(char x);\nchar ToLower(char x);\n\nint main()\n{\n\tchar a, b;\n\ta = getchar();\n\tb = ToLower(a);\n\tputchar(b);\n\tputchar('\\n');\n\treturn 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n提示：利用前面作业中编写的 IsUpper 函数判断大写字母。\n\n#### 输入样例1\n\n```in\nK\n```\n\n#### 输出样例1\n\n```out\nk\n\n\n```\n\n#### 输入样例2\n\n```in\nw\n```\n\n#### 输出样例2\n\n```out\nw\n\n\n```\n\n#### 输入样例3\n\n```in\n!\n```\n\n#### 输出样例3\n\n```out\n!\n\n\n```\n\n---\n\n关联习题：判断大写字母。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 51,
        "res": "[{'name': 'tolower函数', 'description': 'C语言标准函数库中包括 tolower 函数，用于将大写字母转换为小写字母。作为练习，我们自己编写一个功能与之相同的函数。'}, {'name': 'IsUpper函数', 'description': '利用前面作业中编写的 IsUpper 函数判断大写字母。'}]"
    },
    {
        "sortId": 5238,
        "id": "1331114042734727168",
        "title": "小写转大写",
        "content": "C语言标准函数库中包括 toupper 函数，用于将小写字母转换为大写字母。作为练习，我们自己编写一个功能与之相同的函数。\n\n#### 函数原型\n\n```\nchar ToUpper(char x);\n```\n\n说明：参数 x 是任意字符的 ASCII 码。若 x 是小写字母的 ASCII 码，则函数值为对应大写字母的 ASCII 码，否则函数值与 x 相同。\n\n#### 裁判程序\n\n```c\n#include <stdio.h>\n\nint IsLower(char x);\nchar ToUpper(char x);\n\nint main()\n{\n\tchar a, b;\n\ta = getchar();\n\tb = ToUpper(a);\n\tputchar(b);\n\tputchar('\\n');\n\treturn 0;\n}\n\n/* 你提交的代码将被嵌在这里 */\n```\n\n提示：利用前面作业中编写的 IsLower 函数判断小写字母。\n\n#### 输入样例1\n\n```in\nk\n```\n\n#### 输出样例1\n\n```out\nK\n\n\n```\n\n#### 输入样例2\n\n```in\nW\n```\n\n#### 输出样例2\n\n```out\nW\n\n\n```\n\n#### 输入样例3\n\n```in\n!\n```\n\n#### 输出样例3\n\n```out\n!\n\n\n```\n\n---\n\n关联习题：判断小写字母。\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 76,
        "res": "[{'name': '字符类型', 'description': '字符类型是C语言中的一种基本数据类型，用于表示单个字符。在本题中，需要了解字符类型的基本概念和使用方法。'}, {'name': 'ASCII码', 'description': 'ASCII码是一种字符编码标准，用于将字符映射为对应的整数值。在本题中，需要了解ASCII码的基本知识，以及如何通过ASCII码进行字符的转换和判断。'}, {'name': '函数', 'description': '函数是C语言中的一种代码组织方式，用于封装一段特定的功能。在本题中，需要了解函数的定义和调用方法，以及如何通过函数实现字符的转换功能。'}, {'name': '函数原型', 'description': '函数原型是函数的声明部分，用于告诉编译器函数的名称、参数类型和返回值类型。在本题中，需要了解函数原型的语法和作用，以及如何正确声明和定义函数原型。'}, {'name': '标准函数库', 'description': '标准函数库是C语言提供的一组常用函数集合，包含了各种常用的功能函数。在本题中，需要了解标准函数库中的toupper函数的使用方法，以及如何自己编写一个与之相同功能的函数。'}, {'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码块。在本题中，需要了解条件语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '输入输出函数', 'description': '输入输出函数是C语言中用于进行输入和输出操作的函数。在本题中，需要了解输入输出函数的使用方法，以及如何通过输入输出函数实现字符的输入和输出。'}, {'name': '函数调用', 'description': '函数调用是通过函数名称和参数列表来执行函数代码的过程。在本题中，需要了解函数调用的语法和使用方法，以及如何通过函数调用实现字符的转换和输出。'}, {'name': '字符转换', 'description': '字符转换是将一个字符从一种形式转换为另一种形式的过程。在本题中，需要了解字符转换的基本概念和方法，以及如何通过字符转换实现字符的大小写转换。'}, {'name': '字符判断', 'description': '字符判断是根据字符的特定属性来判断字符的类型或特征的过程。在本题中，需要了解字符判断的基本概念和方法，以及如何通过字符判断判断字符的大小写。'}, {'name': '字符输出', 'description': '字符输出是将一个字符显示在屏幕上或写入到文件中的过程。在本题中，需要了解字符输出的基本概念和方法，以及如何通过字符输出实现字符的大小写转换结果的显示。'}, {'name': '字符输入', 'description': '字符输入是从键盘或文件中读取一个字符的过程。在本题中，需要了解字符输入的基本概念和方法，以及如何通过字符输入获取用户输入的字符。'}, {'name': '字符大小写转换', 'description': '字符大小写转换是将一个字符从小写形式转换为大写形式，或从大写形式转换为小写形式的过程。在本题中，需要了解字符大小写转换的基本概念和方法，以及如何通过字符大小写转换实现字符的大小写转换功能。'}, {'name': '字符类型转换', 'description': '字符类型转换是将一个字符从一种类型转换为另一种类型的过程。在本题中，需要了解字符类型转换的基本概念和方法，以及如何通过字符类型转换实现字符的大小写转换功能。'}, {'name': '字符类型判断', 'description': '字符类型判断是根据字符的特定属性来判断字符的类型或特征的过程。在本题中，需要了解字符类型判断的基本概念和方法，以及如何通过字符类型判断判断字符的大小写。'}, {'name': '字符类型转换函数', 'description': '字符类型转换函数是用于将一个字符从一种类型转换为另一种类型的函数。在本题中，需要了解字符类型转换函数的使用方法，以及如何通过字符类型转换函数实现字符的大小写转换功能。'}, {'name': '字符类型判断函数', 'description': '字符类型判断函数是用于根据字符的特定属性来判断字符的类型或特征的函数。在本题中，需要了解字符类型判断函数的使用方法，以及如何通过字符类型判断函数判断字符的大小写。'}, {'name': '字符转换函数', 'description': '字符转换函数是用于将一个字符从一种形式转换为另一种形式的函数。在本题中，需要了解字符转换函数的使用方法，以及如何通过字符转换函数实现字符的大小写转换功能。'}, {'name': '字符判断函数', 'description': '字符判断函数是用于根据字符的特定属性来判断字符的类型或特征的函数。在本题中，需要了解字符判断函数的使用方法，以及如何通过字符判断函数判断字符的大小写。'}, {'name': '条件判断', 'description': '条件判断是根据条件的真假来执行不同的代码块的过程。在本题中，需要了解条件判断的基本概念和方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断函数', 'description': '条件判断函数是根据条件的真假来执行不同的代码块的函数。在本题中，需要了解条件判断函数的使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句', 'description': '条件判断语句是根据条件的真假来执行不同的代码块的语句。在本题中，需要了解条件判断语句的语法和使用方法，以及如何根据条件判断字符的类型。'}, {'name': '条件判断语句"
    },
    {
        "sortId": 5239,
        "id": "1330765595418611712",
        "title": "在一个字符数组中查找一个指定的字符",
        "content": "在一个字符数组中查找一个指定的字符，若数组中含有该字符则输出该字符在数组中第一次出现的位置（下标值）否则输出-1。\n\n```c++\n#include<stdio.h>\nvoid main()\n{\n   char ch='a',cstr[50];\n   int inum,ii,iflag=1;\n   gets(cstr);\n   inum=@@[](1);\n   for(ii=0;ii<inum;ii++)\n    if(@@[](1))\n   {\n       iflag=0;\n       break;\n   }\n   if(iflag==1)\n    printf(\"%d\",-1);\n   else\n    @@[](1);\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 334,
        "res": "[{'name':'字符数组操作','description':'字符数组操作是C语言中常用的操作之一，通过对字符数组的遍历和比较，可以实现对字符数组中指定字符的查找和位置输出。在本题中，通过使用循环遍历字符数组，逐个比较字符，找到指定字符后输出其位置，若未找到则输出-1。'}]"
    },
    {
        "sortId": 5240,
        "id": "1330756611047469056",
        "title": "完成将输入的一个数字字符串转变为整型数值的功能",
        "content": "完成将输入的一个数字字符串转变为整型数值的功能\n```c++\n#include<stdio.h>\nvoid main()\n{\n   char cstr[8];\n   int ii;\n   long ls;\n   @@[](1);\n   ls=0;\n   for(ii=0;cstr[ii]!='\\0';ii++)\n   ls=@@[](2);\n   printf(\"%ld\",ls);\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 239,
        "res": "[{'name':'字符数组的定义和初始化'，'description':'字符数组是由一系列字符组成的数据结构，可以用来存储字符串。在C语言中，字符数组的定义和初始化可以通过使用字符数组的名称和赋值运算符来完成。'}，{'name':'字符数组的遍历和访问'，'description':'字符数组可以通过循环遍历的方式来访问和操作其中的每个字符。在C语言中，可以使用循环结构和数组下标来遍历字符数组，并通过下标访问和操作其中的每个字符。'}，{'name':'字符数组转换为整型数值'，'description':'将输入的一个数字字符串转变为整型数值的功能可以通过使用C语言中的字符串转换函数来实现。在C语言中，可以使用atoi函数将字符数组转换为整型数值。'}]"
    },
    {
        "sortId": 5241,
        "id": "1330744366523527168",
        "title": "在数组fa中查找fn，找到输出“YES”，否则输出“NOT FOUND”",
        "content": "在数组fa中查找fn，找到输出“YES”，否则输出“NOT FOUND”\n\n```c++\n#include<stdio.h>\nvoid main()\n{\n    float fa[10]={5.0,12.5,81.3,24.6,91.7,68.2,65.1,54.2,36.2,10.5},fn;\n    int ii;\n    printf(\"Please input fn:\");\n    @@[](0);\n    for(@@[](0))\n    {\n        if(fn==fa[ii])\n        {\n            printf(\"YES\");\n            break;\n        }\n    }\n    if(@@[](0))\n        printf(\"NOT FOUND\");\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 2,
        "score": 0,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 132,
        "res": "[{'name':'数组', 'description':'数组是一种存储多个相同类型数据的数据结构，可以通过下标访问数组中的元素。在本题中，数组fa用于存储浮点数，通过下标ii访问数组中的元素。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构。在本题中，使用for循环遍历数组fa中的元素。'}, {'name':'条件判断', 'description':'条件判断是根据给定的条件决定程序的执行路径。在本题中，使用if语句判断fn是否等于fa[ii]，如果相等则输出“YES”。'}, {'name':'输入输出', 'description':'输入输出是程序与用户或外部设备之间进行数据交互的过程。在本题中，使用printf函数输出提示信息和结果，使用scanf函数接收用户输入的fn值。'}]"
    },
    {
        "sortId": 5242,
        "id": "1330693445215105024",
        "title": "观察实数零(2空)",
        "content": "记录下面程序的输出结果。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tdouble x = 0.0, y = -x;\n\tprintf(\"%g\\n\", x);\n\tprintf(\"%g\\n\", y);\n\treturn 0;\n}\n```\n\n输出结果：\n\n```\n\n\n```\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 14,
        "res": "[{'name':'数据类型','description':'数据类型是C语言中的基本概念之一，用于定义变量的类型和范围。在C语言中，常见的数据类型包括整型、浮点型、字符型等。本题涉及到了浮点型数据类型。'}, {'name':'变量','description':'变量是C语言中用于存储数据的一种特殊的标识符。在C语言中，变量需要先声明后使用，并且可以通过赋值操作来改变变量的值。本题涉及到了变量的声明和赋值操作。'}, {'name':'格式化输出','description':'格式化输出是C语言中用于将数据按照指定的格式输出到屏幕上的一种方式。在C语言中，可以使用printf函数来进行格式化输出。本题涉及到了使用printf函数进行格式化输出。'}]"
    },
    {
        "sortId": 5243,
        "id": "1330524871884320768",
        "title": "下面的程序完成求10名学生的数学成绩的平均分数，请填空。",
        "content": "下面的程序完成求10名学生的数学成绩的平均分数，请填空。\n```c++\n#include <stdio.h>\nint main()\n{\n@@[](1);\nint sum,aver;\nfor(i=0;i<10;i++)\n    scanf(\"%d\",&num[i]); \n@@[](1);\nfor(@@[](1))\n    sum+=num[i];\n@@[](1);\nprintf(\"aver is %d\\n\",aver);\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 431,
        "res": "[{'name':'数组的定义和使用'，'description':'数组是一种存储多个相同类型数据的数据结构，可以通过下标访问数组中的元素。在这道题中，需要定义一个数组来存储学生的数学成绩，并使用循环语句和输入函数将学生的成绩存入数组中。'}, {'name':'循环语句的使用'，'description':'循环语句可以重复执行一段代码，这里使用for循环语句来遍历数组，计算学生的成绩总和。'}, {'name':'变量的定义和使用'，'description':'在这道题中，需要定义变量来存储学生的成绩总和和平均分数。'}, {'name':'输入输出函数的使用'，'description':'使用scanf函数从键盘输入学生的成绩，使用printf函数输出计算得到的平均分数。'}]"
    },
    {
        "sortId": 5244,
        "id": "1330513301355671552",
        "title": "暴躁的牛1",
        "content": "Bear_2在青青草原上养了超级多的牛，这些牛分为两种，一种是脾气暴躁的牛，另一种则是脾气温顺的牛，有一天Bear_2想从自己养的牛中选出n只牛来排成一列，由于连续两只暴躁的牛相邻会发生不好的事，**因此连续两只暴躁的牛不能相邻，假设Bear_2养的牛有无限多**，他现在想问你一共可以构成多少种合法的序列，答案对1000000007取模。\n\n### 输入格式:\n\n输入一个正整数n（1<=n<=1000）。\n\n### 输出格式:\n\n输出一个正整数。(数据范围很大，**请用long long型变量**)\n\n### 输入样例:\n\n```in\n1\n```\n\n### 输出样例:\n\n```out\n2\n```\n### 输入样例:\n\n```in\n2\n```\n\n### 输出样例:\n\n```out\n3\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 16,
        "res": "[{'name':'动态规划'，'description':'动态规划是一种解决多阶段决策问题的优化方法，它将问题分解为多个阶段，每个阶段都有一个最优解，通过求解每个阶段的最优解来得到整体的最优解。在本题中，可以使用动态规划来求解合法序列的数量。'}]"
    },
    {
        "sortId": 5245,
        "id": "1330502633130872832",
        "title": "判断字符串ca和字符串cb是否相等，应当使用（ ）",
        "content": "判断字符串ca和字符串cb是否相等，应当使用（ ）\n@[](2)\n\nA. if(ca==cb)\nB. if(ca=cb)\nC. if(strcpy(ca,cb))\nD. if(strcmp(ca,cb)==0)",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 364,
        "res": "[{'name':'字符串比较','description':'字符串比较是C语言中常用的操作之一，用于判断两个字符串是否相等。在C语言中，不能直接使用==运算符来比较字符串，而应该使用strcmp函数来进行比较。strcmp函数会返回一个整数值，如果两个字符串相等，则返回0，否则返回非0值。因此，在判断字符串ca和字符串cb是否相等时，应该使用if(strcmp(ca,cb)==0)来进行比较。'}]"
    },
    {
        "sortId": 5246,
        "id": "1330501757574098944",
        "title": "给出如下定义：char cx[]=\"abcdefg\";char cy[]={'a','b','c','d','e','f','g",
        "content": "给出如下定义：char cx[]=\"abcdefg\";\nchar cy[]={'a','b','c','d','e','f','g'};则正确的叙述为（ ）\n@[](2)\n\nA. 数组cx和数组cy等价\nB. 数组cx和数组cy的长度相同\nC. 数组cx的长度大于数组cy的长度\nD. 数组cx的长度小于数组cy的长度",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 579,
        "res": "[{'name':'数组定义和初始化'，'description':'数组是一种存储相同类型数据的集合，可以通过下标访问数组中的元素。在C语言中，可以使用字符数组来存储字符串，也可以使用字符数组来存储单个字符。数组的长度可以通过定义时指定，也可以通过初始化时自动计算。'}]"
    },
    {
        "sortId": 5247,
        "id": "1330499922318643200",
        "title": "设有数组定义：char carray[]=\"hello\";则数组carray所占的空间为（ ）",
        "content": "设有数组定义：char carray[]=\"hello\";则数组carray所占的空间为（ ）\n@[](2)\n\nA. 6个字节\nB. 5个字节\nC. 4个字节\nD. 7个字节",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 305,
        "res": "[{'name':'数组定义','description':'数组定义是C语言中的基本概念之一，用于声明和定义一个数组变量。在本题中，通过给定的数组定义char carray[]=\"hello\"，学生需要了解数组的声明方式以及数组元素的存储方式。'}]"
    },
    {
        "sortId": 5248,
        "id": "1330499080047865856",
        "title": "设char cs[20]=\"\\ta\\017bc\";则函数strlen(cs)的返回值为（ ）",
        "content": "设char cs[20]=\"\\ta\\017bc\";则函数strlen(cs)的返回值为（ ）\n@[](2)\n\nA. 8\nB. 5\nC. 20\nD. 9",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 178,
        "res": "[{'name': '字符串长度', 'description': '字符串长度是指字符串中字符的个数，可以使用strlen函数来计算字符串的长度。'}]"
    },
    {
        "sortId": 5249,
        "id": "1330497502175866880",
        "title": "若有以下说明：int ia[12]={1,2,3,4,5,6,7,8,9,10,11,12};char ch='a',cg=97",
        "content": "若有以下说明：\nint ia[12]={1,2,3,4,5,6,7,8,9,10,11,12};\nchar ch='a',cg=97;\n则数值为4的表达式是（ ）\n@[](2)\n\nA. ia[cg-ch]\nB. ia[4]\nC. ia['d'-'c']\nD. ia['d'-ch]",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 341,
        "res": "[{'name':'数组索引','description':'数组索引是指通过下标来访问数组中的元素。在C语言中，数组的下标从0开始，可以使用整型变量、字符型变量或者字符常量来作为数组的下标。'}]"
    },
    {
        "sortId": 5250,
        "id": "1330495822025773056",
        "title": "已有定义：int ia[6];下面（  ）是对数组元素的错误引用。",
        "content": "已有定义：int ia[6];下面（  ）是对数组元素的错误引用。\n@[](2)\n\nA. ia[0]\nB. ia[3]\nC. ia[7-2]\nD. ia[6]",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 305,
        "res": "[{'name': '数组元素的引用', 'description': '数组元素的引用是通过数组名和下标来访问数组中的元素。下标从0开始，最大值为数组长度减1。在C语言中，对于已定义的数组ia[6]，正确的引用方式是ia[0]、ia[1]、ia[2]、ia[3]、ia[4]、ia[5]，而ia[6]是错误的引用方式，因为数组的下标范围是0到5。'}]"
    },
    {
        "sortId": 5251,
        "id": "1330495207157583872",
        "title": "以下一维数组定义正确的是（ ）",
        "content": "以下一维数组定义正确的是（ ）\n@[](2)\n\nA. int ia(5);\nB. int inum=5,ia[inum];\nC. int ia[SZ];(SZ为符号常量）\nD. int inum;scanf(\"%d\",&inum);\nint ia[inum];",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 178,
        "res": "[{'name':'一维数组定义','description':'一维数组是C语言中的一种数据结构，用于存储一组相同类型的数据。在定义一维数组时，需要指定数组的大小，可以使用常量或变量来指定大小。正确的一维数组定义方式是使用常量或符号常量来指定数组的大小，然后在定义数组时使用这个大小。'}]"
    },
    {
        "sortId": 5252,
        "id": "1330450482467753984",
        "title": "LC的%方",
        "content": " 展开\n题目背景\nLC有一个3阶魔方一个面有9个方块。\n\n由于LC拥有神奇的%法，能够将魔方的一面转化成字符保存下来。\n\nLC想知道有多少人会施展这个%法？\n\n规定魔方规格为6\\*6，每个方块规格2\\*2 （2\\*2\\*9 == 6\\*6） 一行9个数字 a1-a9，ai表示从左到右，从上至下第i个方块的颜色类型是什么 (1<=ai<=6)；\n\n最后一行 6 个字符bi，bi表示每种颜色类型对应的字符；\n\n现在你需要将魔方用字符保存下来，并且将其顺时针旋转270°\n\n\n\n### 输入格式:\n\n\n每个测试样例有T组数据\n\n第一行 T ，表示T组数据\n\n每组\n\n第一行，9个数字 a1~a9 ，表示方格的颜色\n\n第二行，6个数字 b1~b6，表示颜色对应的字符\n\n### 输出格式:\n\n对于每组数据\n\n输出题中将颜色转为对应的字符的结果(末尾无多余空格)\n\n每组数据以换行分割\n\n### 输入样例:\n\n\n```in\n1\n1 1 2 2 3 3 4 5 6\nABCDEF\n```\n\n### 输出样例:\n\n\n```out\nBBCCFF\nBBCCFF\nAACCEE\nAACCEE\nAABBDD\nAABBDD\n```\n### 输入样例:\n\n\n```in\n2\n3 3 1 6 2 2 1 2 4\nmszvwI\n3 6 6 4 3 6 2 1 6\nyblJqN\n```\n\n### 输出样例:\n\n\n```out\nmmssvv\nmmssvv\nzzssss\nzzssss\nzzIImm\nzzIImm\n\nNNNNNN\nNNNNNN\nNNllyy\nNNllyy\nllJJbb\nllJJbb\n```\n### 提示\n对于样例1，我们有这样一个魔方旋转\n\n![魔方.png](~/c6b7c926-060b-4e79-8098-46f1f50f9d23.png)\n\n格式错误的话，记得末尾没有多余空格，以及换行\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 34,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 1,
        "res": "[{'name': '数组', 'description': '数组是一种用于存储多个相同类型数据的数据结构，可以通过下标访问和修改数组中的元素。在C语言中，数组的下标从0开始。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。循环可以根据条件来控制执行的次数。'}, {'name': '字符', 'description': '字符是C语言中的一种基本数据类型，用于表示单个字符。字符可以使用单引号括起来，例如\\'A\\'。'}, {'name': '条件语句', 'description': '条件语句用于根据条件来选择执行不同的代码块。C语言中常用的条件语句有if语句和switch语句。'}, {'name': '字符串', 'description': '字符串是由多个字符组成的字符序列，以空字符（\\'\\\\0\\'）结尾。在C语言中，字符串可以使用字符数组或指针来表示和操作。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。C语言中的函数可以有参数和返回值，可以在函数内部定义局部变量。'}, {'name': '指针', 'description': '指针是一种特殊的变量，用于存储内存地址。通过指针可以间接访问和修改内存中的数据。在C语言中，指针可以用来实现动态内存分配和传递参数的引用。'}, {'name': '二维数组', 'description': '二维数组是一种特殊的数组，可以用于表示多维数据结构。在C语言中，二维数组可以通过行和列的下标来访问和修改元素。'}, {'name': '字符数组', 'description': '字符数组是一种特殊的数组，用于存储字符串。在C语言中，字符数组可以通过字符串常量或字符指针来初始化和操作。'}, {'name': '字符指针', 'description': '字符指针是指向字符的指针变量，可以用于表示和操作字符串。在C语言中，字符指针可以通过指针运算和指针比较来实现字符串的遍历和操作。'}, {'name': '字符操作', 'description': '字符操作是对字符进行处理和操作的技术，包括字符的输入输出、字符的比较和拼接、字符的转换和格式化等。在C语言中，可以使用标准库函数来实现字符操作。'}, {'name': '输入输出', 'description': '输入输出是程序与外部环境进行数据交换的过程，包括从键盘读取输入数据和向屏幕输出结果。在C语言中，可以使用标准库函数来实现输入输出操作。'}, {'name': '逻辑运算', 'description': '逻辑运算是对逻辑表达式进行计算和判断的过程，包括与、或、非等逻辑运算符。在C语言中，逻辑运算可以用于条件判断和循环控制。'}, {'name': '位运算', 'description': '位运算是对二进制位进行计算和操作的过程，包括与、或、异或等位运算符。在C语言中，位运算可以用于位操作和位字段的处理。'}, {'name': '算术运算', 'description': '算术运算是对数值进行计算和操作的过程，包括加、减、乘、除等算术运算符。在C语言中，算术运算可以用于数值计算和表达式求值。'}, {'name': '类型转换', 'description': '类型转换是将一个数据类型转换为另一个数据类型的过程，可以通过强制类型转换或隐式类型转换来实现。在C语言中，类型转换可以用于数据的格式化和精度控制。'}, {'name': '条件运算', 'description': '条件运算是根据条件来选择执行不同操作的过程，包括三目运算符和条件表达式。在C语言中，条件运算可以用于简化条件判断和赋值操作。'}, {'name': '循环控制', 'description': '循环控制是根据条件来重复执行某段代码的过程，包括for循环、while循环和do-while循环。在C语言中，循环控制可以用于实现迭代计算和循环处理。'}, {'name': '文件操作', 'description': '文件操作是对文件进行读写和管理的过程，包括打开文件、读取文件、写入文件和关闭文件等操作。在C语言中，可以使用标准库函数来实现文件操作。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以用于表示多个不同类型的数据组合。在C语言中，结构体可以包含多个成员变量，可以通过成员运算符来访问和修改结构体的成员。'}, {'name': '枚举', 'description': '枚举是一种自定义的数据类型，用于表示一组相关的常量值。在C语言中，枚举可以用于定义一组有序的常量，可以通过枚举变量来访问和使用枚举常量。'}, {'name': '预处理指令', 'description': '预处理指令是在编译过程中对源代码进行预处理的指令，包括宏定义、条件编译和文件包含等操作。在C语言中，预处理指令可以用于代码的复用和条件编译。'}, {'name': '函数指针', 'description': '函数指针是指向函数的指针变量，可以用于实现函数的动态调用和回调。在C语言中，函数指针可以作为参数传递和返回值使用。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要分配和释放内存的过程，可以使用malloc、calloc和realloc函数来实现。在C语言中，动态内存分配可以用于处理变长数据和动态数据结构。'}, {'name': '错误处理', 'description': '错误处理是在程序运行过程中处理异常和错误情况的过程，可以使用错误码、异常处理和错误日志等技术来实现。在C语言中，错误处理可以用于提高程序的健壮性和可靠性。'}, {'name': '递归', 'description': '递归是一种通过调用自身来解决问题的方法，可以用于处理复杂的数据结构和算法。在C语言中，递归可以用于实现树的遍历、图的搜索和分治算法等。'}, {'name': '排序算法', 'description': '排序算法是将一组数据按照特定顺序进行排列的算法，包括冒泡排序、插入排序、选择排序、快速排序、归并排序等。在C语言中，可以使用排序算法对数组和链表进行排序。'}, {'name': '查找算法', 'description': '查找算法是在一组数据中查找指定元素的算法，包括线性查找、二分查找、哈希查找、树的查找等。在C语言中，可以使用查找算法在数组和链表中查找元素。'}, {'name': '数据结构', 'description': '数据结构是一种组织和存储数据的方式，包括数组、链表、栈、队列、树、图等。在C语言中，可以使用数据结构来表示和操作复杂的数据和算法。'}, {'name': '算法复杂度', 'description': '算法复杂度是衡量算法执行效率的指标，包括时间复杂度和空间复杂度。在C语言中，可以使用算法复杂度来评估和优化算法的性能。'}, {'name': '模块化编程', 'description': '模块化编程是将程序分解为多个独立的模块，每个模块负责完成特定的功能。在C语言中，可以使用函数和文件来实现模块化编程。'}, {'name': '代码调试', 'description': '代码调试是在程序运行过程中查找和修复错误的过程，可以使用调试器和日志输出等技术来辅助调试。在C语言中，可以使用断点和变量监视来调试程序。'}, {'name': '代码优化', 'description': '代码优化是提高程序执行效率和资源利用率的过程，可以使用算法优化、数据结构优化和编译器优化等技术来实现。在C语言中，可以使用循环展开、内联函数和编译选项来优化代码。'}, {'name': '代码风格', 'description': '代码风格是编写和组织代码的规范和约定，包括缩进、命名、注释和代码结构等。在C语言中，可以使用代码风格来提高代码的可读性和可维护性。'}, {'name': '代码复用', 'description': '代码复用是重复使用已有代码的过程，可以使用函数、模块和库来实现。在C语言中，可以使用函数库和头文件来实现代码复用。'}, {'name': '代码测试', 'description': '代码测试是验证程序正确性和性能的过程，包括单元测试、集成测试和性能测试等。在C语言中，可以使用断言和测试框架来进行代码测试。'}, {'name': '代码维护', 'description': '代码维护是对已有代码进行修改和更新的过程，包括bug修复、功能扩展和性能优化等。在C语言中，可以使用版本控制和代码审查来进行代码维护。'}, {'name': '代码安全', 'description': '代码安全是保护程序免受恶意攻击和数据泄露的过程，包括输入验证、数据加密和访问控制等。在C语言中，可以使用安全编码和漏洞扫描来提高代码安全性。'}, {'name': '代码规范', 'description': '代码规范是编写和组织代码的规则和标准，包括缩进、命名、注释和代码结构等。在C语言中，可以使用编码规范和代码检查工具来规范代码风格。'}, {'name': '代码重构', 'description': '代码重构是对已有代码进行优化和重组的过程，可以使用重构技术和工具来改进代码的结构和设计。在C语言中，可以使用函数提取和类抽取来进行代码重构。'}, {'name': '代码性能', 'description': '代码性能是衡量程序执行效率和资源利用率的指标，包括响应时间、吞吐量和资源消耗等。在C语言中，可以使用性能分析和优化工具来提高代码性能。'}, {'name': '代码质量', 'description': '代码质量是衡量程序正确性和可维护性的指标，包括bug率、代码复杂度和测试覆盖率等。在C语言中，可以使用代码检查和测试工具来提高代码质量。'}, {'name': '代码可读性', 'description': '代码可读性是衡量程序可理解性和可维护性的指标，包括命名、注释和代码结构等。在C语言中，可以使用代码缩进和注释来提高代码可读性。'}, {'name': '代码可维护性', 'description': '代码可维护性是衡量程序易于修改和扩展的指标，包括模块化、重用和文档化等。在C语言中，可以使用模块化编程和版本控制来提高代码可维护性。'}, {'name': '代码可靠性', 'description': '代码可靠性是衡量程序稳定性和健壮性的指标，包括错误处理、异常处理和日志记录等。在C语言中，可以使用错误码和断言来提高代码可靠性。'}, {'name': '代码可移植性', 'description': '代码可移植性是衡量程序在不同平台上运行的能力，包括平台无"
    },
    {
        "sortId": 5253,
        "id": "1330441532859002880",
        "title": "循环-拆分成和",
        "content": "输入一个自然数，拆分成两个非负整数的和，输出所有组合\n\n### 输入格式:\n\n输入一个自然数\n\n### 输出格式:\n\n拆分成两个非负整数的和，输出所有可能的两个数相加的表达式\n\n### 输入样例:\n\n```in\n7\n```\n\n### 输出样例:\n\n```out\n0+7=7\n1+6=7\n2+5=7\n3+4=7\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 174,
        "res": "[{'name': '输入输出', 'description': '学习如何进行输入和输出操作，包括读取用户输入和打印输出结果。'}, {'name': '循环结构', 'description': '学习如何使用循环结构来重复执行一段代码，以实现对自然数的拆分和求和操作。'}, {'name': '条件判断', 'description': '学习如何使用条件判断语句来判断两个非负整数的和是否等于给定的自然数。'}, {'name': '变量和数据类型', 'description': '学习如何声明和使用变量，以及不同的数据类型，如整数和字符串。'}, {'name': '算术运算', 'description': '学习如何进行算术运算，包括加法和赋值运算符。'}]"
    },
    {
        "sortId": 5254,
        "id": "1330438848894513152",
        "title": "字符串化之整数数组",
        "content": "对象序列化与逆序列化是面向对象的概念，C语言中也可实现特定的数据结构与字符流的互转换。比如，\"2001-12-23”可认为与日期2001年12月23日一一对应，而“{-11，22，-33，44}”可认为与数组{-11，22，-33，44}一一对应。字符串常用来作不同的数据类型间的转换。小明的同事通过QQ发来字符串形式的分数若干（逗号分隔），请你帮助编写一个函数，返回一个新的字符串，其中只包括90分及以上者（保持数据在原字符串中的相对位置不变）。\n\n### 输入样例：\n一个字符串：一个由逗号分隔的整数数组，注意还有两端的\"{\"和\"}\"：\n```in\n{88,67,98,82,86,69,90,87,82}\n```\n\n### 输出样例：\n返回一个新的字符串，其中仅包含90及以上者，相对位置不变，若无90分及以上者，返回空集合的表示串：\"{}\"\n```out\n{98,90}\n```\n\n### 函数接口定义：\n```c\nchar*  fun(char  *D );\n```\n其中 `D` 是分数字符串的首地址，函数要求返回一个新的字符串的地址，其中只包括90及以上的分数，仍以逗号作分隔符。注意，该字符串的空间应该用malloc()动态申请，它的释放由测试程序完成。\n\n\n/* 请在这里填写答案 */\n",
        "type": "CODE_COMPLETION",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 23,
        "res": "[{'name':'字符串处理','description':'字符串常用来作不同的数据类型间的转换。'}]"
    },
    {
        "sortId": 5255,
        "id": "1330424939689070592",
        "title": "签到题中消失的字符",
        "content": "YooQ是带预言家，他预言你在这题一定会错一次以上。\n\n输出一行字符串\n\n\"\\x2333 为\\a什\\b么\\r我\\n签\\n到\\r题\\b都\\a过不了QAQ%\"\n\n按原样输出字符串。不含引号\n\n### 输入格式:\n\n无\n\n### 输出格式:\n\n\\x2333 为\\a什\\b么\\r我\\n签\\n到\\r题\\b都\\a过不了QAQ%\n\n\n### 输入样例:\n\n\n```in\n无\n```\n\n### 输出样例:\n\n\n```out\n\\x2333 为\\a什\\b么\\r我\\n签\\n到\\r题\\b都\\a过不了QAQ%\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 12,
        "res": "[{'name': '转义字符', 'description': '转义字符是一种特殊的字符序列，用于表示一些无法直接输入或显示的字符。在C语言中，常见的转义字符包括\\\\n（换行符）、\\\\t（制表符）、\\\\r（回车符）、\\\\\\\"（双引号）、\\\\'（单引号）等。在本题中，需要输出一个包含转义字符的字符串，因此需要了解转义字符的使用方法。'}]"
    },
    {
        "sortId": 5256,
        "id": "1330413278307602432",
        "title": "在C语言中，字符型变量所占的内存空间是__________。",
        "content": "在C语言中，字符型变量所占的内存空间是__________。\n@[](2)\n\nA. 2字节\nB. 4字节\nC. 1字节\nD. 由用户自定义",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 10,
        "res": "[{'name':'字符型变量的内存空间', 'description':'字符型变量在C语言中所占的内存空间是多少。'}]"
    },
    {
        "sortId": 5257,
        "id": "1330413277783314432",
        "title": "下列正确的字符常量是__________。",
        "content": "下列正确的字符常量是__________。\n@[](2)\n\nA. '\\n'\nB. a\nC. \"\\n\"\nD. 97",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 31,
        "res": "[{'name':'字符常量', 'description':'字符常量是指用单引号括起来的单个字符或转义字符的组合，表示一个字符的值。在C语言中，字符常量可以用单引号括起来的单个字符表示，也可以用双引号括起来的字符串表示。在给定的选项中，正确的字符常量是A和C。A选项'\\n'表示换行符，C选项\"\\n\"表示一个包含换行符的字符串。'}]"
    },
    {
        "sortId": 5258,
        "id": "1330413277254832128",
        "title": "下列是合法的C语言标识符的是__________。",
        "content": "下列是合法的C语言标识符的是__________。\n@[](2)\n\nA. auto\nB. define\nC. 6a\nD. 17",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 3,
        "res": "[{'name': 'C语言标识符', 'description': 'C语言标识符是用来命名变量、函数、数组等的名称，必须遵循一定的规则。合法的C语言标识符由字母、数字和下划线组成，且不能以数字开头。'}]"
    },
    {
        "sortId": 5259,
        "id": "1330413276743127040",
        "title": "下列选项中错误的是__________。",
        "content": "下列选项中错误的是__________。\n@[](2)\n\nA. 对表达式：x%y，其中x和y必须同为整型数据\nB. 9/2的值为4.500000\nC. 计算表达式的值时，首先考虑运算符的优先级，对相同优先级的运算符，再考虑其结合性\nD. 对整型数据，如其被分配的字节数越多，则其取值范围越大",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 12,
        "res": "[{'name': '数据类型', 'description': 'C语言中有多种数据类型，包括整型、浮点型、字符型等。在本题中涉及到了整型数据类型的取值范围。'}, {'name': '运算符', 'description': 'C语言中有多种运算符，包括算术运算符、关系运算符、逻辑运算符等。在本题中涉及到了算术运算符和取模运算符。'}, {'name': '运算符优先级和结合性', 'description': 'C语言中的运算符有不同的优先级和结合性，影响表达式的计算顺序。在本题中涉及到了运算符的优先级和结合性。'}]"
    },
    {
        "sortId": 5260,
        "id": "1330413276189478912",
        "title": "以下不属于C语言简单数据类型的是__________。",
        "content": "以下不属于C语言简单数据类型的是__________。\n@[](2)\n\nA. 整型\nB. 浮点型\nC. 字符型\nD. 数组",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 1,
        "res": "[{'name': '简单数据类型', 'description': '简单数据类型是C语言中最基本的数据类型，用于表示基本的数据值。C语言中的简单数据类型包括整型、浮点型和字符型。数组不属于C语言的简单数据类型，它是一种复合数据类型，用于存储多个相同类型的数据值。'}]"
    },
    {
        "sortId": 5261,
        "id": "1330409933387911168",
        "title": "全排列",
        "content": "Lc今天上课学会了数的全排列并且Lc觉得数的全排列很简单，但是直到Lc的同桌YooQ向他提出了一个问题，该问题的描述如下：我们知道n的全排列总共有n!个序列，例如2的全排列有两个序列{1,2}和{2,1}，现在你要解决的问题是n的全排列的n!个序列中第m个序列是什么？(注意：n的全排列的n!个序列是按字典序由小到大排序的)\n### 输入格式:\n\n第一行为样例组数t（t≤1e5），接下来t行每行有一个整数n和m（1<=n<=20，1<=m<=n!）\n\n### 输出格式:\n输出t行，每行输出n的全排列的n!个序列中第m个序列，两相邻的数间有一空格，行末不得有多余空格。\n\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n1 1\n3 6\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n1\n3 2 1\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 35,
        "res": "[{'name':'全排列','description':'全排列是指将一组数按照一定的顺序进行排列，使得每个数只能出现一次，并且所有的排列方式都要考虑到。在C语言中，可以使用递归的方式来实现全排列的算法。'}]"
    },
    {
        "sortId": 5262,
        "id": "1330407167152140288",
        "title": "下列关于C程序的说法错误的是__________。",
        "content": "下列关于C程序的说法错误的是__________。\n@[](2)\n\nA. C程序的工作过程是编辑、编译、连接、运行\nB. C程序中的标识符不区分大小写\nC. C程序的三种基本结构是顺序、选择、循环\nD. C程序从main()函数开始执行",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 29,
        "res": "[{'name': 'C程序的工作过程', 'description': 'C程序的工作过程包括编辑、编译、连接和运行。'}, {'name': 'C程序中的标识符', 'description': 'C程序中的标识符是用来表示变量、函数、类型等的名称，不区分大小写。'}, {'name': 'C程序的基本结构', 'description': 'C程序的基本结构包括顺序结构、选择结构和循环结构。'}, {'name': 'main()函数', 'description': 'C程序从main()函数开始执行。'}]"
    },
    {
        "sortId": 5263,
        "id": "1330407166489440256",
        "title": "下列说法错误的是__________。",
        "content": "下列说法错误的是__________。\n@[](2)\n\nA. 函数可分为两个部分：函数首部和函数体\nB. main()函数可以调用任何非main()函数的其他函数\nC. 任何非main()函数可以调用其他任何非main()函数\nD. 程序可以从任何非main()函数开始执行",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 6,
        "res": "[{'name': '函数', 'description': '函数是C语言程序中的基本组成单元，可以将一段代码封装成一个函数，通过函数的调用来执行这段代码。函数由函数首部和函数体组成，函数首部包含函数的返回类型、函数名和参数列表，函数体包含函数的具体实现。'}, {'name': 'main()函数', 'description': 'main()函数是C语言程序的入口函数，程序从main()函数开始执行。main()函数可以调用其他非main()函数，但不能被其他函数调用。'}, {'name': '函数调用', 'description': '函数调用是指在一个函数中使用函数名和参数列表来调用另一个函数。在C语言中，任何非main()函数都可以调用其他非main()函数，但不能调用main()函数。'}, {'name': '程序执行', 'description': '程序从main()函数开始执行，按照函数调用的顺序执行各个函数。在C语言中，程序可以从任何非main()函数开始执行，但通常情况下程序从main()函数开始执行。'}]"
    },
    {
        "sortId": 5264,
        "id": "1330407165969346560",
        "title": "C程序从main()函数开始执行，main()函数应写在__________。",
        "content": "C程序从main()函数开始执行，main()函数应写在__________。\n@[](2)\n\nA. 源程序的开始\nB. 源程序的末尾\nC. 它所调用的函数的前面\nD. 源程序的任何位置",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 9,
        "res": "[{'name': 'main()函数的位置', 'description': 'main()函数是C程序的入口函数，程序从main()函数开始执行。它应该写在源程序的开始位置。'}]"
    },
    {
        "sortId": 5265,
        "id": "1330407165273092096",
        "title": "C程序编写的步骤，包括__________｡",
        "content": "C程序编写的步骤，包括__________｡\n@[](2)\n\nA. 编写、编译、连接、运行\nB. 编写、翻译、调试、运行\nC. 编写、解释、调试、运行\nD. 编辑、改错、解释、调试",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 2,
        "res": "[{'name':'C程序编写的步骤','description':'C程序编写的步骤包括编写、编译、连接、运行。在编写C程序时，首先需要编写程序代码，然后通过编译器将代码转换成机器语言的目标文件，接着通过连接器将目标文件与库文件链接在一起，最后运行生成的可执行文件。这个过程是C程序的基本流程，掌握了这个步骤可以帮助学生理解C程序的执行过程和调试方法。'}]"
    },
    {
        "sortId": 5266,
        "id": "1330407164757192704",
        "title": "下列关于C程序的说法，错误的是__________。",
        "content": "下列关于C程序的说法，错误的是__________。\n@[](2)\n\nA. 每个语句必须独占一行，语句的末尾可以是分号，也可以是句号\nB. 每个函数都有一个函数头和一个函数体，main函数也不例外\nC. main函数可以调用其他函数，其他函数间也可以相互调用 ，但其他函数不能调用main函数\nD. 程序是由若干个函数构成的，但必须有且仅有一个main函数",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 4,
        "res": "[{'name': '语句的书写格式', 'description': '描述了C语言中语句的书写格式，包括每个语句必须独占一行，语句的末尾可以是分号，也可以是句号。'}, {'name': '函数的组成', 'description': '描述了C语言中函数的组成，包括函数头和函数体。'}, {'name': '函数的调用', 'description': '描述了C语言中函数的调用关系，包括main函数可以调用其他函数，其他函数间也可以相互调用，但其他函数不能调用main函数。'}, {'name': '程序的组成', 'description': '描述了C语言程序的组成，包括由若干个函数构成，但必须有且仅有一个main函数。'}]"
    },
    {
        "sortId": 5267,
        "id": "1330407164232904704",
        "title": "C语言的编译程序__________。",
        "content": "C语言的编译程序__________。\n@[](2)\n\nA. 是C程序的机器语言版本\nB. 是一组机器语言指令\nC. 可将C源程序编译成目标程序\nD. 是由制造厂家提供的一套应用软件",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 6,
        "res": "[{'name': 'C语言的编译程序', 'description': 'C语言的编译程序是可将C源程序编译成目标程序的工具。'}]"
    },
    {
        "sortId": 5268,
        "id": "1330407163717005312",
        "title": "C程序的基本单位是__________。",
        "content": "C程序的基本单位是__________。\n@[](2)\n\nA. 代码段\nB. 语句\nC. 函数\nD. 字符",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 2,
        "res": "[{'name': 'C程序的基本单位', 'description': 'C程序的基本单位是函数。函数是C程序的基本组织单位，它由一组语句组成，用于完成特定的任务。在C语言中，程序的执行从main函数开始，通过调用其他函数来完成各种功能。'}]"
    },
    {
        "sortId": 5269,
        "id": "1330407163163357184",
        "title": "以下说法正确的是__________。",
        "content": "以下说法正确的是__________。\n@[](2)\n\nA. C程序总是从程序中第一个定义的函数开始执行\nB. C程序中，应该将被调用的函数定义在main()函数体中\nC. C程序总是从main()函数开始执行\nD. main()函数必须放在源程序开头，即所有其他函数之前",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 29,
        "res": "[{'name': 'C程序执行顺序', 'description': 'C程序总是从main()函数开始执行。'}]"
    },
    {
        "sortId": 5270,
        "id": "1330401465893433344",
        "title": "逆序输出",
        "content": "输入n个数，然后把这n个数逆序输出。\n\n### 输入格式:\n\n测试数据有多组，处理到文件尾。每组测试数据在一行上首先输入整数n，接着输入n（n<=40）个整数。\n\n### 输出格式:\n\n对于每组测试，逆序输出n个数，每两个数据之间留一个空格。每两组测试数据之间留一个空行。\n\n### 输入样例:\n\n```in\n5 1 2 3 4 5\n3 1 2 3\n4 123 456 789 100\n```\n\n### 输出样例:\n\n```out\n5 4 3 2 1\n\n3 2 1\n\n100 789 456 123\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924247889578827776",
                        "name": "组合数据类型",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924249261695049728",
                        "name": "列表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 248,
        "res": "[{'name':'数组', 'description':'数组是一种存储多个相同类型数据的数据结构，可以通过下标访问和修改数组中的元素。本题中需要使用数组来存储输入的n个数，并逆序输出。'}, {'name':'循环', 'description':'循环是一种重复执行某段代码的结构，可以根据需要选择不同类型的循环结构。本题中可以使用循环来读取输入的n个数，并逆序输出。'}, {'name':'逆序输出', 'description':'逆序输出是将原本按顺序排列的数据按相反的顺序输出。本题中需要将输入的n个数逆序输出。'}]"
    },
    {
        "sortId": 5271,
        "id": "1330399295412416512",
        "title": "C语言的编译程序__________。",
        "content": "C语言的编译程序__________。\n@[](2)\n\nA. 是C程序的机器语言版本\nB. 是一组机器语言指令\nC. 是由制造厂家提供的一套应用软件\nD. 可将C源程序编译成目标程序",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 1,
        "res": "[{'name': 'C语言的编译程序', 'description': 'C语言的编译程序是将C源程序编译成目标程序的工具。它将C源代码转换为机器语言指令，使计算机能够执行C程序。编译程序是C语言开发过程中必不可少的一部分，它负责将高级语言代码转换为可执行的机器码，以便计算机能够理解和执行。'}]"
    },
    {
        "sortId": 5272,
        "id": "1330398892868284416",
        "title": "排序输出",
        "content": "输入一个整数n，再输入n个整数，请把它们从小到大排序后输出。\n\n### 输入格式:\n\n测试数据有多组，处理到文件尾。每组测试数据输入一行，首先是整数n，接着是n个整数。\n\n### 输出格式:\n\n对于每组测试，在一行上输出从小到大排好序的n个数，每两个数据之间留一个空格。每两组测试数据之间留一个空行。\n\n### 输入样例:\n\n```in\n3 3 1 2\n5 4 5 2 1 3\n```\n\n### 输出样例:\n\n```out\n1 2 3\n\n1 2 3 4 5\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 56,
        "res": "[{'name':'排序算法'，'description':'排序算法是计算机科学中的一种算法，用于将一组元素按照特定的顺序进行排列。常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。在C语言中，可以使用这些排序算法对一组整数进行排序。'}]"
    },
    {
        "sortId": 5273,
        "id": "1330394930156974080",
        "title": "C程序的基本单位是__________。",
        "content": "C程序的基本单位是__________。\n@[](2)\n\nA. 代码段\nB. 语句\nC. 函数\nD. 字符",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 1,
        "res": "[{'name': 'C程序的基本单位', 'description': 'C程序的基本单位是函数。函数是C程序的基本组织单位，它由一组语句组成，用于完成特定的任务。在C语言中，程序的执行从main函数开始，通过调用其他函数来完成各种功能。'}]"
    },
    {
        "sortId": 5274,
        "id": "1330393899092193280",
        "title": "以下说法正确的是__________。",
        "content": "以下说法正确的是__________。\n@[](2)\n\nA. C程序总是从程序中第一个定义的函数开始执行\nB. 应该将被调用的函数定义在main()函数体中\nC. C程序总是从main()函数开始执行\nD.  main()函数必须放在源程序开头，即所有其他函数之前",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 1,
        "res": "[{'name': 'C程序执行顺序', 'description': 'C程序总是从main()函数开始执行，因此main()函数必须放在源程序开头，即所有其他函数之前。'}]"
    },
    {
        "sortId": 5275,
        "id": "1330362280763502592",
        "title": "空行间隔",
        "content": "输入2个整数A和B，然后输出它们的和。要求每两组测试数据之间留一个空行。\n\n### 输入格式:\n\n测试数据有多组，处理到文件尾。每组测试输入2个整数A和B。\n\n### 输出格式:\n\n对于每组测试数据，在一行中输出A+B的值。每两组测试数据之间留一个空行。\n\n### 输入样例:\n\n```in\n1 2\n3 4\n5 6\n```\n\n### 输出样例:\n\n```out\n3\n\n7\n\n11\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "924247594312409088",
                        "name": "Python程序设计",
                        "isLeaf": false,
                        "enName": "Python Programming"
                    },
                    {
                        "id": "924248495018221568",
                        "name": "循环结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "924249820057575424",
                        "name": "条件循环while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 71,
        "res": "[{'name':'基本输入输出','description':'学习如何使用scanf和printf函数进行基本的输入输出操作。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'运算符','description':'学习C语言中的各种运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'循环结构','description':'学习如何使用循环结构，包括for循环、while循环和do-while循环。'}, {'name':'条件结构','description':'学习如何使用条件结构，包括if语句、else语句和switch语句。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'函数','description':'学习如何声明和调用函数，以及函数的参数传递和返回值。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作，包括打开文件、读取文件和写入文件等。'}]"
    },
    {
        "sortId": 5276,
        "id": "1330047180018077696",
        "title": "你活了多少天",
        "content": "人生短暂，光阴如梭，绝大多数人活不到4万天，珍惜每一天，不负韶华。本程序根据输入的生日及当前日期计算已活得天数并输出。\n\n### 输入格式:\n\n输入在一行中给出生日及当前日期，按日期年月日输入，题目保证出生日期小于当前日期。\n\n### 输出格式:\n\n按You have lived n days.格式输出已活得天数，其中n是计算出的活的天数。\n\n### 输入样例:\n\n```in\n2001 10 1\n2020 11 20\n```\n\n### 输出样例:\n\n```out\nYou have lived 6990 days.\n```\n### 输入样例:\n\n```in\n2020 2 1\n2020 3 1\n```\n\n### 输出样例:\n\n```out\nYou have lived 29 days.\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 46,
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。在本题中，需要使用整型变量来存储生日和当前日期的年、月、日。'}, {'name': '输入和输出', 'description': '在C语言中，可以使用scanf函数来接收输入的数据，使用printf函数来输出结果。在本题中，需要使用scanf函数接收生日和当前日期的输入，使用printf函数输出已活得天数。'}, {'name': '运算符', 'description': '在C语言中，可以使用运算符进行各种数学运算。在本题中，需要使用减法运算符来计算已活得天数。'}, {'name': '条件语句', 'description': '在C语言中，可以使用条件语句来根据条件执行不同的代码块。在本题中，可以使用条件语句判断输入的日期是否合法。'}, {'name': '循环语句', 'description': '在C语言中，可以使用循环语句来重复执行一段代码。在本题中，可以使用循环语句来计算已活得天数。'}]"
    },
    {
        "sortId": 5277,
        "id": "1330034526394306560",
        "title": "素数链表",
        "content": "**注意**：本题要求用**链表**（或STL之**list**）做。\n\\\n给你两个整数$m$和$n$，请用$[m, n]$范围内的所有素数构建成一个链表并按从小到大的顺序输出。\n\n### 输入格式:\n\n输入数据首先包含一个整数$T(1<=T<=15)$，表示测试实例的个数。\\\n然后是$T$组测试数据。每组测试输入两个整数$m, n(1<=m<n<1000)$。\n\n### 输出格式:\n\n对于每组测试，在一行上按从小到大的顺序输出该链表中的各个素数，数据之间空一个空格。若$[m, n]$范围内没有素数，则输出`none`。\n\n### 输入样例:\n\n```in\n2\n3 7\n8 10\n```\n\n### 输出样例:\n\n```out\n3 5 7\nnone\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "85",
                        "name": "链表",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 12,
        "res": "[{'name': '链表', 'description': '链表是一种常见的数据结构，它由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可以动态地增加或删除节点，适用于需要频繁插入和删除操作的场景。在本题中，可以使用链表来存储素数。'}，{'name': '素数', 'description': '素数是指只能被1和自身整除的正整数。在本题中，需要判断给定范围内的数是否为素数，并将素数存储在链表中。'}]"
    },
    {
        "sortId": 5278,
        "id": "1330028070571913216",
        "title": "进球统计",
        "content": "世界杯进行中……\\\n小明是个不太热心的球迷，收集了一些球赛的比赛信息，请你统计各个球队的进球数，并要求按球队名的字典序（升序）输出各球队名和进球数。\n\n### 输入格式:\n\n首先输入一个整数T，表示后面有T组测试数据。\\\n每组测试数据先输入1个整数n(1<=n<=20)，表示共有n场比赛的信息，接下来的n行中每行输入2个队名 name1，name2（长度不超过10且只包含英文字母）和2个整数a，b(0<=a，b<=10)，表示name1与name2的进球数分别是 a和b。\n\n### 输出格式:\n\n对于每组测试，按球队名的字典序输出各球队名和进球数，每个球队的输出占一行。\n\n### 输入样例:\n\n```in\n1\n2\ndm rb 1 3\nkml hl 1 2\n```\n\n### 输出样例:\n\n```out\ndm 1\nhl 2\nkml 1\nrb 3\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 108,
        "res": "[{'name':'输入输出','description':'学习如何进行输入和输出操作，包括读取和打印数据。'}, {'name':'变量和数据类型','description':'学习如何声明和使用变量，以及C语言中的基本数据类型。'}, {'name':'循环结构','description':'学习如何使用循环结构来重复执行一段代码。'}, {'name':'条件语句','description':'学习如何使用条件语句来根据不同的条件执行不同的代码块。'}, {'name':'数组','description':'学习如何声明和使用数组，以及数组的基本操作。'}, {'name':'字符串','description':'学习如何声明和使用字符串，以及字符串的基本操作。'}, {'name':'排序算法','description':'学习如何使用排序算法对数据进行排序。'}, {'name':'字典','description':'学习如何使用字典来存储和操作键值对数据。'}, {'name':'函数','description':'学习如何声明和使用函数，以及函数的参数传递和返回值。'}, {'name':'文件操作','description':'学习如何进行文件的读写操作。'}]"
    },
    {
        "sortId": 5279,
        "id": "1330017886659194880",
        "title": "判断变量的值",
        "content": "判断变量的值\n\n判断 x 在区间 (a, b) 内的表达式为 @@[](1)。\n\n判断 x 在区间 (a, b) 外的表达式为 @@[](1)。\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 76,
        "res": "[{'name':'判断变量的值', 'description':'在C语言中，判断变量的值是否在某个区间内或外，可以使用比较运算符来实现。判断 x 在区间 (a, b) 内的表达式为 x > a && x < b。判断 x 在区间 (a, b) 外的表达式为 x < a || x > b。'}]"
    },
    {
        "sortId": 5280,
        "id": "1330001363173421056",
        "title": "字符串中的数的显示",
        "content": "输入形如：8,9,6 - 11,20-    25 一行数据，其中 a-b表示 闭区间[a,b]（a<=b），然后把这行中对应的数（没有负数与0）从小到大显示出来,。\n### 输入格式:\n第1行输入N（0≤N≤10）；第2行开始输入N行数据，\n输入一行数据时（一行中字符串的长度不超50），数与数之间，数与闭区间之间，闭区间与闭区间之间用‘，’分割，同时允许在其中出现多个空格 如：20-    25，18   ，19，其中最大的数不超过99。\n\n### 输出格式:\n\n按输入的顺序依次输出各行对应的数，每行数从小到大的顺序输出所有的数，数与数之间以逗号分隔，最后没有逗号。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n2\n87, 9- 16, 82, 90-92,10-17\n3-6 , 13 -   17 ,20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n9,10,11,12,13,14,15,16,17,82,87,90,91,92\n3,4,5,6,13,14,15,16,17,20\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 93,
        "res": "[{'name':'字符串处理'，'description':'对输入的字符串进行处理，去除多余的空格和逗号，将闭区间转换为具体的数值'},\n{'name':'排序算法'，'description':'对处理后的数值进行排序，按从小到大的顺序输出'}]"
    },
    {
        "sortId": 5281,
        "id": "1329987290343976960",
        "title": "字符串的比较",
        "content": "C语言中对字符的比较依赖的是字符的编码，默认使用了ASCII作为编码标准，每一个字符都对应了一个整数值。比如字符'0’的ASCII值是48，'A’的ASCII值是65，'a’的ASCII值是97。字符之间大小比较时，会对它们的编码值进行比较，'A'是小于'B'的，'A'是小于'a'等等。\n\n那么字符串之间可以比较大小吗？字符串\"China\"与\"America\"哪个大呢？\n\n这个回答是肯定的，在 C 语言中,我们通常遵循的是一种特殊的定义——字典序。\n\n我们通过例子理解下字典序：\n\n对于字符串\"abc\"和\"bbc\"的大小关系——我们首先会对它们的第一个字符进行比较, 我们发现第一个字符'a' < 'b'时,我们就可以明确\"abc\" < \"bbc\"的结论。\n\n对于字符串\"abc\"和\"abd\"的大小关系——我们首先会对它们的第一个字符进行比较，如果第一个字符相同，则会接下来比较第二个字符；如果第二个字符相同，则会接下来比比较第三个字符；当我们发现第三个字符'c' < 'd'时,我们就得到了\"abc\" < \"abd\"的结论。\n\n对于字符串\"abc\"和\"ab\"的大小关系——我们首先会对它们的第一个字符进行比较，如果第一个字符相同，则会接下来比较第二个字符；如果第二个字符相同， 则会接下来比较第三个字符；当我们发现\"ab\"没有第三个字符时，我们就得到了\"ab\" < \"abc\"的结论。\n\n通过例子，我们可以总结：\n\n字典序遵循的是逐字符比较的方式，越靠左的字符越会被先比较。\n\n逐字符比较过程中，一旦发现某一对被比较的字符之间不相等时，这一对字符的大小关系即为这一对字符串的大小关系。\n\n逐字符比较过程中，一旦出现某一个字符串的所有字符都已经经过比较，而另一字符串还存在未被比较的字符时，较短的字符串更小。\n\n如果所有字符串内的字符都被发现相等，则这两个字符串相等。\n\n因此,我们也可以回答前面的问题啦!字符串\"China\"是大于\"America\"的。\n\n老师希望通过程序比较两个字符串的大小，小可爱们，你们可以帮助他吗？\n\n在处理字符串的标准库中，有一个函数strcmp(表示 string compare)用于比较字符串。\n\n```c++\n#include <stdio.h>\n@@[](2)\nint main() {\nchar string[100] = \"hello\";\nchar input1[100] = \"He\";\nchar input2[100] = \"hello\";\nchar input3[100] = \"zoo\";\nif(strcmp(input1,string)@@[](1)0) \n { \n    printf(\"\\\"%s\\\" is less than \\\"%s\\\"\\n\",input1,string);\n  }\nif(strcmp(input2,string)@@[](1)0) \n { \n    printf(\"\\\"%s\\\" equals \\\"%s\\\"\\n\",input2,string); \n } \nif(strcmp(input3,string)@@[](1)0)\n { \n   printf(\"\\\"zoo\\\" is greater than \\\"hello\\\"\\n\");\n }\nreturn 0;\n}\n```\n要求输出结果为:\n\n![1.png](~/dcea26ce-c8e7-4218-805b-2a1ef4b61e99.png)\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 69,
        "res": "[{'name': '字符串比较', 'description': 'C语言中对字符的比较依赖的是字符的编码，默认使用了ASCII作为编码标准，每一个字符都对应了一个整数值。字符之间大小比较时，会对它们的编码值进行比较。字符串之间可以比较大小，通常遵循字典序的定义，即逐字符比较的方式，越靠左的字符越会被先比较。逐字符比较过程中，一旦发现某一对被比较的字符之间不相等时，这一对字符的大小关系即为这一对字符串的大小关系。逐字符比较过程中，一旦出现某一个字符串的所有字符都已经经过比较，而另一字符串还存在未被比较的字符时，较短的字符串更小。如果所有字符串内的字符都被发现相等，则这两个字符串相等。'}]"
    },
    {
        "sortId": 5282,
        "id": "1329986072620093440",
        "title": "判断开区间外的值(填空)",
        "content": "下面的程序判断 $$x$$ 的值是否在开区间 $$(\\ a ,\\ b\\ )$$ 之外。\n\n请在空白处填写适当内容完成判断。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tdouble a, b, x;\n\tscanf(\"%lg%lg\", &a, &b);\n\tscanf(\"%lg\", &x);\n\tif ( __________ )\n\t{\n\t\tputs(\"Out\");\n\t}\n\telse\n\t{\n\t\tputs(\"In\");\n\t}\n\treturn 0;\n}\n```\n\n#### 输入样例1\n```in\n-2.3 0.8\n-1.2\n\n```\n#### 输出样例1\n```out\nIn\n\n```\n\n#### 输入样例2\n```in\n-2.3 0.8\n3.5\n\n```\n#### 输出样例2\n```out\nOut\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 26,
        "res": "[{'name':'条件判断语句','description':'条件判断语句用于根据条件的真假来执行不同的代码块。在这个题目中，需要使用条件判断语句来判断x的值是否在开区间(a, b)之外。'}]"
    },
    {
        "sortId": 5283,
        "id": "1329802484905725952",
        "title": "删除指定的字母",
        "content": "输入一个由字母（大小字母均可以）组成字符串（长度不超过127），然后输入若干个字母，将这些字母从字符串中\n删除（允许字母没有在字符串中出现过）\n### 输入格式:\n\n在一行中输入不超过127字符的由字母组成的字符串，然后输入一个n(n<=52)，再输入n个字母，字母之间由空格进行分割。\n\n### 输出格式:\n\n输出删除指定字母后的字符串\n\n### 输入样例:\n\n```in\nabcdefgLLLiiikl\n4\na e L n\n```\n\n### 输出样例:\n\n```out\nbcdfgiiikl\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 2,
        "res": "[{'name': '字符串处理', 'description': '字符串处理是C语言程序设计中的基础知识点之一。在本题中，需要对输入的字符串进行处理，删除指定的字母。可以使用循环遍历字符串的每个字符，判断是否需要删除，然后重新构建一个新的字符串。'}, {'name': '字符操作', 'description': '字符操作是C语言程序设计中的基础知识点之一。在本题中，需要对输入的字符串中的每个字符进行判断，判断是否需要删除。可以使用条件语句判断字符是否需要删除，然后进行相应的操作。'}, {'name': '数组', 'description': '数组是C语言程序设计中的基础知识点之一。在本题中，可以使用数组来存储输入的n个字母，然后遍历字符串的每个字符，判断是否需要删除。可以使用数组的索引来判断字符是否在n个字母中出现过。'}, {'name': '循环', 'description': '循环是C语言程序设计中的基础知识点之一。在本题中，可以使用循环来遍历字符串的每个字符，判断是否需要删除。可以使用for循环或while循环来实现。'}, {'name': '条件语句', 'description': '条件语句是C语言程序设计中的基础知识点之一。在本题中，可以使用条件语句来判断字符是否需要删除。可以使用if语句来判断字符是否在n个字母中出现过，然后进行相应的操作。'}]"
    },
    {
        "sortId": 5284,
        "id": "1329440965365714944",
        "title": "指针的使用",
        "content": "仔细阅读下面的程序，写出程序的输出结果。\n\n```c\n#include <stdio.h>\n\nvoid F(int x)\n{\n\tx = 0;\n}\n\nvoid G(int *x)\n{\n\t*x = 0;\n}\n\nint main()\n{\n\tint a = 1, b = 2;\n\tprintf(\"%d, %d\\n\", a, b);\n\tF(a);\n\tG(&b);\n\tprintf(\"%d, %d\\n\", a, b);\n\treturn 0;\n}\n```\n\n输出结果为：\n\n```\n\n\n```\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 53,
        "res": "[{'name': '指针', 'description': '指针是C语言中的一种数据类型，它存储了一个变量的内存地址。通过指针，可以直接访问和修改变量的值。在本题中，函数G接受一个指向整型变量的指针作为参数，通过修改指针所指向的变量的值，实现了对变量b的修改。'}, {'name': '函数调用', 'description': '函数调用是C语言中的一种语法结构，通过函数调用可以执行特定的代码块。在本题中，函数F和函数G分别被调用了两次，通过函数调用可以实现对变量a和b的修改。'}, {'name': '传值调用', 'description': 'C语言中的函数调用默认是传值调用，即将实参的值复制给形参。在本题中，函数F接受一个整型变量作为参数，通过传值调用，实参a的值被复制给了形参x，但在函数内部对x的修改不会影响到实参a的值。'}, {'name': '传址调用', 'description': 'C语言中可以通过传址调用来实现对变量的修改。传址调用是将变量的地址作为参数传递给函数，通过指针来修改变量的值。在本题中，函数G接受一个指向整型变量的指针作为参数，通过传址调用，实参b的地址被传递给了形参x，通过修改x所指向的变量的值，实现了对变量b的修改。'}]"
    },
    {
        "sortId": 5285,
        "id": "1329423204082110464",
        "title": "循环-n个数最大值",
        "content": "求n个整数的最大值\n\n### 输入格式:\n先输入n的值（正整数），再输入n个整数\n\n\n### 输出格式:\n\n输出 n个数的最大值，若n<=0没有输出\n\n### 输入样例:\n\n\n```in\n6\n11 26 33 51 16 19\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n51\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 125,
        "res": "[{'name': '变量和数据类型', 'description': '在C语言中，变量是用来存储数据的，数据类型决定了变量可以存储的数据的种类和范围。在本题中，需要使用整数类型的变量来存储输入的n和n个整数。'}, {'name': '循环结构', 'description': '循环结构是一种重复执行某段代码的结构。在本题中，可以使用循环结构来读取n个整数，并找到最大值。'}, {'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在本题中，可以使用条件语句来判断n的值是否小于等于0，如果是，则不输出最大值。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的结构。在本题中，可以使用数组来存储n个整数，并找到最大值。'}]"
    },
    {
        "sortId": 5286,
        "id": "1329415775739047936",
        "title": "循环-最大公约数",
        "content": "求三个整数的最大公约数\n### 输入格式:\n\n输入三个正整数,空格分隔\n\n### 输出格式:\n\n输出最大公约数，非法数据没有输出\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10 20 30\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n10\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 57,
        "res": "[{'name': '最大公约数', 'description': '最大公约数是指能够同时整除两个或多个整数的最大正整数。在这个题目中，需要求解三个整数的最大公约数。'}]"
    },
    {
        "sortId": 5287,
        "id": "1329396203300450304",
        "title": "嵌套循环-素数个数",
        "content": "输入入2个正整数A和B，然后输出它们之间的素数个数（不包含A，B）。\n\n### 输入格式:\n\n输入正整数A和B，空格分隔。\n\n### 输出格式:\n\n输出两数间素数的个数（不包括这两个数）。如果输入负数没有输出。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10 20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 215,
        "res": "[{'name':'素数个数计算'，'description':'本题要求计算两个正整数之间的素数个数。素数是只能被1和自身整除的数，不包括1和本身。'}]"
    },
    {
        "sortId": 5288,
        "id": "1329394928554995712",
        "title": "逐行排序",
        "content": "给你一个n阶方阵，请你把每行数据按数据从小到大排序并输出。 \n\n### 输入格式:\n\n输入数据首先包含一个整数T，表示测试实例的个数，然后是T组测试数据。\\\n每组测试数据的第一行输入1个整数n(1<n<20),接下来输入n行数据，每行n个整数。\n\n### 输出格式:\n\n对于每组测试，输出排好序后的结果。每行中各数据之间留一个空格。 \n\n### 输入样例:\n\n```in\n2\n3\n4 9 2\n3 5 7\n8 1 6\n2\n3 5\n1 2\n```\n\n### 输出样例:\n\n```out\n2 4 9\n3 5 7\n1 6 8\n3 5\n1 2\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 64,
        "res": "[{'name':'数组排序','description':'使用排序算法对数组进行排序，可以使用冒泡排序、插入排序、选择排序等不同的排序算法。'}, {'name':'循环结构','description':'使用循环结构遍历数组中的元素，进行比较和交换操作。'}, {'name':'输入输出','description':'使用输入输出函数读取和输出数组中的元素，可以使用scanf和printf函数。'}, {'name':'函数','description':'可以将排序算法封装成函数，方便调用和复用。'}, {'name':'条件语句','description':'使用条件语句判断数组中的元素是否满足排序条件，例如判断是否需要交换位置。'}]"
    },
    {
        "sortId": 5289,
        "id": "1329393757509505024",
        "title": "嵌套循环-素数的和",
        "content": "本题目要求读入2个整数A和B，然后输出两数之间所有素数的和（不包括输入数据）。\n\n### 输入格式:\n\n输入两个正整数，空格分隔\n\n### 输出格式:\n\n输出两个数之间素数的和（不包括输入数据），如果输入负数没有输出\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n10 20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n60\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 168,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码，直到满足某个条件才停止循环。在本题中，可以使用循环结构来遍历两个整数之间的所有数，判断每个数是否为素数，并将素数累加求和。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断一个数是否为素数。'}, {'name':'函数'，'description':'函数是C语言中的一种代码组织方式，用于封装一段可重复使用的代码。在本题中，可以将判断一个数是否为素数的代码封装成一个函数，以便在循环中调用。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储两个输入的整数以及素数的和。'}, {'name':'输入输出'，'description':'输入输出是C语言中用于与用户交互的一种方式。在本题中，可以使用输入输出函数来读取用户输入的两个整数，并将计算得到的素数的和输出。'}]"
    },
    {
        "sortId": 5290,
        "id": "1329393280210292736",
        "title": "逆时针旋转字符方阵",
        "content": "给你一个n阶字符方阵，请你给出经过k次逆时针方向旋转（每次旋转90度）后的结果。  \n\n### 输入格式:\n\n输入数据的第一行为一个正整数T, 表示测试数据的组数。然后是T组测试数据。每组测试数据的第一行输入两个整数n，k(1<n<20,1<=k<200),接下来输入n行数据，每行包括n个小写英文字母。\n\n### 输出格式:\n\n对于每组测试，输出字符方阵经过k次逆时针方向旋转后的结果。 \n\n### 输入样例:\n\n```in\n2\n2 1\nab\nba\n2 2\nab\nba\n```\n\n### 输出样例:\n\n```out\nba\nab\nab\nba\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 30,
        "res": "[{'name': '字符方阵旋转', 'description': '本知识点主要涉及字符方阵的旋转操作，通过逆时针方向旋转90度来改变字符方阵的排列顺序。'}]"
    },
    {
        "sortId": 5291,
        "id": "1329389396700033024",
        "title": "最大最小字符",
        "content": "对于给定字符串，分别输出字符串中的最大最小字符（大小依据ASCII码表）。\n\n### 输入格式:\n\n测试数据有多组，首先输入组数T，然后T组测试。\\\n每组测试包括一个只由小写英文字母构成的且长度不超过100的字符串。\n\n### 输出格式:\n\n对于每组测试，分别输出最大字符和最小字符，两个字符之间用一个空格间隔。\n\n### 输入样例:\n\n```in\n2\nhelloworld\naboutwestern\n```\n\n### 输出样例:\n\n```out\nw d\nw a\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 17,
        "res": "[{'name': '字符串处理', 'description': '字符串处理是C语言中非常重要的知识点之一。在这个习题中，需要对给定的字符串进行处理，找出其中的最大字符和最小字符。学生需要掌握字符串的遍历、字符比较和ASCII码的概念，以及如何找出最大和最小字符。'}, {'name': '循环结构', 'description': '循环结构是C语言中常用的控制结构之一。在这个习题中，需要使用循环结构来遍历字符串中的每个字符，以便找出最大和最小字符。学生需要掌握循环结构的基本语法和用法，以及如何在循环中进行字符串的遍历。'}, {'name': '条件语句', 'description': '条件语句是C语言中常用的控制结构之一。在这个习题中，可以使用条件语句来判断当前字符是否为最大或最小字符，并进行相应的更新。学生需要掌握条件语句的基本语法和用法，以及如何在条件语句中进行字符的比较。'}]"
    },
    {
        "sortId": 5292,
        "id": "1329387153284263936",
        "title": "字符串循环移位",
        "content": "对于给定的字符串，进行循环移位（可以循环左移或循环右移）或不移位。\n\n例如：给定字符串\"abcde\"，有\n* 循环左移一位得到\"bcdea\"\n* 循环左移两位得到\"cdeab\"\n* 循环左移三位得到\"deabc\"\n* 循环左移四位得到\"eabcd\"\n* 循环左移五位得到\"abcde\"\n* 循环右移一位得到\"eabcd\"\n* 循环右移两位得到\"deabc\"\n* 循环右移三位得到\"cdeab\"\n* 循环右移四位得到\"bcdea\"\n* 循环右移五位得到\"abcde\"\n\n### 输入格式:\n\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。对于每组测试数据，输入一个不含空格的且长度不超过100的字符串s和一个整数n；其中s代表需要处理的字符串，n的绝对值小于串s的长度，若n大于0，表示要右移n位，若n小于0，则表示要左移-n位，若n等于0，则不需要移位。\n\n### 输出格式:\n\n对于每组测试数据，输出循环移位后的字符串。\n\n### 输入样例:\n\n```in\n3\nabcde 2\nabcde -1\n123 0\n\n```\n\n### 输出样例:\n\n```out\ndeabc\nbcdea\n123\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 30,
        "res": "[{'name':'字符串循环移位','description':'对给定的字符串进行循环移位操作，可以循环左移或循环右移。'}]"
    },
    {
        "sortId": 5293,
        "id": "1329383858985627648",
        "title": "光棍串",
        "content": "据说2011年11月11日是百年光棍节。这个日期写成字符串是“20111111”，有6个1连续出现，小明把这样的字符串（有6个1连续出现，但可以在1之间有空格间隔）叫做光棍串，即“2011 11 11”也是光棍串。\n\n### 输入格式:\n\n输入数据的第一行为一个正整数T，表示测试数据的组数。然后是T组测试数据，每组测试输入1个字符串S（其中只包含空格与数字字符，长度不超过50个字符）。\n\n### 输出格式:\n\n对于每组测试，若S是光棍串，则输出“Yes”，否则输出“No”。\n\n### 输入样例:\n\n```in\n2\n2011111\n2011 11  11\n```\n\n### 输出样例:\n\n```out\nNo\nYes\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 33,
        "res": "[{'name':'字符串处理'，'description':'字符串处理是C语言程序设计中的基础知识点，通过对字符串的操作，可以实现对字符串的拼接、截取、替换等功能。在本题中，需要对输入的字符串进行处理，判断是否符合光棍串的要求。'}，{'name':'条件判断'，'description':'条件判断是C语言程序设计中的基础知识点，通过使用if语句可以根据条件的真假来执行不同的代码块。在本题中，需要使用条件判断来判断输入的字符串是否符合光棍串的要求。'}]"
    },
    {
        "sortId": 5294,
        "id": "1329291736764764160",
        "title": "最短购物距离",
        "content": "大明是一个购物狂，他喜欢在一条很长的直线街道上购物，每次他都会开着车去。\\\n因为那条街很长，大明要先把车停在那条街上的某个商店门口，然后去所有的商店买东西，但是为了避免携带东西进入商店，因此，他总是在每个商店购物后，先回到停车点把刚刚购买到的商品放到车上后，然后再去新的一家商店购物。\n\n假设有3家店，坐标分别为7，30，41。\\\n若大明停车在第1家店，走的总路程等于((7-7)+(30-7)+(41-7))x2=114;若大明停车在第2家店，走的总路程等于((30-7)+(30-30)+(41-30))x2=68;若大明停车在第3家店，走的总路程等于((41-7)+(41-30)+(41-41))x2=90;\n\n大明希望能找到最佳一个停车点（注意，必须是某个商店门口），使得他走的路最短，请你帮帮他。    \n\n### 输入格式:\n\n测试数据有多组，首先输入组数T,然后T组测试。\\\n每组测试首先是一个n(1 <= n <= 100)，表示商店的个数。接下来有n个值小于1000的非负整数，表示每个商店的位置。 \n\n### 输出格式:\n\n对于每组测试，输出大明需要走的最短距离。\n\n### 输入样例:\n\n```in\n2  \n2 20 15\n3 7 30 41\n```\n\n### 输出样例:\n\n```out\n10\n68\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 57,
        "res": "[{'name': '变量', 'description': '变量是计算机内存中的一块存储空间，用于存储数据。在C语言中，变量需要先声明后使用，声明变量时需要指定变量的类型和名称。'}, {'name': '循环', 'description': '循环是一种重复执行某段代码的结构。在C语言中，常用的循环结构有for循环、while循环和do-while循环。循环结构可以根据条件判断来决定是否继续执行循环体。'}, {'name': '条件语句', 'description': '条件语句是根据条件判断来决定是否执行某段代码的结构。在C语言中，常用的条件语句有if语句和switch语句。if语句根据条件判断来决定是否执行某段代码，switch语句根据表达式的值来选择执行哪个分支。'}, {'name': '数组', 'description': '数组是一种存储多个相同类型数据的结构。在C语言中，数组需要先声明后使用，声明数组时需要指定数组的类型、名称和长度。数组的元素可以通过下标来访问，下标从0开始。'}, {'name': '函数', 'description': '函数是一段完成特定任务的代码块，可以通过函数名来调用执行。在C语言中，函数需要先声明后使用，声明函数时需要指定函数的返回类型、名称和参数列表。函数可以有返回值，也可以没有返回值。'}, {'name': '运算符', 'description': '运算符是用于进行各种运算操作的符号。在C语言中，常用的运算符有算术运算符、关系运算符、逻辑运算符、赋值运算符等。运算符可以用于操作变量和常量，进行各种数学和逻辑运算。'}, {'name': '输入输出', 'description': '输入输出是程序与用户或外部设备之间进行数据交换的过程。在C语言中，可以使用标准库函数来实现输入输出操作，如scanf函数用于从键盘读取输入，printf函数用于向屏幕输出结果。'}, {'name': '算法', 'description': '算法是解决问题的一系列步骤和规则。在C语言中，可以使用不同的算法来实现同一个功能，选择合适的算法可以提高程序的效率和性能。'}, {'name': '指针', 'description': '指针是存储内存地址的变量，可以用来访问和操作内存中的数据。在C语言中，可以使用指针来实现对变量和数组的间接访问，通过指针可以提高程序的灵活性和效率。'}, {'name': '字符串', 'description': '字符串是由字符组成的序列，可以用来表示文本和字符数据。在C语言中，字符串是以null字符结尾的字符数组，可以使用字符串函数来进行字符串的操作和处理。'}, {'name': '排序算法', 'description': '排序算法是将一组数据按照特定规则进行排序的算法。在C语言中，常用的排序算法有冒泡排序、插入排序、选择排序、快速排序等。排序算法可以根据数据的特点选择合适的算法来提高排序的效率。'}, {'name': '查找算法', 'description': '查找算法是在一组数据中查找指定元素的算法。在C语言中，常用的查找算法有线性查找、二分查找、哈希查找等。查找算法可以根据数据的特点选择合适的算法来提高查找的效率。'}, {'name': '数据结构', 'description': '数据结构是组织和存储数据的方式和方法。在C语言中，常用的数据结构有数组、链表、栈、队列、树、图等。不同的数据结构适用于不同的问题和场景，选择合适的数据结构可以提高程序的效率和性能。'}, {'name': '文件操作', 'description': '文件操作是对计算机文件进行读写和管理的操作。在C语言中，可以使用文件指针和文件操作函数来实现对文件的打开、关闭、读取和写入等操作。文件操作可以用于读取和保存数据，进行文件的输入输出。'}, {'name': '递归', 'description': '递归是一种在函数内部调用自身的技术。在C语言中，可以使用递归来解决一些需要重复执行相同操作的问题，递归函数需要有递归终止条件，否则会导致无限递归。递归可以简化问题的解决过程，但也需要注意递归深度和性能问题。'}, {'name': '指针数组', 'description': '指针数组是一个数组，其中的每个元素都是指针。在C语言中，可以使用指针数组来存储一组指针，每个指针可以指向不同的数据。指针数组可以用于存储和操作多个数据，提高程序的灵活性和效率。'}, {'name': '结构体', 'description': '结构体是一种自定义的数据类型，可以将多个不同类型的数据组合在一起。在C语言中，可以使用结构体来定义和操作复杂的数据结构，结构体可以包含不同类型的成员变量，可以通过成员运算符来访问和操作结构体的成员。'}, {'name': '链表', 'description': '链表是一种动态数据结构，可以根据需要动态分配和释放内存。在C语言中，链表由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可以用于存储和操作大量数据，可以根据需要插入、删除和修改节点，提高程序的灵活性和效率。'}, {'name': '指针操作', 'description': '指针操作是对指针进行各种操作和运算的过程。在C语言中，可以使用指针操作来访问和修改指针指向的数据，可以进行指针的加减运算、比较运算和赋值运算等。指针操作可以用于实现对内存的直接访问和操作，提高程序的灵活性和效率。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要动态分配和释放内存的过程。在C语言中，可以使用动态内存分配函数malloc和free来实现对内存的动态分配和释放。动态内存分配可以用于存储和操作大量数据，提高程序的灵活性和效率。'}, {'name': '指针函数', 'description': '指针函数是返回指针的函数，可以通过函数名来调用执行。在C语言中，可以使用指针函数来返回指向不同类型数据的指针，指针函数可以根据参数和返回值的类型来实现不同的功能。指针函数可以用于实现对数据的间接访问和操作，提高程序的灵活性和效率。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算。在C语言中，可以使用位运算符来进行位运算，如按位与、按位或、按位异或等。位运算可以用于对数据的位进行操作和处理，提高程序的效率和性能。'}, {'name': '宏定义', 'description': '宏定义是一种预处理指令，用于定义常量、函数和代码片段的别名。在C语言中，可以使用宏定义来简化代码、提高代码的可读性和维护性。宏定义可以用于定义常量、函数、条件编译和代码片段等，可以根据需要进行宏的展开和替换。'}, {'name': '文件指针', 'description': '文件指针是用于指向文件的指针，可以用来进行文件的读写和管理。在C语言中，可以使用文件指针来打开、关闭、读取和写入文件，文件指针可以指向不同的文件，可以根据需要进行文件的操作和处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译和进行代码片段的替换等。预处理指令可以用于提高代码的可读性和维护性，可以根据需要进行预处理的操作和处理。'}, {'name': '类型转换', 'description': '类型转换是将一种数据类型转换为另一种数据类型的过程。在C语言中，可以使用类型转换运算符来进行类型转换，如将整数转换为浮点数、将字符转换为整数等。类型转换可以用于实现不同类型数据之间的转换和操作，提高程序的灵活性和效率。'}, {'name': '指针操作', 'description': '指针操作是对指针进行各种操作和运算的过程。在C语言中，可以使用指针操作来访问和修改指针指向的数据，可以进行指针的加减运算、比较运算和赋值运算等。指针操作可以用于实现对内存的直接访问和操作，提高程序的灵活性和效率。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要动态分配和释放内存的过程。在C语言中，可以使用动态内存分配函数malloc和free来实现对内存的动态分配和释放。动态内存分配可以用于存储和操作大量数据，提高程序的灵活性和效率。'}, {'name': '指针函数', 'description': '指针函数是返回指针的函数，可以通过函数名来调用执行。在C语言中，可以使用指针函数来返回指向不同类型数据的指针，指针函数可以根据参数和返回值的类型来实现不同的功能。指针函数可以用于实现对数据的间接访问和操作，提高程序的灵活性和效率。'}, {'name': '位运算', 'description': '位运算是对二进制位进行操作的运算。在C语言中，可以使用位运算符来进行位运算，如按位与、按位或、按位异或等。位运算可以用于对数据的位进行操作和处理，提高程序的效率和性能。'}, {'name': '宏定义', 'description': '宏定义是一种预处理指令，用于定义常量、函数和代码片段的别名。在C语言中，可以使用宏定义来简化代码、提高代码的可读性和维护性。宏定义可以用于定义常量、函数、条件编译和代码片段等，可以根据需要进行宏的展开和替换。'}, {'name': '文件指针', 'description': '文件指针是用于指向文件的指针，可以用来进行文件的读写和管理。在C语言中，可以使用文件指针来打开、关闭、读取和写入文件，文件指针可以指向不同的文件，可以根据需要进行文件的操作和处理。'}, {'name': '预处理指令', 'description': '预处理指令是在编译之前对源代码进行处理的指令。在C语言中，可以使用预处理指令来包含头文件、定义宏、进行条件编译和进行代码片段的替换等。预处理指令可以用于提高代码的可读性和维护性，可以根据需要进行预处理的操作和处理。'}, {'name': '类型转换', 'description': '类型转换是将一种数据类型转换为另一种数据类型的过程。在C语言中，可以使用类型转换运算符来进行类型转换，如将整数转换为浮点数、将字符转换为整数等。类型转换可以用于实现不同类型数据之间的转换和操作，提高程序的灵活性和效率。'}, {'name': '指针操作', 'description': '指针操作是对指针进行各种操作和运算的过程。在C语言中，可以使用指针操作来访问和修改指针指向的数据，可以进行指针的加减运算、比较运算和赋值运算等。指针操作可以用于实现对内存的直接访问和操作，提高程序的灵活性和效率。'}, {'name': '动态内存分配', 'description': '动态内存分配是在程序运行时根据需要动态分配和释放内存的过程。在C语言中，可以使用动态内存分配函数malloc"
    },
    {
        "sortId": 5295,
        "id": "1329283863615762432",
        "title": "乒乓球赛轮次",
        "content": "校工会正计划举行一场全校教职员工的乒乓球赛。在每一轮比赛中，参赛者都是两两比赛，输者淘汰，赢者将进入下一轮。比赛一直进行到只剩下一个人为止，这个人就是冠军。在每一轮比赛中，如果比赛人数不是偶数，那么将随机选择一个参赛者自动晋级到下一轮比赛中，而其他人则还是捉对厮杀。主办方想知道产生冠军总共需要安排多少轮比赛？\n\n### 输入格式:\n\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试输入1个正整数$n(1<=n<=10^9)$，代表参赛的总人数。\n\n### 输出格式:\n\n对于每个测试，在一行上输出比赛所需要的总轮数。\n\n### 输入样例:\n\n```in\n4\n8\n777\n15\n100\n```\n\n### 输出样例:\n\n```out\n3\n10\n4\n7\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 104,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码。在这个题目中，需要使用循环结构来模拟比赛的轮数。'}, {'name': '条件判断', 'description': '条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在这个题目中，需要使用条件判断来判断比赛人数是否为偶数，以确定是否需要晋级参赛者。'}, {'name': '随机数', 'description': '随机数是C语言中的一种数据类型，用于生成随机的数值。在这个题目中，需要使用随机数来选择晋级的参赛者。'}]"
    },
    {
        "sortId": 5296,
        "id": "1329282148581625856",
        "title": "计数",
        "content": "计算在区间\\[1, n\\]范围内的所有整数中，数字x（0≤x≤9）共出现了多少次？\\\n例如，在区间\\[1, 11\\]，即在 1,2,3,4,5,6,7,8,9,10,11中，数字1出现了4次。\n\n### 输入格式:\n\n首先输入一个正整数T，表示测试数据的组数，然后是T组测试数据。每组测试输入2个整数n，x（1≤n≤1000000，0≤x≤9）。\n\n### 输出格式:\n\n对于每组测试，输出一行，包含一个整数，表示x出现的次数。\n\n### 输入样例:\n\n```in\n3\n11 1\n122 2\n22 2\n```\n\n### 输出样例:\n\n```out\n4\n26\n6\n```\n\n### 提示：\n\n* 对于22，包含2的数据有2、12、20、21、22，共有6个2。\n* 对于122，包含2的数据有2、12、20、21、22、23、24、25、26、27、28、29、32、42、52、62、72、82、92、102、112、120、121、122，共有26个2。",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 52,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历区间\\[1, n\\]中的所有整数。'}, {'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断一个整数中是否包含数字x。'}, {'name':'变量'，'description':'变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储数字x出现的次数。'}]"
    },
    {
        "sortId": 5297,
        "id": "1329281192464871424",
        "title": "不及格人数",
        "content": "n个同学参加了期末考试，以作出的题目数量代表成绩，成绩为0或者1表示不及格，求出不及格的同学数量。\n\n### 输入格式:\n\n输入数据首先包含一个整数T，表示测试实例的个数，然后是T组测试数据。每组测试数据占一行，首先是学生个数n(1 <=n <= 20)，之后是n个学生成绩scores ( 0<=scores <= 8)。\n\n### 输出格式:\n\n对于每组测试，输出一行，包含一个整数，表示不及格的学生数量。\n\n### 输入样例:\n\n```in\n1\n5 0 4 1 5 2\n```\n\n### 输出样例:\n\n```out\n2\n```",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 34,
        "res": "[{'name':'数组','description':'数组是一种存储多个相同类型数据的数据结构，可以通过下标访问和修改数组中的元素。在本题中，可以使用数组来存储学生成绩。'}, {'name':'循环','description':'循环是一种重复执行某段代码的结构，可以使用循环来遍历数组中的元素，统计不及格的学生数量。'}, {'name':'条件判断','description':'条件判断是根据某个条件的真假来决定是否执行某段代码，可以使用条件判断来判断学生成绩是否不及格。'}]"
    },
    {
        "sortId": 5298,
        "id": "1329278900063825920",
        "title": "开不开心",
        "content": "国庆节到了，诺诺和妈妈要坐汽车到外婆家去。爸爸去买了2张票，诺诺问：“是几号呀？”爸爸说“10号和9号。”诺诺想这下是和妈妈坐在一起的，就开心了。如果现在告诉诺诺买到的票是$a$，$b$两个号，请判断她开不开心。如果和妈妈坐在一起就开心，否则不开心。设汽车总共30个位置，座位号从1到30，而且是从1号位置开始每2个位置是在一起的，即1、2号位置在一起，3、4号位置在一起，……，29、30号位置在一起。\n\n### 输入格式:\n\n首先输入一个正整数$T$，表示测试数据的组数，然后是$T$组测试数据。对于每组测试，输入包括2个整数$a,b(1<=a,b<=30)$，表示买到的2张票的座位号。\n\n### 输出格式:\n\n对于每组测试，输出一行，包含一个单词`Happy`或`Unhappy`，分别表示诺诺知道票号后是开心还是不开心。\n\n### 输入样例:\n\n```in\n4\n9 10\n10 9\n10 11\n13 15\n```\n\n### 输出样例:\n\n```out\nHappy\nHappy\nUnhappy\nUnhappy\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 77,
        "res": "[{'name':'条件判断语句'，'description':'根据条件判断执行不同的代码块'}, {'name':'变量'，'description':'存储数据的容器'}, {'name':'输入输出'，'description':'从键盘获取输入，向屏幕输出结果'}, {'name':'循环语句'，'description':'重复执行一段代码块'}, {'name':'算术运算'，'description':'进行数值计算'}, {'name':'逻辑运算'，'description':'进行逻辑判断'}, {'name':'字符串操作'，'description':'对字符串进行操作'}, {'name':'数组'，'description':'存储多个相同类型的数据'}, {'name':'函数'，'description':'封装一段可重复使用的代码'}, {'name':'注释'，'description':'对代码进行解释说明'}]"
    },
    {
        "sortId": 5299,
        "id": "1329276431866916864",
        "title": "字符串的修改",
        "content": "如果字符串内容要修改，则以字符数组的形式存放。一般有修改字符，插入、删除等操作。如果仅仅修改内容，不改变长度，那我们就遍历字符串，进行判断是不是要修改的元素，如果是，则处理。\n比如将字符串里的所有字母（包括大写字母和小写字母），改为字符8 。并将字符串输出。\n我相信同学们都会编写这个程序。虽然会，我们还是梳理下思路吧。\n```\n1.输入字符串；\n2.处理字符串，将字符串里的字母改写为字符8；\n3.输出字符串。\n```\n```\n#include<stdio.h>\nvoid modify(char *s);\nint main()\n{\n\tchar str[81],ch;\n\tscanf(\"%c\",&ch);\n\tint i;\n\tfor( i=0;ch!='\\n';i++)//输入每一个字符，放入数组里\n\t{\n\t\tstr[i]=ch;\n\t\tscanf(\"%c\",&ch);\t\t\n\t}\n\tstr[i]='\\0';//加上结束标记\n\tmodify(str);//调用字符串修改函数\n\tputs(str);\n\treturn 0；\n}\nvoid modify(char *s)\n{\n\tfor(char *p=s;*p!=0;p++)//遍历字符串，如果是字母，则进行修改\n\t{\n\t\tif(*p>='a'&&*p<='z'||*p>='A'&&*p<='Z')\n\t\t{\n\t\t\t*p='8';//注意字符8的表示，区分字符8和数值8\n\t\t}\n\t}  \n}\n```\n运行结果为：\n\n![1.png](~/44f92909-d0e2-4d20-ad96-bbe59fcbacfb.png)\n\n小可爱们，有没有注意到字符串的输入并没有使用gets或者scanf里的%s，而是一个一个字符的输入。变量i即为输入字符存入的下标，最后输入结束后，别忘记了加上字符串的结束标记。\n\n我们试着完成这道题吧。\n\n删除字符串里所有字母。\n### 输入格式:\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n### 输出格式:\n输出删掉字母后的字符串\n### 输入样例:\nHello,2021\n### 输出样例:\n,2021\n\n如果删掉字符串中多个字符，当然可以每删掉一个，后面的元素前移。小伙伴们，你可以在编译器自己试试。\n\n我们也可以用前面输入字符串的方法来做，思路为：\n```\n1.对k初值，表示不删除元素将要存放的下标\n2.对字符串中将每个元素进行判断：\n     如果是删除元素，不处理\n\t\t 如果不是，则放在下标为k处，然后K加1\n3.对新的字符串加上结束标记符\n```\n```c++\n#include<stdio.h>\nvoid del(char *s);\nint main()\n{\n\tchar str[81];\n\tgets(str);\n\tdel(str);\n\tputs(str);\n\treturn 0;\n}\nvoid del(char *s)\n{\n\tint i,k;\n\tfor(i=0,k=0;s[i]!=0;i++)\n\t{\n\t\tif(@@[](1))\n\t\t{\n\t\t\ts[k++]=@@[](1);\n\t\t}\n\t}  \n\ts[k]=@@[](1);\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 44,
        "res": "[{'name': '字符数组', 'description': '字符数组是一种用于存储字符串的数据类型，可以对字符串进行修改、插入、删除等操作。'}, {'name': '遍历字符串', 'description': '遍历字符串是指逐个访问字符串中的每个字符，可以通过循环来实现。'}, {'name': '字符判断', 'description': '字符判断是指对字符进行条件判断，可以使用逻辑运算符和比较运算符来判断字符的范围。'}, {'name': '字符修改', 'description': '字符修改是指对字符串中的字符进行修改，可以通过指针来访问和修改字符串中的字符。'}, {'name': '字符串输入', 'description': '字符串输入是指通过键盘或其他输入设备将字符串输入到程序中，可以使用gets或scanf函数来实现。'}, {'name': '字符串输出', 'description': '字符串输出是指将字符串输出到屏幕或其他输出设备，可以使用puts函数来实现。'}, {'name': '字符串删除', 'description': '字符串删除是指将字符串中的某些字符删除，可以通过遍历字符串并判断字符是否需要删除来实现。'}]"
    },
    {
        "sortId": 5300,
        "id": "1329266581611073536",
        "title": "二叉树最深间隔最远结点",
        "content": "给定一棵非空二叉树，数据域值为不等于0的整数。请编写程序找出其最深层间隔最远的两个结点，输出这两个结点差的绝对值。如图1所示的各二叉树最深层间隔最远的结点为5和8。如果最深层只有一个结点，则输出0。\n\n![btree.jpg](~/27231f42-28d3-4b16-95a8-f0b19f3f48b3.jpg)\n\n\n### 输入格式:\n\n输入为一组用空格间隔的整数，个数不超过200个，表示带空指针信息的二叉树先根序列，其中空指针信息用0表示。\n\n### 输出格式:\n\n输出为一个整数，为二叉树最深层间隔最远的两个结点差的绝对值，如果最深层只有一个结点，则输出0。\n\n### 输入样例1:\n\n```in\n1 2 0 5 0 0 3 6 0 0 8 0 0\n\n```\n\n### 输出样例1:\n\n```out\n3\n\n```\n\n### 输入样例2:\n\n```in\n1 2 0 5 0 0 3 0 0\n\n```\n\n### 输出样例2:\n\n```out\n0\n\n```",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "1",
                        "name": "数据结构与算法",
                        "isLeaf": false,
                        "enName": "Data Structures and Algorithms"
                    },
                    {
                        "id": "12",
                        "name": "树",
                        "isLeaf": false,
                        "enName": "Trees"
                    },
                    {
                        "id": "14",
                        "name": "二叉树及其遍历",
                        "isLeaf": true,
                        "enName": "Binary Tree and Traversals"
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 116,
        "res": "[{'name': '二叉树', 'description': '二叉树是一种特殊的树结构，每个节点最多有两个子节点，分别称为左子节点和右子节点。'}, {'name': '先根序列', 'description': '先根序列是一种遍历二叉树的方式，先访问根节点，然后按照先根序列的顺序访问左子树和右子树。'}, {'name': '最深层间隔最远的两个结点', 'description': '在给定的二叉树中，找到最深层的两个结点，计算它们的差的绝对值。'}, {'name': '差的绝对值', 'description': '差的绝对值是指两个数相减后取绝对值的结果。'}]"
    },
    {
        "sortId": 5301,
        "id": "1329058954239143936",
        "title": "国王的奖赏",
        "content": "阿基米德与国王下国际象棋（64格），国王输了，国王问阿基米德要什么奖赏？阿基米德对国王说：“只要在棋盘上第一个放一粒米，第二格放二粒，第三格放四粒，第四格放八粒……按这个方法放满整个棋盘就行。”国王以为要不了多少粮食，就随口答应了，结果国王输了。假设国王有1至10吨麦子，1吨=1000千克=1000000克，1粒麦子有0.1克，请问这些麦子能放到多少格？\n\n### 输入格式:\n\n输入国王拥有的麦子吨数，设麦子吨数x大于等于1吨，小于等于10吨\n\n### 输出格式:\n\n输出麦子占用的格数\n\n### 输入样例1:\n```in\n1\n\n```\n### 输出样例:1\n\n\n```out\n24\n```\n\n### 输入样例2:\n```in\n10\n\n```\n### 输出样例2:\n\n\n```out\n27\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 92,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码块。在本题中，需要使用循环结构来计算麦子占用的格数。'}, {'name': '变量和数据类型', 'description': '变量是C语言中用于存储数据的一种容器，数据类型指定了变量可以存储的数据的类型。在本题中，需要使用变量来存储麦子吨数和格数。'}, {'name': '算术运算', 'description': '算术运算是C语言中的一种基本运算，包括加法、减法、乘法和除法等。在本题中，需要使用算术运算来计算麦子占用的格数。'}]"
    },
    {
        "sortId": 5302,
        "id": "1329004110887383040",
        "title": "C语言中，操作数必须是整型数的运算符是( )",
        "content": "C语言中，操作数必须是整型数的运算符是( )\n@[](2)\n\nA. *\nB. /\nC. %\nD. &&",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 248,
        "res": "[{'name': '整型数运算符', 'description': '整型数运算符是指操作数必须是整型数的运算符。在C语言中，整型数运算符包括：*（乘法运算符）、/（除法运算符）和%（取余运算符）。'}]"
    },
    {
        "sortId": 5303,
        "id": "1329003406869262336",
        "title": "设有int ii,ij,ik;则表达式ii=1,ij=2,ik=3,ii>ij && ik的值为（ ）",
        "content": "设有int ii,ij,ik;则表达式ii=1,ij=2,ik=3,ii>ij && ik的值为（ ）\n@[](2)\n\nA. 1\nB. 0\nC. 3\nD. 2",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 151,
        "res": "[{'name':'逻辑运算符'，'description':'逻辑运算符用于对两个或多个表达式进行逻辑运算，常用的逻辑运算符有&&（与）、||（或）、！（非）。在C语言中，逻辑运算符的优先级比较低，需要注意运算顺序。本题中的表达式ii>ij && ik使用了逻辑与运算符&&，表示当ii大于ij且ik不为0时，表达式的值为真，即为1。'}]"
    },
    {
        "sortId": 5304,
        "id": "1328999689193385984",
        "title": "C语言的长整型数值在计算机中所占的字节个数是（ ）",
        "content": "C语言的长整型数值在计算机中所占的字节个数是（ ）\n\n@[](2)\n\nA. 1\nB. 2\nC. 3\nD. 4",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 104,
        "res": "[{'name': 'C语言的长整型数值在计算机中所占的字节个数', 'description': '长整型数值在计算机中所占的字节个数是多少。'}]"
    },
    {
        "sortId": 5305,
        "id": "1328970536574373888",
        "title": "九九乘法表",
        "content": "从键盘输入n（n为1~9），输出九九乘法表的前n行，每个式子按“a * b = c”形式输出，其中a和b各占1位列宽，c占4位列宽并左对齐。\n\n### 输入格式:\n\n一个1~9之间的整数n，如：9\n\n### 输出格式效果如下图:\n\n![1.png](~/3569d01e-937f-4308-b31a-c9681a203e4c.png)\n\n### 输入样例:\n\n```in\n5\n```\n\n### 输出样例:\n\n```out\n1*1=1   1*2=2   1*3=3   1*4=4   1*5=5   1*6=6   1*7=7   1*8=8   1*9=9   \n2*1=2   2*2=4   2*3=6   2*4=8   2*5=10  2*6=12  2*7=14  2*8=16  2*9=18  \n3*1=3   3*2=6   3*3=9   3*4=12  3*5=15  3*6=18  3*7=21  3*8=24  3*9=27  \n4*1=4   4*2=8   4*3=12  4*4=16  4*5=20  4*6=24  4*7=28  4*8=32  4*9=36  \n5*1=5   5*2=10  5*3=15  5*4=20  5*5=25  5*6=30  5*7=35  5*8=40  5*9=45  \n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 118,
        "res": "[{'name':'循环语句', 'description':'循环语句是C语言中的一种控制结构，用于重复执行一段代码块。在本题中，可以使用循环语句来实现九九乘法表的输出。'}, {'name':'输入输出函数', 'description':'输入输出函数是C语言中用于与用户进行交互的函数，包括从键盘输入和向屏幕输出。在本题中，需要使用输入函数从键盘输入n的值，并使用输出函数将九九乘法表输出到屏幕上。'}, {'name':'格式化输出', 'description':'格式化输出是C语言中一种将数据按照指定格式输出的方式。在本题中，需要使用格式化输出来控制九九乘法表的输出格式，包括数字的对齐和占位宽度。'}]"
    },
    {
        "sortId": 5306,
        "id": "1328962558114779136",
        "title": "各位数字之和",
        "content": "从键盘输入一个整数（不超过10的9次方），输出其各位数字之和。\n\n### 输入格式:\n\n一个整数\n\n### 输出格式:\n\n该整数各位数字之和\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n123456789\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n45\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 58,
        "res": "[{'name': '整数输入与输出', 'description': '教学内容包括从键盘输入一个整数，以及将整数输出到屏幕上。'}, {'name': '循环结构', 'description': '教学内容包括使用循环结构来遍历整数的各位数字，并计算它们的和。'}, {'name': '变量与赋值', 'description': '教学内容包括定义变量来存储输入的整数和计算的结果，并使用赋值语句将值赋给变量。'}, {'name': '算术运算', 'description': '教学内容包括使用算术运算符来进行加法运算，计算整数的各位数字之和。'}]"
    },
    {
        "sortId": 5307,
        "id": "1328957631443365888",
        "title": "四舍五入函数",
        "content": "### 函数接口定义：\n```c++\ndouble Round( double x, int n );\n```\n\n### 裁判测试程序样例：\n```c++\n# include <stdio.h>\ndouble Round(double x, int d); \nint main(void)\n{   \n    int n;\n\tdouble x;\n\tscanf(\"%lf%d\",&x,&n);\n\tprintf(\"%g\\n\",Round(x,n));\n\n    return 0;\n}\n/* 请在这里填写答案 */\n```\n\n### 输入样例：\n\n在这里给出一组输入。例如：\n\n```in\n123.456 2\n```\n\n### 输出样例：\n\n在这里给出相应的输出。例如：\n\n```out\n123.46\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 13,
        "res": "[{'name':'函数定义'，'description':'函数接口定义和函数实现的方法'}, {'name':'输入输出'，'description':'使用scanf和printf函数进行输入输出'}, {'name':'变量定义'，'description':'定义double类型的变量x和int类型的变量n'}, {'name':'调用函数'，'description':'调用Round函数进行计算'}, {'name':'格式化输出'，'description':'使用%g格式进行输出'}, {'name':'注释'，'description':'在指定位置填写答案的注释'}]"
    },
    {
        "sortId": 5308,
        "id": "1328955974697480192",
        "title": "圆周率PI的近似值",
        "content": "用公式π/4≈1-1/3+1/5-1/7+1/9…… 求出圆周率π的近似值，要求直到最后一项的绝对值小于0.000001为止。\n\n### 输入格式:\n\n不需要输入\n\n### 输出格式:\n\nPI=近似值\n\n### 输入样例:\n\n```in\n\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nPI=3.141591\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 46,
        "res": "[{'name': '循环结构', 'description': '循环结构是C语言中的一种控制结构，用于重复执行一段代码块。在本题中，需要使用循环结构来计算圆周率的近似值。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，需要使用变量来存储圆周率的近似值。'}, {'name': '运算符', 'description': '运算符是C语言中用于进行数学运算的符号。在本题中，需要使用运算符来进行圆周率的计算。'}, {'name': '条件语句', 'description': '条件语句是C语言中的一种控制结构，用于根据条件来执行不同的代码块。在本题中，可以使用条件语句来判断最后一项的绝对值是否小于0.000001。'}]"
    },
    {
        "sortId": 5309,
        "id": "1328914971043164160",
        "title": "C语言中，整型数据在内存中的存储形式是（ ）",
        "content": "C语言中，整型数据在内存中的存储形式是（ ）\n\n@[](2)\n\nA. ASCII码\nB. 原码\nC. 反码\nD. 补码",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 203,
        "res": "[{'name': '整型数据的存储形式', 'description': '整型数据在内存中的存储形式包括ASCII码、原码、反码和补码。'}]"
    },
    {
        "sortId": 5310,
        "id": "1328913928502759424",
        "title": "下列合法的用户标识符为（ ）",
        "content": "下列合法的用户标识符为（ ）\n@[](2)\n\nA. _4sum\nB. float\nC. -fx_1\nD. #dtotal",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 234,
        "res": "[{'name': '用户标识符', 'description': '用户标识符是用来标识变量、函数、数组等在程序中的名称。合法的用户标识符必须满足以下规则：1. 以字母或下划线开头；2. 只能包含字母、数字和下划线；3. 区分大小写。在给变量、函数等命名时，需要遵守这些规则，否则会导致编译错误。'}]"
    },
    {
        "sortId": 5311,
        "id": "1328889331921317888",
        "title": "C语言是一种结构化语言，是因为（ ）",
        "content": "C语言是一种结构化语言，是因为（ ）\n@[](2)\n\nA. C语言具有结构化的控制语句，如if语句、while语句、for语句等\nB. C语言用函数作为程序的模块单位，以函数为模块组织程序\nC. C语言用函数作为程序的模块单位，以函数为模块组织程序，还具有结构化的控制语句，如if语句、while语句、for语句等\nD. 用C语言编写的程序层次清晰明了，易于调试和维护",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 112,
        "res": "[{'name': '结构化语言', 'description': 'C语言是一种结构化语言，具有结构化的控制语句，如if语句、while语句、for语句等'}, {'name': '函数模块化', 'description': 'C语言用函数作为程序的模块单位，以函数为模块组织程序'}, {'name': '层次清晰', 'description': '用C语言编写的程序层次清晰明了，易于调试和维护'}]"
    },
    {
        "sortId": 5312,
        "id": "1328886618898690048",
        "title": "开发一个C程序的一般过程是（ ）",
        "content": "开发一个C程序的一般过程是（ ）\n@[](2)\n\nA. 编辑和执行\nB. 编辑、编译和执行\nC. 编辑、编译、连接和执行\nD. 编辑、编译和连接",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 212,
        "res": "[{'name':'C程序的一般过程','description':'C程序的一般过程包括编辑、编译和执行。'}]"
    },
    {
        "sortId": 5313,
        "id": "1328885203157504000",
        "title": "在一个C程序中，（ ）",
        "content": "在一个C程序中，（ ）\n@[](2)\n\nA. main函数必须出现在所有函数之前\nB. main函数必须出现在所有函数之后\nC. main函数可以出现在任何地方\nD. main函数必须出现在固定位置",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 145,
        "res": "[{'name': 'main函数的位置', 'description': 'main函数可以出现在任何地方'}]"
    },
    {
        "sortId": 5314,
        "id": "1328881846837702656",
        "title": "以下叙述中正确的是（ ）",
        "content": "以下叙述中正确的是（ ）\n@[](2)\n\nA. C语言不是一种高级语言\nB. C语言不用编译就能被计算机执行\nC. C语言能够直接访问物理地址和进行位操作\nD. C语言具有其他语言的一切优点",
        "type": "MULTIPLE_CHOICE",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "89",
                        "name": "其他",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "315",
                        "name": "其他",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 111,
        "res": "[{'name': 'C语言是一种高级语言', 'description': 'C语言是一种高级语言，它具有高级语言的特点和功能，可以进行复杂的程序设计。'}, {'name': 'C语言需要编译', 'description': 'C语言需要通过编译器将源代码转换为机器语言才能被计算机执行。'}, {'name': 'C语言能够直接访问物理地址和进行位操作', 'description': 'C语言提供了直接访问物理地址和进行位操作的功能，这使得它在底层系统编程和嵌入式开发中非常有用。'}, {'name': 'C语言具有其他语言的一些优点', 'description': 'C语言具有其他语言的一些优点，如灵活性、效率和可移植性等。'}]"
    },
    {
        "sortId": 5315,
        "id": "1328634548312461312",
        "title": "用二分法解方程",
        "content": "设曲线方程$f(x)=0$在区间$[a,b]$上连续，如果$f(a)f(b)<0$，则方程在区间内至少存在一个根$r$，使得$f(r)=0$.&ensp;现在要求用二分法编写一个求解各类一元方程方程在给定区间解的通用函数，调用该函数来求下列三个方程在区间$[a,b]$上的解.\n\n(1) $$x^2-5=0$$\n\n(2) $$x^3-5=0$$\n\n(3) $$\\sin x = 0$$\n\n`要求：`编写的函数要能判断在给定区间上是否有解，如果有解按照二分法进行求解，如果无解函数返回一个实数值`-32768`作为无解的标志。\n### 函数接口定义：\n```c++\ndouble bisection(double (*f)(),double a,double b)\n```\n其中 参数`f`是一个指向函数的指针变量。参数 `a` 和`b`是解区间的两个端点，函数的返回值为方程在区间上的解。\n\n### 裁判测试程序样例：\n```C++\n#include <stdio.h>\n#include <math.h>\ndouble quadratic(double x)  /*一个一元二次函数f*/\n{\n    return x*x-5;\n}\ndouble cubic(double x)  /*一个一元三次函数f*/\n{\n    return x*x*x-5;\n}\n/* 你编写的二分法解方程的函数放在这里   */\nint main()\n{\n    double x;\n    double a,b;\n    scanf(\"%lf%lf\",&a,&b);        //输入解区间左右端点的值\n    x=bisection(quadratic,a,b); //解一元二次方程\n    printf(\"%.3f\\n\",x);\n    x=bisection(cubic,a,b);        //解一元三次方程\n    printf(\"%.3f\\n\",x);\n    x=bisection(sin,a,b);            //求解方程sinx=0\n    printf(\"%.3f\\n\",x);\n    return 0;\n}\n```\n\n### 输入样例1：\n以下输入的两个数是区间$[a,b]$的端点\n```in\n1.0 4.0\n```\n\n### 输出样例1：\n```out\n2.236\n1.710\n3.142\n```\n### 输入样例2：\n以下输入的两个数是区间$[a,b]$的端点\n```in\n4.0 6.0\n```\n\n### 输出样例2：\n```out\n-32768.000\n-32768.000\n-32768.000\n```",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "75",
                        "name": "函数定义与调用",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 75,
        "res": "[{'name': '二分法', 'description': '二分法是一种用于求解方程的数值计算方法，通过将解区间不断二分，判断解是否在左半区间还是右半区间，从而逐步逼近解的过程。在给定区间上使用二分法求解方程可以得到方程的一个近似解。'}, {'name': '函数指针', 'description': '函数指针是指向函数的指针变量，可以通过函数指针来调用函数。在本题中，需要使用函数指针作为参数传递给二分法求解函数，以便在不同的方程中调用不同的函数。'}, {'name': '连续函数', 'description': '连续函数是指在定义域上无间断的函数，即函数图像没有跳跃或断裂的情况。在本题中，要求曲线方程$f(x)=0$在区间$[a,b]$上连续，这是使用二分法求解方程的前提条件。'}, {'name': '判断解的存在性', 'description': '在使用二分法求解方程时，需要判断解是否存在。在本题中，通过判断$f(a)f(b)<0$来确定方程在区间$[a,b]$上是否存在解。'}, {'name': '解的返回值', 'description': '在使用二分法求解方程时，需要将解作为函数的返回值返回。在本题中，如果方程在区间内存在解，则返回解的值；如果方程在区间内无解，则返回一个特定的实数值$-32768$作为无解的标志。'}]"
    },
    {
        "sortId": 5316,
        "id": "1328598591966138368",
        "title": "指针入门",
        "content": "小可爱们，咱们来做一个简单的计算器：输入两个整数，输出它们的和。\n```\n#include <stdio.h>\nint main()\n{\n\tint a,b;\n\tscanf(\"%d%d\",@@[](2)); //输入a，b\n\tprintf(\"%d\\n\",@@[](2));//输出和\n\treturn 0;\n}\n\n```\n\n小可爱们，这次使用scanf函数输入时，有没有忘记在变量前面加&符号？\n\n为什么使用scanf函数变量前面要加&，printf函数变量前面不加&，这个&符号是什么作用呢？\n咱们先看下面图片中编译器的输出。\n\n![指针出题1.png](~/7ec52141-88ef-4ba3-881d-d023dfb06ec5.png)\n\n小伙伴们，你发现了么？变量其实同时有地址和值两个属性，它的数据值，存储在某个内存地址中，这个值被称为变量的右值。我们也可认为右值的意思是被读取的值。它的地址值，即存储数据值的那块内存的地址，被称为变量的左值。\n\n我们一般用一个变量，都是直接写一个名字，其实如果这个名字在赋值号右边，就是代表右值，也就是变量的值，如果在赋值号左边，就是代表左值，即代表变量的地址，写出来一样，意义是不一样的，编译器自动帮我们选择了正确的意义。\n\n回到我们第一个问题：为什么使用scanf函数变量前面要加&，printf函数变量前面不加&？\n\n因为scanf要变量里写入数值，所以它必须知道那个变量的地址，至于变量里存的是什么值，它是不关心的，反正写入之后就被覆盖成新的值了。\n对比printf，是要输出变量里的数值，它只管要那个值，至于地址在哪，它也无所谓。\n\n而变量名字写在函数参数里面时，和写在赋值号右边一样，也是代表值，可是像scanf这种函数，它确实需要地址，编译器只认为在赋值符左边的才是左值，那在scanf函数里，没法自动获得左值，这时就需要我们手动加一个取地址运算符&，明确告诉编译器去获取变量的地址给这scanf来用。\n\n再仔细看看上面的图片，我们会发现这里的&a是int $$*$$类型，a是int类型。&其实是取地址运算符，&a得到的就是变量a分配的内存地址。&a表达式的值是地址，所以咱们在编译器里看到&a是int $$*$$类型，即指针类型。\n\n类似的，我们可以使用下面语句定义一个指针变量：\n```\nint *p;\n```\n\n和普通变量不同，指针变量赋值必须指向一个已经分配的内存地址，例如：\n```\nint a = 2;\nint *p = &a;\n```\n\n我们定义了一个变量a，其值为2。我们又定义了一个指针变量p（这里的$$*$$是指针变量定义符号），将其初始化为变量a的地址。\n如果我们想使用指针变量p来修改变量a的值要怎么做呢？使用指针运算符，如下：\n```\n*p = 3;\n```\n\n这里的$$*$$是运算符。因为p是a的地址（p指向变量a），$$*$$p就是访问p指向的对象，$$*$$p赋值为3，就是a赋值为3。\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "83",
                        "name": "指针",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 110,
        "res": "[{'name': 'scanf函数', 'description': 'scanf函数用于从标准输入流中读取数据，并将读取的数据存储到指定的变量中。在使用scanf函数读取变量时，需要在变量前加上&符号，表示获取变量的地址。'}, {'name': 'printf函数', 'description': 'printf函数用于将数据输出到标准输出流中。在使用printf函数输出变量时，不需要在变量前加上&符号，直接输出变量的值即可。'}, {'name': '地址和值', 'description': '变量同时具有地址和值两个属性，地址表示变量所在内存的位置，值表示变量存储的数据。在赋值号左边的变量表示地址，赋值号右边的变量表示值。编译器会根据上下文自动选择正确的意义。'}, {'name': '取地址运算符&', 'description': '取地址运算符&用于获取变量的地址，返回的是指向该变量的指针。在使用scanf函数读取变量时，需要使用取地址运算符&获取变量的地址。'}, {'name': '指针变量', 'description': '指针变量是存储内存地址的变量。可以使用指针变量来修改其他变量的值。指针变量的定义需要使用指针变量定义符号*，赋值时需要指向一个已经分配的内存地址。使用指针运算符*可以访问指针指向的对象。'}]"
    },
    {
        "sortId": 5317,
        "id": "1328597259137970176",
        "title": "选夫婿^_^",
        "content": "倾国倾城的大家闺秀潘小姐要选夫婿啦！武林中各门各派，武林外各大户人家，闻讯纷纷前来，强势围观。前来参与竞选的男生藏龙卧虎，高手云集，才子遍布，帅哥纷纭，更不乏富二代，官二代，可谓声势空前。\n\n每个人参与竞选的帅哥除了进行一段激情洋溢的求婚演讲以外，还要报上自己姓名、身高和体重，以及个人简历。最后再进行文武选拔，最后夺魁者方能得到潘小姐的芳心。\n\n潘小姐不爱名利，只看人，第一关就是身高和体重要合格，即必须在其要求的范围内，否则直接排除在外，不允许参加下一轮的选拔。\n\n作为一个程序员，你没有钱也没有权，擅长的也就是编程了。潘小姐也发现了这一点，所以把首轮根据身高体重进行选拔的任务交给了你，如果完成的好，你可以直接进入下一轮选拔，你笑了。\n\n### 输入格式:\n\n 潘小姐给你了所有报名男生的信息。输入数据的第一行是一个正整数N(0 < N < 1000)。然后N行数据，每行包含三部分，用空格隔开。第一部分是报名者的姓名name(长度小于20的字符串)，然后是整数身高h（0 < h < 300），第三部分是整数体重w (0 < w < 200)。\n \n 最后一行是四个整数a,b,c,d.表示身高的合格范围是[a,b],体重的合格范围是[c,d]（0 < a < b < 200, 0 < c < d < 300）。\n\n### 输出格式:\n\n你需要把合格的男生信息按照身高从低到高输出，格式跟输入一样，也是每行三个信息，共N行，如果身高相同则按体重从轻到重输出，如果身高相同并且体重相同则按照输入顺序依次输出，若没有合格人选则输出NO，具体格式见样例。\n\n### 输入样例:\n\n\n```in\n8\n武大郎 70 40\n西门庆 180 70\n李逵 160 150\n燕青 175 69\n鲁智深 180 100\n武松 180 75\n小泉纯一狼 30 20\n孙二娘 169 60\n165 190 60 90\n\n```\n\n### 输出样例:\n\n\n```out\n孙二娘 169 60\n燕青 175 69\n西门庆 180 70\n武松 180 75\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "82",
                        "name": "指针与结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "84",
                        "name": "结构",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 155,
        "res": "[{'name':'基本数据类型'，'description':'C语言中的基本数据类型包括整型、浮点型、字符型等，学生需要了解各种数据类型的表示范围和使用方法。'}, {'name':'输入输出'，'description':'学生需要学会使用scanf和printf函数进行输入输出操作。'}, {'name':'条件语句'，'description':'学生需要学会使用if语句进行条件判断。'}, {'name':'循环语句'，'description':'学生需要学会使用for循环语句进行重复执行。'}, {'name':'数组'，'description':'学生需要学会使用数组存储和处理多个数据。'}, {'name':'字符串'，'description':'学生需要学会使用字符串进行字符处理。'}, {'name':'排序算法'，'description':'学生需要学会使用排序算法对数据进行排序。'}, {'name':'结构体'，'description':'学生需要学会使用结构体存储和处理复杂数据。'}, {'name':'文件操作'，'description':'学生需要学会使用文件操作函数对文件进行读写操作。'}]"
    },
    {
        "sortId": 5318,
        "id": "1328512645581107200",
        "title": "从大到小输出",
        "content": "这本题要求将输入的任意3个整数从大到小输出。(假设3个数互不相等)\n\n### 输入格式:\n\n输入在一行中给出3个整数，其间以空格分隔。\n\n### 输出格式:\n\n在一行中将3个整数从小到大输出，其间以“>”相连。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n4 2 8\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n8>4>2\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 15,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 10,
        "res": "[{'name':'排序算法'，'description':'排序算法是计算机科学中的一种算法，用于将一组元素按照特定的顺序进行排列。常见的排序算法有冒泡排序、插入排序、选择排序、快速排序等。本题要求对输入的三个整数进行排序，可以使用任意一种排序算法来实现。'}, {'name':'输入输出'，'description':'本题要求从输入中读取三个整数，并将排序后的结果输出。在C语言中，可以使用scanf函数来读取输入，使用printf函数来输出结果。'}, {'name':'数组'，'description':'本题要求对三个整数进行排序，可以使用数组来存储这三个整数。在C语言中，可以使用数组来存储一组相同类型的数据。可以使用数组下标来访问数组中的元素，可以使用循环来遍历数组。'}, {'name':'条件语句'，'description':'本题要求对三个整数进行排序，可以使用条件语句来判断大小关系，并进行交换。在C语言中，可以使用if语句来进行条件判断，可以使用临时变量来进行交换。'}]"
    },
    {
        "sortId": 5319,
        "id": "1328352195190091776",
        "title": "CPA最强连续素数(我真的是签到题O(∩_∩)O !)",
        "content": "本题给定一个数要求输出小于等于这个数并且相差为2的连续3个素数，比如3 5 7，若有多组要求每行输出三个，若没有则输出\"小伙汁 不讲武德 耗子尾汁\"。(素数，即为因子只有1 和 自己的数 4的因子有1 2 4 除了1和它自己还有其他因子所以它不是素数)。\n\n### 输入格式:\n\n一行中给出一个正整数n,(0<=n<2^31-1 保证在整形范围)。\n\n### 输出格式:\n\n与题目要求一致。\n\n### 输入样例1:\n\n\n```in\n7\n```\n\n### 输出样例:\n\n\n```out\n3 5 7\n```\n### 输入样例2:\n\n\n```in\n3\n```\n\n### 输出样例:\n\n\n```out\n小伙汁 不讲武德 耗子尾汁\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 27,
        "res": "[{'name':'素数判断'，'description':'判断一个数是否为素数，即只有1和自身两个因子的数。'}, {'name':'循环结构'，'description':'使用循环结构来遍历所有可能的数，判断是否为素数。'}, {'name':'条件判断'，'description':'根据题目要求，判断是否输出素数或者提示\"小伙汁 不讲武德 耗子尾汁\"。'}, {'name':'输出格式'，'description':'按照题目要求，输出符合条件的素数或者提示信息。'}]"
    },
    {
        "sortId": 5320,
        "id": "1328296833753706496",
        "title": "h0095. Soundex编码",
        "content": "Soundex编码根据拼写将听起来相似的单词组合在一起。例如，“can”和“khawn”、“con”和“gone”在Soundex编码下是等价的。\n\n   Soundex编码涉及将每个单词翻译成一系列数字，其中每个数字代表一个字母:\n\t \n1代表B、F、P或V\n\n2代表C, G, J, K, Q, S, X，或Z\n\n3代表D或T\n\n4代表L\n\n5代表M或N\n\n6 代表R\n\n字母A、E、I、O、U、H、W和Y不在Soundex编码中表示，具有相同编码数字的重复字母由该数字的单个数字表示。具有相同Soundex编码的单词被认为是等价的。\n\n\n### 输入格式:\n\n每行输入包含一个单词，全部是大写字母，长度不超过20个字母。\n\n### 输出格式:\n\n对于每一行输入，生成一行输出，给出Soundex代码。\n\n### 输入样例:\n\n```in\nKHAWN\nPFISTER\nBOBBY\n```\n\n### 输出样例:\n\n```out\n25\n1236\n11\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 17,
        "res": "[{'name':'Soundex编码', 'description':'Soundex编码根据拼写将听起来相似的单词组合在一起。每个单词翻译成一系列数字，其中每个数字代表一个字母。具有相同Soundex编码的单词被认为是等价的。'}]"
    },
    {
        "sortId": 5321,
        "id": "1328181409967927296",
        "title": "分段计算居民水费",
        "content": "为鼓励居民节约用水，自来水公司采取按用水量阶梯式计价的办法，居民应交水费y（元）与月用水量x（吨）相关：当x不超过15吨时，y=4x/3；超过后，y=2.5x−17.5。请编写程序实现水费的计算。\n\n### 输入格式:\n\n输入在一行中给出非负实数x。\n### 输出格式:\n\n在一行输出应交的水费，精确到小数点后2位。\n\n如果输入的x为负数，则输出Input Data error!。\n### 输入样例:\n\n```in\n12\n```\n\n### 输出样例:\n\n\n\n```out\n16.00\n```\n### 输入样例:\n\n\n\n```in\n16\n```\n\n### 输出样例:\n\n\n\n```out\n22.50\n```\n### 输入样例:\n\n\n\n```in\n-10\n```\n\n### 输出样例:\n\n\n\n```out\nInput Data error!\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 228,
        "res": "[{'name': '条件语句', 'description': '条件语句是根据条件的真假来执行不同的代码块。在这个题目中，根据月用水量的大小，选择不同的计算公式来计算水费。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加减乘除等操作。在这个题目中，需要使用算术运算来计算水费。'}, {'name': '输入输出', 'description': '输入输出是程序与用户之间进行数据交互的方式。在这个题目中，需要从输入中读取月用水量，并将计算得到的水费输出。'}]"
    },
    {
        "sortId": 5322,
        "id": "1327785000789766144",
        "title": "判断三角形的形状",
        "content": "输入3个正整数，首先判断这3个数据能否构成三角形（任意两边之和大于第三边），如果能构成三角形继续判断是等边三角形还是等腰三角形还是直角三角形。\n### 输入格式:\n\n输入3个正整数。\n\n### 输出格式:\n\n不能构成三角形输出\"NO\"，能构成三角形输出\"等边”或者“等腰”或者“直角”或者“普通三角形。\n\n### 输入样例1:\n\n```in\n3 4 5\n```\n\n### 输出样例1:\n\n```out\n直角\n```\n\n### 输入样例2:\n\n```in\n3 4 1\n```\n\n### 输出样例2:\n\n```out\nNO\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 28,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 148,
        "res": "[{'name':'判断三角形类型'，'description':'根据输入的三个正整数，判断是否能构成三角形，并进一步判断是等边三角形、等腰三角形、直角三角形还是普通三角形。'}]"
    },
    {
        "sortId": 5323,
        "id": "1327435207198527488",
        "title": "判断键盘输入的两个整数大小。",
        "content": "本题目要求读入2个整数A和B，然后比较它们的大小。\n\n### 输入格式:\n\n键盘输入时在一行中给出2个绝对值不超过1000的整数A和B。\n\n### 输出格式:\n\n对每一组输入，在一行中将较大的数排列在前，较的小数排列在后输出，中间以一个空格分隔。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n-18 209\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n209 -18\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 62,
        "res": "[{'name':'比较大小'，'description':'本题目要求读入2个整数A和B，然后比较它们的大小。'}]"
    },
    {
        "sortId": 5324,
        "id": "1327240836725501952",
        "title": "大写字母转换为小写字母",
        "content": "编程从键盘输入一个大写英文字母，将其转换为小写英文字母，将转换后的小写英文字母及其十进制的ASCII码值显示到屏幕上。如果输入的不是大写英文字母，则输出Input Data error!。\n\n### 输入格式:\n\n从键盘输入一个大写的英文字母，以回车结束。\n\n### 输出格式:\n\n转换后的小写字母和ASCII码在同一行输出，中间以逗号分隔。参看下面输出样例。\n\n### 输入样例:\n\n\n\n```in\nB\n```\n\n### 输出样例:\n\n \n\n```out\nb,98\n```\n### 输入样例:\n\n\n\n```in\nb\n```\n\n### 输出样例:\n\n \n\n```out\nInput Data error!\n```\n\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 170,
        "res": "[{'name':'数据类型转换'，'description':'将大写字母转换为小写字母的方法是通过ASCII码进行转换，大写字母的ASCII码值与小写字母的ASCII码值相差32。可以通过将大写字母的ASCII码值加上32来得到对应的小写字母的ASCII码值。'}]"
    },
    {
        "sortId": 5325,
        "id": "1327238901406519296",
        "title": "累加a-aa+aaa-aaaa+...",
        "content": "计算a-aa+aaa-aaaa+...的值，最后一项为n个a，a和n的值由键盘输入。a和n均为正整数，累加的结果定义为双精度实型。\n\n### 输入格式:\n\na和n的值在一行输入，中间以空格分隔。\n### 输出格式:\n\n输出时结果只保留整数部分，并按输出样例的形式输出。\n\n### 输入样例:\n\n\n\n```in\n2 5\n```\n\n### 输出样例:\n\n\n\n```out\nsum=20202\n```\n### 输入样例:\n\n\n\n```in\n2 12\n```\n\n### 输出样例:\n\n\n\n```out\nsum=-202020202020\n```\n\n\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 40,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 110,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来实现累加的计算。'}，{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来确定每一项的正负号。'}，{'name':'变量定义和赋值'，'description':'变量定义和赋值是C语言中的基本操作，用于声明变量并给变量赋值。在本题中，需要定义和赋值变量a和n。'}，{'name':'数据类型'，'description':'数据类型是C语言中的基本概念，用于定义变量的类型。在本题中，需要使用双精度实型来保存累加的结果。'}]"
    },
    {
        "sortId": 5326,
        "id": "1327112356096536576",
        "title": "求字符串的长度",
        "content": "我们写的程序中出现过很多次用一对双引号引起来的 0 个或多个字符，我们把它们称为字符串常量。例如\"Hello\"和\"\"都是符号串常量。\n我们可以用字符数组去存储字符串，char string[]=\"Hello\";还可以声明一个用于存储字符地址的变量操作字符串，比如\nchar *string2=\"Hello\";。\n\n但是，它们的工作原理是不同的，char *string2=\"Hello\";的写法实际上是在string2这个变量中保存了\"Hello\"这个字符串常量在程序运行时在内存中的地址。因为\"Hello\"是一个字符串常量，我们没有办法通过string2来对字符串做修改。\n```\n#include <stdio.h>\nint main() {\n    char string[] = \"Hello\";\n    printf(\"%s\\n\", string);\n    char *string2=\"Hello\";\n    printf(\"%s\\n\",string2);\n    printf(\"%p\\n\",string);\n    printf(\"%p\\n\",string2);\n    printf(\"%p\\n\",&\"Hello\");\n    return 0;\n}\n```\n后面的三个输出语句，分别输出string这个字符数组在内存中的地址、string2所存的地址、\"Hello\"字符串常量所在内存中的地址。\n\n运行结果为：\n\n![6.png](~/ef817bd1-1160-4728-b9e6-5e108aba7dc3.png)\n\n\nstring2所存的地址和\"Hello\"字符串常量所在内存中的地址是一致的。而string的地址和string2的地址是完全不同的呢。\n\n其实，string的地址是内存栈区的地址，而string2则是直接关联到\"Hello\"字符串常量在内存中常量池中的地址。\n\n如果问char string[]=\"Hello\"; char *string2=\"Hello\";这两种写法有什么差别，聪明的你，是不是能很好的去解释了呢？\n\n今天我们来解决求字符串长度的问题吧。\n### 输入格式:\n输入在一行中给出一个不超过80个字符、并以回车结束的字符串。\n### 输出格式:\n输出一个整数，表示字符串的长度。\n### 输入样例:\nHello\n### 输出样例:\n5\n\n俗话说“条条大路通罗马”，解决问题的方法会有很多种。小可爱们，要坚信办法总比问题多。求字符串长度我们就可以采用多种方法求。\n\nC 语言中有一个专门用于处理字符串的标准库,我们可以通过#include <string.h>的方式将其引入。在这个标准库中提供了一个函数strlen用于获得字符串的长度。strlen函数的参数就是我们需要知道长度的字符串常量、字符数组名或者指向字符串的指针变量，它返回的是被传入参数的字符串长度。\n\n那输入的字符串是怎么知道长度的呢？聪明的科学家想了这样的办法，即在字符串最后加了一个结束标记，即字符‘\\0’，该字符也表示的是ASCII值为0的字符。注意末位的’\\0‘不被计入长度，当碰到字符串结束标记，字符串就结束了。\n```\n#include<stdio.h>\n#include<string.h>\nint main()\n{\n\tchar string[81];\n\tgets(string);//输入字符串，以回车结束，允许输入空串\n\tint len=strlen(string);\n\tprintf(\"%d\",len);\n}\n```\n输出结果为：\n\n![7.png](~/0280aa43-1b3e-473c-9479-f15e0d92ea7a.png)\n\n当然，我们也可以自己写求字符串长度的函数。\n```\nint stringlen(char *s)\n{\n\tint i;\n\tfor(i=0;s[i]!='\\0';i++)//循环体是空语句\n\t  {\n\t    ;\n      }\n\treturn i;\n}\n```\n如果对字符串中的字符遍历采用地址表示法，该怎么做呢？小伙伴们，一起来完成下吧。\n```c++\n#include<stdio.h>\nint stringlen(char *s);\nint main()\n{\n\tchar string[81];\n\tgets(string);\n\tint len=stringlen(string);\n\tprintf(\"%d\",len);\n}\nint stringlen(char *s)\n{\n\tint length=@@[](1);\n\tfor(char *p=s;@@[](2);p++)\n\t{\n\t\tlength++;\n\t}\n\t@@[](1);\n}\n```\n\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "80",
                        "name": "字符串",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 59,
        "res": "[{'name': '字符串常量', 'description': '字符串常量是由一对双引号引起来的0个或多个字符组成的，可以用字符数组或字符指针来存储和操作字符串。'}, {'name': '字符数组', 'description': '字符数组是一种用于存储字符串的数据类型，可以通过声明一个字符数组变量来存储字符串常量。'}, {'name': '字符指针', 'description': '字符指针是一种用于存储字符串地址的变量类型，可以通过声明一个字符指针变量来操作字符串。'}, {'name': '字符串长度', 'description': '字符串长度是指字符串中字符的个数，可以通过使用strlen函数或自己编写求字符串长度的函数来获取字符串的长度。'}]"
    },
    {
        "sortId": 5327,
        "id": "1326903961519280128",
        "title": "跳台阶风波",
        "content": "近年来， 跳台阶越来越流行， 很多大学生天天练习跳台阶， 有的可以一次最高跳 2 级， 有的可以最高跳 3 级\n小刘是我们学校的跳台阶冠军，一次最高可以眺 n 级, 但是小刘不想一次跳完， 他想知道现在知道他最多有多少种方法可以跳完 n 级台阶\n\n### 输入格式:\n\n输入一个正整数 n （ n > 0 , n 在整型范围内 ）\n\n### 输出格式:\n\n输出 n 级台阶对应的方案数, 由于答案可能很大， 请对 1e9 + 7 取模\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 17,
        "res": "[{'name': '递归', 'description': '递归是一种常用的解决问题的方法，它将一个问题分解为更小的子问题，直到达到基本情况。在本题中，可以使用递归来计算跳完n级台阶的方案数。'}, {'name': '动态规划', 'description': '动态规划是一种常用的解决问题的方法，它通过将问题分解为更小的子问题，并保存子问题的解来避免重复计算。在本题中，可以使用动态规划来计算跳完n级台阶的方案数。'}]"
    },
    {
        "sortId": 5328,
        "id": "1326430373448151040",
        "title": "三位数逆序输出",
        "content": "从键盘输入一个三位数num，将其逆序输出。\n\n### 输入格式:\n\n一个三位数num（100<=num<1000）\n\n### 输出格式:\n\nnum的逆序，可能不是三位数了（如果num=123,逆序为321；如果num为800，逆序为8）\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n123\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n321\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 30,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 58,
        "res": "[{'name': '输入输出', 'description': '学习如何从键盘输入数据，并将结果输出到屏幕上。'}, {'name': '变量', 'description': '学习如何声明和使用变量，以及变量的命名规则。'}, {'name': '数据类型', 'description': '学习不同的数据类型，如整型、字符型等，并了解它们的特点和用法。'}, {'name': '运算符', 'description': '学习各种运算符的使用，如算术运算符、关系运算符等。'}, {'name': '控制语句', 'description': '学习如何使用条件语句和循环语句控制程序的执行流程。'}, {'name': '函数', 'description': '学习如何定义和调用函数，以及函数的参数传递和返回值。'}, {'name': '数组', 'description': '学习如何声明和使用数组，以及数组的特点和用法。'}, {'name': '字符串', 'description': '学习如何声明和使用字符串，以及字符串的特点和常用操作。'}, {'name': '指针', 'description': '学习如何声明和使用指针，以及指针的特点和用法。'}, {'name': '文件操作', 'description': '学习如何打开、读写和关闭文件，以及文件的操作方法。'}]"
    },
    {
        "sortId": 5329,
        "id": "1326368438606254080",
        "title": "认识二维数组",
        "content": "每一个二维数组其实都可以被看作由特定数量的一维数组组成。比如通过如 int matrix[2][3]的形式进行声明。 在声明二维数组时，在第一个方括号内写的数字可以被视为一维数组的个数（如这里的[2]），我们也可以称之为二维数组的“行数”；在第二个方括号内写的数字可以被视为是每个一维数组内的元素个数（如这里的[3]），我们也可以称之为二维数组的“列数”。\n\n我们在访问数组元素时，方括号内的数字分别表示数组中的元素在行和列的编号，在二维数组matirx[2][3]总的元素，可以通过matrix[0][0],matrix[0][1],matrix[0][2],matrix[1][0],matrix[1][1],matrix[1][2]进行访问。 \n\n那下面我们就做一个简单的矩阵翻转操作吧。 给定一个m行、n列的矩阵，对这个矩阵进行根据要求将它水平翻转或者竖直翻转。\n\n比如对于矩阵\n\n![1.png](~/fcb711e1-290e-4a1a-b20e-ea7f35f76e56.png)\n\n如果对A进行水平翻转，将得到\n\n![2.png](~/273191f7-e034-47dd-baea-2269fb5de741.png)\n\n如果对A进行竖直翻转，将得到\n\n![3.png](~/0e0da1cd-aa15-48ba-a9a2-c4e4ad20202e.png)\n\n提示：如果是水平翻转，则需要对矩阵每一行进行逆置,思考，外循环是对行索引还是列索引？\n\n如果是垂直翻转，则对矩阵每一列进行逆置。\n### 输入格式:\n首先在第一行输入2个整数，分别对应题目中描述的m和n(1<=m,n<=100),两个整数之间用一个空格分隔。\n\n接下来输入m行，每行包含n个整数，每两个整数之间用一个空格分隔。\n\n接下来输入一行，输入一个整数为1或0，当输入为1时，对矩阵进行水平翻转；当输入为0时对矩阵进行竖直翻转。\n### 输出格式:\n\n输出m行，每行包含n个整数，按要求输出翻转后的矩阵，每行任意两个整数之间用一个空格分隔，每行最后一个整数之后没有空格。\n\n### 输入样例1:\n\n```\n2 3\n1 2 3\n4 5 6\n1\n```\n\n### 输出样例1:\n\n```\n3 2 1\n6 5 4\n```\n### 输入样例2:\n\n```\n3 2\n1 2\n3 4\n5 6\n0\n```\n\n### 输出样例2:\n\n```\n5 6\n3 4\n1 2\n```\n```c++\n#include <stdio.h>\nint main() {\n    int matrix[100][100];\n    int m;\n    int n;\n    scanf(\"%d%d\",&m,&n);\n    for(int i=0;i<m;i++)//输入矩阵元素值\n        for(int j=0;j<n;j++)\n            scanf(\"%d\",&matrix[i][j]);\n    int flag;\n    scanf(\"%d\",&flag);\n    if(flag==1)\n    {\n       for(int i=0;i<m;i++) //水平翻转，对每一行进行逆置\n           for(int j=0, k=n-1;j<k;j++,k--)\n           {\n               int t;\n               t=matrix[i][j];\n               matrix[i][j]=matrix[i][k];\n               matrix[i][k]=t;\n           }             \n    }\n    else\n    {\n        for(int j=0;j<@@[](1);j++) //垂直翻转，对每一列进行逆置\n           for(int i=0,k=m-1;@@[](1);i++,k--)\n           {\n               int t;\n               t= matrix@@[](1);\n               matrix@@[](1)=matrix@@[](1);\n               matrix@@[](1)=t;\n           }\n    }\n   for(int i=0;i<m;i++)\n     {\n        for(int j=0;j<n-1;j++)//输出前n-1个元素\n        {\n            printf(\"%d \",matrix[i][j]); \n\t\t}\n         printf(\"%d\\n\",matrix[i][n-1]);//输出该行中第n个元素\n      }          \n   return 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 6,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 58,
        "res": "[{'name': '二维数组', 'description': '每一个二维数组其实都可以被看作由特定数量的一维数组组成。比如通过如 int matrix[2][3]的形式进行声明。 在声明二维数组时，在第一个方括号内写的数字可以被视为一维数组的个数（如这里的[2]），我们也可以称之为二维数组的“行数”；在第二个方括号内写的数字可以被视为是每个一维数组内的元素个数（如这里的[3]），我们也可以称之为二维数组的“列数”。'}, {'name': '访问数组元素', 'description': '我们在访问数组元素时，方括号内的数字分别表示数组中的元素在行和列的编号，在二维数组matirx[2][3]总的元素，可以通过matrix[0][0],matrix[0][1],matrix[0][2],matrix[1][0],matrix[1][1],matrix[1][2]进行访问。'}, {'name': '矩阵翻转', 'description': '给定一个m行、n列的矩阵，对这个矩阵进行根据要求将它水平翻转或者竖直翻转。比如对于矩阵如果对A进行水平翻转，将得到如果对A进行竖直翻转，将得到提示：如果是水平翻转，则需要对矩阵每一行进行逆置,思考，外循环是对行索引还是列索引？如果是垂直翻转，则对矩阵每一列进行逆置。'}]"
    },
    {
        "sortId": 5330,
        "id": "1326366016722849792",
        "title": "爱迪生的名言",
        "content": "爱迪生说：“天才是百分之一的灵感和百分之九十九的汗水。”\n\n请编写程序，输出这句名言。\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```out\nThomas Edison said, \"Genius is 1% inspiration and 99% perspiration!\"\n\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 162,
        "res": "[{'name':'输出语句'，'description':'使用printf函数输出指定的字符串'}]"
    },
    {
        "sortId": 5331,
        "id": "1326353909352656896",
        "title": "算一算，然后认真仔细地输出2到正整数n间的所有素数",
        "content": "编写程序计算并输出2到正整数n之间的所有素数。\n\n### 输入格式:\n\n输入只有一个正整数n。\n\n### 输出格式:\n\n2到n之间的所有素数。例如，如果n为100，则应在一行里输出 \n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97 \n注意：行首和行尾不能有多余的空格\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n20\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n2 3 5 7 11 13 17 19\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 15,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来遍历2到n之间的所有数，判断每个数是否为素数。'},\n{'name':'条件判断'，'description':'条件判断是C语言中的一种控制结构，用于根据条件的真假来执行不同的代码。在本题中，可以使用条件判断来判断一个数是否为素数。'},\n{'name':'函数'，'description':'函数是C语言中的一种模块化编程的方式，用于封装一段可重复使用的代码。在本题中，可以使用函数来封装判断一个数是否为素数的代码，以便在循环中调用。'},\n{'name':'数组'，'description':'数组是C语言中的一种数据结构，用于存储多个相同类型的数据。在本题中，可以使用数组来存储2到n之间的素数，以便输出。'},\n{'name':'输出格式控制'，'description':'输出格式控制是C语言中的一种技巧，用于控制输出的格式。在本题中，可以使用输出格式控制来确保输出的素数之间没有多余的空格。'}]"
    },
    {
        "sortId": 5332,
        "id": "1326338526562373632",
        "title": "置点不动产——认真学习，努力工作买买房子吧",
        "content": "某程序员开始工作，年薪N万，他希望在ZG村公馆买一套60平米的房子，现在价格是200万，假设房子价格以每年百分之K增长，并且该程序员未来年薪不变，且不吃不喝，不用交税，每年所得N万全都积攒起来，问第几年能够买下这套房子？（第一年年薪N万，房价200万）\n\n### 输入格式:\n\n一行，包含两个正整数N（10 <= N <= 50）, K（1 <= K <= 20），中间用单个空格隔开。\n\n### 输出格式:\n\n如果在第20年或者之前就能买下这套房子，则输出一个整数M，表示最早需要在第M年能买下，否则输出Impossible。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n50 10\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n8\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "72",
                        "name": "while和do-while",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 49,
        "res": "[{'name':'变量和数据类型'，'description':'C语言中的变量和数据类型，包括整型、浮点型、字符型等。'}, {'name':'运算符'，'description':'C语言中的运算符，包括算术运算符、关系运算符、逻辑运算符等。'}, {'name':'条件语句'，'description':'C语言中的条件语句，包括if语句、switch语句等。'}, {'name':'循环语句'，'description':'C语言中的循环语句，包括for循环、while循环等。'}, {'name':'函数'，'description':'C语言中的函数，包括函数的定义、函数的调用等。'}, {'name':'数组'，'description':'C语言中的数组，包括一维数组、多维数组等。'}, {'name':'指针'，'description':'C语言中的指针，包括指针的定义、指针的运算等。'}, {'name':'文件操作'，'description':'C语言中的文件操作，包括文件的打开、读写文件等。'}, {'name':'结构体'，'description':'C语言中的结构体，包括结构体的定义、结构体的使用等。'}, {'name':'动态内存分配'，'description':'C语言中的动态内存分配，包括malloc函数、free函数等。'}, {'name':'预处理指令'，'description':'C语言中的预处理指令，包括宏定义、条件编译等。'}]"
    },
    {
        "sortId": 5333,
        "id": "1326172811203665920",
        "title": "输入一个数字，输出其对应的星期几的英文单词。",
        "content": "根据输入的整型数据x，其取值范围为1~7。1代表星期一Monday，2代表Tuesday，…，7代表Sunday，如果输入的整数x>7或x<0，则给出出错信息。\n\n\n### 输入样例1:\n\n\n\n```in\n1\n```\n\n### 输出样例1:\n\n```out\nMonday\n```\n\n### 输入样例2:\n\n```in\n8\n```\n### 输出样例2:\n\n\n```out\n输入错误！\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "69",
                        "name": "switch",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 121,
        "res": "[{'name':'数据类型','description':'C语言中的数据类型包括整型、浮点型、字符型等，通过数据类型可以确定变量的存储空间和取值范围。在本题中，需要对输入的整型数据进行判断和处理。'}, {'name':'条件语句','description':'条件语句用于根据不同的条件执行不同的代码块。在本题中，需要使用条件语句判断输入的整型数据是否在指定范围内。'}, {'name':'输入输出','description':'输入输出是C语言程序中常用的操作，用于从用户处获取输入数据并将结果输出。在本题中，需要从标准输入中读取整型数据，并将结果输出到标准输出。'}]"
    },
    {
        "sortId": 5334,
        "id": "1326137026735726592",
        "title": "求1+(1+2)+(1+2+3)+…+(1+2+3+…+n)的和",
        "content": "求1+(1+2)+(1+2+3)+…+(1+2+3+…+n)的和\n\n### 输入格式:\n\n输入一个整数。\n\n### 输出格式:\n\n输出所求的和。\n\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nsum = 10\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 2,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "73",
                        "name": "嵌套循环",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 446,
        "res": "[{'name': '循环语句', 'description': '循环语句是一种重复执行某段代码的结构，可以根据条件来控制循环的次数。在C语言中，常用的循环语句有for循环、while循环和do-while循环。循环语句可以用来解决需要重复执行的问题，如计算累加和。'}, {'name': '变量', 'description': '变量是存储数据的一种方式，可以通过变量名来访问和操作存储的数据。在C语言中，变量需要先声明后使用，可以通过赋值语句来给变量赋值。在解决问题时，可以使用变量来存储中间结果，如累加和的计算过程。'}, {'name': '算术运算', 'description': '算术运算是对数值进行加、减、乘、除等操作的过程。在C语言中，常用的算术运算符有加法运算符（+）、减法运算符（-）、乘法运算符（*）、除法运算符（/）等。在解决问题时，可以使用算术运算符来计算累加和。'}]"
    },
    {
        "sortId": 5335,
        "id": "1325838405851103232",
        "title": "井字棋",
        "content": "大佬和小白玩 “井”字棋。也就是在九宫格中，只要任意行、列，或者任意对角线上面出现三个连续相同的棋子，就能获胜。请根据棋盘状态，判断当前输赢。\n\n### 输入格式:\n\n三行三列的字符元素，代表棋盘状态，字符元素用空格分开，代表当前棋盘，其中元素为D代表大佬玩家的棋子，为O表示没有棋子，为X代表小白玩家的棋子。\n\n### 输出格式:\n如果大佬获胜，输出“姜还是老的辣！”；\n如果小白获胜，输出“长江后浪推前浪！”；\n如果没有获胜，输出“再来一局！”。\n\n### 输入样例:\n\n\n\n```in\nD O X\nO D X\nX O D\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\n姜还是老的辣！\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "81",
                        "name": "二维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 80,
        "res": "[{'name': '二维数组', 'description': 'C语言中使用二维数组来表示棋盘状态，通过行和列的索引来访问和修改棋盘上的元素。'}, {'name': '条件语句', 'description': '使用条件语句来判断当前棋盘状态是否满足获胜条件。'}, {'name': '循环语句', 'description': '使用循环语句来遍历棋盘上的元素，判断是否存在连续相同的棋子。'}, {'name': '字符串比较', 'description': '使用字符串比较函数来判断当前棋盘状态是否满足获胜条件。'}, {'name': '输出语句', 'description': '根据判断结果使用输出语句来输出相应的结果。'}]"
    },
    {
        "sortId": 5336,
        "id": "1325831460154982400",
        "title": "“剁手”",
        "content": "ziquan非常喜欢网购，在一家店铺她看中了一件衣服，她了解到，如果今天是“双11”（11月11日）则这件衣服打7.5折，“双12” （12月12日）则这件衣服打8.5折，如果有优惠券可以额外减75元（优惠券只能在双11或双12使用），求ziquan最终所花的钱数。\n\n### 输入格式:\n\n一行，四个数字，第一个数表示ziquan看中的衣服价格，第二和第三个整数分别表示当天的月份、当天的日期、第四个整数表示是否有优惠券（有优惠券用1表示，无优惠券用0表示）。\n\n### 输出格式:\n\n一行，ziquan实际花的钱数（保留两位小数）。（提示：不要指望商家倒找你钱）\n\n### 输入样例1:\n\n```in\n1000.0 11 11 1\n```\n\n### 输出样例1:\n\n```out\n675.00\n```\n### 输入样例2:\n\n```in\n999.8 12 12 0\n```\n\n### 输出样例2:\n\n```out\n849.83\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 2,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 46,
        "res": "[{'name':'条件语句'，'description':'条件语句是根据条件的真假来决定程序的执行路径。在这个题目中，需要根据当天的日期来判断是否打折以及是否使用优惠券。'}，{'name':'数学运算'，'description':'数学运算是对数字进行各种运算操作，包括加减乘除等。在这个题目中，需要对衣服的价格进行打折和优惠券的减免计算。'}]"
    },
    {
        "sortId": 5337,
        "id": "1325795937126408192",
        "title": "本题要求编写程序，计算序列 1+1+2+3+5+... 的前N项之和",
        "content": "本题要求编写程序，计算序列 1+1+2+3+5+... 的前N（N>=1)项之和。\n\n### 输入格式:\n\n输入在一行中给出一个正整数N。\n\n### 输出格式:\n\n在一行中按照“sum = S”的格式输出\n### 输入样例:\n\n在这里给出一组输入。例如：\n\n```in\n3\n```\n\n### 输出样例:\n\n在这里给出相应的输出。例如：\n\n```out\nsum = 4\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 3,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 70,
        "res": "[{'name':'循环结构'，'description':'循环结构是C语言中的一种控制结构，用于重复执行一段代码。在本题中，可以使用循环结构来计算序列的前N项之和。'}]"
    },
    {
        "sortId": 5338,
        "id": "1325150789203877888",
        "title": "实数的值域范围(10空)",
        "content": "实数的值域范围\n\n除实数零以外，非零实数(规格化数)的值域范围如下：\n\n<table>\n<tr>\n<td align=\"center\"><b>实数</b></td>\n<td align=\"center\"><b>字节数</b></td>\n<td align=\"center\"><b>绝对值范围</b></td>\n<td align=\"center\"><b>有效数字位数</b></td>\n</tr>\n<tr>\n<td align=\"center\">float</td>\n<td align=\"center\"></td>\n<td align=\"center\"> ~ </td>\n<td align=\"center\"> ~ </td>\n</tr>\n<tr>\n<td align=\"center\">double</td>\n<td align=\"center\"></td>\n<td align=\"center\"> ~ </td>\n<td align=\"center\"> ~ </td>\n</tr>\n</table>\n\n---\n\n注：\n- 请填写十进制数。\n- 绝对值的最小值和最大值用十进制科学计数法表示(只保留3位有效数字)。\n- 有效数字位数填折算成十进制的有效数字位数。\n",
        "type": "FILL_IN_THE_BLANK",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 13,
        "res": "[{'name':'实数的值域范围'，'description':'实数的值域范围是指除实数零以外，非零实数的取值范围。在C语言中，float类型和double类型分别表示单精度浮点数和双精度浮点数。float类型占用4个字节，double类型占用8个字节。对于float类型，其绝对值范围和有效数字位数取决于具体的实现。对于double类型，其绝对值范围和有效数字位数也取决于具体的实现。在实际编程中，我们需要根据具体的需求选择合适的数据类型来表示实数，以保证精度和范围的要求。'}]"
    },
    {
        "sortId": 5339,
        "id": "1325064773268881408",
        "title": "1235帮的Kth",
        "content": "整数1,2,3,5成立了一个帮会：只限能够1，2，3，5内部相乘得到的自然数入会（即可以写成2的某次方，3的某次方与5的某次方的积的形式。如60=4x15=$$2^2$$x3x5，故60是1234帮的）。按从小到大的顺序，前十个会员是：1,2,3,4,5,6,8,9,10,12。请编写程序，输出排在第K个位置的整数（第一个是1，第六个6，第十个是12）。\n因为K可能取到较大的值，请尽量使用高效算法。\n\n### 输入格式:\n输入一个位排位号（1--N）\n### 输出格式:\n直接输出排在第K个的会员。\n\n### 输入样例:\n```in\n12\n```\n\n### 输出样例:\n```out\n16\n```\n",
        "type": "PROGRAMMING",
        "difficulty": 3,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "78",
                        "name": "数组",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "79",
                        "name": "一维数组",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 22,
        "res": "[{'name':'循环结构'，'description':'循环结构是一种重复执行某段代码的结构，可以使用for循环、while循环或do-while循环来实现。在本题中，可以使用循环结构来遍历整数，判断是否满足条件。'}, {'name':'条件判断'，'description':'条件判断是根据给定的条件来决定程序的执行路径。在本题中，可以使用条件判断来判断整数是否满足条件。'}, {'name':'数学运算'，'description':'数学运算是对数值进行加减乘除等操作的过程。在本题中，可以使用数学运算来计算整数的乘积。'}, {'name':'数组'，'description':'数组是一种存储多个相同类型数据的结构。在本题中，可以使用数组来存储会员序列。'}, {'name':'高效算法'，'description':'高效算法是指在解决问题时能够以较少的时间和空间复杂度完成任务的算法。在本题中，可以使用高效算法来快速找到排在第K个位置的整数。'}]"
    },
    {
        "sortId": 5340,
        "id": "1325038106362200064",
        "title": "能否通过",
        "content": "最近，很多老师参加PTA的监考执照考试。100分的卷子，得到95分及以上才算通过。一开始，通过者寥寥无几。有了题库之后，满分者屡见不鲜。某人参加了总分为a，通过分数线为b的考试，最终得分为c，请判断其能否通过该考试。若通过，输出`pass`及距离满分还差多少分；否则，输出`lose`及距离通过分数线还差多少分。\n\n### 输入格式:\n\n首先输入一个正整数T（T≤20），表示测试数据的组数，然后是T组测试数据。每组测试数据输入一行，包含3个整数a,b,c（0 < a,b,c ≤ 1000），分别表示总分、通过分数线、最终得分。\n\n### 输出格式:\n\n对于每组测试数据，输出一行。若通过考试，输出`pass`及距离满分还差多少分；否则输出`lose`及距离通过分数线还差多少分。数据之间以一个空格分隔。\n\n### 输入样例:\n\n```in\n3\n100 95 100\n100 95 70\n120 100 101\n```\n\n### 输出样例:\n\n```out\npass 0\nlose 25\npass 19\n```",
        "type": "PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "67",
                        "name": "分支控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "68",
                        "name": "if-else",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 62,
        "res": "[{'name':'条件判断语句'，'description':'根据条件的真假来执行不同的代码块'}, {'name':'算术运算符'，'description':'进行数值计算的运算符'}, {'name':'输入输出'，'description':'从键盘输入数据，将结果输出到屏幕上'}, {'name':'循环语句'，'description':'重复执行某段代码块'}, {'name':'变量'，'description':'用于存储数据的内存空间'}, {'name':'数据类型'，'description':'定义变量的类型，包括整型、浮点型、字符型等'}, {'name':'运算符'，'description':'进行数值计算、逻辑判断等操作的符号'}, {'name':'函数'，'description':'封装一段可重复使用的代码块'}, {'name':'数组'，'description':'存储多个相同类型的数据的集合'}, {'name':'字符串'，'description':'用于存储和操作文本数据的数据类型'}, {'name':'指针'，'description':'存储变量地址的变量'}, {'name':'文件操作'，'description':'对文件进行读写操作'}, {'name':'结构体'，'description':'将多个不同类型的数据组合成一个整体'}, {'name':'位运算'，'description':'对二进制位进行操作的运算符'}, {'name':'预处理指令'，'description':'在编译之前对代码进行处理的指令'}, {'name':'递归'，'description':'函数调用自身的过程'}, {'name':'指针运算'，'description':'对指针进行加减操作'}, {'name':'动态内存分配'，'description':'在程序运行时动态地分配内存空间'}, {'name':'多文件编程'，'description':'将程序分成多个文件进行编写和管理'}, {'name':'错误处理'，'description':'处理程序运行过程中出现的错误'}, {'name':'位字段'，'description':'将一个字节中的位划分为多个字段进行存储和操作'}, {'name':'枚举'，'description':'定义一组具有相同属性的常量'}, {'name':'指针数组'，'description':'存储指针的数组'}, {'name':'函数指针'，'description':'指向函数的指针'}, {'name':'链表'，'description':'用于存储和操作动态数据的数据结构'}, {'name':'队列'，'description':'先进先出的数据结构'}, {'name':'栈'，'description':'后进先出的数据结构'}, {'name':'排序算法'，'description':'对数据进行排序的算法'}, {'name':'查找算法'，'description':'在数据中查找指定元素的算法'}, {'name':'二叉树'，'description':'每个节点最多有两个子节点的树状结构'}, {'name':'图'，'description':'由节点和边组成的数据结构'}, {'name':'哈希表'，'description':'根据关键字直接访问数据的数据结构'}, {'name':'文件操作'，'description':'对文件进行读写操作'}, {'name':'网络编程'，'description':'用于实现网络通信的编程技术'}, {'name':'多线程'，'description':'同时执行多个线程的技术'}, {'name':'异常处理'，'description':'处理程序运行过程中出现的异常情况'}, {'name':'面向对象编程'，'description':'以对象为基本单位进行编程的方法'}, {'name':'模块化编程'，'description':'将程序分成多个模块进行编写和管理'}, {'name':'泛型编程'，'description':'编写通用的代码，适用于不同类型的数据'}, {'name':'并发编程'，'description':'同时执行多个任务的编程技术'}, {'name':'网络安全'，'description':'保护网络系统和数据安全的技术'}, {'name':'数据结构'，'description':'组织和存储数据的方式'}, {'name':'算法'，'description':'解决问题的步骤和方法'}, {'name':'操作系统'，'description':'管理计算机硬件和软件资源的系统'}, {'name':'计算机网络'，'description':'连接多台计算机和设备的网络'}, {'name':'数据库'，'description':'存储和管理数据的系统'}, {'name':'软件工程'，'description':'开发和维护软件的过程和方法'}, {'name':'编译原理'，'description':'将高级语言代码转换为机器语言的过程'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技术'}, {'name':'计算机安全'，'description':'保护计算机系统和数据安全的技术'}, {'name':'计算机体系结构'，'description':'计算机硬件和软件的结构和组织'}, {'name':'操作系统原理'，'description':'操作系统的基本原理和功能'}, {'name':'计算机图形学'，'description':'用于生成和处理图像的技术'}, {'name':'人工智能'，'description':'使计算机具有智能的技"
    }, {
        "sortId": 5341,
        "id": "1324534587846778880",
        "title": "C程序设计 实验3-5 填空",
        "content": "\n利用![80053a12-1c91-4c80-9fd0-ca8bf17ac609.png](~/b60c4620-0b1c-4d82-9e1e-70921582350f.png)计算sinx的值，直到最后一项的绝对值小于$$10^{-5}$$时为止。要求在计算的过程中统计出参与累加的项数。\n\n```c++\n#include <stdio.h>\n#include  <math.h>\nmain()\n{\n\tint n = 1, count = 1;\n\tdouble x;\n\tdouble sum, term;\n\tscanf(\"%lf\", @@[](5));\n\tsum = x;\n\tterm = x;\n\tdo{\n\t\tterm =@@[](5);\n\t\tsum = sum + term;\n\t\tn = n + 2;\n\t\t@@[](5);\n\t}while (@@[](5));\n\tprintf(\"sin(x) = %f, count = %d\\n\", sum, count);\n}\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 20,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 49,
        "res": "[{'name': 'scanf函数', 'description': 'scanf函数用于从标准输入流中读取数据，并根据指定的格式进行格式化输入。在这道题中，scanf函数用于读取用户输入的x的值。'}, {'name': 'math.h库', 'description': 'math.h库是C语言中的数学函数库，提供了各种数学运算函数。在这道题中，使用了math.h库中的sin函数来计算sinx的值。'}, {'name': '循环语句', 'description': '循环语句用于重复执行一段代码块，直到满足指定的条件为止。在这道题中，使用了do-while循环语句来计算sinx的值，直到最后一项的绝对值小于10^-5为止。'}, {'name': '变量', 'description': '变量是用于存储数据的内存位置，可以通过变量名来访问和操作存储的数据。在这道题中，使用了多个变量来存储计算过程中的中间结果和计数器。'}, {'name': '运算符', 'description': '运算符用于执行各种数学和逻辑运算。在这道题中，使用了加法运算符、赋值运算符、自增运算符等来进行计算和更新变量的值。'}]"
    },
    {
        "sortId": 5342,
        "id": "1324533394374344704",
        "title": "C程序设计 实验3-4 填空",
        "content": "阅读下面的程序，按要求在空白处填写合适的表达式或语句，使得程序完整并符合题目要求。\n\n计算1-1/2+1/3-1/4+...+1/99-1/100+...，直到最后一项的绝对值小于$$10^{-4}$$为止。结果定义为双精度实型。\n\n```c++\n#include <stdio.h>\n#include  <math.h>\nmain()\n{\n\tint n = 1;\n\tfloat term = 1.0, sign = 1,sum = 0;\n\twhile (@@[](4))\n\t{\n\t\t@@[](3);\n\t\tsum = sum + term;\n\t\tsign =  @@[](3);\n\t\tn++;\n\t}\n\tprintf(\"sum = %f\\n\", sum);\n}\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 118,
        "res": "[{'name':'循环控制语句', 'description':'循环控制语句用于控制程序的循环执行，包括while循环、do-while循环和for循环等。在这道题中，需要使用while循环来实现对序列的求和。'}, {'name':'条件语句', 'description':'条件语句用于根据条件的真假来执行不同的代码块。在这道题中，需要使用条件语句来判断最后一项的绝对值是否小于10^-4。'}, {'name':'数学函数', 'description':'数学函数用于进行数学运算，包括绝对值函数fabs()和幂函数pow()等。在这道题中，需要使用绝对值函数fabs()来判断最后一项的绝对值是否小于10^-4。'}, {'name':'变量定义和赋值', 'description':'变量定义和赋值用于声明和初始化变量。在这道题中，需要定义和赋值变量n、term、sign和sum。'}, {'name':'算术运算符', 'description':'算术运算符用于进行数值计算，包括加法运算符+和除法运算符/等。在这道题中，需要使用加法运算符+和除法运算符/来计算序列的和。'}, {'name':'输出语句', 'description':'输出语句用于将结果输出到屏幕上。在这道题中，需要使用printf()函数来输出计算结果。'}]"
    },
    {
        "sortId": 5343,
        "id": "1324530895089262592",
        "title": "C程序设计 实验3-3 填空",
        "content": "阅读下面的程序，按要求在空白处填写合适的表达式或语句，使得程序完整并符合题目要求。\n\n计算a+aa+aaa+...+aa...a(n个a)的值，a和n的值由键盘输入。a和n均为正整数，累加的结果定义为双精度实型。\n\n```c++\n#include <stdio.h>\n#include <math.h>\n\nint main()\n{\n    int a,n;\n    long sum=0;\n    long @@[](05);\t\t\n    scanf(\"%d %d\",&a,&n);\n    for (int i=1;i<=n;i++)\n    {\n        term = @@[](05);\n        sum = sum + term;\n    }\n    printf(\"sum=%ld\",sum);\n\t\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 98,
        "res": "[{'name':'数据类型','description':'在C语言中，变量的数据类型决定了变量所占用的内存空间大小和变量能够存储的数据范围。在这道题中，需要使用int类型的变量a和n来存储键盘输入的值，使用long类型的变量sum来存储累加的结果。'}, {'name':'输入输出','description':'在C语言中，可以使用scanf函数从键盘输入数据，使用printf函数将结果输出到屏幕上。在这道题中，需要使用scanf函数接收键盘输入的a和n的值，使用printf函数将sum的值输出到屏幕上。'}, {'name':'循环结构','description':'在C语言中，可以使用循环结构来重复执行一段代码。在这道题中，需要使用for循环来计算a+aa+aaa+...+aa...a(n个a)的值。'}, {'name':'数学运算','description':'在C语言中，可以使用数学运算符来进行数值计算。在这道题中，需要使用数学运算符+来进行累加运算。'}]"
    },
    {
        "sortId": 5344,
        "id": "1324529925433278464",
        "title": "C程序设计 实验3-2  填空",
        "content": "阅读下面的程序，按要求在空白处填写合适的表达式或语句，使得程序完整并符合题目要求。\n\n计算1∗2∗3+3∗4∗5+...+99∗100∗101\n\n```c++\n#include <stdio.h>\nmain()\n{\n\tlong i ;\n\tlong term, sum = 0;\n\tfor (i=1;@@[](5); i=i+2)\n\t{\n\t\tterm = @@[](5);\n\t\tsum = sum + term;\n\t}\n\tprintf(\"sum = %ld\\n\", sum);\n}\n\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 132,
        "res": "[{'name':'for循环','description':'for循环用于重复执行一段代码，可以指定循环的起始条件、循环条件和循环步长。在本题中，for循环用于计算每一项的值。'}, {'name':'赋值语句','description':'赋值语句用于将一个值赋给一个变量。在本题中，赋值语句用于计算每一项的值并将其赋给term和sum变量。'}, {'name':'算术运算符','description':'算术运算符用于进行数值计算。在本题中，算术运算符用于计算每一项的值。'}, {'name':'printf函数','description':'printf函数用于输出结果。在本题中，printf函数用于输出sum的值。'}]"
    },
    {
        "sortId": 5345,
        "id": "1324528643490398208",
        "title": "C程序设计 实验3-1 填空",
        "content": "阅读下面的程序，按要求在空白处填写合适的表达式或语句，使得程序完整并符合题目要求。\n计算1+3+5+7+...+99+101的值。\n\n```c++\n#include <stdio.h>\n\nint main(void)\n{\n  long i,sum=0;\n\tfor (i=1; i<101; @@[](5))\n\t{\n     @@[](5);\n    }\n\tprintf(\"sum = %d\",sum);\n\treturn 0;\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 10,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "70",
                        "name": "循环控制",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "71",
                        "name": "for",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 192,
        "res": "[{'name':'循环语句'，'description':'循环语句用于重复执行一段代码，根据题目要求，可以使用循环语句来实现对1+3+5+7+...+99+101的求和操作。在这个题目中，可以使用for循环语句来实现。'}，{'name':'赋值语句'，'description':'赋值语句用于将一个值赋给一个变量，根据题目要求，可以使用赋值语句将每次循环的值累加到sum变量中。在这个题目中，可以使用sum += i;来实现。'}]"
    },
    {
        "sortId": 5346,
        "id": "1324225848618991616",
        "title": "爱的宣言(填空)",
        "content": "在情人节这一天，鼓起勇气向你的心上人说：\n\n```\nI♥U\n```\n\n下面的程序输出爱的宣言，请在空白处填写适当内容完成该程序。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tprintf( __________ );\n\treturn 0;\n}\n```\n\n#### 输入样例\n\n```in\n\n```\n注：无输入。\n\n#### 输出样例\n\n```\nI♥U\n\n```\n\n---\n\n提示：在 Windows 10 操作系统中，需要将运行窗口中的字体设置为点阵字体、将字号设置为 8x16，才能正常显示。\n\n相关习题：对你爱不完。\n\n```out\nI\u0003U\n\n```\n",
        "type": "CODE_COMPLETION",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            },
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "66",
                        "name": "输入输出格式化控制",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 20,
        "res": "[{'name':'格式化输出','description':'使用printf函数进行格式化输出，可以通过占位符将变量的值插入到输出字符串中。'}]"
    },
    {
        "sortId": 5347,
        "id": "1324192019980173312",
        "title": "递归函数的实现与调用",
        "content": "函数不能嵌套定义，但是可以嵌套调用。那函数可不可以调用自己呢？\n\n我们先看求阶乘的函数。\n\n\n![1.png](~/640fb5bb-fef3-47a8-976d-549ae11ed81b.png)\n\n在这里，我们使用了一个循环将1到n的数值依次相乘进行了计算，并将得到的乘积做为结果进行了返回。\n\n你有没有发现，我们其实还可以换一个视角来思考这个问题，我们可以将n!看做n和(n-1)!的乘积，而(n-1)!又可以被看作n-1和(n-2)!的乘积……直到2!被看成2和1!的乘积，1!为1为止。\n\n\n![2.png](~/5b8754f3-cde4-4ad3-8e3b-eabc25cb3b46.png)\n\n由这个思想所引导，老师实现了下面这个函数：\n\n\n![3.png](~/af314826-4de6-4dc5-869c-c9b0a299bf03.png)\n\n看起来是不是很简单？举个例子来看，如果我们传入给函数的n是5，我们将得到：\n\n\n![4.png](~/79d5568d-0b7f-4d13-b825-5710b875826b.png)\n\n我们称这种在一个函数的定义中调用自身的情况为递归调用。老师设计的上面这个函数就是一个递归实现的计算阶乘的函数。\n\n学习递归的函数调用更多是学习这种与数学归纳法有异曲同之妙的思想，在遇到问题时，很多情况下，我们可以把待解问题逐层归约为更简单的问题，直到这个问题变成一个显而易见的一般性问题。而这种思想表现在程序设计中，就是函数递归调用。\n\n下面我们做一个简单的题目吧，对于给定的正整数N，求它的各位数字之和。\n### 输入格式:\n\n输入为一个不超过10^ 9的正整数。\n### 输出格式:\n\n输出各位数字之和。\n\n### 输入样例:\n\n```\n1234\n```\n\n### 输出样例:\n\n```\n10\n```\n\n假设我们输入的正整数为1234，对这4位数字求和，可以看成最后一位的值4和123的位数和相加。123的位数之和，可以看成是3和12的位数和相加，……直到只有一位数。\n\n\n```c++\n#include<stdio.h>\nint sum(int n);\nint main()\n{\n\tint m,s;\n\tscanf(\"%d\",&m);\n\ts=@@[](1);//调用求各位数字之和的函数\n\tprintf(\"%d\",s);\n\treturn 0;\n}\nint sum(int n)\n{\n    if(@@[](2)) return n;//如果只有一位数，则位数和为自身\n    else\n\t{\n            return @@[](2)//n的各位数字之和为最后一位数字加上去掉最后一位的各位数字和\n    }\n}\n```\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 5,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "74",
                        "name": "函数与程序结构",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "76",
                        "name": "递归函数",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 87,
        "res": "[{'name': '函数嵌套调用', 'description': '函数可以调用其他函数，包括调用自身，这种调用方式称为递归调用。递归调用在解决一些问题时非常有用，可以将复杂的问题逐步简化为更小的问题，直到达到基本情况。'}, {'name': '递归实现阶乘', 'description': '递归实现阶乘是一种常见的递归应用。通过将n的阶乘问题转化为n和(n-1)的阶乘相乘的问题，逐步简化为基本情况，最终得到结果。'}, {'name': '递归求各位数字之和', 'description': '递归求各位数字之和是另一种常见的递归应用。通过将一个多位数的各位数字之和转化为最后一位数字和去掉最后一位的各位数字之和的问题，逐步简化为基本情况，最终得到结果。'}]"
    },
    {
        "sortId": 5348,
        "id": "1324189888032235520",
        "title": "“经济”(4空)",
        "content": "请查找汉字“经”、“济”的区位码，在程序的空白处填写适当内容，输出这两个字。\n\n```c\n#include <stdio.h>\n\nint main()\n{\n\tputchar(  );\n\tputchar(  );\n\tputchar(  );\n\tputchar(  );\n\tputchar('\\n');\n\treturn 0;\n}\n```\n\n#### 输入样例\n```in\n\n```\n\n#### 输出样例\n\n```out\n经济\n\n```\n\n---\n\n[点击此处查看 GB2312-80 汉字区位码表](https://pan.baidu.com/s/1nQVHaRmfNte7a9nWjv1S6A)\n",
        "type": "FILL_IN_THE_BLANK_FOR_PROGRAMMING",
        "difficulty": 1,
        "score": 4,
        "knowledgePointPaths": [
            {
                "knowledgePoints": [
                    {
                        "id": "63",
                        "name": "C程序设计",
                        "isLeaf": false,
                        "enName": "C Programming"
                    },
                    {
                        "id": "64",
                        "name": "基本数据类型与表达式",
                        "isLeaf": false,
                        "enName": ""
                    },
                    {
                        "id": "65",
                        "name": "表达式",
                        "isLeaf": true,
                        "enName": ""
                    }
                ]
            }
        ],
        "referenceCount": 20,
        "res": "[{'name': '字符输出', 'description': '字符输出是C语言中常用的操作之一，通过putchar函数可以将字符输出到屏幕上。在本题中，需要使用putchar函数输出汉字“经”和“济”。'}, {'name': 'ASCII码', 'description': 'ASCII码是一种字符编码标准，它将字符映射为对应的整数值。在C语言中，每个字符都有对应的ASCII码。在本题中，需要查找汉字“经”和“济”的区位码，即对应的ASCII码。'}, {'name': '注释', 'description': '注释是C语言中的一种特殊语法，用于对代码进行解释说明。在本题中，可以使用注释来提醒学生查找汉字“经”和“济”的区位码的方法。'}, {'name': '变量', 'description': '变量是C语言中用于存储数据的一种数据类型。在本题中，可以使用变量来存储汉字“经”和“济”的区位码，然后通过putchar函数输出。'}, {'name': '字符串', 'description': '字符串是C语言中的一种数据类型，用于存储多个字符。在本题中，可以使用字符串来存储汉字“经”和“济”的区位码，然后通过puts函数输出。'}]"
    }
]