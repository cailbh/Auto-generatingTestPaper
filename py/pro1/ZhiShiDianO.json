[
    {
        "id": "0",
        "name": "基本数据类型与表达式",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"0",
        "description": "基本数据类型包括整型、浮点型、字符型等。表达式则是一系列运算符和操作数的组合，用于计算结果。"
    },
    {
        "id": "1",
        "name": "表达式",
        "lay":1,
        "father":"0",
        "rootFather":"0",
        "rootFatherIndex":"0",
        "description": "表达式是指由运算符和操作数按照一定规则组成的算式，用于计算和产生一个值。"
    },
    {
        "id": "2",
        "name": "输入输出格式化控制",
        "lay":1,
        "father":"0",
        "rootFather":"0",
        "rootFatherIndex":"0",
        "description": "这部分涉及到标准输入输出函数，例如printf和scanf，以及格式化控制符，用于指定输出或输入的格式。"
    },
    {
        "id": "3",
        "name": "分支控制",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"1",
        "description": "分支控制通过if-else和switch语句实现不同条件下的代码分支执行。"
    },
    {
        "id": "4",
        "name": "if-else",
        "lay":1,
        "father":"3",
        "rootFather":"3",
        "rootFatherIndex":"1",
        "description": "if-else语句根据条件的真假执行不同的代码块，是实现条件控制的基本语句。"
    },
    {
        "id": "5",
        "name": "switch",
        "lay":1,
        "father":"3",
        "rootFather":"3",
        "rootFatherIndex":"1",
        "description": "switch语句基于某个表达式的值进行多分支选择执行，适用于多个条件的情况。"
    },
    {
        "id": "6",
        "name": "循环控制",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"2",
        "description": "循环控制包括for、while和do-while，用于多次执行特定代码块，直到满足退出条件。"
    },
    {
        "id": "7",
        "name": "for",
        "lay":1,
        "father":"6",
        "rootFather":"6",
        "rootFatherIndex":"2",
        "description": "for循环提供了一种按照一定次数或特定条件重复执行的结构。"
    },
    {
        "id": "8",
        "name": "while和do-while",
        "lay":1,
        "father":"6",
        "rootFather":"6",
        "rootFatherIndex":"2",
        "description": "while和do-while用于基于条件判断重复执行代码块，不同之处在于判断条件出现的位置。"
    },
    {
        "id": "9",
        "name": "嵌套循环",
        "lay":1,
        "father":"6",
        "rootFather":"6",
        "rootFatherIndex":"2",
        "description": "嵌套循环是在一个循环体内再嵌套另一个或多个循环结构，用于处理复杂的循环逻辑。"
    },
    {
        "id": "10",
        "name": "函数与程序结构",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"3",
        "description": "函数定义与调用是C程序的基本组成部分。递归函数是一种调用自身的函数。变量作用域与存储类型定义了变量的生命周期和可见性。"
    },
    {
        "id": "11",
        "name": "函数定义与调用",
        "lay":1,
        "father":"10",
        "rootFather":"10",
        "rootFatherIndex":"3",
        "description": "函数定义了程序的模块化结构，可以多次调用，提高代码复用性。"
    },
    {
        "id": "12",
        "name": "递归函数",
        "lay":1,
        "father":"10",
        "rootFather":"10",
        "rootFatherIndex":"3",
        "description": "递归函数是一种可以调用自身的函数，常用于解决某些问题，如数学中的阶乘、斐波那契数列等。"
    },
    {
        "id": "13",
        "name": "变量作用域与存储类型",
        "lay":1,
        "father":"10",
        "rootFather":"10",
        "rootFatherIndex":"3",
        "description": "变量的作用域定义了变量在程序中的可见范围。存储类型定义了变量的存储方式和生命周期。"
    },
    {
        "id": "14",
        "name": "数组",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"4",
        "description": "一维数组是相同类型元素的有序集合。字符串是一种特殊的一维字符数组。二维数组是包含行和列的数组。"
    },
    {
        "id": "15",
        "name": "字符串",
        "lay":1,
        "father":"14",
        "rootFather":"14",
        "rootFatherIndex":"4",
        "description": "字符串是由字符组成的数组，用于表示文本数据。"
    },
    {
        "id": "16",
        "name": "一维数组",
        "lay":1,
        "father":"14",
        "rootFather":"14",
        "rootFatherIndex":"4",
        "description": "一维数组是存储同一类型数据元素的线性集合。通过索引访问单个元素，索引从0开始计数。"
    },
    {
        "id": "17",
        "name": "二维数组",
        "lay":1,
        "father":"14",
        "rootFather":"14",
        "rootFatherIndex":"4",
        "description": "二维数组是数组的数组，可用于表示矩阵等二维结构。"
    },
    {
        "id": "18",
        "name": "指针与结构",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"5",
        "description": "指针是用来存储变量地址的特殊数据类型。结构是不同类型数据的集合。"
    },
    {
        "id": "19",
        "name": "指针",
        "lay":1,
        "father":"18",
        "rootFather":"18",
        "rootFatherIndex":"5",
        "description": "指针是一种特殊类型的变量，存储着内存地址，用于间接访问内存中的数据。"
    },
    {
        "id": "20",
        "name": "结构",
        "lay":1,
        "father":"18",
        "rootFather":"18",
        "rootFatherIndex":"5",
        "description": "结构是用户定义的数据类型，可以包含不同类型的数据。"
    },
    {
        "id": "21",
        "name": "链表",
        "lay":1,
        "father":"18",
        "rootFather":"18",
        "rootFatherIndex":"5",
        "description": "链表是一种线性数据结构，由一系列节点组成，每个节点包含数据和指向下一个节点的指针。链表可根据需要动态分配内存空间。"
    },
    {
        "id": "22",
        "name": "文件",
        "lay":0,
        "father":"-1",
        "rootFather":"-1",
        "rootFatherIndex":"6",
        "description": "文件是计算机中存储数据的一种方式，通常表示持久性数据存储。文件可用于存储文本、图像、音频等各种类型的信息。"
    },
    {
        "id": "23",
        "name": "文本文件处理",
        "lay":1,
        "father":"22",
        "rootFather":"22",
        "rootFatherIndex":"6",
        "description": "文本文件处理涉及使用程序读取、写入和操作文本文件的过程。这包括文本文件的读取、写入、查找、删除等操作。"
    },
    {
        "id": "24",
        "name": "二进制文件处理",
        "lay":1,
        "father":"22",
        "rootFather":"22",
        "rootFatherIndex":"6",
        "description": "二进制文件处理涉及使用程序读取、写入和操作二进制文件的过程。与文本文件不同，二进制文件包含以字节形式存储的数据，可能包括图像、音频、视频等任意信息。"
    }
]
