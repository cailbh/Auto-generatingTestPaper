{"remainingRequest":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\src\\components\\NetProblemPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\src\\components\\NetProblemPanel\\index.vue","mtime":1684140962320},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"netPPanel\">\r\n    <div class=\"panelHead\">Correlation View</div>\r\n    <!-- //SupportPanel</div> -->\r\n    <div id=\"netPPanelDiv\" class=\"panelBody\" ref=\"netPPanelDiv\">\r\n      <div id=\"topicLine\" ref=\"topicLine\"></div>\r\n      <div id=\"netPData\" ref=\"netPData\"></div>\r\n      \r\n      <div class=\"netTooltip toolTip\">\r\n        <p>\r\n          <br /><strong class=\"name toolTipAttr\"></strong>\r\n          <br /><strong class=\"text toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr0 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr1 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr2 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr3 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr4 toolTipAttr\"></strong>\r\n        </p>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport tools from \"@/utils/tools.js\";\r\nimport { tree } from 'd3';\r\nimport { SourceNode } from 'source-list-map';\r\n\r\nexport default {\r\n  props: [],\r\n  data() {\r\n    return {\r\n      typeRadio: \"cell State\",\r\n      treeData: null,\r\n      toolsState: '',\r\n      proAttrList: [],\r\n      selectedPro: [],\r\n      selectedCon: '',\r\n      proAttrMaxMinList: [],\r\n      conAttrList: [],\r\n      conAttrMaxMinList: [],\r\n      problemsData: [],\r\n      problemConceptData: [],\r\n      problemRelByConcept: [],\r\n      problemListByConcept: [],\r\n      submissionsData: [],\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      netData: [],\r\n      attrColorList: [],\r\n      calcNetDataRady: 0,\r\n      nameinput: \"Fundamental Graphs\",\r\n      curEntId: \"\",\r\n      insertEntId: \"\",\r\n      EntProData: {},\r\n      insertSourceEntId: \"-1\",\r\n      insertTargetEntId: \"-1\",\r\n      sonList: [],\r\n\r\n      entProMinColor: \"rgb(255,255,255)\",\r\n      entProMaxColor: \"rgb(255, 0, 0)\",\r\n\r\n      entConMinColor: \"rgb(255,255,255)\",\r\n      entConMaxColor: \"rgb(46, 117, 182)\",\r\n\r\n      margin: { top: 5, right: 5, bottom: 5, left: 5 },\r\n    };\r\n  },\r\n  watch: {\r\n    typeRadio(val) {\r\n    },\r\n    netData() {\r\n    },\r\n    studentsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    problemsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    submissionsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    calcNetDataRady(val) {\r\n      if (val == 3) {\r\n        // this.calcNetData();\r\n        // this.getProRel();\r\n      }\r\n    },\r\n    type(val) {\r\n    },\r\n    // selectEnt(val){\r\n    //   console.log(val);\r\n    // },\r\n    curEntId(curEntId) {\r\n    }\r\n  },\r\n  methods: {\r\n\r\n    drawnetPData() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let width = this.$refs.netPData.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.netPData.offsetHeight - margin.top - margin.bottom;\r\n      d3.select(\"#netPData\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#netPData\").append(\"svg\")\r\n        .attr(\"id\", \"netPEnt\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n      let entG = svg.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let sonG = svg.append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", width).attr(\"height\", height)\r\n      //.attr(\"transform\", \"translate(1,320)\");\r\n      // _this.entG = entG;\r\n      // _this.sonG = sonG;\r\n      _this.drawProConNet(entG);\r\n      _this.drawFigureAnnotation(svg);\r\n    },\r\n    drawProConNet(svg) {\r\n      const _this = this;\r\n      let psvg = svg\r\n      let width = psvg.attr(\"width\");\r\n      let height = psvg.attr(\"height\");\r\n      psvg.select(\"#netPG\").remove();\r\n      // let prog = psvg.append(\"g\").attr(\"id\", \"netPG\").attr(\"width\", width).attr(\"height\", height);\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      // this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"proRbackG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"proRarcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"proRrelG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"proRentG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"proRfrontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      let conceptsData = _this.conceptsData;\r\n      let problemsData = _this.problemsData;\r\n      let netData = _this.netData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let proRel = tools.deepClone(_this.problemRelByConcept);\r\n      let proInList = tools.deepClone(_this.problemListByConcept);\r\n      let ent_edgeC = [];\r\n\r\n      let ent_nodeC = [];\r\n      let ent_nodeP = [];\r\n      let ent_edgeP = [];\r\n      let proId = _this.curEntId;\r\n      // if (proId == \"\") { return; }\r\n      // let proList = proInList[proId];\r\n      let proList = proInList;\r\n      console.log(111)\r\n      console.log(proList,proRel);\r\n      let addEgList = {'0_0':[],\"0_1\":[],\"1_0\":[],\"1_1\":[]};\r\n      // let conList = proRel[proId];\r\n      for (let r = 0; r < problemConceptData.length; r++) {\r\n        let curRel = problemConceptData[r];\r\n        let pId = curRel['problem'];\r\n        let cId = curRel['conceptId'];\r\n        let type = curRel['type'];\r\n        if (pId != proId) {\r\n        }            \r\n        if(proId != \"\"){\r\n          if (pId == proId) {\r\n            ent_edgeP.push({\r\n              source: pId,\r\n              target: cId,\r\n              type:type\r\n            })\r\n            if (ent_nodeP.find(function (d) { return d['id'] == pId }) == undefined) {\r\n              ent_nodeP.push({ \"id\": pId, \"type\": \"problem\" })\r\n            }\r\n            if (ent_nodeP.find(function (d) { return d['id'] == cId }) == undefined) {\r\n              ent_nodeP.push({ \"id\": cId, \"type\": \"concept\" })\r\n            }\r\n          }\r\n          else{\r\n            for(let g=0;g<proRel.length;g++){\r\n              let arr = proRel[g];\r\n              \r\n              if ((proList.indexOf(pId) != -1)) {\r\n                if(arr.indexOf(cId)!=-1){\r\n                  let tp = `${g}_${type}`;\r\n                  if(addEgList[tp].indexOf(pId)==-1)\r\n                    addEgList[tp].push(pId);\r\n                    ent_edgeP.push({\r\n                      source: pId,\r\n                      target: cId,\r\n                      type:type\r\n                    })\r\n                  if (ent_nodeP.find(function (d) { return d['id'] == pId }) == undefined) {\r\n                    ent_nodeP.push({ \"id\": pId, \"type\": \"problem\" })\r\n                  }\r\n              }}\r\n            }\r\n          }  \r\n        }\r\n        else {\r\n          // if ((conList.indexOf(cId)!=-1)) {\r\n          if ((proList.indexOf(pId) != -1)) {\r\n            ent_edgeP.push({\r\n              source: pId,\r\n              target: cId,\r\n              type:type\r\n            })\r\n            if (ent_nodeP.find(function (d) { return d['id'] == pId }) == undefined) {\r\n              ent_nodeP.push({ \"id\": pId, \"type\": \"problem\" })\r\n            }\r\n            if (ent_nodeC.find(function (d) { return d['id'] == pId }) == undefined) {\r\n              ent_nodeC.push({ \"id\": pId, \"type\": \"problem\" })\r\n            }\r\n            if (ent_nodeP.find(function (d) { return d['id'] == cId }) == undefined) {\r\n              ent_nodeP.push({ \"id\": cId, \"type\": \"concept\" })\r\n            }\r\n\r\n          }\r\n        }\r\n      }\r\n      if(proId!=''){\r\n        Object.keys(addEgList).forEach(e=>{\r\n          let preId = proId\r\n          addEgList[e].forEach(sId=>{\r\n            addEgList[e].forEach(tId=>{\r\n                {ent_edgeP.push({\r\n                  source: sId,\r\n                  target: tId,\r\n                  type:\"3\"\r\n                })}\r\n                // preId = sId\r\n            })\r\n          })\r\n      })}\r\n      \r\n      console.log(ent_edgeP);\r\n\r\n      let svgWidth = width;\r\n      let svgHeight = height;\r\n\r\n      var forceSimulationP = d3.forceSimulation()\r\n        .force(\"link\", d3.forceLink().id((d) => { return d.id }))\r\n        .force(\"charge\", d3.forceManyBody().strength(parseInt(-ent_nodeP.length-ent_edgeP.length*1.2) * 1.5))\r\n        .force(\"center\", d3.forceCenter(svgWidth / 2, svgHeight / 2));\r\n      forceSimulationP.nodes(ent_nodeP)\r\n        .on(\"tick\");\r\n\r\n      let disLinear = d3.scaleLinear().domain([0, 200]).range([svgWidth / 18, svgWidth / 50]);\r\n      forceSimulationP.force(\"link\")\r\n        .links(ent_edgeP)\r\n        .distance(disLinear(ent_nodeP.length+ent_edgeP.length));\r\n\r\n      // var forceSimulationC = d3.forceSimulation()\r\n      //   .force(\"link\", d3.forceLink().id((d) => { return d.id }))\r\n      //   .force(\"charge\", d3.forceManyBody().strength(parseInt(-ent_nodeC.length)))\r\n      //   .force(\"center\", d3.forceCenter(svgWidth / 2, svgHeight / 2));\r\n      // forceSimulationC.nodes(ent_nodeC)\r\n      //   .on(\"tick\");\r\n      // forceSimulationC.force(\"link\")\r\n      //   .links(ent_edgeC)\r\n      //   .distance(svgWidth/4);\r\n\r\n      let rSize = 10;\r\n      const drags = () => {\r\n\r\n        function dragstarted(event, d) {\r\n          if (!event.active) forceSimulationP.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n        function dragged(event, d) {\r\n          d.fx = event.x;\r\n          d.fy = event.y;\r\n          d.rx = event.x;\r\n          d.ry = event.y;\r\n        }\r\n\r\n        function dragended(event, d) {\r\n          if (!event.active) forceSimulationP.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n          d.rx = event.x;\r\n          d.ry = event.y;\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n\r\n      var circle = frontG.selectAll('circle')\r\n        .data(ent_nodeP)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"id\", function (d) { return d.id })\r\n        .attr(\"class\", function (d) { return d.type })\r\n        .attr(\"cx\", function (d) {\r\n          if (d.type == \"problem\")\r\n            _this.drawEntityProblem(entG, d.x, d.y, `astPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.drawEntityConcept(entG, d.x, d.y, `astCon_${d.id}`);\r\n          return d.x;\r\n        })\r\n        .attr(\"cy\", function (d) { return d.y })\r\n        .attr(\"r\", 5)\r\n        .attr(\"opacity\", \"0\")\r\n        .call(drags())\r\n        .on(\"click\",function(d){\r\n          let ts = d3.select(this);\r\n          let id = ts.attr(\"id\");\r\n          let clasN = ts.attr(\"class\");\r\n          let nametext = '';\r\n          let ent ='';\r\n          if(clasN == 'concept'){\r\n            console.log(id,conceptsData)\r\n            ent = conceptsData.find(function(c){return c['id'] == id});\r\n            nametext = ent.name;\r\n          }\r\n          if(clasN == 'problem'){\r\n            console.log(id,problemsData)\r\n            ent = problemsData.find(function(c){return c['id'] == id});\r\n            nametext = ent.title;\r\n          }\r\n        })\r\n        .on(\"mousemove\",function(d){\r\n          let ts = d3.select(this);\r\n          let id = ts.attr(\"id\");\r\n          let clasN = ts.attr(\"class\");\r\n          let nametext = '';\r\n          let ent ='';\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Rel Count'];\r\n          if(clasN == 'concept'){\r\n            \r\n            _this.$bus.$emit(\"SelectingCon\", id);\r\n\r\n            ent = conceptsData.find(function(c){return c['id'] == id});\r\n            nametext = ent.name;\r\n\r\n          attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Problems'];\r\n          }\r\n          if(clasN == 'problem'){\r\n            \r\n            _this.$bus.$emit(\"SelectingPro\", id);\r\n\r\n            ent = problemsData.find(function(c){return c['id'] == id});\r\n            nametext = ent.title\r\n            attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'conCount'];\r\n            attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Concepts'];\r\n          }\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          if(d.clientX>2100){\r\n            xPosition = d.clientX - 210;\r\n          }\r\n          if(d.clientY>1000){\r\n            yPosition = d.clientY + 100;\r\n          }\r\n          var netTooltip = d3\r\n            .select(\".netTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            netTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${ent[attr[a]]}`)\r\n            if(attrN[a] == 'Pass Rate')\r\n              netTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${ent[attr[a]].toFixed(2)}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              netTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${ent[attr[a]].toFixed(2)}`)\r\n          }\r\n          // 更新浮层内容\r\n          netTooltip.select(\".name\").text(clasN);\r\n          netTooltip.select(\".text\").text(nametext);\r\n          // 移除浮层hidden样式，展示浮层\r\n          netTooltip.classed(\"hidden\", false);\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          \r\n            _this.$bus.$emit(\"SelectingCon\", '');\r\n            _this.$bus.$emit(\"SelectingPro\", '');\r\n\r\n          d3.select(\".netTooltip\").classed(\"hidden\", true);\r\n        })\r\n      // .call(drags());\r\n\r\n      var path = relG.selectAll('.path')\r\n        .data(ent_edgeP)\r\n        .enter()\r\n        .append('path')\r\n        .attr(\"class\", function (d) { return `\"net_${d.type}-s-${d.source.id}-t-${d.target.id}` })\r\n        .attr('d', function (d) {\r\n          let eSource = d.source\r\n          let eTarget = d.target\r\n          let eSourceId = eSource['id']\r\n          let eTargetId = eTarget['id']\r\n          let startA = [eSource.x, eSource.y]\r\n          let endA = [eTarget.x, eTarget.y]\r\n          let path = d3.path()\r\n          path.moveTo(startA[0], startA[1])\r\n          path.quadraticCurveTo(startA[0], startA[1], endA[0], endA[1]);\r\n          return path.toString()\r\n        })\r\n        .style('stroke',function(d){\r\n          if(d.type == 1){\r\n            return 'blue';\r\n          }\r\n          return \"grey\";\r\n        })\r\n        .style(\"stroke-opacity\", \"0.3\")\r\n        .style('stroke-width', function(d){\r\n          if((d.source['id'] == proId)||(d.target['id'] == proId)){\r\n            return 4;\r\n          }\r\n          return 2;\r\n        })\r\n\r\n      forceSimulationP.on(\"tick\", () => {\r\n        circle.attr(\"cx\", (d) => {\r\n          if(d.rx!=undefined){\r\n            d.x = d.rx;\r\n            d.y = d.ry;\r\n          }\r\n          let esx = d.x;\r\n          let esy = d.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n          if (d.id == proId) {\r\n            esx = width / 2;\r\n            esy = height / 2;\r\n            d.x = esx;\r\n            d.y = esy;\r\n            _this.updateEntity(entG, esx, esy, `astPro_${d.id}`)\r\n          }\r\n          else if (d.type == \"problem\") {\r\n            _this.updateEntity(entG, esx, esy, `astPro_${d.id}`)\r\n          }\r\n          //   _this.drawEntityProblem(entG, esx, esy, `entPro_${d.id}`);\r\n          else if (d.type == \"concept\") {\r\n            _this.updateEntity(entG, esx, esy, `astCon_${d.id}`)\r\n          }\r\n          // _this.updateEntity(entG,esx,esy,`astCon_${d.id}`)\r\n\r\n          if (d.x < rSize) return rSize;\r\n          return d.x > svgWidth - rSize ? svgWidth - rSize : d.x\r\n        })\r\n          .attr(\"cy\", (d) => {\r\n            if (d.y < rSize) return rSize\r\n            return d.y > svgHeight - rSize ? svgHeight - rSize : d.y\r\n          });\r\n\r\n        let width_linear = d3.scaleLinear().domain([0, 1]).range([0, 10]);\r\n\r\n        let lineColor_linear = d3.scaleLinear().domain([0, 1]).range([0, 1]);\r\n        let lineCompute_color = d3.interpolate(\"white\", \"rgb(247, 54, 104)\");\r\n        ent_nodeP.forEach(n => {\r\n          if (n['type'] == \"problem\") {\r\n            let sourceId = n['id'];\r\n            ent_nodeP.forEach(en => {\r\n              if (en['type'] == \"problem\") {\r\n                let targetId = en['id'];\r\n                if ((netData[`${sourceId}_${targetId}`] != undefined) && (netData[`${sourceId}_${targetId}`] > 0.1)) {\r\n                  d3.select(`.pros_${sourceId}_prot_${targetId}`).remove();\r\n                  relG.append('path')\r\n                    .attr(\"class\", function (d) { return `pros_${sourceId}_prot_${targetId}` })\r\n                    .attr('d', function (d) {\r\n                      let startA = [n.x, n.y]\r\n                      let endA = [en.x, en.y]\r\n                      let path = d3.path();\r\n                      path.moveTo(startA[0], startA[1]);\r\n                      let conP = _this.getControlPoints(startA, endA);\r\n                      // path.quadraticCurveTo(conP[0], conP[1], endA[0], endA[1]);\r\n                      path.quadraticCurveTo(endA[0], endA[1], endA[0], endA[1]);\r\n                      return path.toString()\r\n                    })\r\n                    .style('stroke', lineCompute_color(lineColor_linear(netData[`${sourceId}_${targetId}`])))\r\n                    .style('fill', \"none\")\r\n                    .style(\"stroke-opacity\", \"0.3\")\r\n                    .style('stroke-width', 3)\r\n                }\r\n              }\r\n            })\r\n          }\r\n        })\r\n\r\n        path.attr(\"d\", (d) => {\r\n          // if (!((d.source.type == 'problem') && (d.target.type == 'problem'))) \r\n          if (!(d.type==3)) \r\n          {\r\n            let eSource = d.source;\r\n            let eTarget = d.target;\r\n            let esx = eSource.x;\r\n            let esy = eSource.y;\r\n            if (esx < rSize) esx = rSize;\r\n            esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n            if (esy < rSize) esy = rSize;\r\n            esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n            let etx = eTarget.x;\r\n            let ety = eTarget.y;\r\n            if (etx < rSize) etx = rSize;\r\n            etx = etx > svgWidth - rSize ? svgWidth - rSize : etx;\r\n            if (ety < rSize) ety = rSize;\r\n            ety = ety > svgHeight - rSize ? svgHeight - rSize : ety;\r\n            let path = d3.path();\r\n            path.moveTo(esx, esy);\r\n            path.quadraticCurveTo(esx, esy, etx, ety);\r\n            return path.toString();\r\n          }\r\n        })\r\n\r\n      });\r\n\r\n    },\r\n\r\n    drawProConNet1(svg) {\r\n      const _this = this;\r\n      let psvg = svg\r\n      let width = psvg.attr(\"width\");\r\n      let height = psvg.attr(\"height\");\r\n      psvg.select(\"#netPG\").remove();\r\n      // let prog = psvg.append(\"g\").attr(\"id\", \"netPG\").attr(\"width\", width).attr(\"height\", height);\r\n      let groups = svg.append(\"g\").attr(\"id\", \"netGroups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      // this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"proRbackG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"proRarcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"proRrelG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"proRentG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"proRfrontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      let proData = _this.problemsData;\r\n      let netData = _this.netData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let proRel = tools.deepClone(_this.problemRelByConcept);\r\n      let proInList = tools.deepClone(_this.problemListByConcept);\r\n      let ent_node = [];\r\n      let ent_edge = [];\r\n\r\n      let proId = _this.curEntId;\r\n      if (proId == \"\") { return; }\r\n      _this.drawEntityProblem(entG, width / 2, height / 2, `netEntPro_${proId}`);\r\n    },\r\n    drawEntityProblem(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let EntProData = tools.deepClone(_this.selectedPro);\r\n      let idn = pId.split(\"_\")[1];\r\n\r\n      let curEnt = EntProData.find(function (p) { return p['id'] == idn; })\r\n\r\n      // let rSize = 10;//rSize_linear(curEnt['conCount']);\r\n\r\n      // let points = _this.calcRegularPolygonPoints(3, 0, 0, rSize);\r\n      // let r = 20; let g = 190; let b = 200;\r\n      // _this.drawPolygon(entG, points, `astpro_${idn}`, '1px', `rgb(${r},${g},${b})`, `rgba(${r},${g},${b},1)`);\r\n\r\n      let attrList = _this.proAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let proMaxMinDR = proAttrMaxMinList[3];\r\n      let proMaxMinDC = proAttrMaxMinList[0];\r\n\r\n      let currentMaxColor = _this.entProMaxColor;\r\n      let currentMinColor = _this.entProMinColor;\r\n\r\n      let importanceColor_linear = d3.scaleLinear().domain([proMaxMinDC[1], proMaxMinDC[0]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n\r\n      let rSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([10, 20]);\r\n\r\n\r\n      let rSize = rSize_linear(curEnt['conCount']);\r\n      if (idn == _this.curEntId) { rSize += 20 }\r\n      let points = _this.calcRegularPolygonPoints(attrLen-1, 0, 0, rSize);\r\n      let pointsB = _this.calcRegularPolygonPoints(attrLen-1, 0, 0, rSize+15);\r\n      let entColor = importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n\r\n      let entPolygonB = _this.drawPolygon(entG, pointsB, `pro_${idn}`, '0px', \"rgb(230,230,230)\", \"rgb(230,230,230)\");\r\n      let entPolygon = _this.drawPolygon(entG, points, `pro_${idn}`, '0px', entColor, entColor);\r\n\r\n      entPolygon.on(\"mouseover\", function (d) {\r\n      })\r\n      // let pointsList = [];\r\n      // const pathAxis = d3.path();\r\n      // pathAxis.moveTo(0, 0);\r\n      // for (let i = 0; i < points.length; i++) {\r\n      //   pathAxis.lineTo(points[i][0], points[i][1]);\r\n      //   pathAxis.moveTo(0, 0);\r\n      //   pathAxis.lineTo(points[i][0], points[i][1]);\r\n      // }\r\n      // pathAxis.lineTo(points[0][0], points[0][1]);\r\n      // let rgbValue = tools.getRgbValue(entColor);\r\n      // let r = parseInt(rgbValue[0]) * 0.2;\r\n      // let g = parseInt(rgbValue[1]) * 0.4;\r\n      // let b = parseInt(rgbValue[2]) * 0.7;\r\n      // _this.drawPathLine(entG, pathAxis, `rgb(${r},${g},${b})`, 0.2, \"10,3\", `proAxis_${idn}`, \"\");\r\n      // -------------------------\r\n      // const path = d3.path();\r\n      // let startP = _this.calcattrPoint(attrLen, 0, proAttrMaxMinList[0], curEnt[attrList[0]], 0, 0, rSize)\r\n      // path.moveTo(startP[0], startP[1]);\r\n      // pointsList.push(startP)\r\n      // let startP2 = _this.calcattrPoint(attrLen, 1, proAttrMaxMinList[1], curEnt[attrList[1]], 0, 0, rSize)\r\n      // path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1]);\r\n      // pointsList.push(startP2)\r\n      // for (let i = 2; i < attrLen; i++) {\r\n      //   let curP = _this.calcattrPoint(attrLen, i, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize)\r\n      //   // path.lineTo(curP[0],curP[1]);\r\n      //   pointsList.push(curP);\r\n      //   path.bezierCurveTo(curP[0], curP[1], curP[0], curP[1], curP[0], curP[1])\r\n      // }\r\n      // path.bezierCurveTo(startP[0], startP[1], startP[0], startP[1], startP[0], startP[1])\r\n\r\n      // pointsList.push(startP)\r\n      // path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1])\r\n      // pointsList.push(startP2)\r\n      // ----------------\r\n      let StartR = 0//Math.PI/4;\r\n      let StepInterR = Math.PI * 2 / 30;\r\n      let StepR = (Math.PI * 2 - StepInterR * attrLen) / (attrLen-1);\r\n      let perR = Math.PI*2/(attrLen-1);\r\n      for (let i = 1; i < attrLen; i++) {\r\n        let h = _this.calcRsize(proAttrMaxMinList[i], curEnt[attrList[i]],StepR);\r\n        var datasetB = { startAngle: StartR + (i-1) * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i) * (StepR + StepInterR) }; //创建一个弧生成器\r\n        var dataset = { startAngle: StartR + (i-1) * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i-1) * (StepR + StepInterR) +h }; //创建一个弧生成器\r\n        var arcPath = d3.arc()\r\n          .innerRadius(rSize)\r\n          .outerRadius(rSize+10);\r\n        var arcPathBack = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h + 2);\r\n        var pathArc = arcPath(dataset);\r\n        var pathArcB = arcPath(datasetB);\r\n        let entColor = _this.attrColorList[i];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n        // _this.drawArc(entG, 0, 0, pathArcB, \"rgb(230, 230, 230)\", \"rgb(230, 230, 230)\", 'typeB', 0, 0);\r\n        // _this.drawArc(entG, 0, 0, pathArc, entColor, entColor, 'type', 0, 0);\r\n      }\r\n\r\n      for (let i = 1; i < attrLen; i++) {\r\n        let points = [];\r\n        let interNP = _this.calcattrPoint(attrLen-1, i-1, [0,1], 1, 0, 0, rSize+20);\r\n        let outerNP = _this.calcattrPoint(attrLen-1, i-1, [0,1], 1, 0, 0, rSize+40);\r\n\r\n        let interP = _this.calcattrPoint(attrLen-1, i, [0,1], 1, 0, 0, rSize+15);\r\n        let outerP = _this.calcattrPoint(attrLen-1, i, [0,1], 1, 0, 0, rSize+30);\r\n\r\n        let cinpx = _this.calclin([0,proAttrMaxMinList[i][0]], [interNP[0],interP[0]],curEnt[attrList[i]]);\r\n        let cinpy = _this.calclin([0,proAttrMaxMinList[i][0]],[interNP[1],interP[1]], curEnt[attrList[i]]);\r\n\r\n        let cotpx = _this.calclin([0,proAttrMaxMinList[i][0]],[outerNP[0],outerP[0]], curEnt[attrList[i]]);\r\n        let cotpy = _this.calclin([0,proAttrMaxMinList[i][0]],[outerNP[1],outerP[1]], curEnt[attrList[i]]);\r\n\r\n        let curP = _this.calcattrPoint(attrLen, i, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize)\r\n        // path.lineTo(curP[0],curP[1]);\r\n        points.push(interNP);\r\n        points.push(outerNP);\r\n        points.push([cotpx,cotpy]);\r\n        points.push([cinpx,cinpy]);\r\n        // if (i != attrLen - 1) {\r\n\r\n        //   points.push(_this.calcattrPoint(attrLen, i + 1, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize));\r\n        // }\r\n        // else {\r\n        //   points.push(_this.calcattrPoint(attrLen, 0, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize));\r\n        // }\r\n        // points.push([0, 0])\r\n        let colorn = _this.attrColorList[i];\r\n        _this.drawPolygon(entG, points, `proAttr_${idn}_${i}`, '1px', colorn, colorn);\r\n      }\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => {\r\n          return d[1];\r\n        })\r\n        .curve(d3.curveCatmullRom)\r\n      // .curve(d3.curveBundle)\r\n      // _this.drawPolygon(entG, pointsList, `proAttr_${idn}`, '1px', `rgb(${r},${g},${b})`, `rgba(${r},${g},${b},0.3)`);\r\n      // .attr(\"opacity\",\"0.3\")\r\n      // _this.drawPathLine(entG, curve_generator(pointsList), \"rgb(200,200,200)\", 2, \"0\", \"\", \"\");\r\n\r\n    },\r\n    getControlPoints(startP, endP) {\r\n      let conP = [];\r\n      // return [(startP[0]+endP[0])/2,(startP[1]+endP[1])/2]\r\n      return [(startP[0]), (endP[1])]\r\n    },\r\n    calcRegularPolygonPoints(num, x, y, r) {\r\n      let arcStep = Math.PI * 2 / num;\r\n      let points = [];\r\n      for (let i = 0; i < num; i++) {\r\n        points.push([x - Math.sin(arcStep * i) * r, y + Math.cos(arcStep * i) * r])\r\n      }\r\n      return points\r\n    },\r\n    calclin(domin,toDomin, value) {\r\n      let point_linear = d3.scaleLinear().domain([domin[0], domin[1]]).range([toDomin[0], toDomin[1]]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n\r\n    calcRsize(domin, value, r) {\r\n      let point_linear = d3.scaleLinear().domain([0, domin[0]]).range([0, r]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n    calcattrPoint(totalNum, index, domin, value, x, y, r) {\r\n      const _this = this;\r\n      let arcStep = Math.PI * 2 / totalNum;\r\n      let rarc = _this.calcRsize(domin, value, r);\r\n      let point = [x - Math.sin(arcStep * index) * rarc, y + Math.cos(arcStep * index) * rarc];\r\n      return point\r\n    },\r\n    drawPolygon(svg, points, idName, strokeWidth, stroke, fill) {\r\n      let polygon = svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"id\", idName)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"stroke\", stroke)\r\n      return polygon;\r\n    },\r\n    drawEntityConcept(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let conData = tools.deepClone(_this.conceptsData);\r\n      let idn = pId.split(\"_\")[1];\r\n      let curEnt = conData.find(function (p) {\r\n        return (p.id).toString() == (idn.toString())\r\n      });\r\n      // let attrList =[{attrName:'difficulty',attrValue:curEnt['difficulty']},];\r\n\r\n      let attrList = _this.conAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let conAttrMaxMinList = _this.conAttrMaxMinList;\r\n      let conMaxMinDR = conAttrMaxMinList[3];\r\n      let conMaxMinDC = conAttrMaxMinList[0];\r\n\r\n      let currentMaxColor = _this.entConMaxColor;\r\n      let currentMinColor = _this.entConMinColor;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, 1]).range([0, 1]);\r\n      let Compute_color = d3.interpolate(\"white\", currentMaxColor);\r\n\r\n      let rSize_linear = d3.scaleLinear().domain([0, conMaxMinDR[0]]).range([5, 10]);\r\n\r\n      let rSize = rSize_linear(curEnt['proCount']);\r\n      // let points = _this.calcRegularPolygonPoints(10, 0, 0, rSize);\r\n      let colorr = Compute_color(curEnt['scoringRate']);\r\n      \r\n      _this.drawCircle(entG, 0, 0, rSize, colorr, 1, \"none\", \"1\", `astcon_${idn}`, `astcon`);\r\n\r\n\r\n      let StartR = 0//Math.PI/4;\r\n      let StepInterR = Math.PI * 2 / 30;\r\n\r\n      let StepR = (Math.PI * 2 - StepInterR * attrLen) / (attrLen-1);\r\n      // --------------------------\r\n      // for (let i = 0; i < attrLen; i++) {\r\n      //   let curP = _this.calcattrPoint(attrLen, i, conAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize);\r\n      //   let h = _this.calcRsize(conAttrMaxMinList[i], curEnt[attrList[i]], rSize)\r\n      //   var dataset = { startAngle: StartR + i * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i + 1) * (StepR + StepInterR) }; //创建一个弧生成器\r\n      //   var arcPath = d3.arc()\r\n      //     .innerRadius(1)\r\n      //     .outerRadius(h);\r\n      //   var arcPathBack = d3.arc()\r\n      //     .innerRadius(1)\r\n      //     .outerRadius(h + 2);\r\n      //   var pathArc = arcPath(dataset);\r\n      //   let entColor = _this.attrColorList[i];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n      //   _this.drawArc(entG, 0, 0, pathArc, entColor, entColor, 'type', 0, 3);\r\n      // }\r\n      // ---------------------------\r\n      \r\n      let perR = Math.PI*2/(attrLen-1);\r\n      for (let i = 1; i < attrLen; i++) {\r\n        let h = _this.calcRsize(conAttrMaxMinList[i], curEnt[attrList[i]],StepR);\r\n        var datasetB = { startAngle: StartR + (i-1) * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i) * (StepR + StepInterR) }; //创建一个弧生成器\r\n        \r\n        var dataset = { startAngle: StartR + (i-1) * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i-1) * (StepR + StepInterR) +h }; //创建一个弧生成器\r\n        var arcPath = d3.arc()\r\n          .innerRadius(rSize)\r\n          .outerRadius(rSize+10);\r\n        var arcPathBack = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h + 2);\r\n        var pathArc = arcPath(dataset);\r\n        var pathArcB = arcPath(datasetB);\r\n        let entColor = _this.attrColorList[i];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n        _this.drawArc(entG, 0, 0, pathArcB, \"rgb(230, 230, 230)\", \"rgb(230, 230, 230)\", 'typeB', 0, 0);\r\n        _this.drawArc(entG, 0, 0, pathArc, entColor, entColor, 'type', 0, 0);\r\n      }\r\n\r\n\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    drawCircle(svg, x, y, r, fill, opacity, stroke, width, className = 'entCircle', idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      let circle = svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr('stroke', stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"fill\", fill)\r\n      return circle;\r\n    },\r\n    drawPathLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n    },\r\n    updateEntity(svg, x, y, pId) {\r\n      const _this = this;\r\n      let entG = svg.select(`#${pId}`);\r\n      let transformd = entG.attr(\"transform\")\r\n      let s = 'scale(1)';\r\n      if (transformd.split(\"scale\").length > 1) {\r\n        s = `scale${transformd.split(\"scale\")[1]}`;\r\n      }\r\n      entG.attr(\"transform\", `translate(${x},${y}) ${s}`);\r\n    },\r\n    getProRelO() {\r\n      const _this = this;\r\n      let conceptsData = _this.conceptsData;\r\n      let problemsData = _this.problemsData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let selectedPro = _this.selectedPro;\r\n      let proRel = {};\r\n      let proLis = {}\r\n      for (let p = 0; p < problemsData.length; p++) {\r\n        let pId = problemsData[p]['id'];\r\n        let proList = [];\r\n        let conList = [];\r\n        for (let c = 0; c < problemConceptData.length; c++) {\r\n          let curPId = problemConceptData[c]['problem'];\r\n          let curCId = problemConceptData[c]['conceptId'];\r\n          if (curPId == pId) {\r\n            conList.push(curCId);\r\n          }\r\n        }\r\n        for (let r = 0; r < conList.length; r++) {\r\n          let cId = conList[r];\r\n          for (let c = 0; c < problemConceptData.length; c++) {\r\n            let curPId = problemConceptData[c]['problem'];\r\n            let curCId = problemConceptData[c]['conceptId'];\r\n            if (curCId == cId) {\r\n              proList.push(curPId);\r\n            }\r\n          }\r\n        }\r\n        proLis[pId] = proList;\r\n        proRel[pId] = conList;\r\n      }\r\n      // for(let c = 0; c<conceptsData.length;c++){\r\n      //   let conceptId = conceptsData[c]['id'];\r\n      //   let proList = []\r\n      //   problemConceptData.forEach(r=>{\r\n      //     let curCId = r['conceptId']\r\n      //     if(curCId == conceptId){\r\n      //       proList.push(r['problem']);\r\n      //     }\r\n      //   })\r\n      //   let listTemp = tools.deepClone(proList);\r\n      //   console.log(conceptId,conceptsData[c]['concept_name'],proList)\r\n      //   for(let p = 0; p<proList.length;p++){\r\n      //     proLis[proList[p]] = listTemp;\r\n      //   }\r\n      // }\r\n      // let proId = _this.curEntId;\r\n      // for (let r = 0; r < ProRel.length; r++) {\r\n      //   let curRel = ProRel[r];\r\n      //   let s = curRel['source'];\r\n      //   let t = curRel['target'];\r\n      //   if((s == proId)||(t==proId)){\r\n      //       if (proLis.find(function (d) { return d['id'] == s }) == undefined) {\r\n      //           proLis.push({\"id\":s});\r\n      //       }\r\n      //       if (proLis.find(function (d) { return d['id'] == s }) == undefined) {\r\n      //           proLis.push({\"id\":t});\r\n      //       }\r\n      // }\r\n      // }\r\n      _this.problemRelByConcept = proRel;\r\n      _this.problemListByConcept = proLis;\r\n    },\r\n    getProRelO1() {\r\n      const _this = this;\r\n      let conceptsData = _this.conceptsData;\r\n      let problemsData = _this.problemsData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let selectedPro = _this.selectedPro;\r\n      let proRel = {};\r\n      let proLis = []\r\n      for (let p = 0; p < selectedPro.length; p++) {\r\n        let pId = selectedPro[p]['id'];\r\n        proLis.push(pId);\r\n      }\r\n      console.log(proLis)\r\n      _this.problemRelByConcept = proRel;\r\n      _this.problemListByConcept = proLis;\r\n    },\r\n    getProRel() {\r\n      const _this = this;\r\n      let conceptsData = _this.conceptsData;\r\n      let problemsData = _this.problemsData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let selectedPro = _this.selectedPro;\r\n      let proRel =[[],[]];\r\n      let proLis = []\r\n      for (let p = 0; p < selectedPro.length; p++) {\r\n        let pId = selectedPro[p]['id'];\r\n        proLis.push(pId);\r\n      }\r\n      let pId = _this.curEntId;\r\n      for (let c = 0; c < problemConceptData.length; c++) {\r\n        let curPId = problemConceptData[c]['problem'];\r\n        let curCId = problemConceptData[c]['conceptId'];\r\n        let type = problemConceptData[c]['type'];\r\n        \r\n        if (curPId == pId) {\r\n          proRel[type].push(curCId);\r\n        }\r\n      }\r\n      _this.problemRelByConcept = proRel;\r\n      _this.problemListByConcept = proLis;\r\n    },\r\n    \r\n    drawLine(svg, path, stroke, width, stroke_dasharray = \"0\", opacity, idName, className, fill = 'none') {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .attr('fill', fill)\r\n      return line;\r\n    },\r\n\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      return txt;\r\n    },\r\n    \r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n      return rect;\r\n    },\r\n    drawFigureAnnotation(svg) {\r\n      const _this = this;\r\n      let frontG = svg;\r\n\r\n      let stuMaxColor = _this.stuMaxColor;\r\n      let stuMinColor = _this.stuMinColor;\r\n\r\n      let len = 6;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let Rsize_linear = d3.scaleLinear().domain([0, len]).range([1, 6]);\r\n      let Compute_color = d3.interpolate(stuMinColor, stuMaxColor);\r\n\r\n      let textsr = _this.drawTxt(frontG, 16, 15, \"AcceptedRate\", \"black\", 10, `FigNet_con`);\r\n      let textat = _this.drawTxt(frontG, 16, 35, \"Attempts\", \"black\", 10, `FigNet_con`);\r\n      let textbs = _this.drawTxt(frontG, 16, 55, \"Connection nums\", \"black\", 10, `FigNet_con`);\r\n\r\n      let texttm = _this.drawTxt(frontG, 136, 15, \"Concepts\", \"black\", 10, `FigNet_con`);\r\n      let textgn = _this.drawTxt(frontG, 136, 35, \"problems\", \"black\", 10, `FigNet_con`);\r\n      let prex = 0;\r\n      let prerx = 0;\r\n      let colorar = _this.attrColorList[0];\r\n      let colorat = _this.attrColorList[1];\r\n      let colorcn = _this.attrColorList[2];\r\n\r\n      let colortm = _this.entProMaxColor;\r\n      let colorgn = _this.entConMaxColor;\r\n\r\n      _this.drawRect(frontG, 1, 2, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectColoraB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 5, 10, 12, 0, colorar, \"1\", \"grey\", \"1\", `FigNet_conRectColora`, 'FigNet');\r\n\r\n      _this.drawRect(frontG, 1, 22, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectColorB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 25, 10, 12, 0, colorat, \"1\", \"grey\", \"1\", `FigNet_conRectColor`, 'FigNet');\r\n\r\n      _this.drawRect(frontG, 1, 42, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 45, 10, 12, 0, colorcn, \"1\", \"grey\", \"1\", `FigNet_conRect`, 'FigNet');\r\n\r\n      _this.drawCircle(frontG, 120, 12, 7, colorgn, 1, \"grey\", \"1\", 'FigNet', `FigNet_conColorc`);\r\n\r\n      let points = _this.calcRegularPolygonPoints(3, 120, 31, 9);\r\n\r\n      let entPolygon = _this.drawPolygon(frontG, points, `FigNet_Proc`, '1px', \"grey\", colortm);\r\n\r\n      let path1 = d3.path();\r\n      // let points0 = [[10, 20], [10, 24], [14, 20], [10, 24], [14, 28], [10, 24], [10, 28], [10, 24], [40, 24], [40, 24], [36, 20], [40, 24], [36, 28], [40, 24], [40, 20], [40, 28]]\r\n      // let points1 = [[10, 50], [10, 54], [14, 50], [10, 54], [14, 58], [10, 54], [10, 58], [10, 54], [40, 54], [40, 54], [36, 50], [40, 54], [36, 58], [40, 54], [40, 50], [40, 58]]\r\n      // let points2 = [[10, 80], [10, 84], [14, 80], [10, 84], [14, 88], [10, 84], [10, 88], [10, 84], [40, 84], [40, 84], [36, 80], [40, 84], [36, 88], [40, 84], [40, 80], [40, 88]]\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n      // .curve(d3.curveBasisClosed)\r\n      // _this.drawLine(frontG, curve_generator(points0), \"black\", 1, '0', '1', `lineat`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      // _this.drawLine(frontG, curve_generator(points1), \"black\", 1, '0', '1', `line2`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      // _this.drawLine(frontG, curve_generator(points2), \"black\", 1, '0', '1', `line3`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      for (let i = 0; i < len * 3; i++) {\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        // let color = Compute_color(Color_linear(i));\r\n        // let circle = _this.drawCircle(frontG, 15 + prex, 23, Rsize_linear(i), color, 1, \"red\", \"1\", 'FigNet', `FigNet_conColor${i}`);\r\n        // prex += Rsize_linear(i) * 2 + 4;\r\n        // prerx += i * 4 + 2;\r\n      }\r\n\r\n    },\r\n\r\n    updata() {\r\n      const _this = this;\r\n      _this.getProRel();\r\n      _this.drawnetPData();\r\n      \r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    const _this = this;\r\n    this.$nextTick(() => {\r\n      // _this.calcNetData();\r\n      _this.updata();\r\n      d3.select(\".netTooltip\").classed(\"hidden\", true);\r\n      _this.drawnetPData();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this\r\n    this.$bus.$on('Domin', (val) => {\r\n      _this.proAttrList = val[0];\r\n      _this.proAttrMaxMinList = val[1];\r\n      _this.conAttrList = val[2];\r\n      _this.conAttrMaxMinList = val[3];\r\n    });\r\n\r\n    this.$bus.$on('attrColorList', (val) => {\r\n      _this.attrColorList = val;\r\n    });\r\n    // _this.tableData.find(function (d) { return d['key'] == 'name' })['value'] = 'Computer Network';\r\n    this.$bus.$on('selectEntData', (val) => {\r\n      _this.curEntId = val[0];\r\n      _this.EntProData = val[1];\r\n      _this.updata();\r\n    });\r\n\r\n    this.$bus.$on('selectedPro', (val) => {\r\n      _this.selectedPro = val;\r\n      _this.updata();\r\n\r\n    });\r\n\r\n    this.$bus.$on('selectCon', (val) => {\r\n      _this.selectedCon = val;\r\n      _this.updata();\r\n    });\r\n\r\n    this.$bus.$on('allProblem', (val) => {\r\n      _this.problemsData = val;\r\n    });\r\n    this.$bus.$on('Submission', (val) => {\r\n      _this.submissionsData = val;\r\n    });\r\n    this.$bus.$on('Student', (val) => {\r\n      _this.studentsData = val;\r\n    });\r\n    this.$bus.$on('Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n    });\r\n    this.$bus.$on('ConceptTree', (val) => {\r\n      _this.conceptsData = val;\r\n    });\r\n    this.$bus.$on('netData', (val) => {\r\n      _this.netData = val;\r\n    });\r\n  },\r\n  // beforeDestroy() {\r\n  //   clearInterval(this.moveTimer);\r\n  // },\r\n} \r\n</script>\r\n\r\n<style>\r\n@import './index.css';\r\n</style>\r\n"],"sourceRoot":"src/components/NetProblemPanel"}]}