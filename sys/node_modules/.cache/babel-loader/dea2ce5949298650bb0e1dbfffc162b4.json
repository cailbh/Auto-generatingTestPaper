{"remainingRequest":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\src\\components\\NetProblemPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\src\\components\\NetProblemPanel\\index.vue","mtime":1701765108881},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\auto-generatingTestPaper\\Auto-generatingTestPaper\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"netPPanel\">\r\n    <div class=\"panelHead\">Correlation View</div>\r\n    <!-- //SupportPanel</div> -->\r\n    <div id=\"netPPanelDiv\" class=\"panelBody\" ref=\"netPPanelDiv\">\r\n      <div id=\"topicLine\" ref=\"topicLine\"></div>\r\n      <div id=\"netPData\" ref=\"netPData\"></div>\r\n\r\n      <div class=\"netTooltip toolTip\">\r\n        <p>\r\n          <br /><strong class=\"name toolTipAttr\"></strong>\r\n          <br /><strong class=\"text toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr0 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr1 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr2 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr3 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr4 toolTipAttr\"></strong>\r\n        </p>\r\n      </div>\r\n\r\n    </div>\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\nimport tools from \"@/utils/tools.js\";\r\nimport drawTools from \"@/utils/drawingTools.js\";\r\nimport { tree } from 'd3';\r\nimport { SourceNode } from 'source-list-map';\r\n\r\nexport default {\r\n  props: [],\r\n  data() {\r\n    return {\r\n      problemsData:[],\r\n      proIdList:[],\r\n      relByPro:[],\r\n      conByPro:[],\r\n      typeRadio: \"cell State\",\r\n      treeData: null,\r\n      allRelationships: '',\r\n      toolsState: '',\r\n      proAttrList: [],\r\n      selectedPro: [],\r\n      selectedCon: '',\r\n      proAttrMaxMinList: [],\r\n      conAttrList: [],\r\n      conAttrMaxMinList: [],\r\n      problemsData: [],\r\n      problemConceptData: [],\r\n      problemRelByConcept: [],\r\n      problemListByConcept: [],\r\n      submissionsData: [],\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      netData: [],\r\n      attrColorList: [],\r\n      calcNetDataRady: 0,\r\n      nameinput: \"Fundamental Graphs\",\r\n      curEntId: \"\",\r\n      insertEntId: \"\",\r\n      EntProData: {},\r\n      insertSourceEntId: \"-1\",\r\n      insertTargetEntId: \"-1\",\r\n      sonList: [],\r\n\r\n      entProMinColor: \"rgb(255,255,255)\",\r\n      entProMaxColor: \"rgb(255, 0, 0)\",\r\n\r\n      entConMinColor: \"rgb(255,255,255)\",\r\n      entConMaxColor: \"rgb(46, 117, 182)\",\r\n\r\n      margin: { top: 5, right: 5, bottom: 5, left: 5 },\r\n    };\r\n  },\r\n  watch: {\r\n    typeRadio(val) {\r\n    },\r\n    netData() {\r\n    },\r\n    studentsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    problemsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    submissionsData() {\r\n      this.calcNetDataRady++;\r\n    },\r\n    calcNetDataRady(val) {\r\n      if (val == 3) {\r\n        // this.calcNetData();\r\n        // this.getProRel();\r\n      }\r\n    },\r\n    type(val) {\r\n    },\r\n    // selectEnt(val){\r\n    //   console.log(val);\r\n    // },\r\n    curEntId(curEntId) {\r\n    }\r\n  },\r\n  methods: {\r\n    getAllReltionship() {\r\n      const _this = this;\r\n      let data = [];\r\n      this.$http\r\n        .get(\"/api/problem/allRelationship\", { params: {} }, {})\r\n        // .get(\"/api/test\", {}, {})\r\n        .then((response) => {\r\n          console.log(\"allRelationship\", response.body);\r\n          _this.allRelationships = response.body;\r\n          // _this.drawnetPData();\r\n        });\r\n    },\r\n    drawnetPData() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let width = this.$refs.netPData.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.netPData.offsetHeight - margin.top - margin.bottom;\r\n      d3.select(\"#netPData\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#netPData\").append(\"svg\")\r\n        .attr(\"id\", \"netPEnt\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n      let entG = svg.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let sonG = svg.append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", width).attr(\"height\", height)\r\n      //.attr(\"transform\", \"translate(1,320)\");\r\n      // _this.entG = entG;\r\n      // _this.sonG = sonG;\r\n      _this.drawProConNet(entG);\r\n      _this.drawFigureAnnotation(svg);\r\n    },\r\n    drawProConNet(svg) {\r\n      const _this = this;\r\n      let psvg = svg\r\n      let width = psvg.attr(\"width\");\r\n      let height = psvg.attr(\"height\");\r\n      psvg.select(\"#netPG\").remove();\r\n      // let prog = psvg.append(\"g\").attr(\"id\", \"netPG\").attr(\"width\", width).attr(\"height\", height);\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      // this.groupsSvg = groups;\r\n \r\n      let backG = groups.append(\"g\").attr(\"id\", \"proRbackG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"proRarcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"proRrelG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"proRentG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"proRfrontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      let problemConceptData = _this.relByPro;\r\n      let conByPro = _this.conByPro;\r\n      let proRel = tools.deepClone(_this.problemRelByConcept);\r\n      let proInList = tools.deepClone(_this.problemListByConcept);\r\n      let ent_edgeC = [];\r\n\r\n      let ent_nodeC = [];\r\n      let ent_nodeP = [];\r\n      let ent_edgeP = [];\r\n      let proId = _this.curEntId;\r\n      // if (proId == \"\") { return; }\r\n      // let proList = proInList[proId];\r\n      let proList = proInList;\r\n      console.log(111)\r\n      console.log(proList, proRel,problemConceptData);\r\n      let addEgList = { '0_0': [], \"0_1\": [], \"1_0\": [], \"1_1\": [] };\r\n      // let conList = proRel[proId];\r\n      let jagep= {};\r\n      let jagec= {};\r\n      for (let r = 0; r < problemConceptData.length; r++) {\r\n        let curRel = problemConceptData[r];\r\n        let pId = curRel['problemId'];\r\n        let cId = curRel['conceptId'];\r\n        // let type = curRel['type'];\r\n        if(jagec[cId]!=1)\r\n          ent_nodeP.push({ \"id\": cId, \"type\": \"concept\" });\r\n        if(jagep[pId]!=1)\r\n          ent_nodeP.push({ \"id\": pId, \"type\": \"problem\" });\r\n        jagep[pId]=1;\r\n        jagec[cId]=1;\r\n        ent_edgeP.push({\r\n          source: pId,\r\n          target: cId,\r\n          // type:type\r\n        })\r\n      }\r\n      let svgWidth = width;\r\n      let svgHeight = height;\r\n\r\n      var forceSimulationP = d3.forceSimulation()\r\n        .force(\"link\", d3.forceLink().id((d) => { return d.id }))\r\n        .force(\"charge\", d3.forceManyBody().strength(-10))\r\n        .force(\"center\", d3.forceCenter(svgWidth / 2, svgHeight / 2));\r\n      forceSimulationP.nodes(ent_nodeP)\r\n        .on(\"tick\");\r\n\r\n      let disLinear = d3.scaleLinear().domain([0, 200]).range([svgWidth / 5, svgWidth / 50]);\r\n      forceSimulationP.force(\"link\")\r\n        .links(ent_edgeP)\r\n        .distance(disLinear(ent_nodeP.length + ent_edgeP.length));\r\n\r\n      let rSize = 10;\r\n      const drags = () => {\r\n\r\n        function dragstarted(event, d) {\r\n          if (!event.active) forceSimulationP.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n        function dragged(event, d) {\r\n          d.fx = event.x;\r\n          d.fy = event.y;\r\n          // d.rx = event.x;\r\n          // d.ry = event.y;\r\n        }\r\n\r\n        function dragended(event, d) {\r\n          if (!event.active) forceSimulationP.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n          // d.rx = event.x;\r\n          // d.ry = event.y;\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n\r\n      var circle = frontG.selectAll('circle')\r\n        .data(ent_nodeP)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"id\", function (d) { return `asPro_${d.id}` })\r\n        .attr(\"class\", function (d) {\r\n          return `c_${d.type}`\r\n        })\r\n        .attr(\"cx\", function (d) {\r\n          if (d.type == \"problem\")\r\n            _this.drawEntityProblem(entG, d.x, d.y, `astPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.drawEntityConcept(entG, d.x, d.y, `astPro_${d.id}`);\r\n          return d.x;\r\n        })\r\n        .attr(\"cy\", function (d) { return d.y })\r\n        .attr(\"r\", 25)\r\n        .attr(\"opacity\", \"0\")\r\n        .call(drags())\r\n        .on(\"click\", function (d) {\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n          // 更新浮层内容\r\n          // netTooltip.select(\".name\").text(clasN);\r\n          // netTooltip.select(\".text\").text(nametext);\r\n          // // 移除浮层hidden样式，展示浮层\r\n          // netTooltip.classed(\"hidden\", false);\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n\r\n          _this.$bus.$emit(\"SelectingCon\", '');\r\n          _this.$bus.$emit(\"SelectingPro\", '');\r\n\r\n          d3.select(\".netTooltip\").classed(\"hidden\", true);\r\n        })\r\n      // .call(drags());\r\n\r\n      var path = relG.selectAll('.path')\r\n        .data(ent_edgeP)\r\n        .enter()\r\n        .append('path')\r\n        .attr(\"class\", function (d) { return `\"net_${d.type}-s-${d.source.id}-t-${d.target.id}` })\r\n        .attr('d', function (d) {\r\n          let eSource = d.source\r\n          let eTarget = d.target\r\n          let eSourceId = eSource['id']\r\n          let eTargetId = eTarget['id']\r\n          let startA = [eSource.x, eSource.y]\r\n          let endA = [eTarget.x, eTarget.y]\r\n          let path = d3.path()\r\n          path.moveTo(startA[0], startA[1])\r\n          path.quadraticCurveTo(startA[0], startA[1], endA[0], endA[1]);\r\n          return path.toString()\r\n        })\r\n        .style('stroke', function (d) {\r\n          if (d.type == 1) {\r\n            return 'blue';\r\n          }\r\n          return \"grey\";\r\n        })\r\n        .style(\"stroke-opacity\", \"0.3\")\r\n        .style('stroke-width', function (d) {\r\n          if ((d.source['id'] == proId) || (d.target['id'] == proId)) {\r\n            return 4;\r\n          }\r\n          return 2;\r\n        })\r\n\r\n      forceSimulationP.on(\"tick\", () => {\r\n        circle.attr(\"cx\", (d) => {\r\n          if (d.rx != undefined) {\r\n            d.x = d.rx;\r\n            d.y = d.ry;\r\n          }\r\n          let esx = d.x;\r\n          let esy = d.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n\r\n          _this.updateEntity(entG,esx,esy,`astPro_${d.id}`)\r\n\r\n          if (d.x < rSize) return rSize;\r\n          return d.x > svgWidth - rSize ? svgWidth - rSize : d.x\r\n        })\r\n          .attr(\"cy\", (d) => {\r\n            if (d.y < rSize) return rSize\r\n            return d.y > svgHeight - rSize ? svgHeight - rSize : d.y\r\n          });\r\n\r\n        path.attr(\"d\", (d) => {\r\n          // if (!((d.source.type == 'problem') && (d.target.type == 'problem'))) \r\n          if (!(d.type == 3)) {\r\n            let eSource = d.source;\r\n            let eTarget = d.target;\r\n            let esx = eSource.x;\r\n            let esy = eSource.y;\r\n            if (esx < rSize) esx = rSize;\r\n            esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n            if (esy < rSize) esy = rSize;\r\n            esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n            let etx = eTarget.x;\r\n            let ety = eTarget.y;\r\n            if (etx < rSize) etx = rSize;\r\n            etx = etx > svgWidth - rSize ? svgWidth - rSize : etx;\r\n            if (ety < rSize) ety = rSize;\r\n            ety = ety > svgHeight - rSize ? svgHeight - rSize : ety;\r\n            let path = d3.path();\r\n            path.moveTo(esx, esy);\r\n            path.quadraticCurveTo(esx, esy, etx, ety);\r\n            return path.toString();\r\n          }\r\n        })\r\n\r\n      });\r\n\r\n    },\r\n\r\n    drawEntityProblem(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      drawTools.drawCircle(entG, 0, 0, 10, \"red\", 1, 1, 1, 'entCircle', pId) \r\n    },\r\n    drawEntityConcept(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let points = drawTools.calcRegularPolygonPoints(3, 0, 0, 12);\r\n      drawTools.drawPolygon(entG, points, `FigNet_Proc`, '1px', \"grey\", 'blue');\r\n    },\r\n    getControlPoints(startP, endP) {\r\n      let conP = [];\r\n      // return [(startP[0]+endP[0])/2,(startP[1]+endP[1])/2]\r\n      return [(startP[0]), (endP[1])]\r\n    },\r\n    calclin(domin, toDomin, value) {\r\n      let point_linear = d3.scaleLinear().domain([domin[0], domin[1]]).range([toDomin[0], toDomin[1]]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n\r\n    calcRsize(domin, value, r) {\r\n      let point_linear = d3.scaleLinear().domain([0, domin[0]]).range([0, r]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n    calcattrPoint(totalNum, index, domin, value, x, y, r) {\r\n      const _this = this;\r\n      let arcStep = Math.PI * 2 / totalNum;\r\n      let rarc = _this.calcRsize(domin, value, r);\r\n      let point = [x - Math.sin(arcStep * index) * rarc, y + Math.cos(arcStep * index) * rarc];\r\n      return point\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    drawPathLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n    },\r\n    updateEntity(svg, x, y, pId) {\r\n      const _this = this;\r\n      console.log(pId)\r\n      let entG = svg.select(`#${pId}`);\r\n      let transformd = entG.attr(\"transform\")\r\n      let s = 'scale(1)';\r\n      if (transformd.split(\"scale\").length > 1) {\r\n        s = `scale${transformd.split(\"scale\")[1]}`;\r\n      }\r\n      entG.attr(\"transform\", `translate(${x},${y}) ${s}`);\r\n    },\r\n    getProRel() {\r\n      const _this = this;\r\n      let problemsIdList = _this.proIdList;\r\n      let conByPor = [];\r\n      let problemConceptData = _this.allRelationships;\r\n      // let pId = _this.curEntId;\r\n      let proRel = []\r\n      for (let c = 0; c < problemConceptData.length; c++) {\r\n        let curPId = problemConceptData[c]['problemId'];\r\n        let curCId = problemConceptData[c]['conceptId'];\r\n        if (problemsIdList.indexOf(curPId)>0) {\r\n          proRel.push(problemConceptData[c]);\r\n          conByPor.push(curCId)\r\n        }\r\n      }\r\n      console.log(\"rels\",proRel);\r\n      _this.relByPro = proRel;\r\n      _this.conByPro = proRel;\r\n    },\r\n\r\n    drawLine(svg, path, stroke, width, stroke_dasharray = \"0\", opacity, idName, className, fill = 'none') {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .attr('fill', fill)\r\n      return line;\r\n    },\r\n\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      return txt;\r\n    },\r\n\r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n      return rect;\r\n    },\r\n    drawFigureAnnotation(svg) {\r\n      const _this = this;\r\n      let frontG = svg;\r\n\r\n      let stuMaxColor = _this.stuMaxColor;\r\n      let stuMinColor = _this.stuMinColor;\r\n\r\n      let len = 6;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let Rsize_linear = d3.scaleLinear().domain([0, len]).range([1, 6]);\r\n      let Compute_color = d3.interpolate(stuMinColor, stuMaxColor);\r\n\r\n      let textsr = _this.drawTxt(frontG, 16, 15, \"AcceptedRate\", \"black\", 10, `FigNet_con`);\r\n      let textat = _this.drawTxt(frontG, 16, 35, \"Attempts\", \"black\", 10, `FigNet_con`);\r\n      let textbs = _this.drawTxt(frontG, 16, 55, \"Connection nums\", \"black\", 10, `FigNet_con`);\r\n\r\n      let texttm = _this.drawTxt(frontG, 136, 15, \"Concepts\", \"black\", 10, `FigNet_con`);\r\n      let textgn = _this.drawTxt(frontG, 136, 35, \"problems\", \"black\", 10, `FigNet_con`);\r\n      let prex = 0;\r\n      let prerx = 0;\r\n      let colorar = _this.attrColorList[0];\r\n      let colorat = _this.attrColorList[1];\r\n      let colorcn = _this.attrColorList[2];\r\n\r\n      let colortm = _this.entProMaxColor;\r\n      let colorgn = _this.entConMaxColor;\r\n\r\n      _this.drawRect(frontG, 1, 2, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectColoraB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 5, 10, 12, 0, colorar, \"1\", \"grey\", \"1\", `FigNet_conRectColora`, 'FigNet');\r\n\r\n      _this.drawRect(frontG, 1, 22, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectColorB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 25, 10, 12, 0, colorat, \"1\", \"grey\", \"1\", `FigNet_conRectColor`, 'FigNet');\r\n\r\n      _this.drawRect(frontG, 1, 42, 10, 15, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigNet_conRectB`, 'FigNet');\r\n      _this.drawRect(frontG, 1, 45, 10, 12, 0, colorcn, \"1\", \"grey\", \"1\", `FigNet_conRect`, 'FigNet');\r\n\r\n      drawTools.drawCircle(frontG, 120, 12, 7, colorgn, 1, \"grey\", \"1\", 'FigNet', `FigNet_conColorc`);\r\n\r\n      let points = drawTools.calcRegularPolygonPoints(3, 120, 31, 9);\r\n\r\n      let entPolygon = drawTools.drawPolygon(frontG, points, `FigNet_Proc`, '1px', \"grey\", colortm);\r\n\r\n      let path1 = d3.path();\r\n      // let points0 = [[10, 20], [10, 24], [14, 20], [10, 24], [14, 28], [10, 24], [10, 28], [10, 24], [40, 24], [40, 24], [36, 20], [40, 24], [36, 28], [40, 24], [40, 20], [40, 28]]\r\n      // let points1 = [[10, 50], [10, 54], [14, 50], [10, 54], [14, 58], [10, 54], [10, 58], [10, 54], [40, 54], [40, 54], [36, 50], [40, 54], [36, 58], [40, 54], [40, 50], [40, 58]]\r\n      // let points2 = [[10, 80], [10, 84], [14, 80], [10, 84], [14, 88], [10, 84], [10, 88], [10, 84], [40, 84], [40, 84], [36, 80], [40, 84], [36, 88], [40, 84], [40, 80], [40, 88]]\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n      // .curve(d3.curveBasisClosed)\r\n      // _this.drawLine(frontG, curve_generator(points0), \"black\", 1, '0', '1', `lineat`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      // _this.drawLine(frontG, curve_generator(points1), \"black\", 1, '0', '1', `line2`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      // _this.drawLine(frontG, curve_generator(points2), \"black\", 1, '0', '1', `line3`, 'FigNet_line1', \"rgb(230,230,230)\");\r\n      for (let i = 0; i < len * 3; i++) {\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        // let color = Compute_color(Color_linear(i));\r\n        // let circle = _this.drawCircle(frontG, 15 + prex, 23, Rsize_linear(i), color, 1, \"red\", \"1\", 'FigNet', `FigNet_conColor${i}`);\r\n        // prex += Rsize_linear(i) * 2 + 4;\r\n        // prerx += i * 4 + 2;\r\n      }\r\n\r\n    },\r\n\r\n    updata() {\r\n      const _this = this;\r\n      _this.getProRel();\r\n      // _this.getAllReltionship();\r\n      _this.drawnetPData();\r\n\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    const _this = this;\r\n    this.$nextTick(() => {\r\n      // _this.calcNetData();\r\n      \r\n      // _this.getAllReltionship();\r\n      _this.updata();\r\n      d3.select(\".netTooltip\").classed(\"hidden\", true);\r\n      _this.drawnetPData();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    \r\n    _this.getAllReltionship();\r\n    this.$bus.$on('proIdList', (val) => {\r\n      _this.proIdList = val;\r\n      _this.updata();\r\n    });\r\n    \r\n    this.$bus.$on('allProblem', (val) => {\r\n     _this.problemsData = val;\r\n    });\r\n  },\r\n  // beforeDestroy() {\r\n  //   clearInterval(this.moveTimer);\r\n  // },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"],"sourceRoot":"src/components/NetProblemPanel"}]}