{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\ProblemContentPanel\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\ProblemContentPanel\\index.vue","mtime":1687500933798},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA,OAAA,KAAA,EAAA,MAAA,IAAA;AACA,OAAA,KAAA,MAAA,kBAAA;AAEA,eAAA;AACA,EAAA,KAAA,EAAA,EADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,YADA;AAEA,MAAA,QAAA,EAAA,IAFA;AAGA,MAAA,UAAA,EAAA,EAHA;AAIA,MAAA,YAAA,EAAA,EAJA;AAKA,MAAA,kBAAA,EAAA,EALA;AAMA,MAAA,WAAA,EAAA,EANA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,SAAA,EAAA,oBAdA;AAeA;AACA,MAAA,iBAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAhBA;AAiBA,MAAA,SAAA,EAAA,CAAA;AACA,QAAA,GAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA,EAGA;AACA,QAAA,GAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAHA,EAMA;AACA,QAAA,GAAA,EAAA,UADA;AAEA,QAAA,KAAA,EAAA;AAFA,OANA,EASA;AACA,QAAA,GAAA,EAAA,SADA;AAEA,QAAA,KAAA,EAAA;AAFA,OATA,EAYA;AACA,QAAA,GAAA,EAAA,QADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAZA,EAeA;AACA,QAAA,GAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAfA,EAkBA;AACA,QAAA,GAAA,EAAA,MADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAlBA,EAqBA;AACA,QAAA,GAAA,EAAA,KADA;AAEA,QAAA,KAAA,EAAA;AAFA,OArBA,CAjBA;AA4CA,MAAA,gBAAA,EAAA,CA5CA;AA6CA,MAAA,gBAAA,EAAA,CA7CA;AA8CA,MAAA,gBAAA,EAAA,EA9CA;AA+CA,MAAA,QAAA,EAAA,EA/CA;AAgDA,MAAA,WAAA,EAAA,EAhDA;AAiDA,MAAA,iBAAA,EAAA,IAjDA;AAkDA,MAAA,iBAAA,EAAA,IAlDA;AAmDA,MAAA,OAAA,EAAA,EAnDA;AAoDA,MAAA,cAAA,EAAA,CApDA;AAqDA,MAAA,cAAA,EAAA,CArDA;AAsDA,MAAA,aAAA,EAAA,CAtDA;AAuDA,MAAA,aAAA,EAAA,CAvDA;AAwDA,MAAA,YAAA,EAAA,CAxDA;AAyDA,MAAA,gBAAA,EAAA,CAzDA;AA0DA,MAAA,kBAAA,EAAA,oBA1DA;AA2DA,MAAA,kBAAA,EAAA,mBA3DA;AA4DA,MAAA,aAAA,EAAA,IA5DA;AA6DA,MAAA,sBAAA,EAAA,IA7DA;AA8DA,MAAA,uBAAA,EAAA,IA9DA;AA+DA,MAAA,qBAAA,EAAA,IA/DA;AAgEA,MAAA,yBAAA,EAAA,IAhEA;AAiEA,MAAA,gBAAA,EAAA,EAjEA;AAkEA,MAAA,oBAAA,EAAA,EAlEA;AAmEA,MAAA,mBAAA,EAAA,EAnEA;AAoEA,MAAA,QAAA,EAAA,EApEA;AAqEA,MAAA,YAAA,EAAA,EArEA;AAsEA,MAAA,aAAA,EAAA,GAtEA;AAuEA,MAAA,YAAA,EAAA,EAvEA;AAwEA,MAAA,eAAA,EAAA,EAxEA;AAyEA,MAAA,cAAA,EAAA,IAzEA;AA0EA,MAAA,eAAA,EAAA,IA1EA;AA2EA,MAAA,aAAA,EAAA,IA3EA;AA4EA,MAAA,YAAA,EAAA,IA5EA;AA6EA,MAAA,gBAAA,EAAA,CA7EA;AA8EA,MAAA,eAAA,EAAA,CA9EA;AA+EA,MAAA,eAAA,EAAA,EA/EA;AAgFA,MAAA,eAAA,EAAA,GAhFA;AAiFA,MAAA,MAAA,EAAA;AAAA,QAAA,GAAA,EAAA,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,MAAA,EAAA,CAAA;AAAA,QAAA,IAAA,EAAA;AAAA,OAjFA;AAkFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,MAAA,EAAA,CACA,mBADA,EAEA,kBAFA,EAGA,mBAHA,EAIA,mBAJA,EAKA,oBALA,EAMA,oBANA,EAOA,mBAPA,EAQA,mBARA,CAnGA;AA6GA,MAAA,WAAA,EAAA,CACA,SADA,EAEA,SAFA,EAGA,SAHA,EAIA,SAJA,EAKA,SALA,EAMA,SANA,EAOA,SAPA,EAQA,SARA,EASA,SATA,EAUA,SAVA,EAWA,SAXA,EAYA,gBAZA,EAaA,SAbA,EAcA,kBAdA,EAeA,kBAfA;AA7GA,KAAA;AA+HA,GAlIA;AAmIA,EAAA,KAAA,EAAA;AACA,IAAA,SADA,qBACA,GADA,EACA,CACA,CAFA;AAGA,IAAA,iBAHA,6BAGA,GAHA,EAGA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,GAAA;AACA,UAAA,GAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,MAAA,EAAA,CAAA,MAAA,CAAA,8BAAA,EACA,IADA,CACA,OADA,EACA,gDAAA,GAAA,GAAA,YAAA,GAAA,GAAA,GAAA,eADA;AAEA,KARA;AASA,IAAA,IATA,gBASA,GATA,EASA,CACA,CAVA;AAWA;AACA;AACA;AACA,IAAA,QAdA,oBAcA,SAdA,EAcA,CACA;AAfA,GAnIA;AAoJA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,sBACA,CADA,EACA,CACA;AACA,KAHA;AAMA,IAAA,SAAA,EAAA,yBAAA;AAAA,UAAA,GAAA,QAAA,GAAA;AAAA,UAAA,QAAA,QAAA,QAAA;AACA,aAAA,aAAA;AACA,KARA;AASA,IAAA,eAAA,EAAA,gCAAA;AAAA,UAAA,GAAA,SAAA,GAAA;AAAA,UAAA,QAAA,SAAA,QAAA;AACA,aAAA,aAAA;AACA,KAXA;AAYA,IAAA,UAAA,EAAA,2BAAA;AAAA,UAAA,GAAA,SAAA,GAAA;AAAA,UAAA,MAAA,SAAA,MAAA;AAAA,UAAA,QAAA,SAAA,QAAA;AAAA,UAAA,WAAA,SAAA,WAAA;AACA,aAAA,aAAA;AACA,KAdA;AAeA,IAAA,gBAAA,EAAA,iCAAA;AAAA,UAAA,GAAA,SAAA,GAAA;AAAA,UAAA,MAAA,SAAA,MAAA;AAAA,UAAA,QAAA,SAAA,QAAA;AAAA,UAAA,WAAA,SAAA,WAAA;AACA,aAAA,aAAA;AACA,KAjBA;AAkBA,IAAA,YAlBA,0BAkBA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,MAAA,GAAA,KAAA,CAAA,MAAA;AACA,UAAA,KAAA,GAAA,KAAA,KAAA,CAAA,QAAA,CAAA,WAAA,GAAA,MAAA,CAAA,IAAA,GAAA,MAAA,CAAA,KAAA;AACA,UAAA,MAAA,GAAA,KAAA,KAAA,CAAA,QAAA,CAAA,YAAA,GAAA,MAAA,CAAA,GAAA,GAAA,MAAA,CAAA,MAAA;AACA,MAAA,EAAA,CAAA,MAAA,CAAA,WAAA,EAAA,MAAA,CAAA,KAAA,EAAA,MAAA;AACA,UAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,WAAA,EAAA,MAAA,CAAA,KAAA,EACA,IADA,CACA,IADA,EACA,SADA,EAEA,IAFA,CAEA,OAFA,EAEA,KAFA,EAGA,IAHA,CAGA,QAHA,EAGA,MAHA,CAAA;AAKA,UAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA;AACA,UAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA;AACA,UAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA;AAEA,UAAA,GAAA,GAAA,CAAA;AACA,UAAA,GAAA,GAAA,CAAA;AACA,UAAA,GAAA,GAAA,CAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA,EAAA,KAAA,EAAA,IAAA,CAAA,QAAA,EAAA,MAAA,CAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA,EAAA,KAAA,EAAA,IAAA,CAAA,QAAA,EAAA,MAAA,EAAA,IAAA,CAAA,WAAA,EAAA,kBAAA,CAAA;AACA,UAAA,SAAA,GAAA,EAAA,CAAA,IAAA,GACA,WADA,CACA,CAAA,CAAA,EAAA,GAAA,CADA,EAEA,EAFA,CAEA,OAFA,EAEA,UAAA,CAAA,EAAA;AACA,QAAA,GAAA,GAAA,CAAA,CAAA,SAAA,CAAA,CAAA;AACA,QAAA,GAAA,GAAA,CAAA,CAAA,SAAA,CAAA,CAAA;AACA,QAAA,GAAA,GAAA,CAAA,CAAA,SAAA,CAAA,CAAA;AACA,OANA,EAOA,EAPA,CAOA,MAPA,EAOA,UAAA,CAAA,EAAA;AACA,QAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA,CADA,CACA;;AACA,QAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA,GAAA,CAAA,CAAA,SAAA,CAAA,CAAA,GAAA,GAAA;AACA,QAAA,gBAAA,GAAA,KAAA,CAAA,gBAAA,CAHA,CAGA;;AACA,QAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,eAAA,gBAAA,GAAA,GAAA,GAAA,gBAAA,GAAA,UAAA,GAAA,gBAAA,GAAA,GAAA;AACA,OAZA,EAaA,EAbA,CAaA,KAbA,EAaA,UAAA,CAAA,EAAA;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,QAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,QAAA,IAAA,CAAA,IAAA,CAAA,WAAA,EAAA,eAAA,gBAAA,GAAA,GAAA,GAAA,gBAAA,GAAA,UAAA,GAAA,gBAAA,GAAA,GAAA;AACA,OAlBA,CAAA;AAoBA,MAAA,GAAA,CAAA,IAAA,CAAA,SAAA,EAxCA,CAyCA;AACA;;AACA,MAAA,KAAA,CAAA,mBAAA,CAAA,IAAA,EA3CA,CA4CA;;AACA,KA/DA;AAgEA,IAAA,WAhEA,uBAgEA,IAhEA,EAgEA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,IAAA,CAAA;AACA,UAAA,CAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA,EAAA,CAAA,GAAA,CAAA,EAAA,IAAA,CAAA,QAAA,EAAA,CAAA,GAAA,CAAA,EAAA,IAAA,CAAA,WAAA,EAAA,kBAAA,CAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,sBAAA;AACA,UAAA,aAAA,GAAA,KAAA,CAAA,uBAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,IAAA;AACA,MAAA,KAAA,CAAA,YAAA,GAAA,CAAA,CAVA,CAWA;;AACA,MAAA,GAAA,CAAA,SAAA,GAAA,MAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,IADA,EACA,CADA,EAEA,IAFA,CAEA,IAFA,EAEA,CAAA,GAAA,CAFA,EAGA,IAHA,CAGA,IAHA,EAGA,CAHA,EAIA,IAJA,CAIA,IAJA,EAIA,CAAA,GAAA,CAJA,EAKA,IALA,CAKA,QALA,EAKA,kBALA,EAMA,IANA,CAMA,cANA,EAMA,KANA;AAQA,UAAA,gBAAA,GAAA,CAAA;AACA,UAAA,SAAA,GAAA,KAAA,CAAA,GAAA,CAAA,UAAA,IAAA;AAAA,eAAA,IAAA,CAAA,EAAA;AAAA,OAAA,EAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,UAAA,UAAA,GAAA,SAAA,GAAA,CAAA,GAAA,CAAA,GAAA,SAAA,GAAA,CAAA,GAAA,CAAA;AACA,UAAA,QAAA,GAAA,SAAA,GAAA,CAAA,GAAA,KAAA,CAAA,MAAA,GAAA,SAAA,GAAA,CAAA,GAAA,KAAA,CAAA,MAAA,GAAA,CAAA;AAEA,UAAA,MAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,EAAA,MAAA,CAAA,UAAA,EAAA,QAAA,GAAA,UAAA,GAAA,CAAA,CAAA,CA1BA,CA2BA;;AA3BA,iCA4BA,CA5BA;AA6BA,YAAA,MAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AAAA,SAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,QAAA,gBAAA,IAAA,OAAA,GAAA,IAAA;AAhCA;;AA4BA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AAAA,cAAA,CAAA;AAKA;;AACA,MAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,UAAA,QAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,gBAAA,GAAA,EAAA,CApCA,CAqCA;;AACA,UAAA,IAAA,GAAA,CAAA;;AAtCA,mCAuCA,EAvCA;AAwCA,YAAA,MAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,MAAA,CAAA,EAAA,CAAA,CAAA,IAAA,CAAA;AAAA,SAAA,CAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,SAAA,CAAA,MAAA,CAAA;;AACA,YAAA,gBAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,UAAA,gBAAA,CAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,QAAA,IAAA,IAAA,CAAA,IAAA,CAAA;AACA,UAAA,IAAA,CAAA,OAAA,CAAA,GAAA,gBAAA,CAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,SAHA,MAIA;AAAA,UAAA,IAAA,CAAA,OAAA,CAAA,GAAA,IAAA;AAAA;;AACA,QAAA,gBAAA,CAAA,IAAA,CAAA,IAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,OAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,SAAA,GAAA,OAAA,GAAA,IAAA;AACA,YAAA,EAAA,GAAA,IAAA;AACA,YAAA,IAAA,GAAA,IAAA,GAAA,QAAA,CAAA,SAAA,CAAA;AACA,YAAA,eAAA,GAAA,MAAA,CAAA,WAAA,CAAA,CAAA,YAAA,CAAA;AACA,YAAA,QAAA,GAAA,aAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CAAA;;AACA,YAAA,EAAA,IAAA,CAAA,EAAA;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,cAAA,MAAA,CAAA,IAAA,CAAA,EAAA,iBAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA;AACA;;AACA,YAAA,MAAA,CAAA,EAAA,CAAA,CAAA,IAAA,KAAA,IAAA,CAAA,IAAA,CAAA,EAAA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,GAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,aAAA,MAAA,CAAA,IAAA,CAAA,EAAA,SAAA,EAAA,QAAA,EAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,CAAA;AAAA,aACA,KAAA,CAAA,QAAA,CAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,GAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,aAAA,MAAA,CAAA,IAAA,CAAA,EAAA,SAAA,EAAA,QAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EA3DA,CA2DA;;AACA,QAAA,IAAA,GAAA,IAAA;AA5DA;;AAuCA,WAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAA,CAAA,MAAA,EAAA,EAAA,EAAA,EAAA;AAAA,eAAA,EAAA;AAsBA;;AACA,MAAA,gBAAA,CAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,QAAA,IAAA,IAAA;AACA,MAAA,KAAA,CAAA,mBAAA,GAAA,gBAAA;AACA,KAhIA;AAiIA,IAAA,aAjIA,yBAiIA,IAjIA,EAiIA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA,MAAA,IAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,sBAAA;AACA,UAAA,aAAA,GAAA,KAAA,CAAA,uBAAA;AACA,UAAA,kBAAA,GAAA,IAAA,CAAA,eAAA,CAAA;AACA,UAAA,MAAA,GAAA,KAAA,CAAA,yBAAA;AACA,UAAA,CAAA,GAAA,MAAA,CAAA,kBAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,IAAA;AACA,UAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,OAAA,IAAA,CAAA;AACA,UAAA,CAAA,GAAA,GAAA;AACA,UAAA,eAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,YAAA,CAAA;AACA,UAAA,cAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,WAAA,CAAA;AACA,MAAA,GAAA,CAAA,SAAA,GAAA,MAAA;;AAEA,UAAA,IAAA,CAAA,MAAA,CAAA,IAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;AACA,QAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,mBAAA;AACA,OAHA,MAIA;AAAA,YAoGA,UApGA;AAAA,YAsGA,SAtGA;AAAA,YAmHA,OAnHA;AAAA,YAqHA,OArHA;AAAA,YAwHA,OAxHA;AAAA,YAyIA,SAzIA;AAAA,YAiJA,OAjJA;AAAA,YAoJA,OApJA;AAAA,YAuJA,UAvJA;AAAA,YA0JA,OA1JA;AAAA,YA6JA,UA7JA;AAAA,YAmKA,UAnKA;;AAAA;AAEA,cAAA,EAAA,GAAA,CAAA;AACA,cAAA,aAAA,GAAA,KAAA,CAAA,aAAA;AACA,cAAA,oBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,cAAA,wBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACA,cAAA,WAAA,GAAA,aAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CAAA;;AACA,UAAA,KAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,CAAA,EAAA,WAAA,EAAA,eAAA,IAAA,CAAA,IAAA,CAAA;;AAEA,UAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,EAAA,CAAA,IAAA,EAAA;AAGA,UAAA,IAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,cAAA,MAAA,GAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA;AACA,cAAA,SAAA,GAAA,CAAA;AAAA,kBAAA,IAAA,CAAA,IAAA,CAAA;AAAA,oBAAA,IAAA,CAAA,MAAA,CAAA;AAAA,iBAAA,CAAA;AAAA,iBAAA;AAAA,WAAA,CAAA;;AAhBA,uCAiBA,IAjBA;AAkBA,gBAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,qBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,IAAA,CAAA,eAAA,CAAA,CAAA,IAAA,CAAA;AAAA,aAAA,CAAA;AACA,YAAA,MAAA,CAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA,YAAA,SAAA,CAAA,IAAA,CAAA;AAAA,oBAAA,KAAA,CAAA,IAAA,CAAA;AAAA,sBAAA,KAAA,CAAA,MAAA,CAAA;AAAA,mBAAA,CAAA;AAAA,mBAAA;AAAA,aAAA;AApBA;;AAiBA,eAAA,IAAA,IAAA,IAAA,IAAA,CAAA,eAAA,CAAA,EAAA;AAAA,mBAAA,IAAA;AAIA;;AACA,cAAA,MAAA,GAAA,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,mBAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAFA;;AAGA,cAAA,MAAA,GAAA,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,mBAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAFA;;AAGA,UAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,UAAA,SAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,cAAA,QAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,MAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,gBAAA,IAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,gBAAA,MAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA;AACA,gBAAA,IAAA,GAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA;;AACA,gBAAA,SAAA,GAAA,IAAA,GAAA,MAAA;;AAEA,gBAAA,MAAA,GAAA,oBAAA,CAAA,MAAA,GAAA,SAAA,GAAA,EAAA,CAAA;AACA,gBAAA,IAAA,GAAA,oBAAA,CAAA,IAAA,GAAA,SAAA,GAAA,EAAA,CAAA;AAEA,gBAAA,OAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,QAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,KAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,MAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA;AACA,gBAAA,IAAA,GAAA,oBAAA,CAAA,CAAA,IAAA,GAAA,MAAA,IAAA,CAAA,CAAA;AACA,YAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,IAAA;AACA,YAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,GAAA;AACA,gBAAA,EAAA,GAAA,CAAA;;AACA,gBAAA,MAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,kBAAA,CAAA,GAAA,CAAA,EAAA;AACA,gBAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA;AACA,gBAAA,MAAA,GAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,IAAA,CAAA;AACA,gBAAA,EAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,OAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA,gBAAA,QAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,wBAAA,CAAA,SAAA,CAAA,GAAA,CAAA;AACA;AACA;;AACA,gBAAA,OAAA,GAAA,MAAA,IAAA,oBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;AACA,gBAAA,KAAA,GAAA,IAAA,IAAA,oBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;AACA,gBAAA,OAAA,GAAA,OAAA,IAAA,oBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;AACA,gBAAA,KAAA,GAAA,KAAA,IAAA,oBAAA,CAAA,MAAA,GAAA,SAAA,CAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;AACA,gBAAA,IAAA,GAAA,CAAA,GAAA,CAAA,EAAA,IAAA,GAAA,CAAA,GAAA,CAAA;AACA,gBAAA,OAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,OAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,gBAAA,KAAA,GAAA,CAAA,GAAA,CAAA,EAAA,KAAA,GAAA,CAAA,GAAA,CAAA;AACA,gBAAA,OAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,OAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,gBAAA,KAAA,GAAA,CAAA,GAAA,CAAA,EAAA,KAAA,GAAA,CAAA,GAAA,CAAA;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA,OAAA,EAAA,QAAA,CAAA,EAAA,CAAA,OAAA,EAAA,OAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,CAAA,KAAA,EAAA,MAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AACA;;AACA,UAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AACA,cAAA,eAAA,GAAA,EAAA,CAAA,IAAA,GACA,CADA,CACA,UAAA,CAAA;AAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;AAAA,WADA,EAEA,CAFA,CAEA,UAAA,CAAA,EAAA;AACA,gBAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,gBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EACA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAPA,EAQA,KARA,CAQA,EAAA,CAAA,UARA,CAAA;;AASA,UAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,eAAA,CAAA,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA;;AAGA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,KAAA,CAAA,UAAA,CAAA,GAAA,EAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,WAAA,EAAA,eAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,WArFA,CAuFA;AACA;AACA;;;AACA,cAAA,SAAA,GAAA;AACA,iBAAA,SADA;AAEA,iBAAA,SAFA;AAGA,iBAAA;AAHA,WAAA;AAKA,cAAA,QAAA,GAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,aAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AACA,cAAA,mBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA;AAEA,UAAA,UAAA,GAAA,CApGA,EAoGA;;AAEA,UAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAtGA;;AAwGA,cAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,iBAAA,IAAA,CAAA,IAAA,QAAA,EAAA;AACA,kBAAA,KAAA,GAAA,SAAA,CAAA,CAAA,CAAA;AACA,kBAAA,YAAA,GAAA,QAAA,CAAA,CAAA,CAAA;AACA,kBAAA,gBAAA,GAAA,CAAA;;AACA,mBAAA,IAAA,CAAA,IAAA,YAAA,EAAA;AACA,gBAAA,gBAAA,IAAA,KAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA,kBAAA,UAAA,GAAA,mBAAA,CAAA,gBAAA,CAAA,CAPA,CAOA;;;AAEA,kBAAA,SAAA,GAAA,UAAA,GAAA,IAAA,UAAA;AACA,cAAA,OAAA,GAAA;AAAA,gBAAA,UAAA,EAAA,UAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,eAVA,EAUA;;AACA,cAAA,UAAA,GAAA,SAAA;AACA,cAAA,OAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CAAA,GAAA,EADA,EAEA,WAFA,CAEA,CAAA,GAAA,EAFA,CAZA;AAeA,cAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAfA;;AAgBA,cAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,WAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,CAAA;AACA;;AACA,gBAAA,QAAA,GAAA,CAAA;AACA,gBAAA,MAAA,GAAA,CAAA;;AApBA,yCAqBA,CArBA;AAsBA,kBAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,OAAA,CAAA,CAAA,CAAA;AAAA,eAAA,CAAA;AACA,kBAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,cAAA,QAAA,IAAA,MAAA;AACA,cAAA,MAAA,IAAA,CAAA;AAzBA;;AAqBA,iBAAA,IAAA,CAAA,IAAA,OAAA,EAAA;AAAA,qBAAA,CAAA;AAKA;;AACA,gBAAA,OAAA,GAAA,IAAA,CAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA;AACA,gBAAA,aAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,GAAA,CAAA,GAAA,OAAA,GAAA,MAAA,CAAA,CAAA;AACA,gBAAA,kBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;AAEA,gBAAA,mBAAA,GAAA,EAAA,CAAA,WAAA,GAAA,MAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,gBAAA,oBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,OAAA,EAAA,WAAA,CAAA;AACA,YAAA,SAAA,GAAA,CAjCA,EAiCA;;AAjCA,yCAkCA,EAlCA;AAmCA,kBAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,OAAA,CAAA,EAAA,CAAA;AAAA,eAAA,CAAA;AACA,kBAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,kBAAA,QAAA,GAAA,aAAA,CAAA,MAAA,CAAA,CAtCA,CAsCA;;AAEA,kBAAA,SAAA,GAAA,SAAA,GAAA,QAAA;AACA,cAAA,OAAA,GAAA;AAAA,gBAAA,UAAA,EAAA,SAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,eAzCA,EAyCA;;AACA,cAAA,SAAA,GAAA,SAAA;AACA,kBAAA,KAAA,GAAA,MAAA;AACA,cAAA,OAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CAAA,GAAA,EADA,EAEA,WAFA,CAEA,CAAA,GAAA,kBAAA,CAAA,MAAA,CAFA,CA5CA;AA+CA,cAAA,UAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CADA,EAEA,WAFA,CAEA,CAAA,GAAA,EAFA,CA/CA;AAkDA,cAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAlDA;AAoDA,cAAA,SAAA,GAAA,SAAA,GAAA,OAAA;AACA,cAAA,UAAA,GAAA;AAAA,gBAAA,UAAA,EAAA,SAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,eArDA,EAqDA;;AAEA,kBAAA,WAAA,GAAA,EAAA,CAAA,IAAA,EAAA;AACA,cAAA,WAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA;AAEA,cAAA,SAAA,IAAA,OAAA;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,UAAA,CA3DA;AA4DA,kBAAA,YAAA,GAAA,aAAA,CAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,OAAA,CAAA,EAAA,CAAA,EAAA,GAAA;;AACA,kBAAA,EAAA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,KAAA,EAAA,SAAA,EAAA,SAAA;AACA;AAhEA;;AAkCA,iBAAA,IAAA,EAAA,IAAA,OAAA,EAAA;AAAA,qBAAA,EAAA;AA+BA;AAEA;AA3KA;AA8KA;;AACA,UAAA,IAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,MAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,IAAA,EAAA,MAAA;AACA,KAzUA;AA0UA,IAAA,UA1UA,sBA0UA,IA1UA,EA0UA;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,IAAA,GAAA,EAAA,CAAA,MAAA,CAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,UAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA;AACA,MAAA,IAAA,CAAA,MAAA;AACA,UAAA,GAAA,GAAA,EAAA,CAAA,MAAA,CAAA,UAAA,EAAA,MAAA,CAAA,GAAA,EAAA,IAAA,CAAA,IAAA,EAAA,MAAA,EAAA,IAAA,CAAA,OAAA,EAAA,CAAA,EAAA,IAAA,CAAA,QAAA,EAAA,CAAA,CAAA;AACA,UAAA,YAAA,GAAA,KAAA,CAAA,sBAAA;AACA,UAAA,aAAA,GAAA,KAAA,CAAA,uBAAA;AACA,UAAA,kBAAA,GAAA,IAAA,CAAA,eAAA,CAAA;AACA,UAAA,MAAA,GAAA,KAAA,CAAA,yBAAA;AACA,UAAA,CAAA,GAAA,MAAA,CAAA,kBAAA,CAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,IAAA;AACA,UAAA,CAAA,GAAA,GAAA,CAAA,IAAA,CAAA,OAAA,IAAA,CAAA;AACA,UAAA,CAAA,GAAA,GAAA;AACA,UAAA,eAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,YAAA,CAAA;AACA,UAAA,cAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,WAAA,CAAA;AACA,MAAA,GAAA,CAAA,SAAA,GAAA,MAAA;;AAEA,UAAA,IAAA,CAAA,MAAA,CAAA,IAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,KAAA,CAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;;AACA,QAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,mBAAA,EAAA,IAAA,EAAA,mBAAA;AACA,OAHA,MAIA;AAAA,YA8HA,UA9HA;AAAA,YAgIA,SAhIA;AAAA,YAsJA,OAtJA;AAAA,YAwJA,OAxJA;AAAA,YA2JA,OA3JA;AAAA,YA6KA,SA7KA;AAAA,YAqLA,OArLA;AAAA,YAwLA,OAxLA;AAAA,YA2LA,UA3LA;AAAA,YA8LA,OA9LA;AAAA,YAiMA,UAjMA;AAAA,YAuMA,UAvMA;;AAAA;AAEA,cAAA,EAAA,GAAA,CAAA;AACA,cAAA,aAAA,GAAA,KAAA,CAAA,aAAA;AACA,cAAA,oBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,cAAA,wBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,KAAA,CAAA,YAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AACA,cAAA,WAAA,GAAA,aAAA,CAAA,YAAA,CAAA,eAAA,CAAA,CAAA;;AACA,UAAA,KAAA,CAAA,UAAA,CAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,WAAA,EAAA,IAAA,EAAA,CAAA,EAAA,WAAA,EAAA,eAAA,IAAA,CAAA,IAAA,CAAA;;AAEA,UAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,UAAA,CAAA,IAAA,CAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,EAAA,CAAA,IAAA,EAAA;AAGA,UAAA,IAAA,CAAA,MAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA;AACA,cAAA,MAAA,GAAA,CAAA,IAAA,CAAA;AACA,cAAA,SAAA,GAAA,CAAA;AAAA,kBAAA,IAAA,CAAA,IAAA,CAAA;AAAA,oBAAA,IAAA,CAAA,MAAA,CAAA;AAAA,iBAAA,CAAA;AAAA,iBAAA;AAAA,WAAA,CAAA;AACA,cAAA,KAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,cAAA,gBAAA,GAAA,CAAA,IAAA,CAAA,eAAA,CAAA,CAAA;;AAlBA;AAoBA,gBAAA,cAAA,GAAA,gBAAA,CAAA,CAAA,CAAA;AACA,YAAA,gBAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA;;AAtBA,2CAuBA,IAvBA;AAwBA,kBAAA,KAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,cAAA,CAAA,IAAA,CAAA;AAAA,eAAA,CAAA;;AACA,kBAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,EAAA;AACA,gBAAA,gBAAA,CAAA,IAAA,CAAA,KAAA,CAAA,eAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,KAAA;AACA,gBAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACA,gBAAA,SAAA,CAAA,IAAA,CAAA;AAAA,wBAAA,KAAA,CAAA,IAAA,CAAA;AAAA,0BAAA,KAAA,CAAA,MAAA,CAAA;AAAA,uBAAA,CAAA;AAAA,uBAAA;AAAA,iBAAA;AACA;AA/BA;;AAuBA,iBAAA,IAAA,IAAA,IAAA,cAAA,EAAA;AAAA,sBAAA,IAAA;AASA,aAhCA,CAiCA;AACA;AACA;;AAnCA;;AAmBA,iBAAA,gBAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA;AAiBA;;AAEA,cAAA,MAAA,GAAA,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,mBAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAFA;;AAGA,cAAA,MAAA,GAAA,SAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,mBAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAFA;;AAGA,UAAA,OAAA,CAAA,GAAA,CAAA,MAAA;AACA,UAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,UAAA,SAAA,GAAA,SAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,cAAA,QAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA,CAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,MAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,MAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,CAAA,CAAA,CAAA,eAAA,CAAA,CAFA,CAGA;;AACA,gBAAA,MAAA,GAAA,KAAA,CAAA,YAAA,CAAA,MAAA,CAAA;AACA,gBAAA,IAAA,GAAA,MAAA,GAAA,UAAA,CALA,CAMA;AACA;;AACA,gBAAA,KAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,gBAAA,KAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA;AACA,gBAAA,MAAA,GAAA,KAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,oBAAA,CAAA,MAAA,CAAA,GAAA,KAAA;AACA,gBAAA,IAAA,GAAA,KAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,oBAAA,CAAA,IAAA,CAAA,GAAA,KAAA,CAXA,CAYA;;AACA,gBAAA,IAAA,GAAA,CAAA,MAAA,GAAA,IAAA,IAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA,GAAA,wBAAA,CAAA,UAAA,CAAA;AACA,YAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,IAAA;AACA,YAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,wBAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAjBA,CAkBA;;AACA,gBAAA,CAAA,GAAA,CAAA,EAAA;AACA,cAAA,QAAA,CAAA,MAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA;AACA,cAAA,IAAA,IAAA,CAAA,GAAA,CAAA;AACA,cAAA,MAAA,GAAA,IAAA,GAAA,CAAA,IAAA,GAAA,CAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,IAAA,IAAA,CAAA,IAAA,CAAA;AACA,cAAA,IAAA,IAAA,CAAA,GAAA,CAAA;AACA,cAAA,EAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA,CAAA,QAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA;;AACA,YAAA,OAAA,CAAA,GAAA,CAAA,EAAA,EA1BA,CA2BA;;AACA,YAAA,QAAA,CAAA,IAAA,CAAA,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA;;AACA,UAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,CAAA;AACA,cAAA,eAAA,GAAA,EAAA,CAAA,IAAA,GACA,CADA,CACA,UAAA,CAAA;AAAA,mBAAA,CAAA,CAAA,CAAA,CAAA;AAAA,WADA,EAEA,CAFA,CAEA,UAAA,CAAA,EAAA;AACA,gBAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,gBAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EACA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA;AACA,mBAAA,CAAA,CAAA,CAAA,CAAA;AACA,WAPA,EAQA,KARA,CAQA,EAAA,CAAA,WARA,CAAA,CA9EA,CAuFA;AACA;;AACA,UAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,eAAA,CAAA,QAAA,CAAA,EAAA,OAAA,EAAA,CAAA,EAAA,GAAA,EAAA,UAAA,EAAA,UAAA;;AAGA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,KAAA,CAAA,UAAA,CAAA,GAAA,EAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,WAAA,EAAA,eAAA,SAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,WA9FA,CAgGA;AACA;AACA;;;AACA,cAAA,SAAA,GAAA;AACA,iBAAA,SADA;AAEA,iBAAA,SAFA;AAGA,iBAAA;AAHA,WAAA;AAKA,cAAA,QAAA,GAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,cAAA,QAAA,GAAA,IAAA,CAAA,WAAA,CAAA,CAAA,aAAA,CAAA;AACA,cAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA;AACA,cAAA,IAAA,GAAA,CAAA,OAAA,CAAA;;AA3GA;AA6GA,gBAAA,UAAA,GAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA;;AACA,gBAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA,6CACA,GADA;AAEA,oBAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,yBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAAA,GAAA,CAAA;AAAA,iBAAA,CAAA;AACA,oBAAA,WAAA,GAAA,OAAA,CAAA,WAAA,CAAA,CAAA,aAAA,CAAA;;AAEA,qBAAA,IAAA,GAAA,IAAA,WAAA,EAAA;AACA,sBAAA,cAAA,GAAA,WAAA,CAAA,GAAA,CAAA;;AACA,uBAAA,IAAA,GAAA,IAAA,cAAA,EAAA;AACA,oBAAA,QAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,cAAA,CAAA,GAAA,CAAA;AACA;AACA;;AACA,gBAAA,IAAA,CAAA,IAAA,CAAA,OAAA,CAAA,KAAA,CAAA;AAXA;;AACA,mBAAA,IAAA,GAAA,IAAA,UAAA,EAAA;AAAA,wBAAA,GAAA;AAWA;AACA;AA5HA;;AA4GA,iBAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AAAA;AAiBA;;AACA,UAAA,UAAA,GAAA,CA9HA,EA8HA;;AAEA,UAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAhIA;;AAkIA,cAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,YAAA,GAAA,CAAA;;AACA,iBAAA,IAAA,EAAA,IAAA,QAAA,EAAA;AACA,kBAAA,YAAA,GAAA,QAAA,CAAA,EAAA,CAAA;;AACA,mBAAA,IAAA,CAAA,IAAA,YAAA,EAAA;AACA,gBAAA,YAAA,IAAA,KAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA;;AACA,gBAAA,mBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,YAAA,CAAA,EAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA;;AACA,iBAAA,IAAA,CAAA,IAAA,QAAA,EAAA;AACA,kBAAA,KAAA,GAAA,SAAA,CAAA,CAAA,CAAA;AACA,kBAAA,aAAA,GAAA,QAAA,CAAA,CAAA,CAAA;AACA,kBAAA,gBAAA,GAAA,CAAA;;AACA,mBAAA,IAAA,EAAA,IAAA,aAAA,EAAA;AACA,gBAAA,gBAAA,IAAA,KAAA,CAAA,YAAA,CAAA,aAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,YAAA,CAAA,aAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AACA,kBAAA,gBAAA,GAAA,CAAA,EACA;AAAA,oBAAA,WAAA,GAAA,mBAAA,CAAA,gBAAA,CAAA,CAAA,CAAA;;;AAEA,oBAAA,SAAA,GAAA,UAAA,GAAA,IAAA,WAAA;AACA,gBAAA,OAAA,GAAA;AAAA,kBAAA,UAAA,EAAA,UAAA;AAAA,kBAAA,QAAA,EAAA;AAAA,iBAHA,EAGA;;AACA,gBAAA,UAAA,GAAA,SAAA;AACA,gBAAA,OAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CAAA,GAAA,EADA,EAEA,WAFA,CAEA,CAAA,GAAA,EAFA,CALA;AAQA,gBAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CARA;;AASA,gBAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,OAAA,EAAA,KAAA,EAAA,KAAA,EAAA,WAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,CAAA;AAAA;AACA;;AAEA,gBAAA,QAAA,GAAA,CAAA;AACA,gBAAA,MAAA,GAAA,CAAA;;AA9BA,yCA+BA,CA/BA;AAgCA,kBAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,OAAA,CAAA,CAAA,CAAA;AAAA,eAAA,CAAA;AACA,kBAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AACA,cAAA,QAAA,IAAA,MAAA;AACA,cAAA,MAAA,IAAA,CAAA;AAnCA;;AA+BA,iBAAA,IAAA,CAAA,IAAA,OAAA,EAAA;AAAA,qBAAA,CAAA;AAKA;;AACA,gBAAA,OAAA,GAAA,IAAA,CAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA;AACA,gBAAA,aAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,EAAA,IAAA,CAAA,EAAA,GAAA,CAAA,GAAA,OAAA,GAAA,MAAA,CAAA,CAAA;AACA,gBAAA,kBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,CAAA;AAEA,gBAAA,mBAAA,GAAA,EAAA,CAAA,WAAA,GAAA,MAAA,CAAA,CAAA,CAAA,EAAA,QAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,gBAAA,oBAAA,GAAA,EAAA,CAAA,WAAA,CAAA,OAAA,EAAA,WAAA,CAAA;AACA,YAAA,SAAA,GAAA,CA3CA,EA2CA;;AA3CA,yCA4CA,GA5CA;AA6CA,kBAAA,OAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,OAAA,CAAA,GAAA,CAAA;AAAA,eAAA,CAAA;AACA,kBAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA,kBAAA,QAAA,GAAA,aAAA,CAAA,MAAA,CAAA,CAhDA,CAgDA;;AAEA,kBAAA,SAAA,GAAA,SAAA,GAAA,QAAA;AACA,cAAA,OAAA,GAAA;AAAA,gBAAA,UAAA,EAAA,SAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,eAnDA,EAmDA;;AACA,cAAA,SAAA,GAAA,SAAA;AACA,kBAAA,KAAA,GAAA,MAAA;AACA,cAAA,OAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CAAA,GAAA,EADA,EAEA,WAFA,CAEA,CAAA,GAAA,kBAAA,CAAA,MAAA,CAFA,CAtDA;AAyDA,cAAA,UAAA,GAAA,EAAA,CAAA,GAAA,GACA,WADA,CACA,CADA,EAEA,WAFA,CAEA,CAAA,GAAA,EAFA,CAzDA;AA4DA,cAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CA5DA;AA8DA,cAAA,SAAA,GAAA,SAAA,GAAA,OAAA;AACA,cAAA,UAAA,GAAA;AAAA,gBAAA,UAAA,EAAA,SAAA;AAAA,gBAAA,QAAA,EAAA;AAAA,eA/DA,EA+DA;;AAEA,kBAAA,WAAA,GAAA,EAAA,CAAA,IAAA,EAAA;AACA,cAAA,WAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA,EAAA,SAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA;AAEA,cAAA,SAAA,IAAA,OAAA;AACA,cAAA,UAAA,GAAA,UAAA,CAAA,UAAA,CArEA;AAsEA,kBAAA,YAAA,GAAA,aAAA,CAAA,YAAA,CAAA,OAAA,CAAA,WAAA,CAAA,CAAA,YAAA,CAAA,CAAA,CAAA;;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,CAAA,EAAA,CAAA,GAAA,CAAA,GAAA,CAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA,UAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,OAAA,CAAA,GAAA,CAAA,EAAA,GAAA;;AACA,kBAAA,GAAA,IAAA,OAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,KAAA,CAAA,YAAA,CAAA,GAAA,EAAA,WAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,KAAA,EAAA,SAAA,EAAA,SAAA;AACA;AA1EA;;AA4CA,iBAAA,IAAA,GAAA,IAAA,OAAA,EAAA;AAAA,qBAAA,GAAA;AA+BA;AAEA;AA/MA;AAkNA;;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,MAAA,CAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,UAAA,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA,GAAA,CAAA;AACA,MAAA,EAAA,GAAA,CAAA;;AACA,UAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,IAAA,CAAA,EAAA;AACA,QAAA,EAAA,GAAA,CAAA,CADA,CACA;;AACA,QAAA,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA;;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,GAAA,EAAA;AACA,QAAA,EAAA,GAAA,CAAA,GAAA,EAAA;AACA,QAAA,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA;;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,IAAA,GAAA,EAAA;AACA,QAAA,EAAA,GAAA,CAAA,GAAA,EAAA;AACA,QAAA,EAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA,OA1PA,CA2PA;AACA;AACA;AACA;;;AAEA,MAAA,KAAA,CAAA,OAAA,CAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,MAAA,EAAA,EAAA,iBAAA,IAAA,CAAA,IAAA,CAAA,GAhQA,CAiQA;AACA;;AACA,KA7kBA;AA8kBA,IAAA,mBA9kBA,+BA8kBA,GA9kBA,EA8kkBAAA,GAAA,KAAA,CAAA,kBAAA;AACA,UAAA,WAAA,GAAA,KAAA,CAAA,WAAA;AAEA,MAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EAAA,kBAAA;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,QAAA;;AACA,UAAA,KAAA,IAAA,EAAA,EAAA;AAAA;AAAA;;AACA,UAAA,MAAA,GAAA,OAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,MAAA,KAAA,CAAA,QAAA,EAAA;AAAA,OAAA,CAAA;AACA,UAAA,KAAA,GAAA,MAAA,CAAA,OAAA,CAAA;AACA,UAAA,IAAA,GAAA,MAAA,CAAA,MAAA,CAAA;AACA,UAAA,EAAA,GAAA,EAAA;AACA,UAAA,EAAA,GAAA,EAAA,CAnBA,CAoBA;;AACA,UAAA,OAAA,GAAA,MAAA,CAAA,SAAA,CAAA,CAAA,KAAA,CAAA,KAAA,CAAA;AAEA,UAAA,KAAA,GAAA,GAAA;AACA,UAAA,MAAA,GAAA,EAAA;;AACA,UAAA,KAAA,IAAA,qBAAA,EAAA;AACA,QAAA,KAAA,GAAA,OAAA;AACA,QAAA,OAAA,GAAA,CAAA,4EAAA,CAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,QAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA;AACA,QAAA,KAAA,GAAA,qCAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,MAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA,CALA,CAMA;AACA,OAPA,MAQA,IAAA,KAAA,IAAA,qBAAA,EAAA;AACA,QAAA,KAAA,GAAA,OAAA;AACA,QAAA,OAAA,GAAA,CAAA,4EAAA,CAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,QAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA;AACA,QAAA,KAAA,GAAA,qCAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,MAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA,CALA,CAMA;AACA,OAPA,MAQA,IAAA,IAAA,IAAA,aAAA,EAAA;AACA,QAAA,KAAA,GAAA,MAAA,OAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA,QAAA,MAAA,GAAA,KAAA,OAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,OAAA,EAAA,CAAA,CAAA;AACA,QAAA,KAAA,oBAAA,GAAA,OAAA,KAAA,CAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,UAAA;AAAA,SAAA,EAAA,OAAA,IAAA,cAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,QAAA;AAAA,SAAA,EAAA,OAAA,IAAA,eAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,MAAA;AAAA,SAAA,EAAA,OAAA,IAAA,gBAAA;AACA,OAPA,MAQA;AACA,QAAA,KAAA,GAAA,EAAA;AAEA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,QAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,KAAA,CAAA,IAAA,MAAA;AAAA,SAAA,EAAA,OAAA,IAAA,EAAA;AACA;;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,CAAA,IAAA,OAAA;AAAA,OAAA,EAAA,OAAA,IAAA,GAAA,aAAA,KAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,CAAA,IAAA,MAAA;AAAA,OAAA,EAAA,OAAA,oBAAA,IAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,CAAA,IAAA,SAAA;AAAA,OAAA,EAAA,OAAA,IAAA,OAAA,CAAA,CAAA,CAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,CAAA,IAAA,OAAA;AAAA,OAAA,EAAA,OAAA,eAAA,KAAA;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,CAAA,KAAA,CAAA,IAAA,KAAA;AAAA,OAAA,EAAA,OAAA,eAAA,MAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,KAAA,CAAA,SAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,WAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,MAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,QAAA,OAAA,CAAA,IAAA,CAAA,WAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,OAlEA,CAmEA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,WAAA,IAAA,GAAA,GAAA,CAAA,EAAA,GAAA,GAAA,kBAAA,CAAA,MAAA,EAAA,GAAA,EAAA,EAAA;AACA,YAAA,SAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,WAAA,CAAA;AACA,YAAA,SAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,SAAA,CAAA;AACA,YAAA,KAAA,GAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA;;AACA,YAAA,SAAA,IAAA,KAAA,EAAA;AACA,UAAA,MAAA,CAAA,SAAA,CAAA,GAAA,KAAA;AACA;AACA;;AACA,UAAA,IAAA,GAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;;AACA,UAAA,SAAA,GAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,mBAAA,EAAA,oBAAA,EAAA,EAAA,OAAA;;AACA,MAAA,WAAA,CAAA,OAAA,CAAA,UAAA,GAAA,EAAA;AACA,YAAA,EAAA,GAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA;;AACA,YAAA,EAAA,IAAA,CAAA,CAAA,EAAA;AACA,cAAA,QAAA,GAAA,oBAAA;AACA,cAAA,EAAA,IAAA,CAAA,EACA,QAAA,GAAA,MAAA;;AACA,cAAA,UAAA,GAAA,KAAA,CAAA,OAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,CAAA,MAAA,CAAA,EAAA,OAAA,EAAA,EAAA,sBAAA,GAAA,CAAA,IAAA,CAAA,EAAA;;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,KAAA,EAAA,IAAA,GAAA,CAAA,EAAA,IAAA,GAAA,EAAA,EAAA,UAAA,GAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,QAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,yBAAA,GAAA,CAAA,IAAA,CAAA,GAAA,QAAA,EALA,CAMA;;;AACA,UAAA,IAAA,IAAA,UAAA,GAAA,EAAA;;AACA,cAAA,IAAA,GAAA,GAAA,EAAA;AACA,YAAA,IAAA,GAAA,EAAA;AACA,YAAA,IAAA,IAAA,EAAA;AACA;AACA,SAdA,CAeA;AAEA;;AACA,OAlBA,EAtFA,CAyGA;AACA,KAxrBA;AA0rBA,IAAA,QA1rBA,oBA0rBA,GA1rBA,EA0rBA,CA1rBA,EA0rBA,CA1rBA,EA0rBA,CA1rBA,EA0rBA,CA1rBA,EA0rBA,EA1rBA,EA0rBA,IA1rBA,EA0rBA,WA1rBA,EA0rBA,MA1rBA,EA0rBA,OA1rBA,EA0rBA,MA1rBA,EA0rBA,SA1rBA,EA0rBA;AACA,MAAA,EAAA,CAAA,MAAA,YAAA,MAAA,GAAA,MAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,CAFA,EAGA,IAHA,CAGA,OAHA,EAGA,CAHA,EAIA,IAJA,CAIA,QAJA,EAIA,CAJA,EAKA,IALA,CAKA,IALA,EAKA,MALA,EAMA,IANA,CAMA,OANA,EAMA,SANA,EAOA,IAPA,CAOA,SAPA,EAOA,OAPA,EAQA,IARA,CAQA,MARA,EAQA,IARA,EASA,IATA,CASA,IATA,EASA,EATA,EAUA,IAVA,CAUA,QAVA,EAUA,MAVA,EAWA,IAXA,CAWA,cAXA,EAWA,WAXA,CAAA;AAYA,aAAA,IAAA;AACA,KAzsBA;AA0sBA,IAAA,OA1sBA,mBA0sBA,GA1sBA,EA0sBA,CA1sBA,EA0sBA,CA1sBA,EA0sBA,IA1sBA,EA0sBA,IA1sBA,EA0sBA;AAAA,UAAA,QAAA,uEAAA,EAAA;AAAA,UAAA,GAAA;AAAA,UAAA,EAAA,uEAAA,OAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,CADA,EAEA,IAFA,CAEA,GAFA,EAEA,CAFA,EAGA,IAHA,CAGA,IAHA,EAGA,GAHA,EAIA,IAJA,CAIA,MAJA,EAIA,IAJA,EAKA,IALA,CAKA,WALA,EAKA,QALA,EAMA,KANA,CAMA,aANA,EAMA,EANA,EAOA,IAPA,CAOA,IAPA,CAAA;AASA,UAAA,SAAA,GAAA,QAAA,CAAA,cAAA,WAAA,GAAA,GAAA,OAAA,GAAA,KAAA;AACA,aAAA,SAAA;AACA,KAttBA;AAutBA,IAAA,QAvtBA,oBAutBA,GAvtBA,EAutBA,CAvtBA,EAutBA,CAvtBA,EAutBA,KAvtBA,EAutBA,IAvtBA,EAutBA,IAvtBA,EAutBA;AAAA,UAAA,QAAA,uEAAA,EAAA;AAAA,UAAA,GAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,QAAA,GAAA,CAAA;AACA,UAAA,MAAA,GAAA,CAAA;AACA,UAAA,OAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,QAAA,OAAA,IAAA,MAAA,IAAA,CAAA,CAAA,CAAA;AACA,YAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,EADA,EAEA,IAFA,CAEA,GAFA,EAEA,EAFA,EAGA,IAHA,CAGA,IAHA,YAGA,GAHA,cAGA,CAHA,GAIA,IAJA,CAIA,MAJA,EAIA,IAJA,EAKA,IALA,CAKA,WALA,EAKA,QALA,EAMA,KANA,CAMA,aANA,EAMA,OANA,EAOA,IAPA,CAOA,OAPA,CAAA;AAQA,YAAA,SAAA,GAAA,QAAA,CAAA,cAAA,WAAA,GAAA,cAAA,CAAA,GAAA,OAAA,GAAA,KAAA;;AACA,YAAA,SAAA,GAAA,KAAA,IAAA,CAAA,IAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,UAAA,OAAA,GAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,IAAA,EAAA;AACA,SAJA,MAKA;AACA,UAAA,GAAA,CAAA,MAAA;AACA;;AACA,QAAA,QAAA,IAAA,SAAA;AACA;;AACA,aAAA,EAAA;AACA,KAnvBA;AAovBA,IAAA,WApvBA,uBAovBA,GApvBA,EAovBA,CApvBA,EAovBA,CApvBA,EAovBA,KApvBA,EAovBA,IApvBA,EAovBA,IApvBA,EAovBA;AAAA,UAAA,QAAA,uEAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,GAAA,CAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AAEA,YAAA,GAAA,GAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,EADA,EAEA,IAFA,CAEA,GAFA,EAEA,EAFA,EAGA,IAHA,CAGA,MAHA,EAGA,IAHA,EAIA,IAJA,CAIA,WAJA,EAIA,QAJA,EAKA,KALA,CAKA,aALA,EAKA,QALA,EAMA,IANA,CAMA,IAAA,CAAA,CAAA,CANA,CAAA;AAOA,QAAA,EAAA,IAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,EAAA;;AACA,YAAA,EAAA,GAAA,CAAA,GAAA,KAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,IAAA,EAAA;AACA;AACA;AACA,KAtwBA;AAuwBA,IAAA,UAvwBA,sBAuwBA,GAvwBA,EAuwBA,CAvwBA,EAuwBA,CAvwBA,EAuwBA,KAvwBA,EAuwBA,IAvwBA,EAuwBA,IAvwBA,EAuwBA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,GAAA,CAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AAEA,QAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,EADA,EAEA,IAFA,CAEA,GAFA,EAEA,EAFA,EAGA,IAHA,CAGA,MAHA,EAGA,IAHA,EAIA,IAJA,CAIA,IAAA,CAAA,CAAA,CAJA;AAKA,QAAA,EAAA,IAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,EAAA;;AACA,YAAA,EAAA,GAAA,CAAA,GAAA,KAAA,EAAA;AACA,UAAA,EAAA,GAAA,CAAA;AACA,UAAA,EAAA,IAAA,EAAA;AACA;AACA;AACA,KAvxBA;AAwxBA,IAAA,YAxxBA,wBAwxBA,GAxxBA,EAwxBA,KAxxBA,EAwxBA,MAxxBA,EAwxBA,MAxxBA,EAwxBA;AAAA,UAAA,OAAA,uEAAA,CAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,SAAA,EACA,IADA,CACA,QADA,EACA,MADA,EAEA,IAFA,CAEA,MAFA,EAEA,KAFA,EAGA,IAHA,CAGA,iBAHA,EAGA,OAHA,EAIA,IAJA,CAIA,SAJA,EAIA,OAJA,EAKA,IALA,CAKA,QALA,EAKA,MALA,EAMA,IANA,CAMA,cANA,EAMA,MANA;AAOA,KAhyBA;AAiyBA,IAAA,UAjyBA,sBAiyBA,GAjyBA,EAiyBA,CAjyBA,EAiyBA,CAjyBA,EAiyBA,CAjyBA,EAiyBA,IAjyBA,EAiyBA,IAjyBA,EAiyBA,OAjyBA,EAiyBA;AAAA,UAAA,SAAA,uEAAA,WAAA;AAAA,UAAA,MAAA;;AACA,UAAA,KAAA,GAAA,IAAA;;AACA,UAAA,KAAA,GAAA,KAAA,CAAA,IAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,QAAA,EACA,IADA,CACA,IADA,EACA,MADA,EAEA,IAFA,CAEA,OAFA,EAEA,SAFA,EAGA,IAHA,CAGA,SAHA,EAGA,OAHA,EAIA,IAJA,CAIA,IAJA,EAIA,CAJA,EAKA,IALA,CAKA,IALA,EAKA,CALA,EAMA,IANA,CAMA,GANA,EAMA,CANA,EAOA,IAPA,CAOA,MAPA,EAOA,IAPA,EAQA,EARA,CAQA,WARA,EAQA,UAAA,CAAA,EAAA;AACA,QAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAA,EAAA,CAAA,GAAA,GAAA;AACA,YAAA,MAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA;;AACA,YAAA,MAAA,IAAA,WAAA,EAAA;AACA,UAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,SAAA,EAAA,CAAA,EAAA,IAAA,CAAA,GAAA,EAAA,CAAA;AACA,SAFA,MAGA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,EACA,IADA,CACA,WADA,EACA,UAAA,CAAA,EAAA;AACA,gBAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,WAAA,CAAA;AACA,mBAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,aAAA;AACA,WAJA;AAMA,UAAA,EAAA,CAAA,SAAA,CAAA,WAAA,EACA,IADA,CACA,OADA,EACA,UAAA,CAAA,EAAA;AACA,gBAAA,MAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;AACA,gBAAA,EAAA,GAAA,CAAA;;AACA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,cAAA,OAAA,CAAA,GAAA,CAAA,WAAA,IAAA,CAAA,IAAA,CAAA,EAAA,UAAA,CAAA,CAAA,CAAA;;AACA,kBAAA,WAAA,IAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,EAAA;AAAA,gBAAA,EAAA,GAAA,CAAA;AAAA;;AACA,kBAAA,WAAA,IAAA,CAAA,IAAA,CAAA,IAAA,UAAA,CAAA,CAAA,CAAA,EAAA;AAAA,gBAAA,EAAA,GAAA,CAAA;AAAA;AACA;;AACA,gBAAA,EAAA,IAAA,CAAA,EAAA;AACA,cAAA,MAAA,IAAA,UAAA;AACA;;AACA,mBAAA,MAAA;AACA,WAdA;AAeA;AACA,OArCA,EAsCA,EAtCA,CAsCA,YAtCA,EAsCA,UAAA,CAAA,EAAA;AACA,QAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAA,EAAA,CAAA;AACA,YAAA,MAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,CAAA;;AACA,YAAA,MAAA,IAAA,WAAA,EAAA;AACA,UAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,SAAA,EAAA,CAAA,EAAA,IAAA,CAAA,GAAA,EAAA,CAAA;AACA,SAFA,MAGA;AACA,UAAA,EAAA,CAAA,SAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,EACA,IADA,CACA,WADA,EACA,UAAA,CAAA,EAAA;AACA,gBAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,WAAA,CAAA;AACA,mBAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,WAAA;AACA,WAJA;AAKA,UAAA,EAAA,CAAA,SAAA,CAAA,MAAA,EACA,IADA,CACA,OADA,EACA,UAAA,CAAA,EAAA;AACA,gBAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AACA,gBAAA,MAAA,GAAA,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,gBAAA,UAAA,GAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,gBAAA,UAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,IAAA,SAAA,EAAA;AACA,cAAA,MAAA,GAAA,EAAA;;AACA,mBAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,gBAAA,MAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA,GAAA;AACA;AACA;;AACA,mBAAA,MAAA;AACA,WAZA;AAaA;AACA,OAhEA,EAiEA,EAjEA,CAiEA,WAjEA,EAiEA,UAAA,CAAA,EAAA;AACA,QAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,GAAA,EAAA,CAAA;AACA,QAAA,EAAA,CAAA,SAAA,CAAA,OAAA,IAAA,CAAA,IAAA,CAAA,EACA,IADA,CACA,WADA,EACA,UAAA,CAAA,EAAA;AACA,cAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,WAAA,CAAA;AACA,iBAAA,UAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,WAAA;AACA,SAJA;AAKA,YAAA,MAAA,GAAA,KAAA,EAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,CAAA;AACA,YAAA,QAAA,GAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,MAAA;AAAA,SAAA,CAAA;AACA,YAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA;;AACA,QAAA,KAAA,CAAA,SAAA,CAAA,QAAA,EAVA,CAWA;;AACA,OA7EA,EAHA,CAiFA;AACA,KAn3BA;AAo3BA,IAAA,YAp3BA,wBAo3BA,GAp3BA,EAo3BA,IAp3BA,EAo3BA,MAp3BA,EAo3BA,KAp3BA,EAo3BA;AAAA,UAAA,gBAAA,uEAAA,GAAA;AAAA,UAAA,MAAA;AAAA,UAAA,SAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,IAAA,CAAA,QAAA,EADA,EAEA,IAFA,CAEA,QAFA,EAEA,MAFA,EAGA,IAHA,CAGA,OAHA,EAGA,SAHA,EAIA,IAJA,CAIA,IAJA,EAIA,MAJA,EAKA,IALA,CAKA,kBALA,EAKA,gBALA,EAMA,IANA,CAMA,cANA,EAMA,KANA,EAOA,IAPA,CAOA,MAPA,EAOA,MAPA,EAQA,EARA,CAQA,WARA,EAQA,UAAA,CAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AACA,YAAA,MAAA,GAAA,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,YAAA,GAAA,GAAA,UAAA,CAAA,IAAA,CAAA,IAAA,CAAA;;AACA,YAAA,MAAA,CAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,UAAA,EAAA;AACA,UAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,EAAA,MAAA,GAAA,UAAA;AACA;AACA,OAfA,EAgBA,EAhBA,CAgBA,YAhBA,EAgBA,UAAA,CAAA,EAAA;AACA,YAAA,UAAA,GAAA,EAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AACA,YAAA,MAAA,GAAA,UAAA,CAAA,IAAA,CAAA,OAAA,CAAA;AACA,YAAA,UAAA,GAAA,MAAA,CAAA,KAAA,CAAA,GAAA,CAAA;;AACA,YAAA,UAAA,CAAA,UAAA,CAAA,MAAA,GAAA,CAAA,CAAA,IAAA,SAAA,EAAA;AACA,UAAA,MAAA,GAAA,EAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,UAAA,CAAA,MAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,MAAA,IAAA,UAAA,CAAA,CAAA,CAAA,GAAA,GAAA;AACA;;AACA,UAAA,EAAA,CAAA,MAAA,CAAA,IAAA,EAAA,IAAA,CAAA,OAAA,EAAA,MAAA;AACA;AACA,OA3BA;AA4BA,KAj5BA;AAk5BA,IAAA,OAl5BA,mBAk5BA,GAl5BA,EAk5BA,CAl5BA,EAk5BA,CAl5BA,EAk5BA,OAl5BA,EAk5BA,MAl5BA,EAk5BA,IAl5BA,EAk5BA,SAl5BA,EAk5BA;AAAA,UAAA,gBAAA,uEAAA,GAAA;AAAA,UAAA,KAAA,uEAAA,CAAA;AACA,MAAA,GAAA,CAAA,MAAA,CAAA,MAAA,EACA,IADA,CACA,GADA,EACA,OADA,EAEA,IAFA,CAEA,OAFA,EAEA,SAFA,EAGA,IAHA,CAGA,WAHA,EAGA,eAAA,CAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAHA,EAIA,IAJA,CAIA,QAJA,EAIA,MAJA,EAKA,IALA,CAKA,cALA,EAKA,KALA,EAMA,IANA,CAMA,kBANA,EAMA,gBANA,EAOA,IAPA,CAOA,iBAPA,EAOA,OAPA,EAQA,IARA,CAQA,MARA,EAQA,IARA;AASA,KA55BA;AA65BA,IAAA,MA75BA,oBA65BA;AAEA,UAAA,KAAA,GAAA,IAAA;;AACA,MAAA,KAAA,CAAA,YAAA;AACA,KAj6BA;AAk6BA,IAAA,SAl6BA,qBAk6BA,IAl6BA,EAk6BA;AACA,WAAA,KAAA,CAAA,SAAA,EAAA,IAAA;AACA;AAp6BA,GApJA;AA0jCA,EAAA,OA1jCA,qBA0jCA;AACA,QAAA,KAAA,GAAA,IAAA;;AACA,SAAA,SAAA,CAAA,YAAA;AACA,MAAA,KAAA,CAAA,MAAA;AAEA,KAHA;AAIA,GAhkCA;AAikCA,EAAA,OAjkCA,qBAikCA;AACA,QAAA,KAAA,GAAA,IAAA,CADA,CAEA;;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,WAAA,EAAA,UAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,QAAA,GAAA,GAAA;;AACA,MAAA,KAAA,CAAA,MAAA;AACA,KAHA;AAIA,SAAA,IAAA,CAAA,GAAA,CAAA,YAAA,EAAA,UAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,YAAA,GAAA,GAAA,CADA,CAEA;AACA,KAHA;AAKA,SAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,UAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,WAAA,GAAA,GAAA;AACA,KAFA;AAIA,SAAA,IAAA,CAAA,GAAA,CAAA,SAAA,EAAA,UAAA,GAAA,EAAA;AACA,MAAA,KAAA,CAAA,kBAAA,GAAA,GAAA;AACA,KAFA;AAGA,GAplCA,CAqlCA;AACA;AACA;;AAvlCA,CAAA","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"procPanel\">\r\n    <div class=\"panelHead\">Content View </div>\r\n      <!-- //SupportPanel</div> -->\r\n    <div id=\"procPanelDiv\" class=\"panelBody\" ref=\"procPanelDiv\">\r\n      <div id=\"questionSer\" ref=\"questionSer\"></div>\r\n      \r\n        <el-table stripe  :data=\"tableData\" style=\"width: 100%;height:80%;overflow-y: scroll;scrollbar-width: none;\"         \r\n        :row-style=\"iRowStyle\"\r\n        :cell-style=\"iCellStyle\"\r\n        :header-row-style=\"iHeaderRowStyle\"\r\n        :header-cell-style=\"iHeaderCellStyle\">\r\n          <!-- <el-table-column prop=\"key\" label=\"\" width=\"190\">\r\n          </el-table-column> -->\r\n          <!-- eslint-disable -->\r\n          <el-table-column prop=\"value\" label=\"\" width=\"480\">\r\n            <template slot-scope=\"scope\">\r\n              <div v-if=\"scope.row.key == 'Title'\">\r\n                <div style=\"float: left;height: 40px;font-size: 24px;color: rgb(103, 103, 103);\">\r\n                {{ scope.row.value }}</div>\r\n\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'Type'\">\r\n                <!-- <div style=\"float: left;height:15px;font-size: 17px;\"> -->\r\n                <div style=\"float: left;height: auto;;font-size: 20px;color: rgb(103, 103, 103);\">\r\n                  {{ `${scope.row.value}` }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'ContentT'\">\r\n                <div style=\"float: left;height: auto;;font-size: 22px;color: rgb(103, 103, 103);\">\r\n                {{ scope.row.value }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'Content'\">\r\n                <div style=\"float: left;height: auto;\">\r\n                  &nbsp;&nbsp;{{ `&nbsp;&nbsp;${scope.row.value}` }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'InputT'\">\r\n                <div style=\"float: left;height: auto;;font-size: 22px;color: rgb(103, 103, 103);\">\r\n                {{ scope.row.value }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'Input'\">\r\n                <div style=\"float: left;height: auto;\">\r\n                  &nbsp;&nbsp;{{ `&nbsp;&nbsp;${scope.row.value}` }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'OutT'\">\r\n                <div style=\"float: left;height: auto;;font-size: 22px;color: rgb(103, 103, 103);\">\r\n                {{ scope.row.value }}</div>\r\n              </div>\r\n              <div v-if=\"scope.row.key == 'Out'\">\r\n                <div style=\"float: left;height: auto;\">\r\n                  &nbsp;&nbsp;{{ `&nbsp;&nbsp;${scope.row.value}` }}</div>\r\n              </div>\r\n            </template>\r\n          </el-table-column>\r\n          <!-- eslint-enable -->\r\n        </el-table>\r\n      <!-- <div id=\"connectCon\" ref=\"connectCon\">\r\n      </div> -->\r\n      <div id=\"procData\" ref=\"procData\">\r\n\r\n      </div>\r\n    </div>\r\n    </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport tools from \"@/utils/tools.js\";\r\n\r\nexport default {\r\n  props: [],\r\n  data() {\r\n    return {\r\n      typeRadio: \"cell State\",\r\n      treeData: null,\r\n      toolsState: '',\r\n      problemsData:[],\r\n      problemConceptData:[],\r\n      conceptTree:[],\r\n      // confirmUrl: require(\"@/assets/img/confirm.svg\"),\r\n      // cancelUrl: require(\"@/assets/img/cancel.svg\"),\r\n      // toolsButsUrl: require(\"@/assets/img/toolsButs.png\"),\r\n      // addNodeSonUrl: require(\"@/assets/img/addNode1.png\"),\r\n      // addNodePerUrl: require(\"@/assets/img/addNode2.png\"),\r\n      // addLinkBasicUrl: require(\"@/assets/img/addLink.png\"),\r\n      // nameinput: \"Random Variables\",\r\n      nameinput: \"Fundamental Graphs\",\r\n      // nameinput: \"Trees\",\r\n      lectureStyleValue: [0, 80],\r\n      tableData: [{\r\n        key: 'Title',\r\n        value: '',\r\n      },{\r\n        key: 'Type',\r\n        value: '',\r\n      }, {\r\n        key: 'ContentT',\r\n        value: '',\r\n      }, {\r\n        key: 'Content',\r\n        value: '',\r\n      }, {\r\n        key: 'InputT',\r\n        value: '',\r\n      }, {\r\n        key: 'Input',\r\n        value: '',\r\n      },{\r\n        key: 'OutT',\r\n        value: '',\r\n      },{\r\n        key: 'Out',\r\n        value: '',\r\n      }\r\n      ],\r\n      \r\n      graphGTransformK: 1,\r\n      graphGTransformX: 0,\r\n      graphGTransformY: 10,\r\n      curEntId: \"\",\r\n      insertEntId: \"\",\r\n      insertSourceEntId: \"-1\",\r\n      insertTargetEntId: \"-1\",\r\n      sonList: [],\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      maxTotalDuration: 0,\r\n      importanceMinColor: \"rgb(203, 230, 209)\",\r\n      importanceMaxColor: \"rgb(22, 144, 207)\",\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      totalDurationScale_linear: null,\r\n      DivisionDataList: [],\r\n      rootDivisionDataList: [],\r\n      entDivisionDataList: [],\r\n      colorMap: {},\r\n      rootColorMap:{},\r\n      videoDuration: 570,\r\n      selectRectId: \"\",\r\n      selectRectClass: \"\",\r\n      topicLineWidth: 1000,\r\n      topicLineHeight: 1000,\r\n      moveLineWidth: 1000,\r\n      entLineWidth: 1000,\r\n      totalSonDuration: 0,\r\n      treeGTransformK:1,\r\n      treeGTransformX:10,\r\n      treeGTransformY:100,\r\n      margin: { top: 5, right: 5, bottom: 5, left: 5 },\r\n      // mcolor: [\r\n      //   \"rgb(255,60,60)\",\r\n      //   \"rgb(155,20,100)\",\r\n      //   \"rgb(255,83,255)\",\r\n      //   \"rgb(200,100,50)\",\r\n      //   \"rgb(235,135,162)\",\r\n      //   \"rgb(200,200,102)\",\r\n      //   \"rgb(255,178,101)\",\r\n      //   \"rgb(63,151,134)\",\r\n      //   \"rgb(83,155,255)\",\r\n      //   \"rgb(50,200,120)\",\r\n      //   \"rgb(2,50,200)\",\r\n      //   \"rgb(0,122,244)\",\r\n      //   \"rgb(150,122,244)\",\r\n      //   \"rgb(168,168,255)\",\r\n      //   \"rgb(200,200,200)\",\r\n      // ],\r\n      mcolor: [\r\n        \"rgb(91, 107, 255)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(125, 98, 211)\",\r\n        \"rgb(255, 113, 212)\",\r\n        \"rgb(112, 214, 255)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(255, 77, 109)\",\r\n      ],\r\n      mLightcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n    };\r\n  },\r\n  watch: {\r\n    typeRadio(val) {\r\n    },\r\n    lectureStyleValue(val){\r\n      console.log(val);\r\n      let mid = (val[0]+val[1])/2;\r\n      d3.select(\"#procData .el-slider__runway\")\r\n      .attr(\"style\",\"background: linear-gradient(90deg, #ff9c9c \"+mid+\"%,#6f8be0 \"+mid+\"%) !important\")\r\n    },\r\n    type(val) {\r\n    },\r\n    // selectEnt(val){\r\n    //   console.log(val);\r\n    // },\r\n    curEntId(curEntId) {\r\n    }\r\n  },\r\n  methods: {\r\n    selectType(v) {\r\n      // console.log(v)\r\n    },\r\n    \r\n\r\n    iRowStyle:function ({row, rowIndex}) {\r\n        return 'height:35px';\r\n    },\r\n    iHeaderRowStyle:function ({row, rowIndex}) {\r\n        return 'height:35px';\r\n    },\r\n    iCellStyle:function ({row, column, rowIndex, columnIndex}) {\r\n        return 'padding:2px'\r\n    },\r\n    iHeaderCellStyle:function ({row, column, rowIndex, columnIndex}) {\r\n        return 'padding:0px'\r\n    },\r\n    drawprocData() {\r\n      const _this = this;\r\n      const margin = _this.margin;\r\n      let width = this.$refs.procData.offsetWidth - margin.left - margin.right;\r\n      let height = this.$refs.procData.offsetHeight - margin.top - margin.bottom;\r\n      d3.select(\"#procData\").select(\"svg\").remove();\r\n      var svg = d3.select(\"#procData\").append(\"svg\")\r\n        .attr(\"id\", \"procEnt\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n\r\n        let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      \r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      let entG = svg.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let sonG = svg.append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", width).attr(\"height\", height).attr(\"transform\", \"translate(1,320)\");\r\n        var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 100])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX //+ e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK //+ e.transform.k - stk;\r\n          entG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          entG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n      svg.call(graphZoom);\r\n      // _this.entG = entG;\r\n      // _this.sonG = sonG;\r\n      _this.drawQuestionSurface(entG);\r\n      // _this.drawSonLine(_this.data[1]);\r\n    },\r\n    drawSonLine(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#sonG\");\r\n      let w = psvg.attr(\"width\") - 1;\r\n      let h = 40;\r\n      psvg.remove();\r\n      let svg = d3.select(\"#procEnt\").append(\"g\").attr(\"id\", \"sonG\").attr(\"width\", w + 1).attr(\"height\", h + 2).attr(\"transform\", \"translate(1,320)\");\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let oData = _this.data;\r\n      _this.entLineWidth = w;\r\n      // if (sonList.length > 0) {\r\n      svg.selectAll().remove();\r\n      svg.append(\"line\")\r\n        .attr(\"x1\", 0)\r\n        .attr(\"y1\", h / 2)\r\n        .attr(\"x2\", w)\r\n        .attr(\"y2\", h / 2)\r\n        .attr(\"stroke\", \"rgb(200,200,200)\")\r\n        .attr(\"stroke-width\", \"5px\");\r\n\r\n      let totalSonDuration = 0;\r\n      let dataIndex = oData.map(item => item.id).indexOf(data['id']);\r\n      let startIndex = ((dataIndex - 2) > 0) ? (dataIndex - 2) : (0);\r\n      let endIndex = ((dataIndex + 1) < oData.length) ? (dataIndex + 2) : (oData.length - 1);\r\n\r\n      let dataLi = tools.deepClone(oData).splice(startIndex, endIndex - startIndex + 1);\r\n      // let data = sonList;\r\n      for (let i = 0; i < dataLi.length; i++) {\r\n        let curEnt = oData.find(function (d) { return d['id'] == dataLi[i]['id'] });\r\n        let time = tools.time2seconds(curEnt['time'][0]);\r\n        let endTime = tools.time2seconds(curEnt['time'][1]);\r\n        totalSonDuration += endTime - time;\r\n      }\r\n      _this.totalSonDuration = totalSonDuration;\r\n      let cxLinear = d3.scaleLinear([0, totalSonDuration], [0, w]);\r\n      let DivisionDataList = [];\r\n      // let colorIndex = 0;\r\n      let prex = 0;\r\n      for (let i = 0; i < dataLi.length; i++) {\r\n        let curEnt = oData.find(function (d) { return d['id'] == dataLi[i]['id'] });\r\n        let temp = tools.deepClone(curEnt);\r\n        if (DivisionDataList.length != 0) {\r\n          DivisionDataList[DivisionDataList.length - 1]['nextId'] = temp['id'];\r\n          temp['preId'] = DivisionDataList[DivisionDataList.length - 1]['id'];\r\n        }\r\n        else { temp['preId'] = \"-1\"; }\r\n        DivisionDataList.push(temp);\r\n        let time = tools.time2seconds(curEnt['time'][0]);\r\n        let endTime = tools.time2seconds(curEnt['time'][1]);\r\n        let curEntDur = endTime - time;\r\n        let cx = prex;\r\n        let endx = prex + cxLinear(curEntDur);\r\n        let importanceValue = curEnt['attribute']['importance'];\r\n        let entColor = compute_color(color_linear(importanceValue));\r\n        if (i != 0) {\r\n          _this.drawRect(svg, cx - 5, 0, 5, h, h / 2, \"division_\" + curEnt['id'], \"entdivisionLine\", \"rgb(250,250,250)\", 5, '', 0);\r\n        }\r\n        if (dataLi[i]['id'] == data['id']) _this.drawRect(svg, cx, 0, endx - cx, h, h / 2, \"procEnt_\" + curEnt['id'], \"procEnt\", entColor, 1, \"black\", 1)//color[_this.colorMap[son['id']]], 5, 0.1)\r\n        else _this.drawRect(svg, cx, 0, endx - cx, h, h / 2, \"procEnt_\" + curEnt['id'], \"procEnt\", entColor, 1, \"rgb(150,150,150)\", 1)//color[_this.colorMap[son['id']]], 5, 0.1)\r\n        prex = endx;\r\n      }\r\n      DivisionDataList[DivisionDataList.length - 1]['nextId'] = \"-1\";\r\n      _this.entDivisionDataList = DivisionDataList;\r\n    },\r\n    drawEntityOri(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#entG\");\r\n      let w = psvg.attr(\"width\");\r\n      let h = psvg.attr(\"height\");\r\n      psvg.remove();\r\n      let svg = d3.select(\"#procEnt\").append(\"g\").attr(\"id\", \"entG\").attr(\"width\", w).attr(\"height\", h);\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let totalDurationValue = data['totalDuration'];\r\n      let rScale = _this.totalDurationScale_linear;\r\n      let r = rScale(totalDurationValue);\r\n      let oData = _this.data;\r\n      let x = svg.attr(\"width\") / 2;\r\n      let y = 120;\r\n      let importanceValue = data['attribute']['importance'];\r\n      let relevanceValue = data['attribute']['relevance'];\r\n      svg.selectAll().remove();\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxDDuration], [0, r * (1 + Math.sqrt(3) / 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data['time']];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        for (let srel in data[\"similarityRel\"]) {\r\n          let cdata = oData.find(function (d) { return d['id'] == data[\"similarityRel\"][srel] })\r\n          lineLi.push(cdata['time'])\r\n          linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n        }\r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n        lineLi = lineLi.sort(sortmt);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r, y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t][0];\r\n          let endT = lineLi[t][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = tools.time2seconds(endT);\r\n          let duration = endS - startS;\r\n\r\n          let startx = timeLineScale_linear((startS - duration * 10));\r\n          let endx = timeLineScale_linear((endS + duration * 10));\r\n\r\n          let startyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          let startyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          let endyf = y + timeLineHighScale_linear((duration)) / 8;\r\n          let endyf1 = y + timeLineHighScale_linear((duration)) / 8;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          let midx = timeLineScale_linear((endS + startS) / 2);\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          let y1 = y;\r\n          if (startx < (lineData[lineData.length - 1][0])) {\r\n            if (t > 0) {\r\n              lineData.splice(lineData.length - 3, 3);\r\n              startx = (lineData[lineData.length - 1][0] + midx) / 2;\r\n              y1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n              startyf = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n              startyf1 = lineData[lineData.length - 1][1] + timeLineHighScale_linear((duration)) / 2;\r\n            }\r\n          }\r\n          let startx1 = startx + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let endx1 = endx - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let startx2 = startx1 + (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          let endx2 = endx1 - (timeLineScale_linear((startS + duration)) - timeLineScale_linear((startS)));\r\n          if (endx > (r + x)) endx = r + x;\r\n          if (startx1 < (lineData[lineData.length - 1][0])) startx1 = lineData[lineData.length - 1][0];\r\n          if (endx1 > (r + x)) endx1 = r + x;\r\n          if (startx2 < (lineData[lineData.length - 1][0])) startx2 = lineData[lineData.length - 1][0];\r\n          if (endx2 > (r + x)) endx2 = r + x;\r\n          lineData.push([startx, y1], [startx1, startyf1], [startx2, startyf], [midx, yz], [endx2, endyf], [endx1, endyf1], [endx, y])\r\n        }\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let typeArcScale_linear = d3.scaleLinear([0, duration], [0, Math.PI * 2]);\r\n\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n            let endAnglet = typeStartR + 1 * typeStepR\r\n            var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            typeStartR = endAnglet;\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 10)\r\n              .outerRadius(r + 25);\r\n            var pathArc = arcPath(dataset);\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);\r\n          }\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * sonNum]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = 0;//-Math.PI/2;\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n      let txts = _this.nameinput.split(\" \")\r\n      _this.drawTxt(svg, x - r - 32, y + r + 50, r * 2 + 64, txts, \"grey\");\r\n    },\r\n    drawEntity(data) {\r\n      const _this = this;\r\n      let psvg = d3.select(\"#entG\");\r\n      let w = psvg.attr(\"width\");\r\n      let h = psvg.attr(\"height\");\r\n      psvg.remove();\r\n      let svg = d3.select(\"#procEnt\").append(\"g\").attr(\"id\", \"entG\").attr(\"width\", w).attr(\"height\", h);\r\n      let color_linear = _this.importanceColor_linear;\r\n      let compute_color = _this.importanceCompute_color;\r\n      let totalDurationValue = data['totalDuration'];\r\n      let rScale = _this.totalDurationScale_linear;\r\n      let r = rScale(totalDurationValue);\r\n      let oData = _this.data;\r\n      let x = svg.attr(\"width\") / 2;\r\n      let y = 120;\r\n      let importanceValue = data['attribute']['importance'];\r\n      let relevanceValue = data['attribute']['relevance'];\r\n      svg.selectAll().remove();\r\n\r\n      if (data['type'] == '1') {\r\n        let area = tools.calcTriangle(x, y, r);\r\n        _this.drawTriangle(svg, \"rgb(250, 199, 88)\", area, \"rgb(250, 199, 88)\");\r\n      }\r\n      else {\r\n\r\n        let cy = y;\r\n        let totalDuration = _this.totalDuration;\r\n        let timeLineScale_linear = d3.scaleLinear([0, totalDuration], [x - r * Math.sqrt(3) / 2, x + r * Math.sqrt(3) / 2])\r\n        let timeLineHighScale_linear = d3.scaleLinear([0, _this.maxDDuration], [0, r * (1 + Math.sqrt(3) / 2)])\r\n        let circleColor = compute_color(color_linear(importanceValue));\r\n        _this.drawCircle(svg, x, cy, r, circleColor, data, 1, \"entCircle\", \"entCircle_\" + data['id']);\r\n\r\n        r = r * Math.sqrt(3) / 2;\r\n        y += r / 2;\r\n        let path = d3.path();\r\n\r\n\r\n        path.moveTo(x - r, y);\r\n        let lineLi = [data];\r\n        let linePoint = [{ 'id': data['id'], 'time': data['time'], 'x': 0, 'y': 0 }];\r\n        let jgidL = [data['id']];\r\n        let similarityRelsli = [data[\"similarityRel\"]];\r\n        while(similarityRelsli.length>0){\r\n          let similarityRels = similarityRelsli[0];\r\n          similarityRelsli.splice(0,1);\r\n          let jg = 0;\r\n          for (let srel in similarityRels) {\r\n            let cdata = oData.find(function (d) { return d['id'] == similarityRels[srel] });\r\n            if(jgidL.indexOf(cdata['id'])==-1){\r\n              similarityRelsli.push(cdata[\"similarityRel\"])\r\n              jg=1;\r\n              lineLi.push(cdata)\r\n              jgidL.push(cdata['id'])\r\n              linePoint.push({ 'id': cdata['id'], 'time': cdata['time'], 'x': 0, 'y': 0 })\r\n            }\r\n          }\r\n          // if(jg==0){\r\n            // break;\r\n          // }\r\n        }\r\n        \r\n        const sortmt = (a, b) => {\r\n          return tools.time2seconds(a[0]) - tools.time2seconds(b[0]);\r\n        }\r\n        const sortlp = (a, b) => {\r\n          return tools.time2seconds(a['time'][0]) - tools.time2seconds(b['time'][0]);\r\n        }\r\n        console.log(lineLi);\r\n        lineLi = lineLi.sort(sortlp);\r\n        linePoint = linePoint.sort(sortlp);\r\n        let lineData = [[x - r * Math.sqrt(3)/2-4 , y]];\r\n        for (let t = 0; t < lineLi.length; t++) {\r\n          let startT = lineLi[t]['time'][0];\r\n          let duration =lineLi[t]['totalDuration']\r\n          // let endT = lineLi[t]['time'][1];\r\n          let startS = tools.time2seconds(startT);\r\n          let endS = startS +duration;\r\n          // let startx = timeLineScale_linear((startS - duration * 10));\r\n          // let endx = timeLineScale_linear((endS + duration * 10));\r\n          let limst = (x - r * Math.sqrt(3) / 2);\r\n          let limed = (x + r * Math.sqrt(3) / 2);\r\n          let startx = (limst<timeLineScale_linear((startS)))?(timeLineScale_linear((startS))):(limst);\r\n          let endx = (limed>timeLineScale_linear((endS)))?(timeLineScale_linear((endS))):(limed);\r\n          // let midx = timeLineScale_linear((endS + startS) / 2);\r\n          let midx = (startx+endx) / 2;\r\n          let ys = y;\r\n          let yz = y - timeLineHighScale_linear((duration));\r\n          linePoint[t]['x'] = midx;\r\n          linePoint[t]['y'] = y - timeLineHighScale_linear(duration) / 1.7;\r\n          // if (startx < (lineData[lineData.length - 1][0])) {\r\n            if (t > 0) {\r\n              lineData.splice(lineData.length - 1, 1);\r\n              midx+=t*5;\r\n              startx = midx-((midx-(lineData[lineData.length - 1][0] + midx) / 2))/2;\r\n              endx+=t*5;\r\n              ys = y+(y-lineData[lineData.length - 1][1])/3\r\n            }\r\n            console.log(ys)\r\n          // }\r\n          lineData.push([startx, ys],[midx, yz],[endx, y])}\r\n        lineData.push([x + r, y])\r\n        let curve_generator = d3.line()\r\n          .x((d) => d[0])\r\n          .y((d) => {\r\n            let h = Math.sqrt(Math.pow(r, 2) - Math.pow((d[0] - (x - r)), 2));\r\n            if ((y - d[1]) > (h + r * Math.sqrt(3) / 2))\r\n              return y - (h + r * Math.sqrt(3) / 2) + 2;\r\n            return d[1];\r\n          })\r\n          .curve(d3.curveBundle )\r\n          // .curve(d3.curveCatmullRom  )\r\n          // .curve(d3.curveBasis)\r\n        _this.drawTimeLine(svg, curve_generator(lineData), \"white\", 2, '0', 'sonLine ', 'sonLine ');\r\n\r\n\r\n        for (let p = 0; p < linePoint.length; p++) {\r\n          _this.drawCircle(svg, linePoint[p]['x'], linePoint[p]['y'], 5, \"red\", linePoint[p], 0, \"linePoint\", \"linePoint_\" + linePoint[p]['id']);\r\n        }\r\n\r\n        // \"1\": \"rgb(145, 204, 117)\",\r\n        //   \"2\": \"rgb(84, 112, 198)\",\r\n        //   \"3\": \"rgb(238, 102, 102)\",\r\n        let typeColor = {\r\n          \"1\": \"#ff9c9c\",\r\n          \"2\": \"#f4f4d0\",\r\n          \"3\": \"#6f8be0\",\r\n        };\r\n        let duration = tools.time2seconds(data['time'][0]) - tools.time2seconds(data['time'][1]);\r\n        let typeData = data['attribute']['expressions'];\r\n        let sonList = data['son'];\r\n        let sons = [sonList];\r\n        while (sons.length > 0) {\r\n          let curSonList = sons[0];\r\n          sons.splice(0, 1);\r\n          if (curSonList.length > 0) {\r\n            for (let s in curSonList) {\r\n              let sonData = oData.find(function (d) { return d['id'] == curSonList[s] });\r\n              let sonTypeData = sonData['attribute']['expressions'];\r\n\r\n              for (let t in sonTypeData) {\r\n                let typeDurition = sonTypeData[t];\r\n                for (let d in typeDurition) {\r\n                   typeData[t].push(typeDurition[d])\r\n                }\r\n              }\r\n              sons.push(sonData['son']);\r\n            }\r\n          }\r\n        }\r\n        var typeStartR = 0//Math.PI/4;\r\n\r\n        var typeStepR = Math.PI / 1;\r\n\r\n        if (sonList.length > 0) {\r\n          let typeTotalDur = 0;\r\n          for (let t in typeData) {\r\n            let typeDurition = typeData[t];\r\n            for (let d in typeDurition) {\r\n              typeTotalDur += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n          }\r\n          let typeArcScale_linear = d3.scaleLinear([0, typeTotalDur], [0, Math.PI * 2]);\r\n          for (let i in typeData) {\r\n            let color = typeColor[i];\r\n            let typeDurition = typeData[i];\r\n            let totalTypeSeconds = 0;\r\n            for (let d in typeDurition) {\r\n              totalTypeSeconds += (tools.time2seconds(typeDurition[d][1]) - tools.time2seconds(typeDurition[d][0]))\r\n            }\r\n            if(totalTypeSeconds>0)\r\n            {let typeStepR = typeArcScale_linear(totalTypeSeconds)//Math.PI/2;\r\n\r\n            let endAnglet = typeStartR + 1 * typeStepR\r\n            var dataset = { startAngle: typeStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            typeStartR = endAnglet;\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 10)\r\n              .outerRadius(r + 25);\r\n            var pathArc = arcPath(dataset);\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, color, color, 'type f' + data['id'] + \" t\" + i);}\r\n          }\r\n\r\n          let sonTotal = 0;\r\n          let sonNum = 0\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n            sonTotal += sonDur;\r\n            sonNum += 1;\r\n          }\r\n          let skipArc = Math.PI / (sonNum + 2);\r\n          let timeSonLinear = d3.scaleLinear([0, sonTotal], [0, Math.PI * 2 - skipArc * sonNum]);\r\n          let timeSonHeighLinear = d3.scaleLinear([0, sonTotal], [40, 40]);\r\n\r\n          let timeSonColor_linear = d3.scaleLinear().domain([0, sonTotal]).range([0, 1]);\r\n          let timeSonCompute_color = d3.interpolate(\"white\", circleColor);\r\n          var sonStartR = 0;//-Math.PI/2;\r\n          for (let s in sonList) {\r\n            let sonData = oData.find(function (d) { return d['id'] == sonList[s] });\r\n            let sonDur = sonData['totalDuration'];\r\n\r\n            let sonStepR = timeSonLinear(sonDur)//Math.PI/2;\r\n\r\n            let endAnglet = sonStartR + sonStepR;\r\n            var dataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n            sonStartR = endAnglet;\r\n            let color = 'blue';\r\n            var arcPath = d3.arc()\r\n              .innerRadius(r + 28)\r\n              .outerRadius(r + timeSonHeighLinear(sonDur));\r\n            var arcMidPath = d3.arc()\r\n              .innerRadius(0)\r\n              .outerRadius(r + 32);\r\n            var pathArc = arcPath(dataset);\r\n\r\n            endAnglet = sonStartR + skipArc;\r\n            var midDataset = { startAngle: sonStartR, endAngle: endAnglet }; //创建一个弧生成器\r\n\r\n            let jiantouPath = d3.path();\r\n            jiantouPath.arc(x, y - r / 2, r + 32, sonStartR - Math.PI / 2, endAnglet - Math.PI / 2);\r\n\r\n            sonStartR += skipArc;\r\n            var pathMidArc = arcMidPath(midDataset);\r\n            let timeSonColor = compute_color(color_linear(sonData['attribute']['importance']));\r\n            _this.drawArc(svg, x, y - r / 2, pathArc, timeSonColor, timeSonColor, 'son f' + data['id'] + \" s\" + sonList[s], '0');\r\n            if (s != sonList.length - 1) {\r\n              _this.drawTimeLine(svg, jiantouPath, \"rgb(200,200,200)\", 3, '9,5', 'midArc ', 'midArc ');\r\n            }\r\n          }\r\n\r\n        }\r\n\r\n\r\n      }\r\n      let txts = data['name'].split(\" \")\r\n      let tx = x - r - 30;\r\n      let ty = y + r +60;\r\n      let tw = r*2;\r\n      tx = x;\r\n      if(data['son'].length==0){\r\n        tx = x//-r-10;\r\n        ty = y+r*2;\r\n      }\r\n      if(data['id']==\"3\"){\r\n        tx = x-10;\r\n        ty = y+r*2;\r\n      }\r\n      if(data['id']==\"4\"){\r\n        tx = x+10;\r\n        ty = y+r*2;\r\n      }\r\n      // if(data['type']=='1'){\r\n      //   tx = x-r/2;\r\n      //   ty = y+r*2;\r\n      // }\r\n\r\n      _this.drawTxt(svg, tx, ty,tw , txts, \"grey\",22, `text_${data['id']}`);\r\n      // let txts = _this.nameinput.split(\" \")\r\n      // _this.drawTxt(svg, x - r - 32, y + r + 50, r * 2 + 64, txts, \"grey\");\r\n    },\r\n    drawQuestionSurface(svg){\r\n      const _this = this;\r\n      let psvg =svg\r\n      let w = psvg.attr(\"width\");\r\n      let h = psvg.attr(\"height\");\r\n      psvg.select(\"#procG\").remove();\r\n      let backg = psvg.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", w).attr(\"height\", h);\r\n      let prog = psvg.append(\"g\").attr(\"id\", \"procG\").attr(\"width\", w).attr(\"height\", h);\r\n      let proData = _this.problemsData;\r\n      let problemConceptData = _this.problemConceptData;\r\n      let conceptTree = _this.conceptTree;\r\n\r\n      console.log(conceptTree,problemConceptData);\r\n      let proId = _this.curEntId;\r\n      if(proId == \"\"){return;}\r\n      let curPro = proData.find(function(p){return (p['id']).toString() == (proId).toString()})\r\n      let title = curPro['title'];\r\n      let type = curPro['type'];\r\n      let tx=10;\r\n      let ty = 20;\r\n      // ty = _this.drawTxt(prog,tx,ty,w,`Title:${title}`,\"black\",22,'title');\r\n      let content = curPro['content'].split(\"###\");\r\n\r\n      let input =\" \";\r\n      let output =\"\";\r\n      if(proId == '1568086661408161798'){\r\n        title = \"ASCII\";\r\n        content = [\"已知字符 'a' 的ASCII码为 97，执行下列语句的输出是_______。 `printf ('%d, %c', 'b', 'b'+1 )` ;\"];\r\n        _this.tableData.find(function(t){return t['key'] == 'InputT'})['value'] = \"\";\r\n        input = \"A.98, b   B.错误 C. 98, 99   D. 98, c\"\r\n        _this.tableData.find(function(t){return t['key'] == 'OutT'})['value'] = \"\";\r\n        // output = \"C. 98, 99   D. 98, c\"\r\n      }\r\n      else if(proId == '1568086661408161798'){\r\n        title = \"ASCII\";\r\n        content = [\"已知字符 'a' 的ASCII码为 97，执行下列语句的输出是_______。 `printf ('%d, %c', 'b', 'b'+1 )` ;\"];\r\n        _this.tableData.find(function(t){return t['key'] == 'InputT'})['value'] = \"\";\r\n        input = \"A.98, b   B.错误 C. 98, 99   D. 98, c\"\r\n        _this.tableData.find(function(t){return t['key'] == 'OutT'})['value'] = \"\";\r\n        // output = \"C. 98, 99   D. 98, c\"\r\n      }\r\n      else if(type == 'PROGRAMMING'){\r\n        input =\" \"+ content[1].split(\"输入格式:\")[1];\r\n        output =\"\"+ content[2].split(\"输出格式:\")[1];\r\n        title = `Title: ${' '} ${title}`;\r\n        _this.tableData.find(function(t){return t['key'] == 'ContentT'})['value'] = \"Description:\";\r\n        _this.tableData.find(function(t){return t['key'] == 'InputT'})['value'] = \"Input Format:\";\r\n        _this.tableData.find(function(t){return t['key'] == 'OutT'})['value'] = \"Output Format:\";\r\n      }\r\n      else{\r\n        title = \"\";\r\n\r\n        _this.tableData.find(function(t){return t['key'] == 'InputT'})['value'] = \"\";\r\n        _this.tableData.find(function(t){return t['key'] == 'OutT'})['value'] = \"\";\r\n      }\r\n      _this.tableData.find(function(t){return t['key'] == 'Title'})['value'] = `${' '} ${title}`;\r\n      _this.tableData.find(function(t){return t['key'] == 'Type'})['value'] = `Type: ${type}`;\r\n      _this.tableData.find(function(t){return t['key'] == 'Content'})['value'] = content[0];\r\n      _this.tableData.find(function(t){return t['key'] == 'Input'})['value'] = ` ${input}`;\r\n      _this.tableData.find(function(t){return t['key'] == 'Out'})['value'] = ` ${output}`;\r\n      console.log(_this.tableData)\r\n      let conMap = {}\r\n      let conName = []\r\n      for(let i=0;i<conceptTree.length;i++){\r\n        conMap[conceptTree[i]['id']] = -1;\r\n        conName.push(conceptTree[i]['id'])\r\n      }\r\n      // var compare = function (x, y) {//比较函数\r\n      //   let lenx = x.length;\r\n      //   let leny = y.length;\r\n      //   if(lenx!=leny)return lenx>leny;\r\n      //   return x[\"problemSetId\"] > y[\"problemSetId\"] \r\n      // };\r\n      // conName.sort(compare)\r\n\r\n      for (let i = 0; i < problemConceptData.length; i++) {\r\n        let conceptId = problemConceptData[i]['conceptId'];\r\n        let problemId = problemConceptData[i]['problem'];\r\n        let type = problemConceptData[i]['type'];\r\n        if(problemId == proId){\r\n          conMap[conceptId] = type;\r\n        }\r\n      }\r\n      let prex = 30;\r\n      let prey = 60;\r\n      let textWidth = _this.drawTxt(prog, 14, 20, \"Related concepts：\", \"rgb(103, 103, 103)\", 22, `kd`);\r\n      conceptTree.forEach(con=>{\r\n        let jg = conMap[con['id']];\r\n        if(jg!=-1){\r\n          let recColor = \"rgb(218, 127, 136)\";\r\n          if(jg==0)\r\n            recColor = \"grey\"\r\n          let textWidth = _this.drawTxt(prog, prex, prey, con['name'], \"white\", 16, `ProSur_con${con['id']}`);\r\n          _this.drawRect(backg, prex-4, prey-20, textWidth+8,28,  10, recColor, \"1\", \"none\", \"1\", `ProSur_coRect${con['id']}`, 'ProSur');\r\n        // prey+=10;\r\n          prex+=textWidth+20;\r\n          if(prex>270){\r\n            prex = 30;\r\n            prey+=30\r\n          }\r\n        }\r\n        // let textWidth = _this.drawTxt(prog, prex, prey, con['id']+''+conMap[con['id']], \"black\", 10, `FigNet_con`);\r\n\r\n          // _this.drawTxt(prog,prex,prey,w,`Title:${content}`,\"black\",16,'title');\r\n      })\r\n      // _this.drawTxt(prog,tx,ty+25,w,`Title:${content}`,\"black\",16,'title');\r\n    },    \r\n    \r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n      return rect;\r\n    },\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      \r\n        let textWidth = document.getElementById(`${idN}`).getBBox().width;\r\n      return textWidth;\r\n    },\r\n    drawTxtW(svg, x, y, width, txts, fill, fontsize = 12, idN) {\r\n      let tx = x;\r\n      let ty = y;\r\n      let preWidth = 0;\r\n      let preIdN = 0;\r\n      let pretext = ''\r\n      for (let t = 0; t < txts.length; t++) {\r\n        pretext +=\" \"+ txts[t];\r\n        let txt = svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"id\", `${idN}_${t}`)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\", fontsize)\r\n          .style(\"text-anchor\", \"start\")\r\n          .text(pretext)\r\n        let textWidth = document.getElementById(`${idN}_${t}`).getBBox().width;\r\n        if((textWidth>width)||(t==txts.length -1)){\r\n          pretext = '';\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n        else{\r\n          txt.remove()\r\n        }\r\n        preWidth += textWidth;\r\n      }\r\n      return ty;\r\n    },\r\n    drawTxtOri1(svg, x, y, width, txts, fill,fontsize=12) {\r\n      let tx = x;\r\n      let ty = y;\r\n      for (let t = 0; t < txts.length; t++) {\r\n\r\n      let txt =   svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"fill\", fill)\r\n          .attr(\"font-size\",fontsize)\r\n          .style(\"text-anchor\", \"middle\")\r\n          .text(txts[t])\r\n        tx += txts[t].length * 14;\r\n        if (tx - x > width) {\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n      }\r\n    },\r\n    drawTxtOri(svg, x, y, width, txts, fill) {\r\n      let tx = x;\r\n      let ty = y;\r\n      for (let t = 0; t < txts.length; t++) {\r\n\r\n        svg.append(\"text\")\r\n          .attr(\"y\", ty)\r\n          .attr(\"x\", tx)\r\n          .attr(\"fill\", fill)\r\n          .text(txts[t])\r\n        tx += txts[t].length * 10;\r\n        if (tx - x > width) {\r\n          tx = x;\r\n          ty += 25;\r\n        }\r\n      }\r\n    },\r\n    drawTriangle(svg, color, points, stroke, opacity = 1) {\r\n      svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"fill\", color)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", \"15px\");\r\n    },\r\n    drawCircle(svg, x, y, r, fill, data, opacity, className = 'entCircle', idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr(\"fill\", fill)\r\n        .on(\"mouseover\", function (d) {\r\n          d3.select(this).attr(\"r\", r * 1.1)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 1).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1.1)\"\r\n              })\r\n\r\n            d3.selectAll(\".basicRel\")\r\n              .attr(\"class\", function (d) {\r\n                let classN = d3.select(this).attr(\"class\");\r\n                let classNList = classN.split(\" \");\r\n                let jg = 0;\r\n                for (let i = 0; i < classNList.length - 1; i++) {\r\n                  console.log('source' + data['id'], classNList[i])\r\n                  if ('source' + data['id'] == classNList[i]) { jg = 1; }\r\n                  if ('target' + data['id'] == classNList[i]) { jg = 1; }\r\n                }\r\n                if (jg == 1) {\r\n                  classN += \" activeS\";\r\n                }\r\n                return classN;\r\n              })\r\n          }\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(this).attr(\"r\", r)\r\n          let classN = d3.select(this).attr(\"class\");\r\n          if (classN == 'linePoint') {\r\n            d3.select(this).attr(\"opacity\", 0).attr(\"r\", 5)\r\n          }\r\n          else {\r\n            d3.selectAll(\".f\" + data['id'])\r\n              .attr(\"transform\", function (d) {\r\n                let transformd = d3.select(this).attr(\"transform\")\r\n                return transformd.split(\" \")[0] + \" scale(1)\"\r\n              })\r\n            d3.selectAll(\"path\")\r\n              .attr(\"class\", function (d) {\r\n                let thisSelect = d3.select(this)\r\n                let classN = thisSelect.attr(\"class\");\r\n                let classNList = classN.split(\" \")\r\n                if (classNList[classNList.length - 1] == \"activeS\") {\r\n                  classN = \"\";\r\n                  for (let i = 0; i < classNList.length - 1; i++) {\r\n                    classN += classNList[i] + \" \";\r\n                  }\r\n                }\r\n                return classN\r\n              })\r\n          }\r\n        })\r\n        .on(\"mousedown\", function (d) {\r\n          d3.select(this).attr(\"r\", r);\r\n          d3.selectAll(\".f\" + data['id'])\r\n            .attr(\"transform\", function (d) {\r\n              let transformd = d3.select(this).attr(\"transform\")\r\n              return transformd.split(\" \")[0] + \" scale(1)\"\r\n            })\r\n          let thisId = this.id.split(\"_\")[1];\r\n          let thisData = oData.find(function (a) { return a['id'] == thisId })\r\n          let thisTime = thisData['time'];\r\n          _this.click_Ent(thisTime);\r\n          // console.log(thisTime,thisId,thisData)\r\n        })\r\n      // .on(\"\")\r\n    },\r\n    drawTimeLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n        .on('mouseover', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let idN = thisSelect.attr(\"id\");\r\n          if (classN.split(\" \")[0] == \"basicRel\") {\r\n            d3.select(this).attr(\"class\", classN + \" activeS\");\r\n          }\r\n        })\r\n        .on('mouseleave', function (d) {\r\n          let thisSelect = d3.select(this)\r\n          let classN = thisSelect.attr(\"class\");\r\n          let classNList = classN.split(\" \")\r\n          if (classNList[classNList.length - 1] == \"activeS\") {\r\n            classN = \"\";\r\n            for (let i = 0; i < classNList.length - 1; i++) {\r\n              classN += classNList[i] + \" \";\r\n            }\r\n            d3.select(this).attr(\"class\", classN);\r\n          }\r\n        })\r\n    },\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    updata() {\r\n      \r\n    const _this = this;\r\n      _this.drawprocData();\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    const _this = this;\r\n    this.$nextTick(() => {\r\n      _this.updata();\r\n\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this\r\n    // _this.tableData.find(function (d) { return d['key'] == 'name' })['value'] = 'Computer Network';\r\n    this.$bus.$on('selectEnt', (val) => {\r\n     _this.curEntId = val;\r\n     _this.updata();\r\n    });\r\n    this.$bus.$on('allProblem', (val) => {\r\n     _this.problemsData = val;\r\n      // _this.updata();\r\n    });\r\n    \r\n    this.$bus.$on('ConceptTree', (val) => {\r\n      _this.conceptTree = val;\r\n    });\r\n    \r\n    this.$bus.$on('Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n    });\r\n  },\r\n  // beforeDestroy() {\r\n  //   clearInterval(this.moveTimer);\r\n  // },\r\n} \r\n</script>\r\n\r\n<style>\r\n@import './index.css';\r\n</style>\r\n"],"sourceRoot":"src/components/ProblemContentPanel"}]}