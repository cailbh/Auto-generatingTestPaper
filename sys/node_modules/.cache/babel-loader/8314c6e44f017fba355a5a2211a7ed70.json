{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\pages\\Home\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\pages\\Home\\index.vue","mtime":1684101908213},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div id=\"root\">\r\n    <!-- <button1 ref=\"button1\"></button1>\r\n    <button v-on:click=\"clickHandler\">按钮</button> -->\r\n    <!-- <svg width=\"1200\" height=\"1000\"></svg> -->\r\n\r\n    <div id=\"Container\">\r\n      <!-- <div id=\"Container-back\"></div> -->\r\n      <div id=\"head\">\r\n\r\n        <!-- <Head></Head> -->\r\n      </div>\r\n      <div id=\"allBody\">\r\n        <div id=\"controlPanel\" class=\"panel\">\r\n          <ControlPanel @getToolState=\"getToolState\"></ControlPanel>\r\n        </div>\r\n        <div id=\"procPanel\" class=\"panel\">\r\n          <ProcPanel></ProcPanel>\r\n        </div>\r\n        <div id=\"graphContainer\" v-show=\"showGraph\" class=\"panel\">\r\n          <Graph :toolsState=\"toolsState\"></Graph>\r\n        </div>\r\n        <!-- <div id=\"overviewPanel\" class=\"panel\">\r\n          <OverviewPanel></OverviewPanel>\r\n        </div> -->\r\n        <!-- <transition name=\"sceneTran\"> -->\r\n\r\n        <!-- <div id=\"editPanel\" class=\"panel\"  v-if='showEdit==true'>\r\n          <EditPanel></EditPanel>\r\n        </div> -->\r\n        <div id=\"scatterPanel\" class=\"panel\">\r\n          <Scatter></Scatter>\r\n        </div>\r\n        <div id=\"netPPanel\" class=\"panel\">\r\n          <NetPPanel></NetPPanel>\r\n        </div>\r\n        <!-- </transition> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Head from \"@/components/Header/index.vue\";\r\nimport Graph from '@/components/Graph/index.vue';\r\nimport Scatter from '@/components/Scatter/index.vue';\r\nimport ProcPanel from '@/components/ProblemContentPanel/index.vue';\r\n\r\nimport ControlPanel from '@/components/ControlPanel/index.vue'\r\nimport NetPPanel from '@/components/NetProblemPanel/index.vue';\r\nimport GroupJson from \"@/assets/json/group.json\";\r\nimport SetJson from \"@/assets/json/quz.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nexport default {\r\n  components: { Head, Graph, Scatter, ProcPanel, NetPPanel, ControlPanel },\r\n  /* eslint-disable no-unused-vars */\r\n  data() {\r\n    return {\r\n      problemsData: [],\r\n      submissionsData: [],\r\n      groupData: GroupJson,\r\n      setTimeData: SetJson,\r\n      netData: [],\r\n      problemRelByConcept: [],\r\n      problemListByConcept: [],\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      SelectStudentList: [],\r\n      conceptTree: [],\r\n      proSetData: [],\r\n      problemConceptData: [],\r\n      userProblemData: [],\r\n      toolsState: {},\r\n      timer: null,\r\n      showVideo: true,\r\n      showGraph: true,\r\n      showEdit: false,\r\n      selectEntId: \"0\",\r\n      selectEnt: \"0\",\r\n      toolState: {},\r\n      timeDur: \"\",\r\n      videoTime: 0,\r\n      windowWidth: document.documentElement.clientWidth, //实时屏幕宽度\r\n      windowHeight: document.documentElement.clientHeight, //实时屏幕高度\r\n      attrColorList:[\r\n        \"rgb(254, 33, 79)\",\r\n        \"rgb(115, 230, 163)\",\r\n        \"rgb(250, 210, 50)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(125, 98, 211)\",\r\n      ],\r\n      // attrColorList:[\r\n      //   \"rgb(253, 174, 134)\",\r\n      //   \"rgb(115, 230, 163)\",\r\n      //   \"rgb(255, 233, 141)\",\r\n      //   \"rgb(56, 191, 201)\",\r\n      //   \"rgb(255, 122, 125)\",\r\n      //   \"rgb(224, 207, 243)\",\r\n      // ],\r\n      attrColorLightList:[\r\n        \"rgb(253, 174, 134)\",\r\n        \"rgb(255, 184, 240)\",\r\n        \"rgb(255, 173, 159)\",\r\n        \"rgb(255, 208, 133)\",\r\n        \"rgb(145, 226, 199)\",\r\n        \"rgb(167, 158, 221)\",\r\n      ],\r\n      stuColorList:[\r\n        \"rgb(253, 174, 134)\",\r\n        \"rgb(203, 64, 156)\",\r\n        \"rgb(85, 6, 134)\",\r\n        \"rgb(252, 171, 1)\",\r\n        \"rgb(73, 178, 101)\",\r\n      ],\r\n      // stuColorList:[\r\n      //   \"rgb(254, 33, 79)\",\r\n      //   \"rgb(252, 171, 1)\",\r\n      //   \"rgb(85, 6, 134)\",\r\n      //   \"rgb(203, 64, 156)\",\r\n      //   \"rgb(73, 178, 101)\",\r\n      // ],\r\n      mcolor: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(155,20,100)\",\r\n        \"rgb(255,83,255)\",\r\n        \"rgb(200,100,50)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(200,200,102)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,155,255)\",\r\n        \"rgb(50,200,120)\",\r\n        \"rgb(2,50,200)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(150,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      marge: {\r\n        top: 6,\r\n        right: 10,\r\n        bottom: 16,\r\n        left: 6,\r\n      },\r\n      barType: \"Teaching\",\r\n    };\r\n  },\r\n  watch: {\r\n    toolState(val) {\r\n      if (val == 'edit')\r\n        this.showEdit = true;\r\n      else\r\n        this.showEdit = false;\r\n    },\r\n    selectEnt(val) {\r\n      this.selectEntId = val;\r\n    },\r\n    timeDur() {\r\n    },\r\n    cube_data() {\r\n      this.$nextTick(() => { });\r\n    },\r\n    cluData() {\r\n      this.$nextTick(() => {\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    getProblems() {\r\n      const _this = this;\r\n      let data = [];\r\n      this.$http\r\n        // .get(\"/api/problem/allProblem\", { params: { name: \"12345\" } }, {})\r\n        .get(\"/api/problem/allProblem\", {}, {})\r\n        .then((response) => {\r\n          _this.problemsData = response.body;\r\n        });\r\n    },\r\n    getConcept() {\r\n      const _this = this;\r\n      this.$http\r\n        .get(\"/api/concept/allConcept\", {}, {})\r\n        .then((response) => {\r\n          _this.conceptsData = response.body;\r\n          _this.$bus.$emit(\"Concept\", _this.conceptsData);\r\n        });\r\n    },\r\n    getConceptTree() {\r\n      const _this = this;\r\n      this.$http\r\n        .get(\"/api/concept/conceptTree\", {}, {})\r\n        .then((response) => {\r\n          _this.conceptTree = response.body;\r\n          _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n        });\r\n    },\r\n    getSubmissions() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/Submission/allLog\", {}, {})\r\n        .then((response) => {\r\n          _this.submissionsData = response.body;\r\n          _this.$bus.$emit(\"Submission\", _this.submissionsData);\r\n          _this.calStudent();\r\n          _this.calcNetData();\r\n        });\r\n    },\r\n    getProblemConcept() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/conceptProblem/allRel\", {}, {})\r\n        .then((response) => {\r\n          _this.problemConceptData = response.body;\r\n          _this.$bus.$emit(\"Pro_Con\", _this.problemConceptData);\r\n        });\r\n    },\r\n    getStudents() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/student/allStudent\", {}, {})\r\n        .then((response) => {\r\n          _this.studentsData = response.body;\r\n        });\r\n    },\r\n    calStudent() {\r\n      const _this = this;\r\n      let entStudent = [];\r\n      let entConcept = [];\r\n      let entProblem = [];\r\n      let entProSet = [];\r\n\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      let setTimeData = _this.setTimeData;\r\n\r\n      let conceptTree = tools.deepClone(_this.conceptTree);\r\n      let problemsData = tools.deepClone(_this.problemsData);\r\n      let submissionsData = tools.deepClone(_this.submissionsData);\r\n      let problemConceptData = tools.deepClone(_this.problemConceptData);\r\n      \r\n      let groupData = _this.groupData;\r\n\r\n      console.log(SelectStudentList);\r\n\r\n      let valetemp = {\r\n        'totalTimeDur':0,\r\n        'timeDur':0,\r\n        'totalAttempts':0,\r\n        'acceptedAttempts':0,\r\n        'totalAttemptsPeople':0,\r\n        'acceptedAttemptsPeople':0,\r\n        'totalScore':0,\r\n        'accuracy':0,\r\n        'conCount':0,\r\n        'gvjg':-1,\r\n        'conList':[],\r\n        'scoringRate':0,\r\n        'stu':[]\r\n      }\r\n        let tempStudent = [];\r\n        let tempAllStudent = {};\r\n        let StudentMap = {};\r\n      for (let i = 0; i < groupData.length; i++) {\r\n        let uid = groupData[i]['id'];\r\n        let tp = tools.deepClone(valetemp);\r\n        tp['id'] = uid;\r\n        tempAllStudent[uid] = (tp);\r\n      }\r\n      valetemp['stuData']= tools.deepClone(tempAllStudent);\r\n      setTimeData.forEach(set=>{\r\n        set['timeSt'] = tools.time2mktime(set['time']);\r\n      })\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n          for(let j=0;j<SelectStudentList[i].length;j++){\r\n              StudentMap[SelectStudentList[i][j]] = i;\r\n          }\r\n          tempStudent.push(tools.deepClone(valetemp));\r\n      }\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        // let id = problemsData[i]['id'];\r\n        // problemsData[i] = tools.deepClone(valetemp);\r\n        // problemsData[i]['id'] = id;\r\n        problemsData[i]['totalTimeDur'] = 0;\r\n        problemsData[i]['timeDur'] = 0;\r\n        problemsData[i]['totalAttempts'] = 0;\r\n        problemsData[i]['acceptedAttempts'] = 0;\r\n        problemsData[i]['totalAttemptsPeople'] = 0;\r\n        problemsData[i]['acceptedAttemptsPeople'] = 0;\r\n        problemsData[i]['totalScore'] = 0;\r\n        problemsData[i]['accuracy'] = 0;\r\n        problemsData[i]['conCount'] = 0;\r\n        problemsData[i]['conList'] = [];\r\n        problemsData[i]['scoringRate'] = 0;\r\n        problemsData[i]['groupVal'] = tools.deepClone(tempStudent);\r\n        problemsData[i]['stu'] = [];\r\n        problemsData[i]['stuData'] = tools.deepClone(tempAllStudent);\r\n        let proSetId = problemsData[i]['problemSetId'];\r\n\r\n        let protime = setTimeData.find(function(s){return s['problemSetId'] == proSetId})['timeSt'];\r\n\r\n        problemsData[i]['timeSp'] = protime;\r\n        \r\n        if (entProSet.find(function (es) { return es['id'] == proSetId; }) == undefined) {\r\n          entProSet.push({\r\n            \"id\": proSetId,\r\n            \"pro\": [],\r\n            'totalScore': 0,\r\n          })\r\n        }\r\n        let ePS = entProSet.find(function (es) { return es['id'] == proSetId; });\r\n        ePS['pro'].push(problemsData[i]);\r\n        ePS['totalScore'] += problemsData[i]['score'];\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        conceptTree[c]['timeDur'] = 0;\r\n        conceptTree[c]['totalAttempts'] = 0;\r\n        conceptTree[c]['acceptedAttempts'] = 0;\r\n        conceptTree[c]['totalScore'] = 0;\r\n        conceptTree[c]['accuracy'] = 0;\r\n        conceptTree[c]['proCount'] = 0;\r\n        conceptTree[c]['scoringRate'] = 0;\r\n        conceptTree[c]['groupVal'] = tools.deepClone(tempStudent);\r\n\r\n      }\r\n      for (let l = 0; l < submissionsData.length; l++) {\r\n        let userId = submissionsData[l]['user']['user']['id'];\r\n\r\n        // if (SelectStudentList.indexOf(userId)!=-1){\r\n          if (entStudent.find(function (eS) { return eS['id'] == userId; }) == undefined) {\r\n            entStudent.push({ 'id': userId, \"pro\": [] });\r\n          }\r\n          let entStu = entStudent.find(function (eS) { return eS['id'] == userId; });\r\n          let jageProblemContents = submissionsData[l]['judgeResponseContents'];\r\n          let submitAt = submissionsData[l]['submitAt'];\r\n          \r\n          for (let i = 0; i < jageProblemContents.length; i++) {\r\n            let problemId = jageProblemContents[i]['problemSetProblemId'];\r\n            let score = jageProblemContents[i]['score'];\r\n            let proStatus = jageProblemContents[i]['status'];\r\n\r\n            if (entStu['pro'].find(function (p) { return p['id'] == problemId; }) == undefined) {\r\n              entStu['pro'].push({ \"id\": problemId, 'log': [], 'best': jageProblemContents[i], \"totalAttempts\": 0, \"totalScore\": 0 })\r\n            }\r\n            \r\n            let eSP = entStu['pro'].find(function (p) { return p['id'] == problemId; })\r\n            // eSP['log'].push(jageProblemContents[i]);\r\n\r\n            if (eSP['best']['score'] < score) {\r\n              eSP['best'] = jageProblemContents[i];\r\n            }\r\n            let pro = problemsData.find(function (p) { return p['id'] == problemId; })\r\n            if (pro != undefined) {\r\n              let timeSp = pro['timeSp']\r\n              // if (SelectStudentList.indexOf(userId)!=-1){\r\n                // console.log(StudentMap[userId],pro['groupVal'])\r\n              if(StudentMap[userId]!=undefined){\r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['totalAttempts'] += 1;\r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['gvjg'] = 1;\r\n                pro['groupVal'][StudentMap[userId]]['stu'][userId] = 0;\r\n                pro['groupVal'][StudentMap[userId]]['totalAttempts'] +=1;\r\n                pro['groupVal'][StudentMap[userId]]['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n                if (proStatus == 'ACCEPTED'){\r\n                  pro['groupVal'][StudentMap[userId]]['acceptedAttempts'] += 1;\r\n                  pro['groupVal'][StudentMap[userId]]['stuData'][userId]['acceptedAttempts'] += 1;\r\n                  pro['groupVal'][StudentMap[userId]]['stu'][userId] = 1;\r\n                }\r\n                pro['groupVal'][StudentMap[userId]]['totalScore'] += score / pro['score'];\r\n                \r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['totalScore'] += score / pro['score'];\r\n              }\r\n              pro['stuData'][userId]['totalAttempts'] += 1;\r\n              pro['stuData'][userId]['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n\r\n              pro['stu'][userId] =0;\r\n              pro['totalAttempts'] += 1;\r\n              pro['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n\r\n              eSP['totalAttempts'] += 1;\r\n              if (proStatus == 'ACCEPTED'){\r\n                \r\n                pro['acceptedAttempts'] += 1;\r\n                pro['stu'][userId] = 1;\r\n\r\n                pro['stuData'][userId]['acceptedAttempts'] += 1;\r\n\r\n              }\r\n              pro['totalScore'] += score / pro['score'];\r\n              \r\n              pro['stuData'][userId]['totalScore'] += score / pro['score'];\r\n              // }\r\n              eSP['totalScore'] += score / pro['score'];\r\n            }\r\n          }\r\n        // }\r\n      }\r\n      for (let i = 0; i < problemConceptData.length; i++) {\r\n        let conceptId = problemConceptData[i]['conceptId'];\r\n        let problemId = problemConceptData[i]['problem'];\r\n        let Pro = problemsData.find(function (p) { return p['id'] == problemId; });\r\n        Pro['conCount']++;\r\n        Pro['conList'].push(conceptId);\r\n      }\r\n\r\n\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        if (problemsData[i]['totalAttempts'] != 0) {\r\n          problemsData[i]['scoringRate'] = problemsData[i]['totalScore'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['acceptedRate'] = problemsData[i]['acceptedAttempts'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['timeDur'] = problemsData[i]['totalTimeDur'] / problemsData[i]['totalAttempts'];\r\n        }\r\n        let groupVal = problemsData[i]['groupVal'];\r\n        \r\n        for (let j = 0; j < groupVal.length; j++) {\r\n          if (groupVal[j]['totalAttempts'] != 0) {\r\n            groupVal[j]['scoringRate'] = groupVal[j]['totalScore'] / groupVal[j]['totalAttempts'];\r\n            groupVal[j]['acceptedRate'] = groupVal[j]['acceptedAttempts'] / groupVal[j]['totalAttempts'];\r\n            groupVal[j]['timeDur'] = groupVal[j]['totalTimeDur'] / groupVal[j]['totalAttempts'];\r\n\r\n            let stuData = groupVal[j]['stuData'];\r\n            Object.keys(stuData).forEach((s) => {\r\n\r\n              if (stuData[s]['totalAttempts'] != 0) {\r\n                stuData[s]['scoringRate'] = stuData[s]['totalScore'] / stuData[s]['totalAttempts'];\r\n                stuData[s]['acceptedRate'] = stuData[s]['acceptedAttempts'] / stuData[s]['totalAttempts'];\r\n                // stuData[s]['timeDur'] = stuData[s]['totalTimeDur'] / stuData[s]['totalAttempts'];\r\n              }\r\n            })\r\n          }\r\n        }\r\n\r\n        let stuData = problemsData[i]['stuData'];\r\n        Object.keys(stuData).forEach((s)=>{\r\n            \r\n          if (stuData[s]['totalAttempts'] != 0) {\r\n            stuData[s]['scoringRate'] = stuData[s]['totalScore'] / stuData[s]['totalAttempts'];\r\n            stuData[s]['acceptedRate'] = stuData[s]['acceptedAttempts'] / stuData[s]['totalAttempts'];\r\n            stuData[s]['timeDur'] = stuData[s]['totalTimeDur'] / stuData[s]['totalAttempts'];\r\n          }\r\n        })\r\n        \r\n        let num = 0;\r\n        let cur = 0;\r\n        let stu = problemsData[i]['stu'];\r\n        Object.keys(stu).forEach((s)=>{\r\n          if(stu[s]==1){\r\n            num++;\r\n            cur++;\r\n          }\r\n          if(stu[s]==0){\r\n            num++;\r\n          }\r\n        })\r\n        // for l in ep['log']:\r\n        //     num += 1\r\n        //     if ep['log'][l][0] == ep['score']:\r\n        //         cur += 1\r\n        // if cur != 0:\r\n        problemsData[i]['totalAttemptsPeople'] = num;\r\n        problemsData[i]['acceptedAttemptsPeople'] = cur;\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        let pcount = 0;\r\n        for (let i = 0; i < problemConceptData.length; i++) {\r\n          let conceptId = problemConceptData[i]['conceptId'];\r\n          if (conceptId == conceptTree[c]['id']) {\r\n            pcount++;\r\n            let problemId = problemConceptData[i]['problem'];\r\n            let ProBycon = problemsData.find(function (p) { return p['id'] == problemId; });\r\n            conceptTree[c]['proCount'] += 1;\r\n            conceptTree[c]['totalAttempts'] += ProBycon['totalAttempts'];\r\n            conceptTree[c]['acceptedAttempts'] += ProBycon['acceptedAttempts'];\r\n            conceptTree[c]['scoringRate'] += ProBycon['scoringRate'];\r\n            conceptTree[c]['accuracy'] += ProBycon['accuracy'];\r\n            conceptTree[c]['totalAttemptsPeople'] = ProBycon['totalAttemptsPeople'];\r\n            conceptTree[c]['acceptedAttemptsPeople'] = ProBycon['acceptedAttemptsPeople'];\r\n          }\r\n        }\r\n        if (conceptTree[c]['totalAttempts'] != 0)\r\n          conceptTree[c]['acceptedRate'] = conceptTree[c]['acceptedAttempts'] / conceptTree[c]['totalAttempts'];\r\n        else\r\n          conceptTree[c]['acceptedRate'] = 0;\r\n        if (pcount != 0) {\r\n          conceptTree[c]['scoringRate'] = conceptTree[c]['scoringRate'] / pcount;\r\n          conceptTree[c]['accuracy'] = conceptTree[c]['accuracy'] / pcount;\r\n        }\r\n      }\r\n      let logLen = 0;\r\n      for (let i = 0; i < entStudent.length; i++) {\r\n        let tempProSetScore = [];\r\n        for (let j = 0; j < entProSet.length; j++) {\r\n          tempProSetScore.push({\r\n            \"id\": entProSet[j]['id'],\r\n            \"totalScore\": entProSet[j]['totalScore'],\r\n            \"score\": 0\r\n          })\r\n        }\r\n        for (let l = 0; l < entStudent[i]['pro'].length; l++) {\r\n          let proId = entStudent[i]['pro'][l]['id'];\r\n          let proSetDa = problemsData.find(function (ep) { return ep['id'] == proId })\r\n          if (proSetDa != undefined) {\r\n            let proSetId = proSetDa['problemSetId'];\r\n            let bestScore = entStudent[i]['pro'][l]['best']['score'];\r\n            if (bestScore == NaN) {\r\n\r\n            }\r\n\r\n            tempProSetScore.find(function (tpss) { return tpss['id'] == proSetId })['score'] += bestScore;\r\n          }\r\n        }\r\n        entStudent[i]['proSetScore'] = tempProSetScore;\r\n      }\r\n      console.log(problemsData,entProSet,entStudent)\r\n      _this.studentsData = entStudent;\r\n      _this.$bus.$emit(\"Student\", _this.studentsData);\r\n      _this.proSetData = entProSet;\r\n      _this.$bus.$emit(\"proSet\", _this.proSetData);\r\n      _this.conceptTree = conceptTree;\r\n      _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n      _this.problemsData = problemsData;\r\n      _this.$bus.$emit(\"allProblem\", _this.problemsData);\r\n      _this.calcNetData();\r\n    },\r\n    calStudentbyGroup() {\r\n      const _this = this;\r\n      let entStudent = [];\r\n      let entConcept = [];\r\n      let entProblem = [];\r\n      let entProSet = [];\r\n\r\n      let SelectStudentList = _this.SelectStudentList;\r\n\r\n      let conceptTree = tools.deepClone(_this.conceptTree);\r\n      let problemsData = tools.deepClone(_this.problemsData);\r\n      let submissionsData = tools.deepClone(_this.submissionsData);\r\n      let problemConceptData = tools.deepClone(_this.problemConceptData);\r\n\r\n      console.log(SelectStudentList);\r\n      let tempStudent = [];\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n        let curnodelist = SelectStudentList[i];\r\n        tempStudent.push([])\r\n      }\r\n      \r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        problemsData[i]['totalAttempts'] = 0;\r\n        problemsData[i]['acceptedAttempts'] = 0;\r\n        problemsData[i]['totalAttemptsPeople'] = 0;\r\n        problemsData[i]['acceptedAttemptsPeople'] = 0;\r\n        problemsData[i]['totalScore'] = 0;\r\n        problemsData[i]['accuracy'] = 0;\r\n        problemsData[i]['conCount'] = 0;\r\n        problemsData[i]['conList'] = [];\r\n        problemsData[i]['scoringRate'] = 0;\r\n        problemsData[i]['stu'] = tools.deepClone(tempStudent);\r\n        let proSetId = problemsData[i]['problemSetId'];\r\n        if (entProSet.find(function (es) { return es['id'] == proSetId; }) == undefined) {\r\n          entProSet.push({\r\n            \"id\": proSetId,\r\n            \"pro\": [],\r\n            'totalScore': 0,\r\n          })\r\n        }\r\n        let ePS = entProSet.find(function (es) { return es['id'] == proSetId; });\r\n        ePS['pro'].push(problemsData[i]);\r\n        ePS['totalScore'] += problemsData[i]['score'];\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        conceptTree[c]['totalAttempts'] = 0;\r\n        conceptTree[c]['acceptedAttempts'] = 0;\r\n        conceptTree[c]['totalScore'] = 0;\r\n        conceptTree[c]['accuracy'] = 0;\r\n        conceptTree[c]['proCount'] = 0;\r\n        conceptTree[c]['scoringRate'] = 0;\r\n\r\n      }\r\n      for (let l = 0; l < submissionsData.length; l++) {\r\n        let userId = submissionsData[l]['user']['user']['id'];\r\n\r\n        // if (SelectStudentList.indexOf(userId)!=-1){\r\n          if (entStudent.find(function (eS) { return eS['id'] == userId; }) == undefined) {\r\n            entStudent.push({ 'id': userId, \"pro\": [] });\r\n          }\r\n          let entStu = entStudent.find(function (eS) { return eS['id'] == userId; });\r\n          let jageProblemContents = submissionsData[l]['judgeResponseContents'];\r\n          let submitAt = submissionsData[l]['submitAt'];\r\n          for (let i = 0; i < jageProblemContents.length; i++) {\r\n            let problemId = jageProblemContents[i]['problemSetProblemId'];\r\n            let score = jageProblemContents[i]['score'];\r\n            let proStatus = jageProblemContents[i]['status'];\r\n\r\n            if (entStu['pro'].find(function (p) { return p['id'] == problemId; }) == undefined) {\r\n              entStu['pro'].push({ \"id\": problemId, 'log': [], 'best': jageProblemContents[i], \"totalAttempts\": 0, \"totalScore\": 0 })\r\n            }\r\n            \r\n            let eSP = entStu['pro'].find(function (p) { return p['id'] == problemId; })\r\n            // eSP['log'].push(jageProblemContents[i]);\r\n\r\n            if (eSP['best']['score'] < score) {\r\n              eSP['best'] = jageProblemContents[i];\r\n            }\r\n            let pro = problemsData.find(function (p) { return p['id'] == problemId; })\r\n            if (pro != undefined) {\r\n              // if (SelectStudentList.indexOf(userId)!=-1){\r\n              pro['stu'][userId] =0;\r\n              pro['totalAttempts'] += 1;\r\n              eSP['totalAttempts'] += 1;\r\n              if (proStatus == 'ACCEPTED'){\r\n                pro['acceptedAttempts'] += 1;\r\n                pro['stu'][userId] = 1;\r\n              }\r\n              pro['totalScore'] += score / pro['score'];\r\n              // }\r\n              eSP['totalScore'] += score / pro['score'];\r\n            }\r\n          }\r\n        // }\r\n      }\r\n      for (let i = 0; i < problemConceptData.length; i++) {\r\n        let conceptId = problemConceptData[i]['conceptId'];\r\n        let problemId = problemConceptData[i]['problem'];\r\n        let Pro = problemsData.find(function (p) { return p['id'] == problemId; });\r\n        Pro['conCount']++;\r\n        Pro['conList'].push(conceptId);\r\n      }\r\n\r\n\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        if (problemsData[i]['totalAttempts'] != 0) {\r\n          problemsData[i]['scoringRate'] = problemsData[i]['totalScore'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['acceptedRate'] = problemsData[i]['acceptedAttempts'] / problemsData[i]['totalAttempts'];\r\n        }\r\n        let num = 0;\r\n        let cur = 0;\r\n        let stu = problemsData[i]['stu'];\r\n        Object.keys(stu).forEach((s)=>{\r\n          if(stu[s]==1){\r\n            num++;\r\n            cur++;\r\n          }\r\n          if(stu[s]==0){\r\n            num++;\r\n          }\r\n        })\r\n        // for l in ep['log']:\r\n        //     num += 1\r\n        //     if ep['log'][l][0] == ep['score']:\r\n        //         cur += 1\r\n        // if cur != 0:\r\n        problemsData[i]['totalAttemptsPeople'] = num;\r\n        problemsData[i]['acceptedAttemptsPeople'] = cur;\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        let pcount = 0;\r\n        for (let i = 0; i < problemConceptData.length; i++) {\r\n          let conceptId = problemConceptData[i]['conceptId'];\r\n          if (conceptId == conceptTree[c]['id']) {\r\n            pcount++;\r\n            let problemId = problemConceptData[i]['problem'];\r\n            let ProBycon = problemsData.find(function (p) { return p['id'] == problemId; });\r\n            conceptTree[c]['proCount'] += 1;\r\n            conceptTree[c]['totalAttempts'] += ProBycon['totalAttempts'];\r\n            conceptTree[c]['acceptedAttempts'] += ProBycon['acceptedAttempts'];\r\n            conceptTree[c]['scoringRate'] += ProBycon['scoringRate'];\r\n            conceptTree[c]['accuracy'] += ProBycon['accuracy'];\r\n            conceptTree[c]['totalAttemptsPeople'] = ProBycon['totalAttemptsPeople'];\r\n            conceptTree[c]['acceptedAttemptsPeople'] = ProBycon['acceptedAttemptsPeople'];\r\n          }\r\n        }\r\n        if (conceptTree[c]['totalAttempts'] != 0)\r\n          conceptTree[c]['acceptedRate'] = conceptTree[c]['acceptedAttempts'] / conceptTree[c]['totalAttempts'];\r\n        else\r\n          conceptTree[c]['acceptedRate'] = 0;\r\n        if (pcount != 0) {\r\n          conceptTree[c]['scoringRate'] = conceptTree[c]['scoringRate'] / pcount;\r\n          conceptTree[c]['accuracy'] = conceptTree[c]['accuracy'] / pcount;\r\n        }\r\n      }\r\n      let logLen = 0;\r\n      for (let i = 0; i < entStudent.length; i++) {\r\n        let tempProSetScore = [];\r\n        for (let j = 0; j < entProSet.length; j++) {\r\n          tempProSetScore.push({\r\n            \"id\": entProSet[j]['id'],\r\n            \"totalScore\": entProSet[j]['totalScore'],\r\n            \"score\": 0\r\n          })\r\n        }\r\n        for (let l = 0; l < entStudent[i]['pro'].length; l++) {\r\n          let proId = entStudent[i]['pro'][l]['id'];\r\n          let proSetDa = problemsData.find(function (ep) { return ep['id'] == proId })\r\n          if (proSetDa != undefined) {\r\n            let proSetId = proSetDa['problemSetId'];\r\n            let bestScore = entStudent[i]['pro'][l]['best']['score'];\r\n            if (bestScore == NaN) {\r\n\r\n            }\r\n\r\n            tempProSetScore.find(function (tpss) { return tpss['id'] == proSetId })['score'] += bestScore;\r\n          }\r\n        }\r\n        entStudent[i]['proSetScore'] = tempProSetScore;\r\n      }\r\n      _this.studentsData = entStudent;\r\n      _this.$bus.$emit(\"Student\", _this.studentsData);\r\n      _this.proSetData = entProSet;\r\n      _this.$bus.$emit(\"proSet\", _this.proSetData);\r\n      _this.conceptTree = conceptTree;\r\n      _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n      _this.problemsData = problemsData;\r\n      _this.$bus.$emit(\"allProblem\", _this.problemsData);\r\n      _this.calcNetData();\r\n    },\r\n    calcNetData() {\r\n      const _this = this;\r\n      let problemData = _this.problemsData;\r\n      let submissionsData = _this.submissionsData;\r\n      let studentsData = _this.studentsData;\r\n      let minSupport = 0.1;\r\n      let minConfidence = 0.1;\r\n      let frequentItemset2 = {};\r\n      let frequentItemset1 = {};\r\n      let netData = {};\r\n      let studPro = {};\r\n      for (let i = 0; i < problemData.length; i++) {\r\n        let problemId = problemData[i]['id'];\r\n        frequentItemset1[`${problemId}`] = 0;\r\n        studentsData.forEach((s) => {\r\n          // if(studentLog.find(function(sd){return sd['id'] == s['id'];})){\r\n          //   studentLog.push({\"id\":s['id'],\"pro\":[]});\r\n          // }\r\n          if(studPro[s['id']] == undefined){\r\n            studPro[s['id']] = {}\r\n          }\r\n          // let st = studentLog.find(function(sd){return sd['id'] == s['id'];});\r\n          let problemI = s['pro'].find(function (pro) { return pro['id'] == problemId });\r\n          if (problemI == undefined) {\r\n              frequentItemset1[`${problemId}`]++;\r\n              studPro[s['id']][problemId] = '0';\r\n              s['pro'].push({\r\n                \"id\":problemId,\r\n                \"log\":[],\"best\":{\"status\":\"none\",\"score\":0}\r\n              })\r\n          }\r\n          else{\r\n            studPro[s['id']][problemId] = problemI['best']['score'];\r\n            if (problemI['status'] != 'ACCEPTED') {\r\n              frequentItemset1[`${problemId}`]++;\r\n            }\r\n          }\r\n        })\r\n      }\r\n      for (let i = 0; i < problemData.length - 1; i++) {\r\n        let problemIId = problemData[i]['id'];\r\n        let problemScore = problemData[i]['score']\r\n        if (frequentItemset1[`${problemIId}`] > 0) {\r\n          for (let j = i + 1; j < problemData.length; j++) {\r\n            let problemJId = problemData[j]['id'];\r\n            frequentItemset2[`${problemIId}_${problemJId}`] = 0;\r\n            frequentItemset2[`${problemJId}_${problemIId}`] = 0;\r\n            let supportCount = 0;\r\n            if (frequentItemset1[`${problemJId}`] > 0) {\r\n              studentsData.forEach((s) => {\r\n                let problemI = studPro[s['id']][problemIId];\r\n                let problemJ = studPro[s['id']][problemJId];\r\n                if ((problemI<problemScore) && (problemJ <problemScore)) {\r\n                  frequentItemset2[`${problemIId}_${problemJId}`]++;\r\n                  frequentItemset2[`${problemJId}_${problemIId}`]++;\r\n                }\r\n              })\r\n              netData[`${problemIId}_${problemJId}`] = frequentItemset2[`${problemIId}_${problemJId}`] / frequentItemset1[`${problemIId}`];\r\n              netData[`${problemJId}_${problemIId}`] = frequentItemset2[`${problemJId}_${problemIId}`] / frequentItemset1[`${problemJId}`];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      _this.netData = netData;\r\n      _this.$bus.$emit(\"netData\",netData);\r\n    },\r\n    getAllData() {\r\n      const _this = this;\r\n      this.getConceptTree();\r\n      this.getProblems();\r\n      this.getProblemConcept();\r\n      this.getSubmissions();\r\n    },\r\n    getSelectEnt(val) {\r\n      this.selectEntId = val;\r\n    },\r\n    getTimeDur(value) {\r\n      this.timeDur = value\r\n    },\r\n    getToolState(val) {\r\n      this.toolsState = val;\r\n    },\r\n    // getToolState:{\r\n    //   deep:true,\r\n    //   handler(val) {\r\n    //     console.log(val)\r\n    //   this.toolsState = val;\r\n    // }\r\n    // },\r\n    getShowLabelState(value) {\r\n      this.showLabelState = value\r\n    }\r\n    ,\r\n\r\n    clickHandler() {\r\n      console.log(111111);\r\n    },\r\n  },\r\n  created: function () {\r\n    var _this = this;\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    this.$el.style.setProperty(\"--heightStyle\", this.windowHeight + \"px\");\r\n    this.showVideo = true;\r\n    this.$bus.$emit(\"attrColorList\", _this.attrColorList);\r\n    this.$bus.$emit(\"attrColorLightList\", _this.attrColorLightList);\r\n    this.$bus.$emit(\"stuColorList\", _this.stuColorList);\r\n    this.$bus.$emit(\"groupData\", _this.groupData);\r\n    this.toolState = {\r\n      \"addRel\": false,\r\n      \"addRelMain\": false,\r\n      \"delRel\":false,\r\n    }\r\n    this.getAllData();\r\n    this.$bus.$on('Updata_Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n      _this.calStudent();\r\n    });\r\n\r\n    this.$bus.$on('renew', (val) => {\r\n      if(val){\r\n        _this.getProblemConcept();\r\n          _this.calStudent();\r\n      }\r\n    });\r\n    this.$bus.$on('SelectedStu', (val) => {\r\n      _this.SelectStudentList = val;\r\n      // _this.calStudentbyGroup();\r\n      _this.calStudent();\r\n    });\r\n    // this.getData();\r\n  },\r\n  beforeDestroy() {\r\n    clearTimeout(this.timer);\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n@import '../../assets/style/home.css';\r\n</style>"],"sourceRoot":"src/pages/Home"}]}