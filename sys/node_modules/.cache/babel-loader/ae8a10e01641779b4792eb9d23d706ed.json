{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Graph\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Graph\\index.vue","mtime":1687230895419},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\babel.config.js","mtime":1647570572000},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"graph\" ref=\"graphDiv\">\r\n    <div class=\"panelHead\">Overview</div>\r\n    <div id=\"graphPanel\" class=\"panelBody\">\r\n      <div class=\"chartTooltip toolTip\">\r\n        <p>\r\n          <br /><strong class=\"name toolTipAttr\"></strong>\r\n          <br /><strong class=\"text toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr0 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr1 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr2 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr3 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr4 toolTipAttr\"></strong>\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"moveGraphLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"moveGraphRight\"></div> -->\r\n    <!-- <div id=\"assistGraphPanel\" class=\"panel\">\r\n        <div class=\"panelHead\"></div>\r\n      </div> -->\r\n    <!-- <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomInUrl\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div> -->\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\n// import TestJson from \"@/assets/json/case2_fin.json\";\r\n// import TestRelJson from \"@/assets/json/case2_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\n\r\nexport default {\r\n  props: [\"toolsState\"],\r\n  data() {\r\n    return {\r\n      data: '',\r\n      graphHeight: 0,\r\n      toolAddRel: false,\r\n      toolAddRelMain: false,\r\n      toolDelRel: false,\r\n      detailsEntPro: [],\r\n      SelectingStudentId:\"\",\r\n      SelectingConId:\"\",\r\n      SelectingProId:\"\",\r\n      groupData: [],\r\n      SelectStudentList: [],\r\n      problemsData: [],\r\n      proSetOriData: [],\r\n      submissionsData: [],\r\n      maxSetCon: 0,\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      conceptTree: [],\r\n      proSetData: [],\r\n      interY: 10,\r\n      problemConceptData: [],\r\n      createdProblemConceptData: [],\r\n      userProblemData: [],\r\n      proMaxMinDR: [],\r\n      proMaxMinDC: [],\r\n      proAttrList: [],\r\n      proAttrMaxMinList: [],\r\n      conMaxMinDR: [],\r\n      conMaxMinDC: [],\r\n      conAttrList: [],\r\n      conAttrMaxMinList: [],\r\n      Ent_problem: [],\r\n      Ent_concept: [],\r\n      entG: \"\",\r\n      entSetG: \"\",\r\n      entbySetG: \"\",\r\n      relG: \"\",\r\n      frontG: \"\",\r\n      curProblemId: '',\r\n      curConceptId: '',\r\n      curProblemSetId: '',\r\n      selectProblemId: '',\r\n      selectConceptId: '',\r\n      proX: 450,\r\n      proY: 30,\r\n      setWidth: 300,\r\n      setX: 830,\r\n      setY: 30,\r\n      treeX: 50,\r\n      treeY: 30,\r\n      proStepY: 0,\r\n      conStepY: 0,\r\n      rootSvg: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      curEntId: '',\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 672,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      graphGTransformK: 1,\r\n      graphGTransformX: 10,\r\n      graphGTransformY: 10,\r\n      graphSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n\r\n      entProMinColor: \"rgb(203, 230, 209)\",\r\n      entProMaxColor: \"rgb(22, 144, 207)\",\r\n\r\n      // setMaxColor: \"rgb(180, 212, 217)\",\r\n      // setMinColor: \"rgb(190, 253, 147)\",\r\n\r\n      setMaxColor: \"rgb(180, 212, 217)\",\r\n      setMinColor: \"rgb(169, 237, 167)\",\r\n\r\n      entConMaxColor: \"rgb(255, 0, 0)\",\r\n      entConMinColor: \"rgb(255, 255, 255)\",\r\n\r\n      entConRectMaxColor: \"rgb(46, 117, 182)\",\r\n      entConRectMinColor: \"rgb(157, 195, 230)\",\r\n//background 32, 56, 100\r\n//border 208, 206, 206\r\n      setConCountColorMax: \"rgb(36, 123, 178)\",\r\n      setConCountColorMin: \"rgb(146, 189, 217)\",\r\n\r\n      setTypeCountColorMax: \"rgb(251, 104, 20)\",\r\n      setTypeCountColorMin: \"rgb(253, 209, 161)\",\r\n\r\n      stepX: 80,\r\n      stepY: 100,\r\n      typeXMap: {\r\n        \"TRUE_OR_FALSE\": 0,\r\n        \"MULTIPLE_CHOICE\": 1,\r\n        \"FILL_IN_THE_BLANK\": 2,\r\n        \"PROGRAMMING\": 3,\r\n        // \"CODE_COMPLETION\":4,\r\n        // \"MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER\":5\r\n      },\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 10, right: 20, bottom: 0, left: 20 },\r\n      attrColorList: [],\r\n      stuColorList: [],\r\n      mcolor: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(155,20,100)\",\r\n        \"rgb(255,83,255)\",\r\n        \"rgb(200,100,50)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(200,200,102)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,155,255)\",\r\n        \"rgb(50,200,120)\",\r\n        \"rgb(2,50,200)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(150,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    toolAddRel(val) {\r\n    },\r\n    toolsState: {\r\n      deep: true,\r\n      handler(val) {\r\n        console.log(val)\r\n        this.toolAddRel = val['addRel'];\r\n        this.toolAddRelMain = val['addRelMain'];\r\n        this.toolDelRel = val['delRel'];\r\n      }\r\n    },\r\n    SelectStudentList: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.updataSelectStudentListColor();\r\n      }\r\n    },\r\n    SelectingStudentId(val){\r\n      console.log(val);\r\n      if(val == \"\"){\r\n          d3.selectAll(`.stuSetScoreLine`).attr(\"opacity\", 1);\r\n          d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.stuSetScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n          d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n          \r\n          d3.select(`#stuScoreLine_av`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuSetScoreLine_av`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuSetScoreLine_${val}`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuScoreLine_${val}`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n      }\r\n    },\r\n    SelectingProId(val){\r\n      if(val == \"\"){\r\n          d3.selectAll(`.proDetilB`).attr(\"opacity\", 0.3);\r\n          d3.selectAll(`.proDetil`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.proDetilB`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          d3.selectAll(`.proDetil`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          \r\n          d3.select(`#proDetil_${val}`).attr(\"opacity\", 0.3)//.attr('stroke-width', 3);\r\n          d3.select(`#proDetilB_${val}`).attr(\"opacity\", 1)//.attr('stroke-width', 3);\r\n      }\r\n    },\r\n    SelectingConId(val){\r\n      if(val == \"\"){\r\n          d3.selectAll(`.entCon`).attr(\"opacity\", 1);\r\n          // d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.entCon`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          // d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n\r\n          d3.select(`#entCon_${val}`).attr(\"opacity\", 1);\r\n          // d3.select(`#stuScoreLine_${val}`).attr(\"opacity\", 1);\r\n      }\r\n    },\r\n    graphGTransformY() {\r\n      const _this = this;\r\n      _this.updataPro_ProSetRel(_this.graphGTransformY);\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);\r\n    },\r\n    curConceptId(val) {\r\n      const _this = this;\r\n      // _this.$bus.$emit(\"selectEntCon\", val);\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      let curproId = _this.curProblemId;\r\n      \r\n      // _this.$bus.$emit(\"selectCon\", val);\r\n      let setEnt = [];//tools.deepClone() ;\r\n      if (_this.toolAddRel) {\r\n        let type = 0;\r\n        if (_this.toolAddRelMain) {\r\n          type = 1;\r\n        }\r\n        // createdProblemConceptData\r\n        // pro_conRelData.push({\r\n        //   \"problem\":curproId,\r\n        //   \"conceptId\":val,\r\n        // })\r\n        // _this.problemConceptData = pro_conRelData;\r\n        _this.createRel(curproId, val, type);\r\n\r\n      }\r\n      else if (_this.toolDelRel) {\r\n        _this.delRel(curproId, val);\r\n      }\r\n      else {\r\n        d3.selectAll(`.entPro`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.selectAll(`.entCon`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.select(`#entCon_${val}`)\r\n          .attr(\"opacity\", \"1\");\r\n        d3.selectAll(`.proConRel`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.selectAll(`.proSetConRel`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        pro_conRelData.forEach(rel => {\r\n          let proId = rel['problem'];\r\n          let conId = rel['conceptId'];\r\n          let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n          let proSetId = proData['problemSetId'];\r\n          if (conId == val) {\r\n            // d3.select(`#entCon_${conId}`)\r\n            // .attr(\"opacity\",\"1\");\r\n            if(setEnt.find(function(s){return s['id'] == proId})==undefined)\r\n              setEnt.push(proData);\r\n            d3.select(`#entPro_${proId}`)\r\n              .attr(\"opacity\", \"1\");\r\n            d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n              .attr(\"opacity\", \"1\");\r\n          }\r\n        })\r\n        \r\n      var compare = function (x, y) {//比较函数\r\n        return x[\"problemSetId\"] > y[\"problemSetId\"] \r\n      };\r\n        setEnt.sort(compare)\r\n        _this.detailsEntPro = setEnt;\r\n      }\r\n    },\r\n    curProblemId(val) {\r\n      const _this = this;\r\n      _this.$bus.$emit(\"selectEnt\", val);\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = _this.problemConceptData;\r\n      _this.$bus.$emit(\"selectEntData\", [val, Ent_problem]);\r\n      // entCon\r\n      d3.selectAll(`.entCon`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proSetConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      pro_conRelData.forEach(rel => {\r\n        let proId = rel['problem'];\r\n        let conId = rel['conceptId'];\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n        let proSetId = proData['problemSetId'];\r\n        if (proId == val) {\r\n          d3.select(`#entCon_${conId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proConRel_${conId}_${proId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n            .attr(\"opacity\", \"1\");\r\n        }\r\n      })\r\n    },\r\n    problemConceptData: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (this.toolAddRel) {\r\n          // this.updataPro_ConRel();\r\n          this.updataProSet_ConRel();\r\n          this.$bus.$emit(\"Updata_Pro_Con\", val);\r\n        }\r\n      }\r\n    },\r\n    curProblemSetId(val) {\r\n      const _this = this;\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = _this.problemConceptData;\r\n      this.updataEntProblemDetailBySet(\"none\", 0);\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);// entCon\r\n      d3.selectAll(`.entCon`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proSetConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      pro_conRelData.forEach(rel => {\r\n        let proId = rel['problem'];\r\n        let conId = rel['conceptId'];\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n        let proSetId = proData['problemSetId'];\r\n        if (proSetId == val) {\r\n          d3.select(`#entCon_${conId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proConRel_${conId}_${proId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n            .attr(\"opacity\", \"1\");\r\n        }\r\n      })\r\n    },\r\n    detailsEntPro(val) {\r\n\r\n\r\n      this.$bus.$emit(\"selectedPro\", val);\r\n\r\n      this.updataEntProblemDetail();\r\n      this.updataParallelCoordinatesplotByPro();\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);\r\n    },\r\n    Ent_problem: {\r\n      deep: true,\r\n      handler() {\r\n        // this.updataEntProblem();\r\n        this.updataEntProblemSetBack();\r\n        // this.updataPro_ConRel();\r\n        this.updataProSet_ConRel();\r\n      }\r\n    },\r\n    Ent_concept: {\r\n      deep: true,\r\n      handler() {\r\n        this.updataEntConcept();\r\n        // this.updataPro_ConRel();\r\n        this.updataProSet_ConRel();\r\n      }\r\n    }\r\n    // groupsSvg: {\r\n    //   deep: true,\r\n    //   handler() {\r\n    //     this.updataAssistGraphPanel();\r\n    //   }\r\n    // }\r\n  },\r\n  methods: {\r\n\r\n    createRel(problemId, conceptId, type) {\r\n      const _this = this;\r\n      this.$http\r\n        .post(\"/api/conceptProblem/createRel\", {\r\n          params: {\r\n            problem: problemId,\r\n            conceptId: conceptId,\r\n            type: type\r\n          }\r\n        }, {})\r\n        .then((response) => {\r\n          _this.$message({\r\n            message: 'add success',\r\n            type: 'success',\r\n            duration: 1000\r\n          });\r\n        });\r\n    },\r\n    delRel(problemId, conceptId) {\r\n      const _this = this;\r\n      this.$http\r\n        .post(\"/api/conceptProblem/delRel\", {\r\n          params: {\r\n            problem: problemId,\r\n            conceptId: conceptId,\r\n          }\r\n        }, {})\r\n        .then((response) => {\r\n          _this.$message({\r\n            message: 'del success',\r\n            type: 'warning',\r\n            duration: 1000\r\n          });\r\n        });\r\n    },\r\n    drawMainO(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"relG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"frontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      let stepY = _this.stepY;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX + e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK + e.transform.k - stk;\r\n\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n      let problemConceptData = _this.problemConceptData;\r\n      let ent_node = [];\r\n      let ent_edge = []\r\n      for (let r = 0; r < problemConceptData.length; r++) {\r\n        let curRel = problemConceptData[r];\r\n        let pId = curRel['problem'];\r\n        let cId = curRel['conceptId'];\r\n        ent_edge.push({\r\n          source: pId,\r\n          target: cId\r\n        })\r\n        if (ent_node.find(function (d) { return d['id'] == pId }) == undefined) {\r\n          ent_node.push({ \"id\": pId, \"type\": \"problem\" })\r\n        }\r\n        if (ent_node.find(function (d) { return d['id'] == cId }) == undefined) {\r\n          ent_node.push({ \"id\": cId, \"type\": \"concept\" })\r\n        }\r\n      }\r\n      var forceSimulation = d3.forceSimulation()\r\n        .force(\"link\", d3.forceLink().id((d) => { return d.id }))\r\n        .force(\"charge\", d3.forceManyBody().strength(-150))\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n      forceSimulation.nodes(ent_node)\r\n        .on(\"tick\");\r\n\r\n      forceSimulation.force(\"link\")\r\n        .links(ent_edge)\r\n        .distance(120);\r\n\r\n      let rSize = 10;\r\n      let svgWidth = width;\r\n      let svgHeight = height;\r\n\r\n      const drags = () => {\r\n\r\n        function dragstarted(event, d) {\r\n          if (!event.active) forceSimulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n        function dragged(event, d) {\r\n          d.fx = event.x;\r\n          d.fy = event.y;\r\n        }\r\n\r\n        function dragended(event, d) {\r\n          if (!event.active) forceSimulation.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n\r\n      var circle = frontG.selectAll('circle')\r\n        .data(ent_node)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"id\", function (d) { return d.id })\r\n        .attr(\"class\", function (d) { return d.type })\r\n        .attr(\"cx\", function (d) {\r\n          if (d.type == \"problem\")\r\n            _this.drawEntityProblem(entG, d.x, d.y, `entPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.drawEntityConcept(entG, d.x, d.y, `entCon_${d.id}`);\r\n          return d.x\r\n        })\r\n        .attr(\"cy\", function (d) { return d.y })\r\n        .attr(\"r\", 30)\r\n        .attr(\"opacity\", \"0\")\r\n        .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          let curEnt = {};\r\n          let tipName = '';\r\n          if (curType == 'problem') {\r\n\r\n            curEnt = _this.problemsData.find(function (p) {\r\n              return (p.id).toString() == (curId.toString());\r\n            });\r\n            tipName = curEnt['problemPoolIndex']\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['problem'] == curId) {\r\n                let conID = rel['conceptId'];\r\n                idNameList.push(`#entCon_${conID}`);\r\n              }\r\n            });\r\n            idNameList.push(`#entPro_${curId}`)\r\n          }\r\n          else if (curType == \"concept\") {\r\n            curEnt = _this.conceptTree.find(function (p) {\r\n              return (p.id).toString() == (curId.toString());\r\n            });\r\n            tipName = curEnt['name']\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['conceptId'] == curId) {\r\n                let proID = rel['problem'];\r\n                idNameList.push(`#entPro_${proID}`);\r\n              }\r\n            });\r\n            idNameList.push(`#entCon_${curId}`);\r\n          }\r\n          _this.entHover(idNameList);\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n          // 更新浮层内容\r\n          chartTooltip.select(\".name\").text(curType);\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"click\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          if (curType == 'problem') {\r\n            idNameList.push(`#entPro_${curId}`);\r\n            _this.curProblemId = curId;\r\n          }\r\n          else if (curType == \"concept\") {\r\n            idNameList.push(`#entCon_${curId}`)\r\n          }\r\n          _this.entHover(idNameList);\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          if (curType == 'problem') {\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['problem'] == curId) {\r\n                let conID = rel['conceptId'];\r\n                idNameList.push(`#entCon_${conID}`)\r\n              }\r\n            });\r\n            idNameList.push(`#entPro_${curId}`)\r\n          }\r\n          else if (curType == \"concept\") {\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['conceptId'] == curId) {\r\n                let proID = rel['problem'];\r\n                idNameList.push(`#entPro_${proID}`)\r\n              }\r\n            });\r\n            idNameList.push(`#entCon_${curId}`)\r\n          }\r\n          _this.entRemoveHover(idNameList);\r\n\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n        .call(drags());\r\n\r\n      var path = relG.selectAll('.path')\r\n        .data(ent_edge)\r\n        .enter()\r\n        .append('path')\r\n        .attr(\"class\", function (d) { return \"s-\" + d.source.id + \"-t-\" + d.target.id })\r\n        .attr('d', function (d) {\r\n          let eSource = d.source\r\n          let eTarget = d.target\r\n          let startA = [eSource.x, eSource.y]\r\n          let endA = [eTarget.x, eTarget.y]\r\n          let path = d3.path()\r\n          path.moveTo(startA[0], startA[1])\r\n          path.quadraticCurveTo(startA[0], startA[1], endA[0], endA[1]);\r\n          return path.toString()\r\n        })\r\n        .style('stroke', \"grey\")\r\n        .style(\"stroke-opacity\", \"0.3\")\r\n        .style('stroke-width', \"2\")\r\n\r\n      forceSimulation.on(\"tick\", () => {\r\n        circle.attr(\"cx\", (d) => {\r\n          let esx = d.x;\r\n          let esy = d.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n          if (d.type == \"problem\")\r\n            _this.updateEntity(entG, esx, esy, `entPro_${d.id}`)\r\n          //   _this.drawEntityProblem(entG, esx, esy, `entPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.updateEntity(entG, esx, esy, `entCon_${d.id}`)\r\n          //   _this.drawEntityConcept(entG, esx, esy, `entCon_${d.id}`);\r\n          if (d.x < rSize) return rSize\r\n          return d.x > svgWidth - rSize ? svgWidth - rSize : d.x\r\n        })\r\n          .attr(\"cy\", (d) => {\r\n            if (d.y < rSize) return rSize\r\n            return d.y > svgHeight - rSize ? svgHeight - rSize : d.y\r\n          });\r\n\r\n        path.attr(\"d\", (d) => {\r\n          let eSource = d.source;\r\n          let eTarget = d.target;\r\n          let esx = eSource.x;\r\n          let esy = eSource.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n          let etx = eTarget.x;\r\n          let ety = eTarget.y;\r\n          if (etx < rSize) etx = rSize;\r\n          etx = etx > svgWidth - rSize ? svgWidth - rSize : etx;\r\n          if (ety < rSize) ety = rSize;\r\n          ety = ety > svgHeight - rSize ? svgHeight - rSize : ety;\r\n          let path = d3.path();\r\n          path.moveTo(esx, esy);\r\n          path.quadraticCurveTo(esx, esy, etx, ety);\r\n          return path.toString();\r\n        })\r\n\r\n      });\r\n\r\n      svg.call(graphZoom)\r\n\r\n    },\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"relG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entSetG = groups.append(\"g\").attr(\"id\", \"entSetG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entbySetG = groups.append(\"g\").attr(\"id\", \"entbySetG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"frontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      _this.entG = entG;\r\n      _this.entSetG = entSetG;\r\n      _this.entbySetG = entbySetG;\r\n      _this.relG = relG;\r\n      _this.frontG = frontG;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 100])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX //+ e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK //+ e.transform.k - stk;\r\n          _this.updataPro_ProSetRel(graphGTransformY);\r\n          // _this.updataPro_ProSelfRel(graphGTransformY);\r\n          entbySetG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          entbySetG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n      svg.call(graphZoom);\r\n      const dragCon = () => {\r\n\r\n        function dragstarted(event, d) {\r\n        }\r\n        function dragged(event, d) {\r\n        }\r\n\r\n        function dragended(event, d) {\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n      let problemConceptData = _this.problemConceptData;\r\n      let conceptTree = _this.conceptTree;\r\n\r\n      let problemData = tools.deepClone(_this.problemsData);\r\n      // let treeData = _this.getTreeData(conceptTree);\r\n      // console.log(treeData)\r\n\r\n      let conMaxMinDR = _this.conMaxMinDR;\r\n      let conMaxMinDC = _this.conMaxMinDC;\r\n      let conAttrMaxMinList = _this.conAttrMaxMinList;\r\n      let currentConMaxColor = _this.entConMaxColor;\r\n      let currentConMinColor = _this.entConMinColor;\r\n      let importanceConColor_linear = d3.scaleLinear().domain([conMaxMinDC[0], conMaxMinDC[1]]).range([0, 1]);\r\n      let importanceConCompute_color = d3.interpolate(currentConMinColor, currentConMaxColor);\r\n      let rConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([3, 6]);\r\n      let r1ConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([6, 9]);\r\n      let r2ConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([9, 12]);\r\n      let linearList = [rConSize_linear, r1ConSize_linear, r2ConSize_linear];\r\n\r\n      let currentConRectMaxColor = _this.entConRectMaxColor;\r\n      let currentConRectMinColor = _this.entConRectMinColor;\r\n\r\n      let rectConColor_linear = d3.scaleLinear().domain([conAttrMaxMinList[2][1], conAttrMaxMinList[2][0]]).range([0, 1]);\r\n      let rectConWidth_linear = d3.scaleLinear().domain([conAttrMaxMinList[1][1], conAttrMaxMinList[1][0]]).range([30, 100]);\r\n\r\n      let rectConCompute_color = d3.interpolate(currentConRectMinColor, currentConRectMaxColor);\r\n\r\n      // concept---------\r\n      let treeX = _this.treeX;\r\n      let treeY = _this.treeY;\r\n      let stepY = (height - 90) / (conceptTree.length);\r\n\r\n      let tempConDistribution = {};\r\n\r\n      let proSetData = [];\r\n      let setOd = 0;\r\n      _this.conStepY = stepY;\r\n      let interY = _this.interY;\r\n      let Ent_concept = [];\r\n      for (let i = 0; i < conceptTree.length; i++) {\r\n        let tempCon = tools.deepClone(conceptTree[i]);\r\n        let cy = treeY + i * stepY;\r\n        let cid = tempCon['id'];\r\n\r\n        tempConDistribution[cid] = 0;\r\n\r\n        tempCon['lay'] = cid.split(\"-\").length;\r\n        let cx = treeX * tempCon['lay'];\r\n        tempCon['cx'] = cx;\r\n        tempCon['cy'] = cy;\r\n        tempCon['fill'] = importanceConCompute_color(importanceConColor_linear(tempCon['scoringRate']));\r\n        tempCon['rectFill'] = rectConCompute_color(rectConColor_linear(tempCon['acceptedRate']));\r\n        tempCon['rectW'] = rectConWidth_linear(tempCon['totalAttempts']);\r\n        tempCon['r'] = linearList[parseInt(3 - tempCon['lay'])](tempCon['proCount']);\r\n        tempCon['opacity'] = 1;\r\n        Ent_concept.push(tempCon);\r\n      }\r\n      _this.Ent_concept = Ent_concept;\r\n      //------------\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let proMaxMinDC = _this.proMaxMinDC;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let currentMaxColor = _this.entProMaxColor;\r\n      let currentMinColor = _this.entProMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([proMaxMinDC[0], proMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([15, 120]);\r\n\r\n      let setMaxColor = _this.setMaxColor;\r\n      let setMinColor = _this.setMinColor;\r\n      let setColor_linear = d3.scaleLinear().domain([0, 1]).range([0, 1]);\r\n      let setCompute_color = d3.interpolate(setMinColor, setMaxColor);\r\n\r\n      let typeXMap = _this.typeXMap;\r\n      //problem -----------\r\n      let proX = _this.proX;\r\n      let proY = _this.proY;\r\n      let Ent_problem = [];\r\n      let proStepY = (height - _this.interY * 12) / (problemData.length + 12);\r\n      _this.proStepY = proStepY;\r\n      _this.graphHeight = height;\r\n      for (let i = 0; i < problemData.length; i++) {\r\n        let tempPro = tools.deepClone(problemData[i]);\r\n        let pid = tempPro['id'];\r\n        let pSetId = tempPro['problemSetId'];\r\n        if (proSetData.find(function (ps) { return ps['id'] == pSetId; }) == undefined) {\r\n          proSetData.push({\r\n            \"id\": pSetId,\r\n            \"order\": setOd,\r\n            \"set\": [tempPro]\r\n          })\r\n          setOd++;\r\n        }\r\n        else {\r\n          proSetData.find(function (ps) { return ps['id'] == pSetId; })['set'].push(tempPro);\r\n        }\r\n        let cy = proY + i * proStepY + interY * setOd;\r\n        // let lay = cid.split(\"-\").length;\r\n        let cx = proX;\r\n        let r = proStepY;\r\n        let fill = \"grey\";\r\n        let opacity = 0.8;\r\n        let scoreValueList = _this.getMaxMinValue(tempPro['stuData'], \"scoringRate\");\r\n        let acceptedValueList = _this.getMaxMinValue(tempPro['stuData'], \"acceptedRate\");\r\n        let totalAttemptsValueList = _this.getMaxMinValue(tempPro['stuData'], \"totalAttempts\");\r\n        let groupVal = tempPro['groupVal'];\r\n\r\n        groupVal.forEach((group,g)=>{\r\n          let gscoreValueList = _this.getMaxMinValue(group['stuData'], \"scoringRate\",true);\r\n          let gacceptedValueList = _this.getMaxMinValue(group['stuData'], \"acceptedRate\",true);\r\n          let gtotalAttemptsValueList = _this.getMaxMinValue(group['stuData'], \"totalAttempts\",true);\r\n\r\n          tempPro['groupVal'][g]['scoreValueList'] = gscoreValueList;\r\n          tempPro['groupVal'][g]['acceptedValueList'] = gacceptedValueList;\r\n          tempPro['groupVal'][g]['totalAttemptsValueList'] = gtotalAttemptsValueList;\r\n        })\r\n\r\n        // let Cname  = tempPro['name'];\r\n        tempPro['scoreValueList'] = scoreValueList;\r\n        tempPro['acceptedValueList'] = acceptedValueList;\r\n        tempPro['totalAttemptsValueList'] = totalAttemptsValueList;\r\n\r\n\r\n        tempPro['cx'] = cx//+typeXMap[tempPro['type']]*100;\r\n        tempPro['cy'] = cy;\r\n        tempPro['order'] = i;\r\n        tempPro['width'] = rSize_linear(tempPro[\"conCount\"]);\r\n        tempPro['fill'] = importanceCompute_color(importanceColor_linear(tempPro['scoringRate']));\r\n        tempPro['height'] = proStepY;\r\n        Ent_problem.push(tempPro);\r\n        // let circle = _this.drawCircle(entG, cx, cy, r, fill, opacity, );t text = _this.drawTxt(entG, cx+20, cy+3.5, Cname, \"black\", 12, `entConText_${cid}`);\r\n      }\r\n      let setStepY = (height - 90) / proSetData.length;\r\n      let colorList = _this.mcolor;\r\n      let tempTypeDistribution = {};\r\n      Object.keys(typeXMap).forEach(t => {\r\n        tempTypeDistribution[t] = 0;\r\n      })\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let psid = proSetData[i]['id'];\r\n        let set = proSetData[i]['set'];\r\n        proSetData[i]['cx'] = _this.proX - 3;\r\n        proSetData[i]['width'] = _this.setWidth;\r\n        let conDistribution = tools.deepClone(tempConDistribution);\r\n        let typeDistribution = tools.deepClone(tempTypeDistribution);\r\n        let scoringRate = 0;\r\n        set.forEach(sPro => {\r\n          let conList = sPro['conList'];\r\n          scoringRate += sPro['scoringRate'];\r\n          conList.forEach(c => {\r\n            conDistribution[c]++;\r\n            if (conDistribution[c] > _this.maxSetCon)\r\n              _this.maxSetCon = conDistribution[c];\r\n          });\r\n          let type = sPro['type'];\r\n          if (type == 'MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER')\r\n            type = \"MULTIPLE_CHOICE\";\r\n          if (type == 'CODE_COMPLETION')\r\n            type = \"PROGRAMMING\";\r\n          typeDistribution[type]++;\r\n          // let groupData = sPro['groupVal'];\r\n          // console.log(groupData)\r\n        })\r\n        proSetData[i]['scoringRate'] = scoringRate / set.length;\r\n        proSetData[i]['conDistribution'] = conDistribution;\r\n        proSetData[i]['typeDistribution'] = typeDistribution;\r\n        // proSetData[i]['fill'] = colorList[proSetData[i]['order']];\r\n        // console.log\r\n        proSetData[i]['fill'] = setCompute_color(setColor_linear(proSetData[i]['scoringRate']));\r\n        // -----------------------------------\r\n        // proSetData[i]['cy'] = Ent_problem.find(function(ep){return ep['id'] == set[0];})['cy'];\r\n        // let edP = Ent_problem.find(function(ep){return ep['id'] == set[set.length-1];})\r\n        // proSetData[i]['height'] = edP['cy'] - proSetData[i]['cy']+edP['height'];\r\n        // -----------------------------------\r\n        proSetData[i]['cy'] = 30 + setStepY * i;\r\n        proSetData[i]['height'] = setStepY - 10;\r\n        // -------------------------------------\r\n      }\r\n      // let conDistributiondomainList = []\r\n      // conceptTree.forEach(con=>{\r\n      //   let domain = _this.getMaxMin(proSetData, 'conCount');\r\n      // })\r\n      _this.Ent_problem = Ent_problem;\r\n      // ---------------------\r\n      _this.proSetData = proSetData;\r\n      // this.updataPro_ConRel(); \r\n      _this.updataEntProblemSetBack();\r\n      _this.updataProSet_ConRel();\r\n      _this.updataParallelCoordinatesplotBySet();\r\n      if (_this.detailsEntPro != [])\r\n        _this.updataEntProblemDetail();\r\n      _this.drawFigureAnnotation();\r\n\r\n    },\r\n    drawFigureAnnotation() {\r\n      const _this = this;\r\n      let frontG = _this.frontG;\r\n\r\n      let currentConMaxColor = _this.entConMaxColor;\r\n      let currentConMinColor = _this.entConMinColor;\r\n      let len = 6;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let Color_linear2 = d3.scaleLinear().domain([0, len * 3]).range([0, 1]);\r\n      let Rsize_linear = d3.scaleLinear().domain([0, len]).range([1, 6]);\r\n      let Compute_color = d3.interpolate(currentConMinColor, currentConMaxColor);\r\n      let Compute_color1 = d3.interpolate(\"white\", _this.setConCountColorMax);\r\n      let Compute_color2 = d3.interpolate(\"white\", _this.setTypeCountColorMax);\r\n      let Compute_color3 = d3.interpolate(_this.setMinColor, _this.setMaxColor);\r\n\r\n      let currentConRectMaxColor = _this.entConRectMaxColor;\r\n      let currentConRectMinColor = _this.entConRectMinColor;\r\n      let rectConColor_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let rectConCompute_color = d3.interpolate(\"white\", currentConRectMaxColor);\r\n      // _this.drawCircle(frontG, 20, 1000, 10, currentConMaxColor, 1, currentConMaxColor, \"1\", 'FigAtt', `FigAtt_conColor`);\r\n\r\n      let textcon = _this.drawTxt(frontG, 10, 1065, \"Concepts Value:\", \"black\", 13, `FigAtt_con`);\r\n      let textset = _this.drawTxt(frontG, 350, 1065, \"Set Value:\", \"black\", 13, `FigAtt_set`);\r\n      let textsetSR = _this.drawTxt(frontG, 540, 1085, \"ScoringRate:\", \"black\", 10, `FigAtt_conColor`);\r\n\r\n      let textsetR = _this.drawTxt(frontG, 480, 15, \"Concepts\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsetcon = _this.drawTxt(frontG, 560, 15, \"Type\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsettype = _this.drawTxt(frontG, 640, 15, \"ScoringRate\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsetRscor = _this.drawTxt(frontG, 720, 15, \"Attempts\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n\r\n      // let textpro = _this.drawTxt(frontG, 800, 1065, \"Problems Value:\", \"black\", 13, `FigAtt_pro`);\r\n      let text1 = _this.drawTxt(frontG, 10, 1085, \"Scoring Rate:\", \"black\", 10, `FigAtt_conColor`);\r\n      let text2 = _this.drawTxt(frontG, 10, 1105, \"Connection Nums:\", \"black\", 10, `FigAtt_Rsize`);\r\n\r\n      // let text3 = _this.drawTxt(frontG, 100, 1070, \"Low\", \"black\", 10, `FigAtt_Low`);\r\n      // let text4 = _this.drawTxt(frontG, 100+10*len, 1070, \"High\", \"black\", 10, `FigAtt_High`);\r\n\r\n      let text5 = _this.drawTxt(frontG, 180, 1085, \"Pass Rate:\", \"black\", 10, `FigAtt_conColor`);\r\n      let text6 = _this.drawTxt(frontG, 180, 1105, \"Attempts:\", \"black\", 10, `FigAtt_Rsize`);\r\n      let textsetnum = _this.drawTxt(frontG, 350, 1085, \"Connection Nums:\", \"black\", 10, `FigAtt_proConDis`);\r\n      let textsetTypenum = _this.drawTxt(frontG, 350, 1105, \"Type Nums:\", \"black\", 10, `FigAtt_proConDis`);\r\n\r\n      let text7 = _this.drawTxt(frontG, 602, 1095, \"Low\", \"black\", 10, `FigAtt_Low`);\r\n      let text8 = _this.drawTxt(frontG, 695, 1095, \"High\", \"black\", 10, `FigAtt_High`);\r\n      let prex = 0;\r\n      let prerx = 0;\r\n      for (let i = 0; i < len * 3; i++) {\r\n        let color3 = Compute_color3(Color_linear2(i));\r\n\r\n        _this.drawRect(frontG, 620 + 4 * i, 1077, 4, 10, 0, color3, \"1\", \"none\", \"1\", `FigAtt_setColor${i}`, 'FigAtt');\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        let color = Compute_color(Color_linear(i));\r\n        let color1 = Compute_color1(Color_linear(i));\r\n        let color2 = Compute_color2(Color_linear(i));\r\n        // let color3 = Compute_color3(Color_linear(i));\r\n        let rcolor = rectConCompute_color(rectConColor_linear(i));\r\n\r\n        _this.drawCircle(frontG, 110 + 10 * i, 1082, 3, color, 1, \"red\", \"1\", 'FigAtt', `FigAtt_conColor${i}`);\r\n\r\n        _this.drawCircle(frontG, 110 + prex, 1102, Rsize_linear(i), Compute_color(Color_linear(7)), 1, \"red\", \"1\", 'FigAtt', `FigAtt_conRsize${i}`);\r\n\r\n        prex += Rsize_linear(i) * 2 + 4;\r\n\r\n        _this.drawRect(frontG, 250 + 12 * i, 1077, 10, 10, 0, rcolor, \"1\", \"grey\", \"1\", `FigAtt_conRectColor${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 250 + prerx, 1097, i * 4, 10, 0, rectConCompute_color(rectConColor_linear(6)), \"1\", \"grey\", \"1\", `FigAtt_conRectWidth${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 450 + prerx, 1077, i * 4, 10, 0, color1, \"1\", \"grey\", \"1\", `FigAtt_setconRectWidth${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 450 + prerx, 1097, i * 4, 10, 0, color2, \"1\", \"grey\", \"1\", `FigAtt_settypeRectWidth${i}`, 'FigAtt');\r\n\r\n        prerx += i * 4 + 2;\r\n      }\r\n    },\r\n    updataSelectStudentListColor() {\r\n      const _this = this;\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      let colorList = _this.stuColorList;\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n        for (let j = 0; j < SelectStudentList[i].length; j++) {\r\n          let stuId = SelectStudentList[i][j];\r\n          d3.select(`#stuSetScoreLine_${stuId}`).attr(\"stroke\", colorList[i]);\r\n          d3.select(`#stuScoreLine_${stuId}`).attr(\"stroke\", colorList[i]);\r\n        }\r\n      }\r\n    },\r\n    updataParallelCoordinatesplotBySet() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      let studentsData = tools.deepClone(_this.studentsData);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proSetOriData = tools.deepClone(_this.proSetOriData);\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      let colorList = _this.mcolor;\r\n\r\n      //轴\r\n      let paraX = 1100;\r\n      let stepY = (_this.graphHeight - 90) / (proSetData.length);\r\n      let avpath = d3.path();\r\n      let prex = 0;\r\n      let prey = 0;\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let cx = paraX;\r\n        let cy = proSetData[i]['cy'] + proSetData[i]['height'] / 2//;stepY*(i+1)\r\n        let width = 200;\r\n        let height = 3;\r\n        let psId = proSetData[i]['id'];\r\n        let fill = proSetData[i]['fill'];\r\n        proSetData[i]['axisX'] = cx;\r\n        proSetData[i]['axisY'] = cy;\r\n        proSetData[i]['axisW'] = width;\r\n        proSetData[i]['axisH'] = height;\r\n        let axis = _this.drawRect(entG, cx, cy, width, height, 0, fill, \"0\", \"none\", \"1\", `proSetAxis_${psId}`, 'proSetAxis');\r\n        let av = 0;\r\n        let num = 0;\r\n        let totalScore = 0\r\n        for (let j = 0; j < studentsData.length; j++) {\r\n          let proSetScore = studentsData[i]['proSetScore'];\r\n          let psData = proSetScore.find(function (psd) { return psd['id'] == psId; });\r\n          av += psData['score'];\r\n          totalScore = psData['totalScore'];\r\n          num += 1;\r\n        }\r\n        av /= num;\r\n        let val_linear = d3.scaleLinear().domain([0, totalScore]).range([cx, cx + width]);\r\n        let pointy = cy;\r\n        let pointx = val_linear(av);\r\n        if (i == 0) {\r\n          avpath.moveTo(pointx, pointy);\r\n          prex = pointx;\r\n          prey = pointy;\r\n        }\r\n        else {\r\n          let c1x = prex;\r\n          let c1y = (pointy + prey) / 2;\r\n          let c2x = pointx;\r\n          let c2y = c1y;\r\n          avpath.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n          prey = pointy\r\n          prex = pointx\r\n        }\r\n      }\r\n      _this.drawLine(relG, avpath, \"grey\", 3, '0', \"1\", `stuSetScoreLine_av`, 'stuSetScoreLine');\r\n      prex = 0;\r\n      prey = 0;\r\n      for (let i = 0; i < studentsData.length; i++) {\r\n        let path = d3.path();\r\n        let proSetScore = studentsData[i]['proSetScore'];\r\n        let stuId = studentsData[i]['id'];\r\n        for (let s = 0; s < proSetScore.length; s++) {\r\n          let psId = proSetScore[s]['id'];\r\n          let psData = proSetData.find(function (psd) { return psd['id'] == psId; });\r\n          let cx = psData['axisX'];\r\n          let w = psData['axisW'];\r\n          let val_linear = d3.scaleLinear().domain([0, proSetScore[s]['totalScore']]).range([cx, cx + w]);\r\n          let pointy = psData['axisY'];\r\n          let pointx = val_linear(proSetScore[s]['score']);\r\n          if (s == 0) {\r\n            path.moveTo(pointx, pointy);\r\n            prex = pointx;\r\n            prey = pointy;\r\n          }\r\n          else {\r\n            let c1x = prex;\r\n            let c1y = (pointy + prey) / 2;\r\n            let c2x = pointx;\r\n            let c2y = c1y;\r\n            path.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n            prey = pointy\r\n            prex = pointx\r\n          }\r\n        }\r\n        let groupD = groupData.find(function (d) { return d['id'] == stuId; });\r\n        let fill = \"grey\";\r\n        _this.drawLine(relG, path, fill, 1, '0', \"0.3\", `stuSetScoreLine_${stuId}`, 'stuSetScoreLine');\r\n      }\r\n    },\r\n    updataParallelCoordinatesplotByPro() {\r\n      d3.selectAll(`.proSetAxis`).remove();\r\n      d3.selectAll(`.proAxis`).remove();\r\n      d3.selectAll(`.stuSetScoreLine`).remove();\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let studentsData = tools.deepClone(_this.studentsData);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proSetOriData = tools.deepClone(_this.proSetOriData);\r\n      let setEnt = tools.deepClone(_this.detailsEntPro);\r\n      let colorList = _this.mcolor;\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      //轴\r\n      let paraX = 1100;\r\n      let stepY = _this.graphHeight / (setEnt.length);\r\n      let avpath = d3.path();\r\n      let prex = 0;\r\n      let prey = 0;\r\n      for (let i = 0; i < setEnt.length; i++) {\r\n        let cx = paraX;\r\n        let cy = 10 +stepY * (i+0.5);//setEnt[i]['cy']+setEnt[i]['height']/2//;stepY*(i+1)\r\n        let width = 200;\r\n        let height = 2;\r\n        let psId = setEnt[i]['id'];\r\n        let fill = setEnt[i]['fill'];\r\n        setEnt[i]['axisX'] = cx;\r\n\r\n        setEnt[i]['axisY'] = cy;\r\n        setEnt[i]['axisW'] = width;\r\n        setEnt[i]['axisH'] = height;\r\n        let axis = _this.drawRect(entG, cx, cy, width, height, 0, fill, \"0\", \"none\", \"1\", `proAxis_${psId}`, 'proAxis');\r\n        let av = 0;\r\n        let num = 0;\r\n        let maxv = 0\r\n        for (let j = 0; j < studentsData.length; j++) {\r\n          let proList = studentsData[j]['pro'];\r\n          let psData = proList.find(function (psd) { return psd['id'] == psId; });\r\n          if (psData['totalScore'] != undefined) {\r\n            // console.log(psData)\r\n            av += psData['totalScore'] / psData['totalAttempts'];\r\n          }\r\n          // av+=psData['totalScore']/psData['totalAttempts'];\r\n          // else\r\n          num += 1;\r\n        }\r\n        av /= num;\r\n        // console.log(av)\r\n        let val_linear = d3.scaleLinear().domain([0, 1]).range([cx, cx + width]);\r\n        let pointy = cy;\r\n        let pointx = val_linear(av);\r\n        if (i == 0) {\r\n          avpath.moveTo(pointx, pointy);\r\n          prex = pointx;\r\n          prey = pointy;\r\n        }\r\n        else {\r\n          let c1x = prex;\r\n          let c1y = (pointy + prey) / 2;\r\n          let c2x = pointx;\r\n          let c2y = c1y;\r\n          avpath.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n          prey = pointy\r\n          prex = pointx\r\n        }\r\n\r\n      }\r\n      _this.drawLine(relG, avpath, \"grey\", 3, '0', \"1\", `stuScoreLine_av`, 'stuScoreLine');\r\n      prex = 0;\r\n      prey = 0;\r\n      for (let i = 0; i < studentsData.length; i++) {\r\n        let path = d3.path();\r\n        let proList = studentsData[i]['pro'];\r\n        let stuId = studentsData[i]['id'];\r\n        let s = 0;\r\n        setEnt.forEach(se => {\r\n          let pId = se['id'];\r\n          let proaxisD = proList.find(function (se) { return se['id'] == pId });\r\n          let cx = se['axisX'];\r\n          let w = se['axisW'];\r\n          let pointy = se['axisY'];\r\n          // ----------------------------------\r\n          // let val_linear = d3.scaleLinear().domain([0,se['score']]).range([cx, cx+w]);\r\n          // let pointx = val_linear(proaxisD['best']['score']); \r\n          // --------------------------------------\r\n          let val_linear = d3.scaleLinear().domain([0, 1]).range([cx, cx + w]);\r\n          let pointx = val_linear(proaxisD['totalScore'] / proaxisD['totalAttempts']);\r\n          if (proaxisD['totalScore'] == undefined)\r\n            pointx = val_linear(0)\r\n          // -------------------------------------------\r\n          if (s == 0) {\r\n            path.moveTo(pointx, pointy);\r\n            prex = pointx;\r\n            prey = pointy;\r\n            s += 1;\r\n          }\r\n          else {\r\n\r\n            let c1x = prex;\r\n            let c1y = (pointy + prey) / 2;\r\n            let c2x = pointx;\r\n            let c2y = c1y;\r\n            path.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n            prey = pointy;\r\n            prex = pointx;\r\n            // path.lineTo();\r\n          }\r\n        })\r\n\r\n        let groupD = groupData.find(function (d) { return d['id'] == stuId; });\r\n        let fill = 'grey'//colorList[groupD['kmeansC']*3];\r\n        let line = _this.drawLine(entG, path, fill, 1, '0', '0.3', `stuScoreLine_${stuId}`, 'stuScoreLine');\r\n        // let proSetScore = studentsData[i]['proSetScore'];\r\n        // let stuId = studentsData[i]['id'];\r\n        // for(let s=0;s<proSetScore.length;s++){\r\n        //   let psId = proSetScore[s]['id'];\r\n        //   let psData = proSetData.find(function(psd){return psd['id'] == psId;});\r\n        //   let cx = psData['axisX'];\r\n        //   let w = psData['axisW'];\r\n        //   let val_linear = d3.scaleLinear().domain([0,proSetScore[s]['totalScore']]).range([cx, cx+w]);\r\n        //   let pointy = psData['axisY'];\r\n        //   let pointx = val_linear(proSetScore[s]['score']); \r\n        //   if(s==0){\r\n        //     path.moveTo(pointx,pointy);\r\n        //   }\r\n        //   else{\r\n        //     path.lineTo(pointx,pointy);\r\n        //   }\r\n        // }\r\n        // _this.drawLine(relG, path, \"rgb(200,200,200)\", 2, '0', `stuSetScoreLine_${stuId}`, 'stuSetScoreLine');\r\n      }\r\n    },\r\n    updataPro_ConRel() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let typeXMap = _this.typeXMap;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      for (let i = 0; i < pro_conRelData.length; i++) {\r\n        let curRel = pro_conRelData[i];\r\n        let conId = curRel['conceptId'];\r\n        let proId = curRel['problem'];\r\n        let conData = Ent_concept.find(function (d) { return d['id'] == conId; });\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; });\r\n        let sx = conData['cx'] + conData['rectW'] + 30;\r\n        let sy = conData['cy'];\r\n        let tx = proData['cx'];\r\n        let ty = proData['cy'] + proData['height'] / 2;\r\n        let c1x = (sx) + 100;\r\n        let c1y = (sy)\r\n        let c2x = (sx);\r\n        let c2y = (ty)\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, \"grey\", \"0.5px\", \"1\", `proConRel_${conId}_${proId}`, \"proConRel\");\r\n      }\r\n    },\r\n    updataProSet_ConRel() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let typeXMap = _this.typeXMap;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      for (let i = 0; i < pro_conRelData.length; i++) {\r\n        let curRel = pro_conRelData[i];\r\n        let conId = curRel['conceptId'];\r\n        let proId = curRel['problem'];\r\n        let type = curRel['type'];\r\n        let conData = Ent_concept.find(function (d) { return d['id'] == conId; });\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; });\r\n        let curproSetData = proSetData.find(function (pd) { return pd['id'] == proData['problemSetId'] });\r\n        let sx = conData['cx'] + 130;\r\n        let sy = conData['cy'];\r\n        let tx = curproSetData['cx'];\r\n        let ty = curproSetData['cy'] + curproSetData['height'] / 2;\r\n        let c1x = (sx) + 150;\r\n        let c1y = (sy);\r\n        let c2x = (sx);\r\n        let c2y = (ty);\r\n        let fill = \"grey\";\r\n        if (type == \"1\") { fill = 'red' }\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"1px\", \"0.2\", `proSetConRel_${conId}_${proData['problemSetId']}`, \"proSetConRel\");\r\n      }\r\n    },\r\n    updataPro_ProSelfRel(tranY) {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let pid = Ent_problem[i]['id'];\r\n        if (Ent_problem[i][\"problemSetId\"] == selectSetId) {\r\n          let proData = Ent_problem.find(function (d) { return d['id'] == pid; });\r\n          let prog = d3.select(`#entPro_${pid}`)\r\n          let proSlefg = d3.select(`#probySet_${pid}`)\r\n          let sx = parseFloat(prog.attr(\"x\")) + parseFloat(prog.attr(\"width\"));\r\n          let sy = parseFloat(prog.attr(\"y\")) + parseFloat(prog.attr(\"height\")) / 2;\r\n          let tx = parseFloat(proSlefg.attr(\"x\"));\r\n          let ty = parseFloat(proSlefg.attr(\"y\")) + tranY + parseFloat(proSlefg.attr(\"height\")) / 2;\r\n          // console.log(sx,sy,tx,ty,prog.attr(\"x\"),proSlefg.attr(\"y\"),prog.attr(\"width\"),prog.attr(\"height\"),proSlefg.attr(\"height\"))\r\n          let c1x = (sx) + 100;\r\n          let c1y = (sy)\r\n          let c2x = (tx) - 100;\r\n          let c2y = (ty)\r\n          let fill = proData['fill']\r\n          _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"2px\", \"0.4\", `proSelfRel_${pid}`, \"proSelfRel\");\r\n        }\r\n      }\r\n    },\r\n    updataPro_ProSetRel(tranY) {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.detailsEntPro);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      d3.selectAll(`.proSetRel`).remove();\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let pid = Ent_problem[i]['id'];\r\n        let proSetId = Ent_problem[i]['problemSetId'];\r\n        let proSlefg = d3.select(`#proDetil_${pid}`)\r\n        let prog = d3.select(`#proSet_${proSetId}`)\r\n        let sx = parseFloat(prog.attr(\"x\")) + parseFloat(prog.attr(\"width\"));\r\n        let sy = parseFloat(prog.attr(\"y\")) + parseFloat(prog.attr(\"height\")) / 2;\r\n        let tx = parseFloat(proSlefg.attr(\"x\"));\r\n        let ty = parseFloat(proSlefg.attr(\"y\")) + tranY + parseFloat(proSlefg.attr(\"height\")) / 2;\r\n        // console.log(sx,sy,tx,ty,prog.attr(\"x\"),proSlefg.attr(\"y\"),prog.attr(\"width\"),prog.attr(\"height\"),proSlefg.attr(\"height\"))\r\n        let c1x = (sx) + 60;\r\n        let c1y = (sy);\r\n        let c2x = (tx) - 60;\r\n        let c2y = (ty);\r\n        let fill = Ent_problem[i]['fill'];\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"1px\", \"0.4\", `proSetRel_${pid}`, \"proSetRel\");\r\n        // }\r\n      }\r\n    },\r\n    updataEntConcept() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n\r\n      let conX = _this.treeX;\r\n      let conY = _this.treeY;\r\n      let conStepY = _this.conStepY;\r\n      for (let i = 0; i < Ent_concept.length; i++) {\r\n        let curEntCon = Ent_concept[i];\r\n        let cid = curEntCon['id'];\r\n        let cx = curEntCon['cx'];\r\n        let cy = curEntCon['cy'];\r\n        let r = curEntCon['r'];\r\n        let Cname = curEntCon['name'];\r\n        let fill = curEntCon['fill'];\r\n        let opacity = curEntCon['opacity'];\r\n\r\n        let fillRect = curEntCon['rectFill'];\r\n        let widthRect = curEntCon['rectW'];\r\n\r\n        let stroke ='red';\r\n          // if(curEntCon['gpt']=='1')\r\n            // stroke = 'black'\r\n        let circle = _this.drawCircle(entG, cx, cy, r, fill, opacity, stroke, \"1\", 'entCon', `entCon_${cid}`);\r\n\r\n        circle.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        }).on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_concept.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Problems'];\r\n          // 更新浮层内容\r\n          \r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Pass Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Concept:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n\r\n        // let cG = entG.append(\"g\")\r\n        // .attr(\"transform\", `translate(${cx},${cy})`);\r\n\r\n        // _this.drawEntityConcept(entG, cx, cy, `entCon_${cid}`);\r\n\r\n        let stroker ='none';\r\n        let strokerW ='0';\r\n          if(curEntCon['gpt']=='1'){\r\n            stroker = 'black'\r\n            strokerW ='0.5px';\r\n        }\r\n\r\n        let rectB = _this.drawRect(entG, cx + 20, cy - 8, 100, 16, 1, \"rgba(200,200,200,1)\", strokerW, stroker, \"1\", `entConRectB_${cid}`, 'entConRect');\r\n        let rect = _this.drawRect(entG, cx + 20, cy - 8, widthRect, 16, 1, fillRect, \"0\", stroker, \"1\", `entConRect_${cid}`, 'entConRect');\r\n        rectB.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        })\r\n        rect.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        })\r\n        let text = _this.drawTxt(entG, cx + 20, cy + 3.5, Cname, \"white\", 12, `entConText_${cid}`);\r\n\r\n        let fatherId = curEntCon['father'];\r\n        if (parseInt(fatherId) != -1) {\r\n          let curCon = Ent_concept.find(function (d) { return d['id'] == cid; });\r\n          let fatherCon = Ent_concept.find(function (d) { return d['id'] == fatherId; });\r\n          let sx = fatherCon['cx'];\r\n          let sy = fatherCon['cy'] + fatherCon['r'];\r\n          let tx = curCon['cx'] - curCon['r'];\r\n          let ty = curCon['cy'];\r\n\r\n          _this.drawBsLine(relG, sx, sy, sx, ty, sx, ty, tx, ty, \"grey\", \"2px\", \"0.4\", `conRel_${fatherId}_${cid}`, \"conRel\");\r\n        }\r\n      }\r\n    },\r\n    updataEntProblem() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proX = _this.proX;\r\n      let proY = _this.proY;\r\n      let typeColorMap = {\r\n        \"TRUE_OR_FALSE\": _this.mcolor[1],\r\n        \"MULTIPLE_CHOICE\": _this.mcolor[3],\r\n        \"FILL_IN_THE_BLANK\": _this.mcolor[5],\r\n        \"PROGRAMMING\": _this.mcolor[7],\r\n        \"CODE_COMPLETION\": _this.mcolor[9],\r\n        \"MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER\": _this.mcolor[11]\r\n      }\r\n      let interY = _this.interY;\r\n      let typeXMap = _this.typeXMap;\r\n      let proStepY = _this.proStepY;\r\n      let attrList = _this.proAttrList;\r\n      let attrLen = attrList.length;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let wSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 100]);\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let curEntPro = Ent_problem[i];\r\n        let type = curEntPro['type'];\r\n        let pid = curEntPro['id'];\r\n        let cx = curEntPro['cx']//+typeXMap[type]*30;\r\n        let cy = curEntPro['cy'];\r\n        let cH = curEntPro['height'];\r\n        let cW = curEntPro['width'];\r\n        let fill = curEntPro['fill'];\r\n        let pOrder = curEntPro['order'];\r\n        let inter = 1;\r\n        let typeColor = typeColorMap[type]\r\n        let circle = _this.drawCircle(entG, cx, cy + _this.proStepY / 2, proStepY / 2, typeColor, '1', \"none\", \"1\", 'entProCir', `entProCir_${pid}`);\r\n        // let rect = _this.drawRect(entG, cx+cH/2, cy, cW, cH, 1, fill, \"0\", \"none\",\"1\", `entPro_${pid}`, 'entPro');\r\n        let rect = _this.drawRect(entG, cx + cH / 2, cy, 180, cH, 1, fill, \"0\", \"none\", \"0.5\", `entPro_${pid}`, 'entPro');\r\n        rect.on(\"mousemove\", function (d) {\r\n          let selectPro = d3.select(this);\r\n          let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n          let proD = Ent_problem.find(function (p) { return p['id'] == selectProId });\r\n          let pSetId = proD['problemSetId'];\r\n          let pSet = proSetData.find(function (ps) { return ps['id'] == pSetId; })\r\n          let pSetOd = pSet['order'] + 1;\r\n          let od = proD['order'];\r\n          Ent_problem.forEach(entPro => {\r\n            if (entPro['id'] == selectProId) {\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + interY * pSetOd;\r\n              entPro['height'] = (proStepY - inter) * 5;\r\n              od = entPro['order'];\r\n            }\r\n            else if (entPro['order'] < od) {\r\n              let cproD = Ent_problem.find(function (p) { return p['id'] == entPro['id'] });\r\n              let cpSetId = cproD['problemSetId'];\r\n              let cpSet = proSetData.find(function (ps) { return ps['id'] == cpSetId; })\r\n              let cpSetOd = cpSet['order'] + 1;\r\n\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + interY * cpSetOd;\r\n              entPro['height'] = (proStepY - inter)\r\n            }\r\n            else if (entPro['order'] > od) {\r\n              let cproD = Ent_problem.find(function (p) { return p['id'] == entPro['id'] });\r\n              let cpSetId = cproD['problemSetId'];\r\n              let cpSet = proSetData.find(function (ps) { return ps['id'] == cpSetId; })\r\n              let cpSetOd = cpSet['order'] + 1;\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + (proStepY - 1) * 4 + interY * cpSetOd;\r\n              entPro['height'] = (proStepY - inter)\r\n            }\r\n          })\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          let attrN = ['ScoringRate', 'Attempts', 'AcceptedRate', 'Rel Count'];\r\n          // 更新浮层内容\r\n          \r\n          let tipName = curEnt['name'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'AcceptedRate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Concept:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          _this.Ent_problem = Ent_problem;\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        }).on(\"click\", function (d) {\r\n          let selectPro = d3.select(this);\r\n          let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n          _this.curProblemId = selectProId;\r\n        })\r\n        let attrW = 30\r\n        // for (let j = 0; j < attrLen; j++) {\r\n        //   let curP = _this.calcRsize(proAttrMaxMinList[j], curEntPro[attrList[j]], 30);\r\n        //   let attColor = _this.mLigntcolor[j*2]\r\n        //   let rectAttr = _this.drawRect(entG, cx+j*attrW, cy, curP, cH, 1, attColor, \"0.8\", \"grey\",\"1\", `prottr_${pid}_${attrList[j]}`, 'proAttr');\r\n        // }\r\n        // le\r\n\r\n      }\r\n    },\r\n    updataEntProblemDetailBySet(type, name) {\r\n      const _this = this;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let setEnt = [];\r\n      if (type == 'con') {\r\n        let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n        pro_conRelData.forEach(rel => {\r\n          let proId = rel['problem'];\r\n          let conId = rel['conceptId'];\r\n          if (conId == name) {\r\n            let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n            let proSetId = proData['problemSetId'];\r\n            if (proSetId == selectSetId) {\r\n              setEnt.push(proData);\r\n            }\r\n          }\r\n        })\r\n        _this.detailsEntPro = setEnt;\r\n        return;\r\n      }\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        if (Ent_problem[i][\"problemSetId\"] == selectSetId) {\r\n          let entSetPro = tools.deepClone(Ent_problem[i]);\r\n          if (type == \"none\") {\r\n            setEnt.push(entSetPro);\r\n          }\r\n          else if (type == 'type') {\r\n            if (Ent_problem[i][\"type\"] == name) {\r\n              setEnt.push(entSetPro);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      _this.detailsEntPro = setEnt;\r\n    },\r\n\r\n    updataEntProblemDetail() {\r\n      const _this = this;\r\n      let entG = _this.entbySetG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let setX = _this.setX;\r\n      let setY = _this.setY;\r\n\r\n      let attrList = [\"scoringRate\", \"acceptedRate\", \"totalAttempts\"];\r\n      let attrLen = attrList.length;\r\n\r\n      entG.selectAll(\".proDetil\").remove();\r\n      entG.selectAll(\".proDetilB\").remove();\r\n      entG.selectAll(\".proDetilAttr\").remove();\r\n\r\n      let setEnt = _this.detailsEntPro;\r\n\r\n      let setStepY = 50;\r\n      let setProWidth = 200;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let wSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 100]);\r\n\r\n      let j = 0;\r\n      for (let i = 0; i < setEnt.length; i++) {\r\n        let curEntPro = setEnt[i];\r\n        let pid = curEntPro['id'];\r\n        let gpro = Ent_problem.find(function (p) { return p['id'] == pid; });\r\n\r\n        if (gpro != undefined) {\r\n          let groupVal = gpro['groupVal'];\r\n          let groupLen = groupVal.length;\r\n          setStepY = 50 + 10*groupLen;\r\n          let cx = setX;\r\n          let cy = setY + j * setStepY;\r\n          let cH = setStepY -20;\r\n          let cW = curEntPro['width']//wSize_linear(curEntPro['scoringRate']);\r\n          let fill = curEntPro['fill'];\r\n          let pOrder = curEntPro['order'];\r\n          let rectback = _this.drawRect(entG, cx, cy, setProWidth, cH, 5, \"grey\", \"10\", \"grey\", \"0.3\", `proDetilB_${pid}`, 'proDetilB');\r\n          let rect = _this.drawRect(entG, cx, cy, cW, cH, 5, fill, \"10\", fill, \"1\", `proDetil_${pid}`, 'proDetil');\r\n          j++;\r\n          rectback.on(\"click\", function (d) {\r\n            let selectPro = d3.select(this);\r\n            let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n            _this.curProblemId = selectProId;\r\n          })\r\n          .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_problem.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'conCount'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Concepts'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Pass Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n          rect.on(\"click\", function (d) {\r\n            let selectPro = d3.select(this);\r\n            let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n            _this.curProblemId = selectProId;\r\n          })\r\n          .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_problem.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'conCount'];\r\n          let attrN = ['ScoringRate', 'Attempts', 'AcceptedRate', 'Rel Count'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'AcceptedRate'||(attrN[a] == 'ScoringRate'))\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n          let scoreValueList = curEntPro['scoreValueList'];\r\n          let acceptedValueList = curEntPro['acceptedValueList'];\r\n          let totalAttemptsValueList = curEntPro['totalAttemptsValueList'];\r\n          let dmList = [scoreValueList, acceptedValueList, totalAttemptsValueList];\r\n          let interW = setProWidth / (attrLen);\r\n          let attrW = interW;\r\n          let attrWA = interW/(groupLen+2);\r\n          for (let j = 0; j < attrLen; j++) {\r\n            let attColor = _this.attrColorList[j];\r\n            let Compute_color = d3.interpolate(\"white\", attColor);\r\n            let maxMin = proAttrMaxMinList[j];\r\n            let color_linear = d3.scaleLinear().domain([0, maxMin[0]]).range([0, 1]);\r\n            let curAttrColor = Compute_color(color_linear(maxMin[0]/2))//curEntPro[attrList[j]]));\r\n            let curP = _this.calcRsize(proAttrMaxMinList[j], curEntPro[attrList[j]], cH);\r\n            let xxx = 0;\r\n            if(groupLen==0){\r\n              attrWA = interW/2;\r\n              xxx = (interW - attrWA)/2\r\n            }\r\n            _this.drawAttrreact(entG, cx + j * (interW)+xxx, cy, attrWA , cH, dmList[j], attrList[j], curAttrColor, `proDetilsAttr_${pid}_${attrList[j]}`,\"black\",attColor);\r\n          } // let rectAttr = _this.drawRect(entG, cx+j*attrW, cy+cH-curP, attrW-10, curP, 1, attColor, \"0.2\", \"grey\",\"1\", `proDetilAttr_${pid}_${attrList[j]}`, 'proDetilAttr');\r\n\r\n          let groupStepY = 10;\r\n          let gs_linear = d3.scaleLinear().domain([0, 1]).range([0, cH]);\r\n          for (let g = 0; g < groupLen; g++) {\r\n            let curP = gs_linear(groupVal[g]['scoringRate']);\r\n\r\n            // let \r\n            let gscoreValueList = groupVal[g]['scoreValueList'];\r\n            let gacceptedValueList = groupVal[g]['acceptedValueList'];\r\n            let gtotalAttemptsValueList = groupVal[g]['totalAttemptsValueList'];\r\n            let gdmList = [gscoreValueList, gacceptedValueList, gtotalAttemptsValueList];\r\n            let gColor = _this.stuColorList[g];\r\n            // let rectgroup = _this.drawRect(entG, cx + attrW * 3 + g * groupStepY, cy + cH - curP, groupStepY - 5, curP, 1, gColor, \"0.2\", \"grey\", \"1\", `proDetilGroup_${pid}_${g}`, 'proDetilGroup');\r\n            \r\n            for (let j = 0; j < attrLen; j++) {\r\n              let attColor = _this.attrColorList[j];\r\n              let Compute_color = d3.interpolate(\"white\", attColor);\r\n              let Compute_colorg = d3.interpolate(\"white\", gColor);\r\n              let maxMin = proAttrMaxMinList[j];\r\n              let color_linear = d3.scaleLinear().domain([0, maxMin[0]]).range([0, 1]);\r\n              let gcurAttrColor = Compute_color(color_linear(groupVal[g][attrList[j]]));\r\n              let gcurAttrGColor = Compute_colorg(color_linear(maxMin[0]/2))//groupVal[g][attrList[j]]));\r\n\r\n              _this.drawAttrreact(entG, cx + j * (interW)+2+(g+1)*(attrWA), cy, attrWA, cH, gdmList[j], attrList[j], gcurAttrGColor, `proDetilsGroupAttr_${pid}_${g}_${attrList[j]}`,\"black\",gColor);\r\n              // console.log(gdmList[j],attrList[j],curEntPro[attrList[j]],dmList[j])\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      _this.updataPro_ProSetRel(_this.graphGTransformY);\r\n    },\r\n    getMaxMinValue(data, valueName,isGroupData = false) {\r\n\r\n      let mind = 1000000;\r\n      let maxd = -1000000;\r\n      let av = 0;\r\n      let num = 0;\r\n      let arr = []\r\n      Object.keys(data).forEach(stuD => {\r\n        if((!isGroupData)||(data[stuD]['gvjg'] != -1))\r\n        {\r\n        maxd = (data[stuD][valueName] > maxd) ? data[stuD][valueName] : maxd;\r\n        mind = (data[stuD][valueName] < mind) ? data[stuD][valueName] : mind;\r\n        if (data[stuD][valueName] != undefined) {\r\n          av += data[stuD][valueName];\r\n          num += 1;\r\n          arr.push(data[stuD][valueName])\r\n        }\r\n      }\r\n      });\r\n      \r\n      if (num != 0)\r\n        av /= num;\r\n      else\r\n        av = 0;\r\n      let fc = 0;\r\n      \r\n      arr.forEach(stuD => {\r\n          fc+=Math.pow(stuD - av, 2);\r\n      });\r\n\r\n      if (num != 0)\r\n        fc /= num;\r\n      else\r\n        fc = 0;\r\n\r\n      var compare = function (x, y) {//比较函数\r\n        return x > y\r\n      };\r\n      var mid; //中位数\r\n      arr.sort(compare); //数组排序\r\n      if (arr.length % 2 == 0) {\r\n        mid = (arr[arr.length / 2] + arr[arr.length / 2 + 1]) / 2\r\n      }\r\n      if (arr.length % 2 != 0) {\r\n        mid = arr[(arr.length + 1) / 2]\r\n      }\r\n      return [mind, maxd, av, mid, arr[parseInt(arr.length / 4)], arr[parseInt(arr.length / 4 * 3)],fc]\r\n    },\r\n    drawAttrreactO(svg, cx, cy, w, h, data, valueName, attrColor, idN,boxColor = \"grey\" ) {\r\n      const _this = this;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let attrList = _this.proAttrList;\r\n      let maxMin = proAttrMaxMinList[attrList.indexOf(valueName)];\r\n      let mind = data[0]\r\n      let maxd = data[1]\r\n      let av = data[2]\r\n      let mid = data[3]\r\n      let q1 = data[4]\r\n      let q2 = data[5]\r\n      let len_linear = d3.scaleLinear().domain([0, 1]).range([0, h]);\r\n      if (valueName == \"totalAttempts\") {\r\n        len_linear = d3.scaleLinear().domain([0, Math.sqrt(67)]).range([0, h]);\r\n        mind = Math.sqrt(mind);\r\n        maxd = Math.sqrt(maxd);\r\n        av = Math.sqrt(av);\r\n        q1 = Math.sqrt(q1);\r\n        q2 = Math.sqrt(q2);\r\n      }\r\n      let avp = len_linear(av);\r\n      let maxp = len_linear(maxd);\r\n      let minp = len_linear(mind);\r\n      let midp = len_linear(mid);\r\n      let q1p = len_linear(q1);\r\n      let q2p = len_linear(q2);\r\n      // let boxColor = \"grey\"\r\n      // _this.drawRect(svg, cx, cy, w, h, 1, attrColor, \"0.2\", \"grey\", \"1\", `B_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + 3, cy + h - q2p, w - 6, q2p - q1p, 1, attrColor, \"1\", boxColor, \"1\", `${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w, 2, 1, \"white\", \"0.2\", \"none\", \"1\", `av_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + 3, cy + h - midp, w - 6, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `mid_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `max_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - minp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `min_${idN}`, 'proDetilAttr');\r\n\r\n      _this.drawRect(svg, cx + w / 2 - 1, cy + h - maxp, 1, maxp - q2p, 1, boxColor, \"0\", \"none\", \"1\", `maxl_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + w / 2 - 1, cy + h - q1p, 1, q1p - minp, 1, boxColor, \"0\", \"none\", \"1\", `minl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q1p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q1_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q2p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q2_${idN}`, 'proDetilAttr');\r\n\r\n    },\r\n    drawAttrreact(svg, cx, cy, w, h, data, valueName, attrColor, idN,boxColor = \"black\",attColorO = 'none' ) {\r\n      const _this = this;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let attrList = _this.proAttrList;\r\n      let maxMin = proAttrMaxMinList[attrList.indexOf(valueName)];\r\n      let mind = data[0];\r\n      let maxd = data[1];\r\n      let av = data[2];\r\n      let mid = data[3];\r\n      let q1 = data[4];\r\n      let q2 = data[5];\r\n      let fc = data[6];\r\n      let zfc = av+fc;\r\n      let ffc = av-fc;\r\n      let len_linear = d3.scaleLinear().domain([0, 1]).range([0, h]);\r\n      if (valueName == \"totalAttempts\") {\r\n        len_linear = d3.scaleLinear().domain([0, Math.sqrt(67)]).range([0, h]);\r\n        mind = Math.sqrt(mind);\r\n        maxd = Math.sqrt(maxd);\r\n        av = Math.sqrt(av);\r\n        q1 = Math.sqrt(q1);\r\n        q2 = Math.sqrt(q2);\r\n        zfc = Math.sqrt(zfc);\r\n        ffc = Math.sqrt(ffc);\r\n      }\r\n      let avp = len_linear(av);\r\n      let maxp = len_linear(maxd);\r\n      let minp = len_linear(mind);\r\n      let midp = len_linear(mid);\r\n      let q1p = len_linear(q1);\r\n      let q2p = len_linear(q2);\r\n      let zfcp = len_linear(zfc);\r\n      let ffcp = len_linear(ffc);\r\n\r\n      let avPath = d3.path();\r\n      avPath.moveTo(cx+1, cy + h - avp) \r\n      avPath.lineTo(cx+w-1, cy + h - avp) \r\n      // let boxColor = \"grey\"\r\n      // _this.drawRect(svg, cx, cy, w, h, 1, attrColor, \"0.2\", \"grey\", \"1\", `B_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w, 2, 1, \"white\", \"0.2\", \"none\", \"1\", `av_${idN}`, 'proDetilAttr');\r\n\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, maxp+1, 0, attrColor, \"1\", boxColor, \"1\", `max_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy , w , h, 0, \"none\", \"1\", \"white\", \"1\", `proDetilAttrBack_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - avp, w , avp - minp+1, 0, attrColor, \"1\", \"white\", \"1\", `mid_${idN}`, 'proDetilAttr');\r\n\r\n      // _this.drawRect(svg, cx, cy + h - zfcp, w , zfcp - avp+1, 1, attColorO, \"1\", \"none\", \"1\", `zfc_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w , avp - ffcp+1, 1, attColorO, \"1\", \"none\", \"1\", `ffc_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - zfcp, w , zfcp - ffcp+1, 0, attColorO, \"1\", \"none\", \"1\", `fc_${idN}`, 'proDetilAttr');\r\n\r\n\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, maxp - minp+1, 0, \"none\", \"1\", boxColor, \"1\", `${idN}`, 'proDetilAttr');\r\n      _this.drawLine(svg, avPath, \"white\", 1, '0', '1', `av_${idN}`, 'proDetilAttr', \"white\");\r\n      // _this.drawRect(svg, cx, cy + h - maxp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `max_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - minp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `min_${idN}`, 'proDetilAttr');\r\n\r\n      // _this.drawRect(svg, cx + w / 2 - 1, cy + h - maxp, 1, maxp - q2p, 1, boxColor, \"0\", \"none\", \"1\", `maxl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx + w / 2 - 1, cy + h - q1p, 1, q1p - minp, 1, boxColor, \"0\", \"none\", \"1\", `minl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q1p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q1_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q2p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q2_${idN}`, 'proDetilAttr');\r\n\r\n    },\r\n    updataEntProblemSetBack() {\r\n      const _this = this;\r\n      let entSetG = _this.entSetG;\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let maxSetCon = _this.maxSetCon\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let fill = proSetData[i]['fill'];\r\n        let psid = proSetData[i]['id'];\r\n        let set = proSetData[i]['set'];\r\n        let conDistribution = proSetData[i]['conDistribution'];\r\n        let typeDistribution = proSetData[i]['typeDistribution'];\r\n        let num = 0;\r\n        // ------------------------------\r\n        // let edP = Ent_problem.find(function(ep){return ep['id'] == set[set.length-1];})\r\n        // proSetData[i]['cy'] = Ent_problem.find(function(ep){return ep['id'] == set[0];})['cy'];\r\n        // proSetData[i]['height'] = edP['cy'] - proSetData[i]['cy']+edP['height'];\r\n        // ------------------------------\r\n\r\n        // ------------------------------\r\n        let cx = proSetData[i]['cx'];\r\n        let cy = proSetData[i]['cy'];\r\n        let width = proSetData[i]['width'];\r\n        let height = proSetData[i]['height']; \r\n        // let prog = entSetG;\r\n        // if(psid != '1595937666900742144'){\r\n        //   continue\r\n\r\n        // }\r\n        // else{\r\n        //   height //*=2;\r\n\r\n        // }\r\n        let rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"5\", \"none\", \"1\", `proSet_${psid}`, 'proSet');\r\n        if(psid == '1594605247375466496')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','');\r\n        if(psid == '1573619795390476288')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','9');\r\n        if(psid == '1573619795390476288')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','9');\r\n        // let rect1 = _this.drawRect(entSetG, cx, cy+height/3, width, 1, 1, \"grey\", \"5\", \"none\",\"1\", `proSet1_${psid}`, 'proSet');\r\n        // let rect2 = _this.drawRect(entSetG, cx, cy+height/3*2, width, 1, 1, \"grey\", \"5\", \"none\",\"1\", `proSet2_${psid}`, 'proSet');\r\n        let rect1 = _this.drawRect(entSetG, cx + width / 3 - 25, cy, 1, height, 1, \"white\", \"5\", \"none\", \"1\", `proSet1_${psid}`, 'proSet');\r\n        let rect2 = _this.drawRect(entSetG, cx + width / 3 * 2 - 50, cy, 1, height, 1, \"white\", \"5\", \"none\", \"1\", `proSet2_${psid}`, 'proSet');\r\n        \r\n        rect.on(\"click\", function (d) {\r\n          let selectSet = d3.select(this);\r\n          d3.selectAll(\".proSet\").attr(\"opacity\", 0.1);\r\n          selectSet.attr(\"opacity\", 1)\r\n          let selectSetId = selectSet.attr(\"id\").split(\"_\")[1];\r\n          _this.curProblemSetId = selectSetId;\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = proSetData.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = `Set ${curEnt['order']+1}`;\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'set',];\r\n          let attrN = ['Scoring Rate', 'Problems', '', ''];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Problems')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].length}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n\r\n        // _this.drawRiver(entSetG,cx+width/3*2+3,cy,height,width/3,`proSetRiver_${psid}`,proSetData[i]['set']);\r\n        _this.drawSetValuePoly(entSetG, cx + width / 2 + 1, cy, height - 2, width / 2, `proSetValuePoly_${psid}`, proSetData[i]['set']);\r\n        // let min1w = height/3;\r\n        // let max1w = width/9;       \r\n        // let min1h = 10;\r\n        // let max1h = height/3;\r\n\r\n        let min1w = 0;\r\n        let max1w = width / 3 - 30;\r\n        let min1h = 10;\r\n        let max1h = (height - 6) / 8;\r\n        let j = 0\r\n        let setConCount_linear = d3.scaleLinear().domain([0, Math.sqrt(maxSetCon)]).range([min1w, max1w]);\r\n        let currentMinColor = _this.setConCountColorMin;\r\n        let currentMaxColor = _this.setConCountColorMax;\r\n\r\n        let setConCountColor_linear = d3.scaleLinear().domain([0, maxSetCon]).range([0, 1]);\r\n        let setConCountCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n        let conRootDistribution = {};\r\n        let maxnum = 0;\r\n\r\n        Object.keys(conDistribution).forEach(conD => {\r\n          let conid = conD;\r\n          let idSpilt = conid.split(\"-\");\r\n          let rootId = idSpilt[0];\r\n          maxnum += conDistribution[conD];\r\n          if (conRootDistribution[rootId] != undefined)\r\n            conRootDistribution[rootId] += conDistribution[conD];\r\n          else {\r\n            conRootDistribution[rootId] = 0;\r\n          }\r\n          // --------------------------\r\n          if (idSpilt.length == 1) {\r\n            // conRootDistribution[rootId] = conDistribution[conD];\r\n            let cw = setConCount_linear(Math.sqrt(conDistribution[conD]));\r\n            let color = setConCountCompute_color(setConCountColor_linear(conDistribution[conD]))\r\n            if(cw == 0){\r\n              cw = 2\r\n              color = \"white\"\r\n            }\r\n            // let disRect = _this.drawRect(entSetG, cx+(max1w)*j, cy+max1h - ch,max1w-5, ch, 1, color, \"1\", \"white\",\"1\", `proSetConAttr_${psid}_${conid}`, 'proSetConAttr');\r\n            // let disRectB = _this.drawRect(entSetG, cx+5, cy+(max1h)*j,max1w, height/9-3, 1, \"none\", \"1\", \"white\",\"1\", `proSetConAttrB_${psid}_${conid}`, 'proSetConAttr');\r\n            let disRect = _this.drawRect(entSetG, cx + 5, cy + (max1h) * j, cw, height / 8 - 3, 1, color, \"0\", \"white\", \"1\", `proSetConAttr_${psid}_${conid}`, 'proSetConAttr');\r\n            disRect.on(\"click\", function (d) {\r\n              let selectProAtt = d3.select(this);\r\n              let Ids = selectProAtt.attr(\"id\").split(\"_\");\r\n              let setId = Ids[1];\r\n              let conId = Ids[2];\r\n              _this.curProblemSetId = setId;\r\n              _this.updataEntProblemDetailBySet(\"con\", conId)\r\n            })\r\n            j++;\r\n          }\r\n          // -------------------------------------\r\n        })\r\n        // let curx = cx+3;\r\n        // Object.keys(conRootDistribution).forEach(conrD=>{\r\n        //   let c_linear = d3.scaleLinear().domain([0, maxnum]).range([0, width-(min1w*9)]);\r\n        //   let cColor_linear = d3.scaleLinear().domain([0, maxnum]).range([0, 1]);\r\n        //   let cCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n        //   let afw = c_linear(conRootDistribution[conrD]);\r\n        //   console.log(conRootDistribution[conrD],afw,min1w+afw)\r\n        //   let color = cCompute_color(cColor_linear(conRootDistribution[conrD]))\r\n        //   let disRect = _this.drawRect(entSetG, curx, cy+3,min1w+afw, height/3-6, 1, color, \"1\", \"white\",\"1\", `proSetConAttr_${psid}_${conrD}`, 'proSetConAttr');\r\n        //   disRect.on(\"click\",function(d){\r\n        //     let selectProAtt = d3.select(this);\r\n        //     let Ids = selectProAtt.attr(\"id\").split(\"_\");\r\n        //     let setId = Ids[1];\r\n        //     let conId = Ids[2];\r\n        //     _this.curProblemSetId = setId;\r\n        //     _this.updataEntProblemDetailBySet(\"con\",conId)\r\n        //   })\r\n        //   j++\r\n        //   curx+=min1w+afw+2;\r\n        // })\r\n\r\n\r\n        // let min2w = 10;\r\n        // let max2w = width/6;       \r\n        // let min2h = 10;\r\n        // let max2h = height/3;\r\n        let min2w = 0;\r\n        let max2w = width / 3 - 30;\r\n        let min2h = 10;\r\n        let max2h = height / 4;\r\n        j = 0;\r\n        let prolen = proSetData[i]['set'].length;\r\n        let settype_linear = d3.scaleLinear().domain([0, Math.sqrt(prolen)]).range([min2w, max2w]);\r\n        let typeMinColor = _this.setTypeCountColorMin;\r\n        let typeMaxColor = _this.setTypeCountColorMax;\r\n        let typeColor_linear = d3.scaleLinear().domain([0, prolen]).range([0, 1]);\r\n        let typeCompute_color = d3.interpolate(typeMinColor, typeMaxColor);\r\n        // console.log(proSetData[i]['set'],typeDistribution)\r\n        Object.keys(typeDistribution).forEach(typeD => {\r\n          let ch = settype_linear(Math.sqrt(typeDistribution[typeD]));\r\n          let color = typeCompute_color(typeColor_linear(typeDistribution[typeD]))\r\n          if(ch == 0){\r\n              ch = 2\r\n              color = \"white\"\r\n            }\r\n          // let disRect = _this.drawRect(entSetG, cx+(max2w)*j, cy+max2h+max2h - ch,max2w-5, ch, 1, color, \"1\", \"white\",\"1\", `proSettypeAttr-${psid}-${typeD}`, 'proSettypeAttr');\r\n          // let disRectB = _this.drawRect(entSetG, cx + (width / 3)-25 , cy + (max2h) * j, max2w, max2h - 3, 1, \"none\", \"1\", \"white\", \"1\", `proSettypeAttrB-${psid}-${typeD}`, 'proSettypeAttrB');\r\n          let disRect = _this.drawRect(entSetG, cx + (width / 3) - 23, cy+3 + (max2h) * j, ch, max2h - 6, 1, color, \"0\", \"white\", \"1\", `proSettypeAttr-${psid}-${typeD}`, 'proSettypeAttr');\r\n          disRect.on(\"click\", function (d) {\r\n            let selectProAtt = d3.select(this);\r\n            let Ids = selectProAtt.attr(\"id\").split(\"-\");\r\n            let setId = Ids[1];\r\n            let typeD = Ids[2];\r\n            _this.curProblemSetId = setId;\r\n            _this.updataEntProblemDetailBySet(\"type\", typeD);\r\n          })\r\n          j++;\r\n        })\r\n\r\n\r\n      }\r\n    },\r\n    drawSetValuePoly(svg, cx, cy, height, width, idN, set) {\r\n      const _this = this;\r\n      // let groupData = \r\n      let data = [];\r\n      let keys = [];\r\n      let stepy = height / (set.length - 1);\r\n      let pathav = d3.path();\r\n      let pathavat = d3.path();\r\n      let pathavtd = d3.path();\r\n      let pathfcf = d3.path();\r\n      let pathfcz = d3.path();\r\n      let wScale = d3.scaleLinear().domain([0, 1]).range([1, width / 2 - 2]);\r\n      let maxOriAttempts = 30;\r\n      let wScaleat = d3.scaleLinear().domain([0, maxOriAttempts]).range([width / 2 + 5, width - 5]);\r\n\r\n      let minOriTimeDur = _this.proAttrMaxMinList[1][0];\r\n      let maxOriTimeDur = _this.proAttrMaxMinList[1][1];\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      // for(let j=0;j<proSetData.length;j++){\r\n      //   let sets = proSetData[j]['set'];\r\n      for (let i = 0; i < set.length; i++) {\r\n        let proStuData = set[i]['stuData'];\r\n        let minTimeD = 10000000001;\r\n        let maxTimeD = -100000000000;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxTimeD = (proStuData[s]['timeDur'] > maxTimeD) ? proStuData[s]['totalTimeDur'] : maxTimeD;\r\n          minTimeD = (proStuData[s]['timeDur'] < minTimeD) ? proStuData[s]['totalTimeDur'] : minTimeD;\r\n        })\r\n        maxOriTimeDur = (maxOriTimeDur > maxTimeD) ? maxOriTimeDur : maxTimeD;\r\n        minOriTimeDur = (minOriTimeDur < minTimeD) ? minOriTimeDur : minTimeD;\r\n      }\r\n      // }\r\n      let wScaletd = d3.scaleLinear().domain([minOriTimeDur, maxOriTimeDur]).range([width / 3 * 2 + 3, width - 5]);\r\n\r\n      let points = [];\r\n      let pointsfc = [];\r\n      let pointsav = [];\r\n\r\n      let pointsat = [];\r\n      let pointsfcat = [];\r\n      let pointsavat = [];\r\n\r\n      let pointstd = [];\r\n      let pointsfctd = [];\r\n\r\n\r\n      for (let i = 0; i < set.length; i++) {\r\n        let proData = set[i];\r\n        let proStuData = set[i]['stuData'];\r\n        let minScoreRate = 1;\r\n        let maxScoreRate = 0;\r\n        let avScoreRate = 0;\r\n        let minAttempts = 1;\r\n        let maxAttempts = 0;\r\n        let avAttempts = 0;\r\n\r\n        let minTimeDur = 100000000;\r\n        let maxTimeDur = -1000000000000;\r\n        let avTimeDur = 0;\r\n        let num = 0;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxScoreRate = (proStuData[s]['scoringRate'] > maxScoreRate) ? proStuData[s]['scoringRate'] : maxScoreRate;\r\n          minScoreRate = (proStuData[s]['scoringRate'] < minScoreRate) ? proStuData[s]['scoringRate'] : minScoreRate;\r\n\r\n          maxAttempts = (proStuData[s]['totalAttempts'] > maxAttempts) ? proStuData[s]['totalAttempts'] : maxAttempts;\r\n          minAttempts = (proStuData[s]['totalAttempts'] < minAttempts) ? proStuData[s]['totalAttempts'] : minAttempts;\r\n\r\n          maxTimeDur = (proStuData[s]['timeDur'] > maxTimeDur) ? proStuData[s]['totalTimeDur'] : maxTimeDur;\r\n          minTimeDur = (proStuData[s]['timeDur'] < minTimeDur) ? proStuData[s]['totalTimeDur'] : minTimeDur;\r\n\r\n          avScoreRate += proStuData[s]['scoringRate'];\r\n          avAttempts += proStuData[s]['totalAttempts'];\r\n          avTimeDur += proStuData[s]['timeDur'];\r\n          num++;\r\n        });\r\n        avScoreRate /= num;\r\n        avAttempts /= num;\r\n        avTimeDur /= num;\r\n\r\n        let fcScoreRate = 0;\r\n        let fcTimeDur = 0;\r\n        let fcAttempts = 0;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          fcScoreRate += Math.pow(proStuData[s]['scoringRate'] - avScoreRate, 2);\r\n          fcAttempts += Math.pow(proStuData[s]['totalAttempts'] - avAttempts, 2);\r\n          fcTimeDur += Math.pow(proStuData[s]['timeDur'] - avTimeDur, 2);\r\n        })\r\n        fcScoreRate /= num;\r\n        fcAttempts /= num;\r\n        fcTimeDur /= num;\r\n\r\n        set[i]['maxScoreRate'] = maxScoreRate;\r\n        set[i]['minScoreRate'] = minScoreRate;\r\n        set[i]['avScoreRate'] = avScoreRate;\r\n        set[i]['fcScoreRate'] = fcScoreRate;\r\n\r\n        set[i]['maxAttempts'] = maxAttempts;\r\n        set[i]['minAttempts'] = minAttempts;\r\n        set[i]['avAttempts'] = avAttempts;\r\n        set[i]['fcAttempts'] = fcAttempts;\r\n\r\n        set[i]['maxTimeDur'] = maxTimeDur;\r\n        set[i]['minTimeDur'] = minTimeDur;\r\n        set[i]['avTimeDur'] = avTimeDur;\r\n        set[i]['fcTimeDur'] = fcTimeDur;\r\n\r\n        if (i == 0) {\r\n          pathav.moveTo(cx + wScale(avScoreRate), cy + stepy * i);\r\n          pathavat.moveTo(cx + wScaleat(avAttempts), cy + stepy * i);\r\n          pathavtd.moveTo(cx + wScaletd(avTimeDur), cy + stepy * i);\r\n        }\r\n\r\n        pathav.lineTo(cx + wScale(avScoreRate), cy + stepy * i);\r\n        pathavat.lineTo(cx + wScaleat(avAttempts), cy + stepy * i);\r\n        pathavtd.lineTo(cx + wScaletd(avTimeDur), cy + stepy * i);\r\n\r\n        points.push([cx + wScale(maxScoreRate), cy + stepy * i])\r\n        pointsav.push([cx + wScale(avScoreRate), cy + stepy * i])\r\n        pointsfc.push([cx + wScale(avScoreRate + fcScoreRate), cy + stepy * i])\r\n        if (maxAttempts > maxOriAttempts)\r\n          maxAttempts = maxOriAttempts;\r\n        if (maxAttempts == 1) {\r\n          maxAttempts = 5\r\n        }\r\n        pointsat.push([cx + wScaleat(maxAttempts), cy + stepy * i]);\r\n        pointsavat.push([cx + wScaleat(avAttempts), cy + stepy * i])\r\n        pointsfcat.push([cx + wScaleat(avAttempts + Math.sqrt(fcAttempts)), cy + stepy * i])\r\n\r\n        pointstd.push([cx + wScaletd(maxTimeDur), cy + stepy * i]);\r\n        pointsfctd.push([cx + wScaletd(avTimeDur + Math.sqrt(fcTimeDur)), cy + stepy * i])\r\n      };\r\n      for (let i = set.length - 1; i >= 0; i--) {\r\n        let proData = set[i];\r\n        let proStuData = set[i]['stuData'];\r\n        let minScoreRate = 1;\r\n        let maxScoreRate = 0;\r\n        let avScoreRate = set[i]['avScoreRate'];\r\n        let fcScoreRate = set[i]['fcScoreRate'];\r\n\r\n        let avAttempts = set[i]['avAttempts'];\r\n        let fcAttempts = set[i]['fcAttempts'];\r\n\r\n        let avTimeDur = set[i]['avTimeDur'];\r\n        let fcTimeDur = set[i]['fcTimeDur'];\r\n\r\n        let minAttempts = set[i]['minAttempts'];\r\n        let minTimeDur = set[i]['minTimeDur'];\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxScoreRate = (proStuData[s]['scoringRate'] > maxScoreRate) ? proStuData[s]['scoringRate'] : maxScoreRate;\r\n          minScoreRate = (proStuData[s]['scoringRate'] < minScoreRate) ? proStuData[s]['scoringRate'] : minScoreRate;\r\n        })\r\n        points.push([cx + wScale(minScoreRate), cy + stepy * i])\r\n        pointsfc.push([cx + wScale(avScoreRate - fcScoreRate), cy + stepy * i])\r\n\r\n        pointsat.push([cx + wScaleat(minAttempts), cy + stepy * i])\r\n        pointsfcat.push([cx + wScaleat(avAttempts - Math.sqrt(fcAttempts)), cy + stepy * i])\r\n\r\n        pointstd.push([cx + wScaletd(minTimeDur), cy + stepy * i])\r\n        pointsfctd.push([cx + wScaletd(avTimeDur - Math.sqrt(fcTimeDur)), cy + stepy * i])\r\n      };\r\n\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n        .curve(d3.curveBasisClosed)\r\n      let curve_generatorb = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n        .curve(d3.curveBasis)\r\n      // .curve(d3.curveLinearClosed)\r\n\r\n      let linepoly = _this.drawLine(svg, curve_generator(points), \"none\", 1, '0', '1', `setstuScoreLine_${idN}`, 'setstuScoreLine', \"rgba(253, 195, 190,1)\");\r\n      let linepolyfc = _this.drawLine(svg, curve_generator(pointsfc), \"none\", 1, '0', '1', `setstuScoreLinefc_${idN}`, 'setstuScoreLine', \"rgba(255, 77, 109,1)\");\r\n      let lineav = _this.drawLine(svg, curve_generatorb(pointsav), \"white\", 1, '0', '1', `setstuScoreLineAv_${idN}`, 'setstuScoreLine');\r\n\r\n      let linepolyat = _this.drawLine(svg, curve_generator(pointsat), \"none\", 1, '0', '1', `setstuAttemptsLine_${idN}`, 'setstuAttemptsLine', \"rgba(250, 210, 50,1)\");\r\n      let linepolyfcat = _this.drawLine(svg, curve_generator(pointsfcat), \"none\", 1, '0', '1', `setstuAttemptsLinefc_${idN}`, 'setstuAttemptsLine', \"rgba(181, 146, 9,1)\");\r\n      let lineavat = _this.drawLine(svg, curve_generatorb(pointsavat), \"white\", 1, '0', '1', `setstuAttemptsLineAv_${idN}`, 'setstuAttemptsLine');\r\n\r\n      // let linepolytd = _this.drawLine(svg, curve_generator(pointstd), \"none\", 1, '0','1' ,`setstuTimeDurLine_${idN}`, 'setstuTimeDurLine',\"rgb(5, 13, 159)\");\r\n      // let linepolyfctd = _this.drawLine(svg, curve_generator(pointsfctd), \"none\", 1, '0','1' ,`setstuTimeDurLinefc_${idN}`, 'setstuTimeDurLine',\"rgb(5, 20, 90)\");\r\n      // let lineavtd = _this.drawLine(svg, pathavtd, \"white\", 1, '0','1' ,`setstuTimeDurLineAv_${idN}`, 'setstuTimeDurLine');\r\n      // let linefcf = _this.drawLine(svg, pathfcf, \"white\", 1, '0','1' ,`setstuScoreLineFcf_${idN}`, 'setstuScoreLine');\r\n      // let linefcz = _this.drawLine(svg, pathfcz, \"white\", 1, '0','1' ,`setstuScoreLineFcz_${idN}`, 'setstuScoreLine');\r\n    },\r\n\r\n    drawRiver(svg, cx, cy, height, width, idN, set) {\r\n      const _this = this;\r\n      // let groupData = \r\n      let data = [];\r\n      let keys = []\r\n      for (let i = 0; i < set.length; i++) {\r\n        let groupVal = set[i]['groupVal']\r\n        let temp = { \"od\": i };\r\n        for (let j = 0; j < groupVal.length; j++) {\r\n          if (keys.indexOf((\"\" + j)) == -1) {\r\n            keys.push(\"\" + j);\r\n          }\r\n          let curScoringRate = groupVal[j]['scoringRate'];\r\n          temp[(\"\" + j)] = curScoringRate;\r\n        }\r\n        data.push(temp)\r\n        // let curScoringRate = \r\n      }\r\n      console.log(data)\r\n      var stack = d3.stack()\r\n        .keys(keys)\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = width;\r\n      let xStep = (width) / (data.length);\r\n      let stackData = stack(data)\r\n      // let maxx = Math.max.apply(Math, stackData.map(function (d) { return Math.max.apply(Math, d.map(function (c) { return c[1]; }));; }));\r\n      // let minx = Math.min.apply(Math, stackData.map(function (d) { return Math.max.apply(Math, d.map(function (c) { return c[1]; })); }));\r\n\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, height]);\r\n\r\n      var area = d3.area()\r\n\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return d.data.od * xStep;\r\n        })\r\n        .y0(function (d) {\r\n          return yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return yScale(d[1]);\r\n        });\r\n\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = _this.stuColorList;\r\n      let colorLi = _this.mcolor;\r\n      for (let i = 0; i < stackData.length; i++) {\r\n\r\n        svg.append(\"path\")\r\n          .attr(\"id\", function (d) { return `${idN}_${stackData[i].key}` })\r\n          .attr(\"class\", \"river\")\r\n          .attr(\"d\", function (d) {\r\n            return area(stackData[i])\r\n          })\r\n          .attr(\"fill\", function (d) {\r\n            return typeColor[stackData[i].key]\r\n          })\r\n          .attr(\"transform\", `translate(${cx},${cy})`)\r\n          .on(\"mouseover\", function (d) {\r\n            d3.selectAll(\".river\")\r\n            // .style(\"filter\", \"url()\")\r\n            d3.select(this)\r\n            // .style(\"filter\", \"url(#coolShadow)\")\r\n          })\r\n      }\r\n    },\r\n    drawBsLine(svg, sx, sy, c1x, c1y, c2x, c2y, tx, ty, stroke, width, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr(\"class\", className)\r\n        .attr(\"id\", idName)\r\n        .attr('d', function (d) {\r\n          let path = d3.path();\r\n          path.moveTo(sx, sy);\r\n          // path.quadraticCurveTo(cx, cy, tx, ty);\r\n          path.bezierCurveTo(c1x, c1y, c2x, c2y, tx, ty);\r\n          return path.toString();\r\n        })\r\n        .style(\"fill\", \"none\")\r\n        .style('stroke', stroke)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .style('stroke-width', width);\r\n      return line;\r\n    },\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      return txt;\r\n    },\r\n    drawLine(svg, path, stroke, width, stroke_dasharray = \"0\", opacity, idName, className, fill = 'none') {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .attr('fill', fill)\r\n      return line;\r\n    },\r\n    getTreeData(data) {\r\n      const _this = this;\r\n      let oriData = tools.deepClone(this.data);\r\n      var treeData = {\r\n        \"name\": \"root\",\r\n        \"children\": []\r\n      };\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        if (parseInt(data[i]['father']) == -1) {\r\n          treeData['children'].push(data[i]);\r\n        }\r\n        else {\r\n          let fId = data[i]['father'];\r\n          let fatherD = data.find(function (d) { return d['id'] == fId; });\r\n          if (!fatherD['children']) {\r\n            fatherD['children'] = [data[i]]\r\n          }\r\n          else\r\n            fatherD['children'].push(data[i])\r\n        }\r\n      }\r\n      return treeData;\r\n    },\r\n    entHover(idList) {\r\n      for (let i = 0; i < idList.length; i++) {\r\n        let transformd = d3.select(idList[i]).attr(\"transform\");\r\n        d3.select(idList[i])\r\n          .transition().duration(100)\r\n          .attr(\"transform\", function (d) {\r\n            return transformd.split(\"scale\")[0] + \" scale(1.2)\"\r\n          })\r\n        // .style(\"filter\", \"url(#coolShadow)\")\r\n      }\r\n    },\r\n    entRemoveHover(idList) {\r\n      for (let i = 0; i < idList.length; i++) {\r\n        let transformd = d3.select(idList[i]).attr(\"transform\")\r\n        d3.select(idList[i])\r\n          .transition().duration(100)\r\n          .attr(\"transform\", function (d) {\r\n            return transformd.split(\"scale\")[0] + \" scale(1)\"\r\n          }).style(\"filter\", \"url()\")\r\n      }\r\n    },\r\n    drawEntityProblem(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let proData = tools.deepClone(_this.problemsData);\r\n      let idn = pId.split(\"_\")[1];\r\n      let curEnt = proData.find(function (p) {\r\n        return (p.id).toString() == (idn.toString())\r\n      });\r\n      // let attrList =[{attrName:'difficulty',attrValue:curEnt['difficulty']},];\r\n      let attrList = _this.proAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let proMaxMinDC = _this.proMaxMinDC;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let currentMaxColor = _this.entProMaxColor;\r\n      let currentMinColor = _this.entProMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([proMaxMinDC[0], proMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 40]);\r\n\r\n      let rSize = rSize_linear(curEnt['conCount']);\r\n\r\n      let points = _this.calcRegularPolygonPoints(attrLen, 0, 0, rSize);\r\n      let entColor = importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n\r\n      let entPolygon = _this.drawPolygon(entG, points, `pro_${idn}`, '5px', entColor, entColor);\r\n\r\n      entPolygon.on(\"mouseover\", function (d) {\r\n      })\r\n      let pointsList = [];\r\n      const pathAxis = d3.path();\r\n      pathAxis.moveTo(0, 0);\r\n      for (let i = 0; i < points.length; i++) {\r\n        pathAxis.lineTo(points[i][0], points[i][1]);\r\n        pathAxis.moveTo(0, 0);\r\n        pathAxis.lineTo(points[i][0], points[i][1]);\r\n      }\r\n      pathAxis.lineTo(points[0][0], points[0][1]);\r\n      let rgbValue = tools.getRgbValue(entColor);\r\n      let r = parseInt(rgbValue[0]) * 0.2;\r\n      let g = parseInt(rgbValue[1]) * 0.4;\r\n      let b = parseInt(rgbValue[2]) * 0.7;\r\n      _this.drawPathLine(entG, pathAxis, `rgb(${r},${g},${b})`, 0.2, \"10,3\", `proAxis_${idn}`, \"\");\r\n      // -------------------------\r\n      const path = d3.path();\r\n      let startP = _this.calcattrPoint(attrLen, 0, proAttrMaxMinList[0], curEnt[attrList[0]], 0, 0, rSize)\r\n      path.moveTo(startP[0], startP[1]);\r\n      pointsList.push(startP)\r\n      let startP2 = _this.calcattrPoint(attrLen, 1, proAttrMaxMinList[1], curEnt[attrList[1]], 0, 0, rSize)\r\n      path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1]);\r\n      pointsList.push(startP2)\r\n      for (let i = 2; i < attrLen; i++) {\r\n        let curP = _this.calcattrPoint(attrLen, i, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize)\r\n        // path.lineTo(curP[0],curP[1]);\r\n        pointsList.push(curP);\r\n        path.bezierCurveTo(curP[0], curP[1], curP[0], curP[1], curP[0], curP[1])\r\n      }\r\n      path.bezierCurveTo(startP[0], startP[1], startP[0], startP[1], startP[0], startP[1])\r\n\r\n      pointsList.push(startP)\r\n      path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1])\r\n      pointsList.push(startP2)\r\n      // ----------------\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => {\r\n          return d[1];\r\n        })\r\n        .curve(d3.curveCatmullRom)\r\n      // .curve(d3.curveBundle)\r\n      _this.drawPolygon(entG, pointsList, `proAttr_${idn}`, '1px', `rgb(${r},${g},${b})`, `rgba(${r},${g},${b},0.3)`);\r\n      // .attr(\"opacity\",\"0.3\")\r\n      // _this.drawPathLine(entG, curve_generator(pointsList), \"rgb(200,200,200)\", 2, \"0\", \"\", \"\");\r\n\r\n    },\r\n    drawEntityConcept(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let conData = tools.deepClone(_this.conceptTree);\r\n      let idn = pId.split(\"_\")[1];\r\n      let curEnt = conData.find(function (p) {\r\n        return (p.id).toString() == (idn.toString())\r\n      });\r\n      // let attrList =[{attrName:'difficulty',attrValue:curEnt['difficulty']},];\r\n      let attrList = _this.conAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let conMaxMinDR = _this.conMaxMinDR;\r\n      let conMaxMinDC = _this.conMaxMinDC;\r\n      let conAttrMaxMinList = _this.conAttrMaxMinList;\r\n      let currentMaxColor = _this.entConMaxColor;\r\n      let currentMinColor = _this.entConMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([conMaxMinDC[0], conMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([20, 50]);\r\n\r\n      let rSize = rSize_linear(curEnt['proCount']);\r\n\r\n      let points = _this.calcRegularPolygonPoints(attrLen, 0, 0, rSize);\r\n\r\n\r\n      let StartR = 0//Math.PI/4;\r\n      let StepInterR = Math.PI * 2 / 15;\r\n\r\n      let StepR = (Math.PI * 2 - StepInterR * attrLen) / attrLen;\r\n\r\n\r\n      for (let i = 0; i < attrLen; i++) {\r\n        let curP = _this.calcattrPoint(attrLen, i, conAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize);\r\n        let h = _this.calcRsize(conAttrMaxMinList[i], curEnt[attrList[i]], rSize)\r\n        var dataset = { startAngle: StartR + i * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i + 1) * (StepR + StepInterR) }; //创建一个弧生成器\r\n        var arcPath = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h);\r\n        var arcPathBack = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h + 2);\r\n        var pathArc = arcPath(dataset);\r\n        let entColor = _this.attrColorList[i];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n        // _this.drawArc(entG, 0, 0, arcPathBack(dataset), \"#000\", \"#000\", 'type', 0, 3);\r\n        _this.drawArc(entG, 0, 0, pathArc, entColor, entColor, 'type', 0, 3);\r\n      }\r\n\r\n\r\n\r\n    },\r\n    updateEntity(svg, x, y, pId) {\r\n      const _this = this;\r\n      let entG = svg.select(`#${pId}`);\r\n      let transformd = entG.attr(\"transform\")\r\n      let s = 'scale(1)';\r\n      if (transformd.split(\"scale\").length > 1) {\r\n        s = `scale${transformd.split(\"scale\")[1]}`;\r\n      }\r\n      entG.attr(\"transform\", `translate(${x},${y}) ${s}`);\r\n    },\r\n    drawPolygon(svg, points, idName, strokeWidth, stroke, fill) {\r\n      let polygon = svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"id\", idName)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"stroke\", stroke)\r\n      return polygon;\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className,strokeDasharray = '0') {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"stroke-dasharray\", strokeDasharray)\r\n      return rect;\r\n    },\r\n    calcRsize(domin, value, r) {\r\n      let point_linear = d3.scaleLinear().domain([domin[1], domin[0]]).range([r / 3, r]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n    calcattrPoint(totalNum, index, domin, value, x, y, r) {\r\n      const _this = this;\r\n      let arcStep = Math.PI * 2 / totalNum;\r\n      let rarc = _this.calcRsize(domin, value, r);\r\n      let point = [x - Math.sin(arcStep * index) * rarc, y + Math.cos(arcStep * index) * rarc];\r\n      return point\r\n    },\r\n\r\n    calcRegularPolygonPoints(num, x, y, r) {\r\n      let arcStep = Math.PI * 2 / num;\r\n      let points = [];\r\n      for (let i = 0; i < num; i++) {\r\n        points.push([x - Math.sin(arcStep * i) * r, y + Math.cos(arcStep * i) * r])\r\n      }\r\n      return points\r\n    },\r\n    drawPathLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n    },\r\n    drawCircle(svg, x, y, r, fill, opacity, stroke, width, className = 'entCircle', idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      let circle = svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr('stroke', stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"fill\", fill)\r\n      return circle;\r\n    },\r\n\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    getMaxMin(data, attrname) {\r\n      return [\r\n        Math.max.apply(Math, data.map(function (d) { return d[attrname]; })),\r\n        Math.min.apply(Math, data.map(function (d) { return d[attrname]; }))\r\n      ]\r\n    },\r\n    updataGraph() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.graphDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"graphPanel\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#graphPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#graphPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.rootSvg = svg;\r\n      let proData = _this.problemsData;\r\n      let proMaxMinDR = _this.getMaxMin(proData, 'conCount');\r\n      let proMaxMinDC = _this.getMaxMin(proData, 'scoringRate');\r\n\r\n      // let proAttrList = ['scoringRate', 'timeDur', 'totalAttempts',\"totalAttemptsPeople\", 'acceptedRate', 'conCount'];\r\n      let proAttrList = ['scoringRate', 'acceptedRate', 'totalAttempts', 'conCount'];\r\n      _this.proAttrList = proAttrList;\r\n      let proAttrMaxMinList = [];\r\n      for (let i = 0; i < proAttrList.length; i++) {\r\n        proAttrMaxMinList.push(_this.getMaxMin(proData, proAttrList[i]));\r\n      }\r\n      _this.proAttrMaxMinList = proAttrMaxMinList;\r\n      _this.proMaxMinDR = proMaxMinDR;\r\n      _this.proMaxMinDC = proMaxMinDC;\r\n\r\n      let conData = _this.conceptTree;\r\n      let conMaxMinDR = _this.getMaxMin(conData, 'proCount');\r\n      let conMaxMinDC = _this.getMaxMin(conData, 'scoringRate');\r\n\r\n      let conAttrList = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n      _this.conAttrList = conAttrList;\r\n      let conAttrMaxMinList = [];\r\n      for (let i = 0; i < conAttrList.length; i++) {\r\n        conAttrMaxMinList.push(_this.getMaxMin(conData, conAttrList[i]));\r\n      }\r\n      _this.conAttrMaxMinList = conAttrMaxMinList;\r\n\r\n      _this.conMaxMinDR = conMaxMinDR;\r\n      _this.conMaxMinDC = conMaxMinDC;\r\n\r\n      this.$bus.$emit(\"Domin\", [proAttrList, proAttrMaxMinList, conAttrList, conAttrMaxMinList]);\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n      // _this.createRel('1234','4321',0);\r\n      // _this.createRel('123','321',0);\r\n      // _this.delRel('1234','4321',0);\r\n\r\n      // _this.getProblems();\r\n      // _this.getConcept();\r\n      // _this.getConceptProblem();\r\n      // _this.getUserProblem();\r\n      // _this.updataGraph();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n\r\n    d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n    // this.updataGraph();\r\n\r\n    this.$bus.$on('stuColorList', (val) => { _this.stuColorList = val; });\r\n    this.$bus.$on('attrColorList', (val) => {\r\n      _this.attrColorList = val;\r\n    });\r\n    this.$bus.$on('groupData', (val) => {\r\n      _this.groupData = val;\r\n    });\r\n    this.$bus.$on('allProblem', (val) => {\r\n      _this.problemsData = val;\r\n      _this.updataGraph();\r\n      _this.updataSelectStudentListColor();\r\n      // _this.updataParallelCoordinatesplotByPro();\r\n    });\r\n    this.$bus.$on('Submission', (val) => {\r\n      _this.submissionsData = val;\r\n    });\r\n    this.$bus.$on('Student', (val) => {\r\n      _this.studentsData = val;\r\n    });\r\n    this.$bus.$on('proSet', (val) => {\r\n      _this.proSetOriData = val;\r\n    });\r\n    this.$bus.$on('Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n    });\r\n    this.$bus.$on('SelectedStu', (val) => {\r\n      _this.SelectStudentList = val;\r\n      // _this.calStudent();\r\n    });\r\n    this.$bus.$on('SelectingStu', (val) => {\r\n      _this.SelectingStudentId = val;\r\n    });\r\n    this.$bus.$on('SelectingCon', (val) => {\r\n      _this.SelectingConId = val;\r\n    });\r\n    this.$bus.$on('SelectingPro', (val) => {\r\n      _this.SelectingProId = val;\r\n    });\r\n    // this.$bus.$on('Concept', (val) => {\r\n    //   _this.conceptsData = val;\r\n    // });\r\n    this.$bus.$on('ConceptTree', (val) => {\r\n      _this.conceptTree = val;\r\n    });\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseover\", _this.moveGraphLeft); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mousemove\", _this.moveGraphRight); // 监听点击事件\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"],"sourceRoot":"src/components/Graph"}]}