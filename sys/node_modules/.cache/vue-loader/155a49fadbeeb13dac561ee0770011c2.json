{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\pages\\Home\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\pages\\Home\\index.vue","mtime":1684101908213},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\css-loader\\dist\\cjs.js","mtime":1681618859684},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1681618860357},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\postcss-loader\\src\\index.js","mtime":1681618859950},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCkBpbXBvcnQgJy4uLy4uL2Fzc2V0cy9zdHlsZS9ob21lLmNzcyc7DQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsm2BA","file":"index.vue","sourceRoot":"src/pages/Home","sourcesContent":["<template>\r\n  <div id=\"root\">\r\n    <!-- <button1 ref=\"button1\"></button1>\r\n    <button v-on:click=\"clickHandler\">按钮</button> -->\r\n    <!-- <svg width=\"1200\" height=\"1000\"></svg> -->\r\n\r\n    <div id=\"Container\">\r\n      <!-- <div id=\"Container-back\"></div> -->\r\n      <div id=\"head\">\r\n\r\n        <!-- <Head></Head> -->\r\n      </div>\r\n      <div id=\"allBody\">\r\n        <div id=\"controlPanel\" class=\"panel\">\r\n          <ControlPanel @getToolState=\"getToolState\"></ControlPanel>\r\n        </div>\r\n        <div id=\"procPanel\" class=\"panel\">\r\n          <ProcPanel></ProcPanel>\r\n        </div>\r\n        <div id=\"graphContainer\" v-show=\"showGraph\" class=\"panel\">\r\n          <Graph :toolsState=\"toolsState\"></Graph>\r\n        </div>\r\n        <!-- <div id=\"overviewPanel\" class=\"panel\">\r\n          <OverviewPanel></OverviewPanel>\r\n        </div> -->\r\n        <!-- <transition name=\"sceneTran\"> -->\r\n\r\n        <!-- <div id=\"editPanel\" class=\"panel\"  v-if='showEdit==true'>\r\n          <EditPanel></EditPanel>\r\n        </div> -->\r\n        <div id=\"scatterPanel\" class=\"panel\">\r\n          <Scatter></Scatter>\r\n        </div>\r\n        <div id=\"netPPanel\" class=\"panel\">\r\n          <NetPPanel></NetPPanel>\r\n        </div>\r\n        <!-- </transition> -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Head from \"@/components/Header/index.vue\";\r\nimport Graph from '@/components/Graph/index.vue';\r\nimport Scatter from '@/components/Scatter/index.vue';\r\nimport ProcPanel from '@/components/ProblemContentPanel/index.vue';\r\n\r\nimport ControlPanel from '@/components/ControlPanel/index.vue'\r\nimport NetPPanel from '@/components/NetProblemPanel/index.vue';\r\nimport GroupJson from \"@/assets/json/group.json\";\r\nimport SetJson from \"@/assets/json/quz.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nexport default {\r\n  components: { Head, Graph, Scatter, ProcPanel, NetPPanel, ControlPanel },\r\n  /* eslint-disable no-unused-vars */\r\n  data() {\r\n    return {\r\n      problemsData: [],\r\n      submissionsData: [],\r\n      groupData: GroupJson,\r\n      setTimeData: SetJson,\r\n      netData: [],\r\n      problemRelByConcept: [],\r\n      problemListByConcept: [],\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      SelectStudentList: [],\r\n      conceptTree: [],\r\n      proSetData: [],\r\n      problemConceptData: [],\r\n      userProblemData: [],\r\n      toolsState: {},\r\n      timer: null,\r\n      showVideo: true,\r\n      showGraph: true,\r\n      showEdit: false,\r\n      selectEntId: \"0\",\r\n      selectEnt: \"0\",\r\n      toolState: {},\r\n      timeDur: \"\",\r\n      videoTime: 0,\r\n      windowWidth: document.documentElement.clientWidth, //实时屏幕宽度\r\n      windowHeight: document.documentElement.clientHeight, //实时屏幕高度\r\n      attrColorList:[\r\n        \"rgb(254, 33, 79)\",\r\n        \"rgb(115, 230, 163)\",\r\n        \"rgb(250, 210, 50)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(125, 98, 211)\",\r\n      ],\r\n      // attrColorList:[\r\n      //   \"rgb(253, 174, 134)\",\r\n      //   \"rgb(115, 230, 163)\",\r\n      //   \"rgb(255, 233, 141)\",\r\n      //   \"rgb(56, 191, 201)\",\r\n      //   \"rgb(255, 122, 125)\",\r\n      //   \"rgb(224, 207, 243)\",\r\n      // ],\r\n      attrColorLightList:[\r\n        \"rgb(253, 174, 134)\",\r\n        \"rgb(255, 184, 240)\",\r\n        \"rgb(255, 173, 159)\",\r\n        \"rgb(255, 208, 133)\",\r\n        \"rgb(145, 226, 199)\",\r\n        \"rgb(167, 158, 221)\",\r\n      ],\r\n      stuColorList:[\r\n        \"rgb(253, 174, 134)\",\r\n        \"rgb(203, 64, 156)\",\r\n        \"rgb(85, 6, 134)\",\r\n        \"rgb(252, 171, 1)\",\r\n        \"rgb(73, 178, 101)\",\r\n      ],\r\n      // stuColorList:[\r\n      //   \"rgb(254, 33, 79)\",\r\n      //   \"rgb(252, 171, 1)\",\r\n      //   \"rgb(85, 6, 134)\",\r\n      //   \"rgb(203, 64, 156)\",\r\n      //   \"rgb(73, 178, 101)\",\r\n      // ],\r\n      mcolor: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(155,20,100)\",\r\n        \"rgb(255,83,255)\",\r\n        \"rgb(200,100,50)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(200,200,102)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,155,255)\",\r\n        \"rgb(50,200,120)\",\r\n        \"rgb(2,50,200)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(150,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      marge: {\r\n        top: 6,\r\n        right: 10,\r\n        bottom: 16,\r\n        left: 6,\r\n      },\r\n      barType: \"Teaching\",\r\n    };\r\n  },\r\n  watch: {\r\n    toolState(val) {\r\n      if (val == 'edit')\r\n        this.showEdit = true;\r\n      else\r\n        this.showEdit = false;\r\n    },\r\n    selectEnt(val) {\r\n      this.selectEntId = val;\r\n    },\r\n    timeDur() {\r\n    },\r\n    cube_data() {\r\n      this.$nextTick(() => { });\r\n    },\r\n    cluData() {\r\n      this.$nextTick(() => {\r\n      });\r\n    },\r\n  },\r\n  methods: {\r\n    getProblems() {\r\n      const _this = this;\r\n      let data = [];\r\n      this.$http\r\n        // .get(\"/api/problem/allProblem\", { params: { name: \"12345\" } }, {})\r\n        .get(\"/api/problem/allProblem\", {}, {})\r\n        .then((response) => {\r\n          _this.problemsData = response.body;\r\n        });\r\n    },\r\n    getConcept() {\r\n      const _this = this;\r\n      this.$http\r\n        .get(\"/api/concept/allConcept\", {}, {})\r\n        .then((response) => {\r\n          _this.conceptsData = response.body;\r\n          _this.$bus.$emit(\"Concept\", _this.conceptsData);\r\n        });\r\n    },\r\n    getConceptTree() {\r\n      const _this = this;\r\n      this.$http\r\n        .get(\"/api/concept/conceptTree\", {}, {})\r\n        .then((response) => {\r\n          _this.conceptTree = response.body;\r\n          _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n        });\r\n    },\r\n    getSubmissions() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/Submission/allLog\", {}, {})\r\n        .then((response) => {\r\n          _this.submissionsData = response.body;\r\n          _this.$bus.$emit(\"Submission\", _this.submissionsData);\r\n          _this.calStudent();\r\n          _this.calcNetData();\r\n        });\r\n    },\r\n    getProblemConcept() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/conceptProblem/allRel\", {}, {})\r\n        .then((response) => {\r\n          _this.problemConceptData = response.body;\r\n          _this.$bus.$emit(\"Pro_Con\", _this.problemConceptData);\r\n        });\r\n    },\r\n    getStudents() {\r\n      const _this = this;\r\n      this.$http.get(\"/api/student/allStudent\", {}, {})\r\n        .then((response) => {\r\n          _this.studentsData = response.body;\r\n        });\r\n    },\r\n    calStudent() {\r\n      const _this = this;\r\n      let entStudent = [];\r\n      let entConcept = [];\r\n      let entProblem = [];\r\n      let entProSet = [];\r\n\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      let setTimeData = _this.setTimeData;\r\n\r\n      let conceptTree = tools.deepClone(_this.conceptTree);\r\n      let problemsData = tools.deepClone(_this.problemsData);\r\n      let submissionsData = tools.deepClone(_this.submissionsData);\r\n      let problemConceptData = tools.deepClone(_this.problemConceptData);\r\n      \r\n      let groupData = _this.groupData;\r\n\r\n      console.log(SelectStudentList);\r\n\r\n      let valetemp = {\r\n        'totalTimeDur':0,\r\n        'timeDur':0,\r\n        'totalAttempts':0,\r\n        'acceptedAttempts':0,\r\n        'totalAttemptsPeople':0,\r\n        'acceptedAttemptsPeople':0,\r\n        'totalScore':0,\r\n        'accuracy':0,\r\n        'conCount':0,\r\n        'gvjg':-1,\r\n        'conList':[],\r\n        'scoringRate':0,\r\n        'stu':[]\r\n      }\r\n        let tempStudent = [];\r\n        let tempAllStudent = {};\r\n        let StudentMap = {};\r\n      for (let i = 0; i < groupData.length; i++) {\r\n        let uid = groupData[i]['id'];\r\n        let tp = tools.deepClone(valetemp);\r\n        tp['id'] = uid;\r\n        tempAllStudent[uid] = (tp);\r\n      }\r\n      valetemp['stuData']= tools.deepClone(tempAllStudent);\r\n      setTimeData.forEach(set=>{\r\n        set['timeSt'] = tools.time2mktime(set['time']);\r\n      })\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n          for(let j=0;j<SelectStudentList[i].length;j++){\r\n              StudentMap[SelectStudentList[i][j]] = i;\r\n          }\r\n          tempStudent.push(tools.deepClone(valetemp));\r\n      }\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        // let id = problemsData[i]['id'];\r\n        // problemsData[i] = tools.deepClone(valetemp);\r\n        // problemsData[i]['id'] = id;\r\n        problemsData[i]['totalTimeDur'] = 0;\r\n        problemsData[i]['timeDur'] = 0;\r\n        problemsData[i]['totalAttempts'] = 0;\r\n        problemsData[i]['acceptedAttempts'] = 0;\r\n        problemsData[i]['totalAttemptsPeople'] = 0;\r\n        problemsData[i]['acceptedAttemptsPeople'] = 0;\r\n        problemsData[i]['totalScore'] = 0;\r\n        problemsData[i]['accuracy'] = 0;\r\n        problemsData[i]['conCount'] = 0;\r\n        problemsData[i]['conList'] = [];\r\n        problemsData[i]['scoringRate'] = 0;\r\n        problemsData[i]['groupVal'] = tools.deepClone(tempStudent);\r\n        problemsData[i]['stu'] = [];\r\n        problemsData[i]['stuData'] = tools.deepClone(tempAllStudent);\r\n        let proSetId = problemsData[i]['problemSetId'];\r\n\r\n        let protime = setTimeData.find(function(s){return s['problemSetId'] == proSetId})['timeSt'];\r\n\r\n        problemsData[i]['timeSp'] = protime;\r\n        \r\n        if (entProSet.find(function (es) { return es['id'] == proSetId; }) == undefined) {\r\n          entProSet.push({\r\n            \"id\": proSetId,\r\n            \"pro\": [],\r\n            'totalScore': 0,\r\n          })\r\n        }\r\n        let ePS = entProSet.find(function (es) { return es['id'] == proSetId; });\r\n        ePS['pro'].push(problemsData[i]);\r\n        ePS['totalScore'] += problemsData[i]['score'];\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        conceptTree[c]['timeDur'] = 0;\r\n        conceptTree[c]['totalAttempts'] = 0;\r\n        conceptTree[c]['acceptedAttempts'] = 0;\r\n        conceptTree[c]['totalScore'] = 0;\r\n        conceptTree[c]['accuracy'] = 0;\r\n        conceptTree[c]['proCount'] = 0;\r\n        conceptTree[c]['scoringRate'] = 0;\r\n        conceptTree[c]['groupVal'] = tools.deepClone(tempStudent);\r\n\r\n      }\r\n      for (let l = 0; l < submissionsData.length; l++) {\r\n        let userId = submissionsData[l]['user']['user']['id'];\r\n\r\n        // if (SelectStudentList.indexOf(userId)!=-1){\r\n          if (entStudent.find(function (eS) { return eS['id'] == userId; }) == undefined) {\r\n            entStudent.push({ 'id': userId, \"pro\": [] });\r\n          }\r\n          let entStu = entStudent.find(function (eS) { return eS['id'] == userId; });\r\n          let jageProblemContents = submissionsData[l]['judgeResponseContents'];\r\n          let submitAt = submissionsData[l]['submitAt'];\r\n          \r\n          for (let i = 0; i < jageProblemContents.length; i++) {\r\n            let problemId = jageProblemContents[i]['problemSetProblemId'];\r\n            let score = jageProblemContents[i]['score'];\r\n            let proStatus = jageProblemContents[i]['status'];\r\n\r\n            if (entStu['pro'].find(function (p) { return p['id'] == problemId; }) == undefined) {\r\n              entStu['pro'].push({ \"id\": problemId, 'log': [], 'best': jageProblemContents[i], \"totalAttempts\": 0, \"totalScore\": 0 })\r\n            }\r\n            \r\n            let eSP = entStu['pro'].find(function (p) { return p['id'] == problemId; })\r\n            // eSP['log'].push(jageProblemContents[i]);\r\n\r\n            if (eSP['best']['score'] < score) {\r\n              eSP['best'] = jageProblemContents[i];\r\n            }\r\n            let pro = problemsData.find(function (p) { return p['id'] == problemId; })\r\n            if (pro != undefined) {\r\n              let timeSp = pro['timeSp']\r\n              // if (SelectStudentList.indexOf(userId)!=-1){\r\n                // console.log(StudentMap[userId],pro['groupVal'])\r\n              if(StudentMap[userId]!=undefined){\r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['totalAttempts'] += 1;\r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['gvjg'] = 1;\r\n                pro['groupVal'][StudentMap[userId]]['stu'][userId] = 0;\r\n                pro['groupVal'][StudentMap[userId]]['totalAttempts'] +=1;\r\n                pro['groupVal'][StudentMap[userId]]['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n                if (proStatus == 'ACCEPTED'){\r\n                  pro['groupVal'][StudentMap[userId]]['acceptedAttempts'] += 1;\r\n                  pro['groupVal'][StudentMap[userId]]['stuData'][userId]['acceptedAttempts'] += 1;\r\n                  pro['groupVal'][StudentMap[userId]]['stu'][userId] = 1;\r\n                }\r\n                pro['groupVal'][StudentMap[userId]]['totalScore'] += score / pro['score'];\r\n                \r\n                pro['groupVal'][StudentMap[userId]]['stuData'][userId]['totalScore'] += score / pro['score'];\r\n              }\r\n              pro['stuData'][userId]['totalAttempts'] += 1;\r\n              pro['stuData'][userId]['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n\r\n              pro['stu'][userId] =0;\r\n              pro['totalAttempts'] += 1;\r\n              pro['totalTimeDur'] += tools.time2mktime(submitAt) - timeSp;\r\n\r\n              eSP['totalAttempts'] += 1;\r\n              if (proStatus == 'ACCEPTED'){\r\n                \r\n                pro['acceptedAttempts'] += 1;\r\n                pro['stu'][userId] = 1;\r\n\r\n                pro['stuData'][userId]['acceptedAttempts'] += 1;\r\n\r\n              }\r\n              pro['totalScore'] += score / pro['score'];\r\n              \r\n              pro['stuData'][userId]['totalScore'] += score / pro['score'];\r\n              // }\r\n              eSP['totalScore'] += score / pro['score'];\r\n            }\r\n          }\r\n        // }\r\n      }\r\n      for (let i = 0; i < problemConceptData.length; i++) {\r\n        let conceptId = problemConceptData[i]['conceptId'];\r\n        let problemId = problemConceptData[i]['problem'];\r\n        let Pro = problemsData.find(function (p) { return p['id'] == problemId; });\r\n        Pro['conCount']++;\r\n        Pro['conList'].push(conceptId);\r\n      }\r\n\r\n\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        if (problemsData[i]['totalAttempts'] != 0) {\r\n          problemsData[i]['scoringRate'] = problemsData[i]['totalScore'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['acceptedRate'] = problemsData[i]['acceptedAttempts'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['timeDur'] = problemsData[i]['totalTimeDur'] / problemsData[i]['totalAttempts'];\r\n        }\r\n        let groupVal = problemsData[i]['groupVal'];\r\n        \r\n        for (let j = 0; j < groupVal.length; j++) {\r\n          if (groupVal[j]['totalAttempts'] != 0) {\r\n            groupVal[j]['scoringRate'] = groupVal[j]['totalScore'] / groupVal[j]['totalAttempts'];\r\n            groupVal[j]['acceptedRate'] = groupVal[j]['acceptedAttempts'] / groupVal[j]['totalAttempts'];\r\n            groupVal[j]['timeDur'] = groupVal[j]['totalTimeDur'] / groupVal[j]['totalAttempts'];\r\n\r\n            let stuData = groupVal[j]['stuData'];\r\n            Object.keys(stuData).forEach((s) => {\r\n\r\n              if (stuData[s]['totalAttempts'] != 0) {\r\n                stuData[s]['scoringRate'] = stuData[s]['totalScore'] / stuData[s]['totalAttempts'];\r\n                stuData[s]['acceptedRate'] = stuData[s]['acceptedAttempts'] / stuData[s]['totalAttempts'];\r\n                // stuData[s]['timeDur'] = stuData[s]['totalTimeDur'] / stuData[s]['totalAttempts'];\r\n              }\r\n            })\r\n          }\r\n        }\r\n\r\n        let stuData = problemsData[i]['stuData'];\r\n        Object.keys(stuData).forEach((s)=>{\r\n            \r\n          if (stuData[s]['totalAttempts'] != 0) {\r\n            stuData[s]['scoringRate'] = stuData[s]['totalScore'] / stuData[s]['totalAttempts'];\r\n            stuData[s]['acceptedRate'] = stuData[s]['acceptedAttempts'] / stuData[s]['totalAttempts'];\r\n            stuData[s]['timeDur'] = stuData[s]['totalTimeDur'] / stuData[s]['totalAttempts'];\r\n          }\r\n        })\r\n        \r\n        let num = 0;\r\n        let cur = 0;\r\n        let stu = problemsData[i]['stu'];\r\n        Object.keys(stu).forEach((s)=>{\r\n          if(stu[s]==1){\r\n            num++;\r\n            cur++;\r\n          }\r\n          if(stu[s]==0){\r\n            num++;\r\n          }\r\n        })\r\n        // for l in ep['log']:\r\n        //     num += 1\r\n        //     if ep['log'][l][0] == ep['score']:\r\n        //         cur += 1\r\n        // if cur != 0:\r\n        problemsData[i]['totalAttemptsPeople'] = num;\r\n        problemsData[i]['acceptedAttemptsPeople'] = cur;\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        let pcount = 0;\r\n        for (let i = 0; i < problemConceptData.length; i++) {\r\n          let conceptId = problemConceptData[i]['conceptId'];\r\n          if (conceptId == conceptTree[c]['id']) {\r\n            pcount++;\r\n            let problemId = problemConceptData[i]['problem'];\r\n            let ProBycon = problemsData.find(function (p) { return p['id'] == problemId; });\r\n            conceptTree[c]['proCount'] += 1;\r\n            conceptTree[c]['totalAttempts'] += ProBycon['totalAttempts'];\r\n            conceptTree[c]['acceptedAttempts'] += ProBycon['acceptedAttempts'];\r\n            conceptTree[c]['scoringRate'] += ProBycon['scoringRate'];\r\n            conceptTree[c]['accuracy'] += ProBycon['accuracy'];\r\n            conceptTree[c]['totalAttemptsPeople'] = ProBycon['totalAttemptsPeople'];\r\n            conceptTree[c]['acceptedAttemptsPeople'] = ProBycon['acceptedAttemptsPeople'];\r\n          }\r\n        }\r\n        if (conceptTree[c]['totalAttempts'] != 0)\r\n          conceptTree[c]['acceptedRate'] = conceptTree[c]['acceptedAttempts'] / conceptTree[c]['totalAttempts'];\r\n        else\r\n          conceptTree[c]['acceptedRate'] = 0;\r\n        if (pcount != 0) {\r\n          conceptTree[c]['scoringRate'] = conceptTree[c]['scoringRate'] / pcount;\r\n          conceptTree[c]['accuracy'] = conceptTree[c]['accuracy'] / pcount;\r\n        }\r\n      }\r\n      let logLen = 0;\r\n      for (let i = 0; i < entStudent.length; i++) {\r\n        let tempProSetScore = [];\r\n        for (let j = 0; j < entProSet.length; j++) {\r\n          tempProSetScore.push({\r\n            \"id\": entProSet[j]['id'],\r\n            \"totalScore\": entProSet[j]['totalScore'],\r\n            \"score\": 0\r\n          })\r\n        }\r\n        for (let l = 0; l < entStudent[i]['pro'].length; l++) {\r\n          let proId = entStudent[i]['pro'][l]['id'];\r\n          let proSetDa = problemsData.find(function (ep) { return ep['id'] == proId })\r\n          if (proSetDa != undefined) {\r\n            let proSetId = proSetDa['problemSetId'];\r\n            let bestScore = entStudent[i]['pro'][l]['best']['score'];\r\n            if (bestScore == NaN) {\r\n\r\n            }\r\n\r\n            tempProSetScore.find(function (tpss) { return tpss['id'] == proSetId })['score'] += bestScore;\r\n          }\r\n        }\r\n        entStudent[i]['proSetScore'] = tempProSetScore;\r\n      }\r\n      console.log(problemsData,entProSet,entStudent)\r\n      _this.studentsData = entStudent;\r\n      _this.$bus.$emit(\"Student\", _this.studentsData);\r\n      _this.proSetData = entProSet;\r\n      _this.$bus.$emit(\"proSet\", _this.proSetData);\r\n      _this.conceptTree = conceptTree;\r\n      _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n      _this.problemsData = problemsData;\r\n      _this.$bus.$emit(\"allProblem\", _this.problemsData);\r\n      _this.calcNetData();\r\n    },\r\n    calStudentbyGroup() {\r\n      const _this = this;\r\n      let entStudent = [];\r\n      let entConcept = [];\r\n      let entProblem = [];\r\n      let entProSet = [];\r\n\r\n      let SelectStudentList = _this.SelectStudentList;\r\n\r\n      let conceptTree = tools.deepClone(_this.conceptTree);\r\n      let problemsData = tools.deepClone(_this.problemsData);\r\n      let submissionsData = tools.deepClone(_this.submissionsData);\r\n      let problemConceptData = tools.deepClone(_this.problemConceptData);\r\n\r\n      console.log(SelectStudentList);\r\n      let tempStudent = [];\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n        let curnodelist = SelectStudentList[i];\r\n        tempStudent.push([])\r\n      }\r\n      \r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        problemsData[i]['totalAttempts'] = 0;\r\n        problemsData[i]['acceptedAttempts'] = 0;\r\n        problemsData[i]['totalAttemptsPeople'] = 0;\r\n        problemsData[i]['acceptedAttemptsPeople'] = 0;\r\n        problemsData[i]['totalScore'] = 0;\r\n        problemsData[i]['accuracy'] = 0;\r\n        problemsData[i]['conCount'] = 0;\r\n        problemsData[i]['conList'] = [];\r\n        problemsData[i]['scoringRate'] = 0;\r\n        problemsData[i]['stu'] = tools.deepClone(tempStudent);\r\n        let proSetId = problemsData[i]['problemSetId'];\r\n        if (entProSet.find(function (es) { return es['id'] == proSetId; }) == undefined) {\r\n          entProSet.push({\r\n            \"id\": proSetId,\r\n            \"pro\": [],\r\n            'totalScore': 0,\r\n          })\r\n        }\r\n        let ePS = entProSet.find(function (es) { return es['id'] == proSetId; });\r\n        ePS['pro'].push(problemsData[i]);\r\n        ePS['totalScore'] += problemsData[i]['score'];\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        conceptTree[c]['totalAttempts'] = 0;\r\n        conceptTree[c]['acceptedAttempts'] = 0;\r\n        conceptTree[c]['totalScore'] = 0;\r\n        conceptTree[c]['accuracy'] = 0;\r\n        conceptTree[c]['proCount'] = 0;\r\n        conceptTree[c]['scoringRate'] = 0;\r\n\r\n      }\r\n      for (let l = 0; l < submissionsData.length; l++) {\r\n        let userId = submissionsData[l]['user']['user']['id'];\r\n\r\n        // if (SelectStudentList.indexOf(userId)!=-1){\r\n          if (entStudent.find(function (eS) { return eS['id'] == userId; }) == undefined) {\r\n            entStudent.push({ 'id': userId, \"pro\": [] });\r\n          }\r\n          let entStu = entStudent.find(function (eS) { return eS['id'] == userId; });\r\n          let jageProblemContents = submissionsData[l]['judgeResponseContents'];\r\n          let submitAt = submissionsData[l]['submitAt'];\r\n          for (let i = 0; i < jageProblemContents.length; i++) {\r\n            let problemId = jageProblemContents[i]['problemSetProblemId'];\r\n            let score = jageProblemContents[i]['score'];\r\n            let proStatus = jageProblemContents[i]['status'];\r\n\r\n            if (entStu['pro'].find(function (p) { return p['id'] == problemId; }) == undefined) {\r\n              entStu['pro'].push({ \"id\": problemId, 'log': [], 'best': jageProblemContents[i], \"totalAttempts\": 0, \"totalScore\": 0 })\r\n            }\r\n            \r\n            let eSP = entStu['pro'].find(function (p) { return p['id'] == problemId; })\r\n            // eSP['log'].push(jageProblemContents[i]);\r\n\r\n            if (eSP['best']['score'] < score) {\r\n              eSP['best'] = jageProblemContents[i];\r\n            }\r\n            let pro = problemsData.find(function (p) { return p['id'] == problemId; })\r\n            if (pro != undefined) {\r\n              // if (SelectStudentList.indexOf(userId)!=-1){\r\n              pro['stu'][userId] =0;\r\n              pro['totalAttempts'] += 1;\r\n              eSP['totalAttempts'] += 1;\r\n              if (proStatus == 'ACCEPTED'){\r\n                pro['acceptedAttempts'] += 1;\r\n                pro['stu'][userId] = 1;\r\n              }\r\n              pro['totalScore'] += score / pro['score'];\r\n              // }\r\n              eSP['totalScore'] += score / pro['score'];\r\n            }\r\n          }\r\n        // }\r\n      }\r\n      for (let i = 0; i < problemConceptData.length; i++) {\r\n        let conceptId = problemConceptData[i]['conceptId'];\r\n        let problemId = problemConceptData[i]['problem'];\r\n        let Pro = problemsData.find(function (p) { return p['id'] == problemId; });\r\n        Pro['conCount']++;\r\n        Pro['conList'].push(conceptId);\r\n      }\r\n\r\n\r\n      for (let i = 0; i < problemsData.length; i++) {\r\n        if (problemsData[i]['totalAttempts'] != 0) {\r\n          problemsData[i]['scoringRate'] = problemsData[i]['totalScore'] / problemsData[i]['totalAttempts'];\r\n          problemsData[i]['acceptedRate'] = problemsData[i]['acceptedAttempts'] / problemsData[i]['totalAttempts'];\r\n        }\r\n        let num = 0;\r\n        let cur = 0;\r\n        let stu = problemsData[i]['stu'];\r\n        Object.keys(stu).forEach((s)=>{\r\n          if(stu[s]==1){\r\n            num++;\r\n            cur++;\r\n          }\r\n          if(stu[s]==0){\r\n            num++;\r\n          }\r\n        })\r\n        // for l in ep['log']:\r\n        //     num += 1\r\n        //     if ep['log'][l][0] == ep['score']:\r\n        //         cur += 1\r\n        // if cur != 0:\r\n        problemsData[i]['totalAttemptsPeople'] = num;\r\n        problemsData[i]['acceptedAttemptsPeople'] = cur;\r\n      }\r\n      for (let c = 0; c < conceptTree.length; c++) {\r\n        let pcount = 0;\r\n        for (let i = 0; i < problemConceptData.length; i++) {\r\n          let conceptId = problemConceptData[i]['conceptId'];\r\n          if (conceptId == conceptTree[c]['id']) {\r\n            pcount++;\r\n            let problemId = problemConceptData[i]['problem'];\r\n            let ProBycon = problemsData.find(function (p) { return p['id'] == problemId; });\r\n            conceptTree[c]['proCount'] += 1;\r\n            conceptTree[c]['totalAttempts'] += ProBycon['totalAttempts'];\r\n            conceptTree[c]['acceptedAttempts'] += ProBycon['acceptedAttempts'];\r\n            conceptTree[c]['scoringRate'] += ProBycon['scoringRate'];\r\n            conceptTree[c]['accuracy'] += ProBycon['accuracy'];\r\n            conceptTree[c]['totalAttemptsPeople'] = ProBycon['totalAttemptsPeople'];\r\n            conceptTree[c]['acceptedAttemptsPeople'] = ProBycon['acceptedAttemptsPeople'];\r\n          }\r\n        }\r\n        if (conceptTree[c]['totalAttempts'] != 0)\r\n          conceptTree[c]['acceptedRate'] = conceptTree[c]['acceptedAttempts'] / conceptTree[c]['totalAttempts'];\r\n        else\r\n          conceptTree[c]['acceptedRate'] = 0;\r\n        if (pcount != 0) {\r\n          conceptTree[c]['scoringRate'] = conceptTree[c]['scoringRate'] / pcount;\r\n          conceptTree[c]['accuracy'] = conceptTree[c]['accuracy'] / pcount;\r\n        }\r\n      }\r\n      let logLen = 0;\r\n      for (let i = 0; i < entStudent.length; i++) {\r\n        let tempProSetScore = [];\r\n        for (let j = 0; j < entProSet.length; j++) {\r\n          tempProSetScore.push({\r\n            \"id\": entProSet[j]['id'],\r\n            \"totalScore\": entProSet[j]['totalScore'],\r\n            \"score\": 0\r\n          })\r\n        }\r\n        for (let l = 0; l < entStudent[i]['pro'].length; l++) {\r\n          let proId = entStudent[i]['pro'][l]['id'];\r\n          let proSetDa = problemsData.find(function (ep) { return ep['id'] == proId })\r\n          if (proSetDa != undefined) {\r\n            let proSetId = proSetDa['problemSetId'];\r\n            let bestScore = entStudent[i]['pro'][l]['best']['score'];\r\n            if (bestScore == NaN) {\r\n\r\n            }\r\n\r\n            tempProSetScore.find(function (tpss) { return tpss['id'] == proSetId })['score'] += bestScore;\r\n          }\r\n        }\r\n        entStudent[i]['proSetScore'] = tempProSetScore;\r\n      }\r\n      _this.studentsData = entStudent;\r\n      _this.$bus.$emit(\"Student\", _this.studentsData);\r\n      _this.proSetData = entProSet;\r\n      _this.$bus.$emit(\"proSet\", _this.proSetData);\r\n      _this.conceptTree = conceptTree;\r\n      _this.$bus.$emit(\"ConceptTree\", _this.conceptTree);\r\n      _this.problemsData = problemsData;\r\n      _this.$bus.$emit(\"allProblem\", _this.problemsData);\r\n      _this.calcNetData();\r\n    },\r\n    calcNetData() {\r\n      const _this = this;\r\n      let problemData = _this.problemsData;\r\n      let submissionsData = _this.submissionsData;\r\n      let studentsData = _this.studentsData;\r\n      let minSupport = 0.1;\r\n      let minConfidence = 0.1;\r\n      let frequentItemset2 = {};\r\n      let frequentItemset1 = {};\r\n      let netData = {};\r\n      let studPro = {};\r\n      for (let i = 0; i < problemData.length; i++) {\r\n        let problemId = problemData[i]['id'];\r\n        frequentItemset1[`${problemId}`] = 0;\r\n        studentsData.forEach((s) => {\r\n          // if(studentLog.find(function(sd){return sd['id'] == s['id'];})){\r\n          //   studentLog.push({\"id\":s['id'],\"pro\":[]});\r\n          // }\r\n          if(studPro[s['id']] == undefined){\r\n            studPro[s['id']] = {}\r\n          }\r\n          // let st = studentLog.find(function(sd){return sd['id'] == s['id'];});\r\n          let problemI = s['pro'].find(function (pro) { return pro['id'] == problemId });\r\n          if (problemI == undefined) {\r\n              frequentItemset1[`${problemId}`]++;\r\n              studPro[s['id']][problemId] = '0';\r\n              s['pro'].push({\r\n                \"id\":problemId,\r\n                \"log\":[],\"best\":{\"status\":\"none\",\"score\":0}\r\n              })\r\n          }\r\n          else{\r\n            studPro[s['id']][problemId] = problemI['best']['score'];\r\n            if (problemI['status'] != 'ACCEPTED') {\r\n              frequentItemset1[`${problemId}`]++;\r\n            }\r\n          }\r\n        })\r\n      }\r\n      for (let i = 0; i < problemData.length - 1; i++) {\r\n        let problemIId = problemData[i]['id'];\r\n        let problemScore = problemData[i]['score']\r\n        if (frequentItemset1[`${problemIId}`] > 0) {\r\n          for (let j = i + 1; j < problemData.length; j++) {\r\n            let problemJId = problemData[j]['id'];\r\n            frequentItemset2[`${problemIId}_${problemJId}`] = 0;\r\n            frequentItemset2[`${problemJId}_${problemIId}`] = 0;\r\n            let supportCount = 0;\r\n            if (frequentItemset1[`${problemJId}`] > 0) {\r\n              studentsData.forEach((s) => {\r\n                let problemI = studPro[s['id']][problemIId];\r\n                let problemJ = studPro[s['id']][problemJId];\r\n                if ((problemI<problemScore) && (problemJ <problemScore)) {\r\n                  frequentItemset2[`${problemIId}_${problemJId}`]++;\r\n                  frequentItemset2[`${problemJId}_${problemIId}`]++;\r\n                }\r\n              })\r\n              netData[`${problemIId}_${problemJId}`] = frequentItemset2[`${problemIId}_${problemJId}`] / frequentItemset1[`${problemIId}`];\r\n              netData[`${problemJId}_${problemIId}`] = frequentItemset2[`${problemJId}_${problemIId}`] / frequentItemset1[`${problemJId}`];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      _this.netData = netData;\r\n      _this.$bus.$emit(\"netData\",netData);\r\n    },\r\n    getAllData() {\r\n      const _this = this;\r\n      this.getConceptTree();\r\n      this.getProblems();\r\n      this.getProblemConcept();\r\n      this.getSubmissions();\r\n    },\r\n    getSelectEnt(val) {\r\n      this.selectEntId = val;\r\n    },\r\n    getTimeDur(value) {\r\n      this.timeDur = value\r\n    },\r\n    getToolState(val) {\r\n      this.toolsState = val;\r\n    },\r\n    // getToolState:{\r\n    //   deep:true,\r\n    //   handler(val) {\r\n    //     console.log(val)\r\n    //   this.toolsState = val;\r\n    // }\r\n    // },\r\n    getShowLabelState(value) {\r\n      this.showLabelState = value\r\n    }\r\n    ,\r\n\r\n    clickHandler() {\r\n      console.log(111111);\r\n    },\r\n  },\r\n  created: function () {\r\n    var _this = this;\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n    this.$el.style.setProperty(\"--heightStyle\", this.windowHeight + \"px\");\r\n    this.showVideo = true;\r\n    this.$bus.$emit(\"attrColorList\", _this.attrColorList);\r\n    this.$bus.$emit(\"attrColorLightList\", _this.attrColorLightList);\r\n    this.$bus.$emit(\"stuColorList\", _this.stuColorList);\r\n    this.$bus.$emit(\"groupData\", _this.groupData);\r\n    this.toolState = {\r\n      \"addRel\": false,\r\n      \"addRelMain\": false,\r\n      \"delRel\":false,\r\n    }\r\n    this.getAllData();\r\n    this.$bus.$on('Updata_Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n      _this.calStudent();\r\n    });\r\n\r\n    this.$bus.$on('renew', (val) => {\r\n      if(val){\r\n        _this.getProblemConcept();\r\n          _this.calStudent();\r\n      }\r\n    });\r\n    this.$bus.$on('SelectedStu', (val) => {\r\n      _this.SelectStudentList = val;\r\n      // _this.calStudentbyGroup();\r\n      _this.calStudent();\r\n    });\r\n    // this.getData();\r\n  },\r\n  beforeDestroy() {\r\n    clearTimeout(this.timer);\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n@import '../../assets/style/home.css';\r\n</style>"]}]}