{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Scatter\\index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Scatter\\index.vue","mtime":1684141770268},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\css-loader\\dist\\cjs.js","mtime":1681618859684},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1681618860357},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\postcss-loader\\src\\index.js","mtime":1681618859950},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnLi9pbmRleC5jc3MnOw=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsg2BA","file":"index.vue","sourceRoot":"src/components/Scatter","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"scatter\" ref=\"scatterDiv\">\r\n    <div class=\"panelHead\">Performance View</div>\r\n    <div id=\"scatterCantain\" ref=\"scatterCantain\" class=\"panelBody\">\r\n    </div>\r\n\r\n    <div class=\"scatterTooltip toolTip\">\r\n      <p>\r\n          <br /><strong class=\"name toolTipAttr\"></strong>\r\n          <br /><strong class=\"text toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr0 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr1 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr2 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr3 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr4 toolTipAttr\"></strong>\r\n        </p>\r\n    </div>\r\n    <div class=\"close\" ref=\"listen\">\r\n    </div>\r\n    <div id=\"addGroupDiv\" @click=\"addGroupClk\" ref=\"addBtn\">\r\n      <img class=\"icons\" :src=\"addGroupUrl\">\r\n    </div>\r\n    <div id=\"delGroupDiv\" @click=\"delGroupClk\" ref=\"addBtn\">\r\n      <img class=\"icons\" :src=\"delGroupUrl\">\r\n    </div>\r\n    <div id=\"confirmGroupDiv\" @click=\"confirmGroupClk\" ref=\"addBtn\">\r\n      <img class=\"icons\" :src=\"confirmGroupUrl\">\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"movescatterLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"movescatterRight\"></div> -->\r\n    <!-- <div id=\"assistscatterCantain\" class=\"panel\">\r\n        <div class=\"panelHead\"></div>\r\n      </div> -->\r\n    <!-- <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomInUrl\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div> -->\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\n// import TestJson from \"@/assets/json/case2_fin.json\";\r\n// import TestRelJson from \"@/assets/json/case2_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\nimport contour from \"@/utils/contour\";\r\n\r\nexport default {\r\n  props: [\"toolsState\"],\r\n  data() {\r\n    return {\r\n      data: '',\r\n      addGroupUrl: require(\"@/assets/img/addGroup.png\"),\r\n      delGroupUrl: require(\"@/assets/img/delGroup.png\"),\r\n      confirmGroupUrl: require(\"@/assets/img/confirmGroup.png\"),\r\n      scatterHeight: 0,\r\n      selectStartX: 0,\r\n      selectStartY: 0,\r\n      selectEndX: 0,\r\n      selectEndY: 0,\r\n      selectGroupId: -1,\r\n      selectGroup: [],\r\n      stuAttrList: [],\r\n      stuAttrMaxMinList: [],\r\n      SelectStudentList: [],\r\n      groupData: [],\r\n      selectClick: 0,\r\n      problemsData: [],\r\n      proSetOriData: [],\r\n      submissionsData: [],\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      conceptTree: [],\r\n      proSetData: [],\r\n      interY: 10,\r\n      attrColorList: [],\r\n      problemConceptData: [],\r\n      userProblemData: [],\r\n      MaxMinX: [],\r\n      MaxMinY: [],\r\n      proAttrList: [],\r\n      proAttrMaxMinList: [],\r\n      conMaxMinDR: [],\r\n      conMaxMinDC: [],\r\n      conAttrList: [],\r\n      conAttrMaxMinList: [],\r\n      Ent_problem: [],\r\n      Ent_concept: [],\r\n      entG: \"\",\r\n      entSetG: \"\",\r\n      entbySetG: \"\",\r\n      relG: \"\",\r\n      curProblemId: '',\r\n      curConceptId: '',\r\n      curProblemSetId: '',\r\n      selectProblemId: '',\r\n      curConceptId: '',\r\n      selectConceptId: '',\r\n      proX: 500,\r\n      proY: 0,\r\n      setX: 800,\r\n      setY: 0,\r\n      treeX: 50,\r\n      treeY: 0,\r\n      proStepY: 0,\r\n      conStepY: 0,\r\n      rootSvg: null,\r\n      rootSvgf: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      backG: null,\r\n      scatterZoom: null,\r\n      jgDrag: true,\r\n      curEntId: '',\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 672,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      scatterGTransformK: 1,\r\n      scatterGTransformX: 0,\r\n      scatterGTransformY: 0,\r\n      scatterSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n      stuMinColor: \"rgb(255, 255, 255)\",\r\n      stuMaxColor: \"rgb(76, 141, 5)\",\r\n      stepX: 80,\r\n      stepY: 100,\r\n      typeXMap: {\r\n        \"TRUE_OR_FALSE\": 0,\r\n        \"MULTIPLE_CHOICE\": 1,\r\n        \"FILL_IN_THE_BLANK\": 2,\r\n        \"PROGRAMMING\": 3,\r\n        \"CODE_COMPLETION\": 4,\r\n        \"MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER\": 5\r\n      },\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 1, right: 2, bottom: 0, left: 2 },\r\n      stuColorList: [],\r\n      mcolor: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(155,20,100)\",\r\n        \"rgb(255,83,255)\",\r\n        \"rgb(200,100,50)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(200,200,102)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,155,255)\",\r\n        \"rgb(50,200,120)\",\r\n        \"rgb(2,50,200)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(150,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      attrColorList:[\r\n      \"rgb(255, 77, 109)\",\r\n        \"rgb(255, 231, 32)\",\r\n        \"rgb(250, 210, 50)\",\r\n        \"rgb(255, 120, 90)\",\r\n        \"rgb(255, 159, 28)\",\r\n        \"rgb(6, 214, 160)\",\r\n        \"rgb(125, 98, 211)\",\r\n      ],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    selectGroupId(val) {\r\n      const _this = this;\r\n      this.$refs.listen.addEventListener(\"mousedown\", _this.mouseDown);\r\n    },\r\n    groupsSvg: {\r\n      deep: true,\r\n      handler(val) {\r\n        var content = this.groupsSvg.html();\r\n        this.rootSvgf.html(content)\r\n        this.drawFigureAnnotation();\r\n      }\r\n    },\r\n    SelectStudentList: {\r\n      deep: true,\r\n      handler(val) {\r\n        let entG = this.entG;\r\n        this.updataScatter();\r\n        this.drawContour(entG);\r\n      }\r\n    },\r\n    selectGroup(val) {\r\n      const _this = this;\r\n      d3.selectAll(\".stuGroup\").remove();\r\n      let num = val.length;\r\n      let backG = _this.rootSvgf;\r\n      let colorList = _this.stuColorList;\r\n      for (let i = 0; i < num; i++) {\r\n        let cx = 20 + i * 40;\r\n        let cy = 500;\r\n        let r = 12;\r\n        let fill = colorList[i];\r\n        let opacity = 1;\r\n        let circle = _this.drawCircle(backG, cx, cy, r, \"white\", opacity, fill, 3, 'stuGroup', `stuGroup_${i}`);\r\n        circle.on(\"click\", function () {\r\n          d3.selectAll(`.stuGroup`).attr(\"opacity\", 0.1);\r\n          d3.select(this).attr(\"opacity\", 1);\r\n          let id = d3.select(this).attr(\"id\").split(\"_\")[1];\r\n          _this.selectGroupId = id;\r\n\r\n          d3.select(\".close\").classed(\"hidden\", false);\r\n        }).on(\"mouseover\", function () {\r\n          d3.selectAll(`.stuGroup`).attr(\"opacity\", 0.1);\r\n          d3.select(this).attr(\"opacity\", 1);\r\n          _this.$refs.listen.removeEventListener(\"mouseup\", _this.mouseUp);\r\n          _this.$refs.listen.removeEventListener(\"mousedown\", _this.mouseDown);\r\n          _this.jgDrag = false;\r\n        })\r\n      }\r\n    },\r\n    type(val) {\r\n    },\r\n  },\r\n  methods: {\r\n\r\n    addGroupClk() {\r\n      const _this = this;\r\n      let selectStuGroup = _this.selectGroup;\r\n      // if (selectStuGroup.length < 5)\r\n      //   selectStuGroup.push([]);\r\n      selectStuGroup = [[],[],[]]\r\n      _this.selectGroup = selectStuGroup;\r\n      // d3.select(`#addGroupDiv`)\r\n      // .attr(\"style\", function(){\r\n      //   return `right:${450-(selectStuGroup.length)*40}px`\r\n      // });\r\n    },\r\n    delGroupClk() {\r\n      const _this = this;\r\n      let selectStuGroup = _this.selectGroup;\r\n      if (selectStuGroup.length > 0)\r\n        selectStuGroup.pop();\r\n      _this.selectGroup = selectStuGroup;\r\n      // d3.select(`#addGroupDiv`)\r\n      // .attr(\"style\", function(){\r\n      //   return `right:${450-(selectStuGroup.length)*40}px`\r\n      // });\r\n    },\r\n    confirmGroupClk() {\r\n      const _this = this;\r\n      let selectStuGroup = _this.selectGroup;\r\n\r\n      this.$bus.$emit(\"SelectedStu\", _this.SelectStudentList);\r\n      // d3.select(`#addGroupDiv`)\r\n      // .attr(\"style\", function(){\r\n      //   return `right:${450-(selectStuGroup.length)*40}px`\r\n      // });\r\n    },\r\n\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let scatterGTransformX = _this.scatterGTransformX;\r\n      let scatterGTransformY = _this.scatterGTransformY;\r\n      let scatterGTransformK = _this.scatterGTransformK;\r\n\r\n      let groups = svg.append(\"g\").attr(\"id\", \"ggroups\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n        .attr(\"transform\", \"translate(\" + scatterGTransformX + ',' + scatterGTransformY + \") scale(\" + scatterGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"gbackG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"garcG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"grelG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let entSetG = groups.append(\"g\").attr(\"id\", \"gentSetG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let entbySetG = groups.append(\"g\").attr(\"id\", \"gentbySetG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"gentG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"gfrontG\").attr(\"class\", \"groups\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      let MaxMinX = _this.MaxMinX;\r\n      let MaxMinY = _this.MaxMinY;\r\n\r\n      let xSize_linear = d3.scaleLinear().domain([MaxMinX[1], MaxMinX[0]]).range([30, width - 30]);\r\n      let ySize_linear = d3.scaleLinear().domain([MaxMinY[1], MaxMinY[0]]).range([30, height - 30]);\r\n\r\n      _this.arcG = arcG;\r\n      _this.entG = entG;\r\n      _this.entSetG = entSetG;\r\n      _this.entbySetG = entbySetG;\r\n      _this.relG = relG;\r\n      _this.backG = backG;\r\n      _this.scatterZoom = scatterZoom;\r\n      let copyg = _this.rootSvgf.select(\"#ggroups\");\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n\r\n      let scalePre = _this.scatterSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var scatterZoom = d3.zoom()\r\n        .scaleExtent([0, 100])\r\n        .on(\"start\", (e) => {\r\n          if (_this.jgDrag) {\r\n            sty = e.transform.y;\r\n            stx = e.transform.x;\r\n            stk = e.transform.k;\r\n          }\r\n        })\r\n        .on('zoom', (e) => {\r\n          if (_this.jgDrag) {\r\n            scatterGTransformX = _this.scatterGTransformX + e.transform.x - stx;\r\n            scatterGTransformY = _this.scatterGTransformY + e.transform.y - sty;\r\n            scatterGTransformK = _this.scatterGTransformK + e.transform.k - stk;\r\n            groups.attr('transform', 'translate(' + (scatterGTransformX) + ',' + (scatterGTransformY) + ') scale(' + (scatterGTransformK) + ')')\r\n            _this.rootSvgf.selectAll(\".groups\").attr('transform', 'translate(' + (scatterGTransformX) + ',' + (scatterGTransformY) + ') scale(' + (scatterGTransformK) + ')')\r\n          }\r\n        })\r\n        .on('end', (e) => {\r\n          if (_this.jgDrag) {\r\n            _this.scatterGTransformX = scatterGTransformX;\r\n            _this.scatterGTransformY = scatterGTransformY;\r\n            _this.scatterGTransformK = scatterGTransformK;\r\n            groups.attr('transform', 'translate(' + (scatterGTransformX) + ',' + (scatterGTransformY) + ') scale(' + (scatterGTransformK) + ')')\r\n            _this.groupsSvg = groups;\r\n          }\r\n        });\r\n\r\n      svg.call(scatterZoom);\r\n      d3.select(\".close\").classed(\"hidden\", true);\r\n      d3.select(\".scatterTooltip\").classed(\"hidden\", true);\r\n      // svg.call(d3.zoom().on('start', null).on('zoom',null).on('end', null))\r\n\r\n      let attrList = _this.stuAttrList;\r\n      let stuAttrMaxMinList = _this.stuAttrMaxMinList;\r\n\r\n      let rSize_linear = d3.scaleLinear().domain([stuAttrMaxMinList[1][1], stuAttrMaxMinList[1][0]]).range([3, 8]);\r\n\r\n      let stuMaxColor = _this.stuMaxColor;\r\n      let stuMinColor = _this.stuMinColor;\r\n      let stuColor_linear = d3.scaleLinear().domain([stuAttrMaxMinList[1][1], stuAttrMaxMinList[1][0]]).range([0, 1]);\r\n      let stuCompute_color = d3.interpolate(stuMinColor, stuMaxColor);\r\n\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      let colorList = _this.mcolor;\r\n      for (let i = 0; i < groupData.length; i++) {\r\n        let cx = xSize_linear(groupData[i]['x']);\r\n        let cy = ySize_linear(groupData[i]['y']);\r\n        let sId = groupData[i]['id']\r\n        groupData[i]['cx'] = cx;\r\n        groupData[i]['cy'] = cy;\r\n        groupData[i]['r'] = rSize_linear(groupData[i][attrList[1]]);\r\n        groupData[i]['fill'] = stuCompute_color(stuColor_linear(groupData[i][attrList[1]])) //'grey'//colorList[parseInt(groupData[i]['kmeansC'])];\r\n      }\r\n      _this.groupData = groupData;\r\n      _this.updataScatter();\r\n    },\r\n\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      return txt;\r\n    },\r\n    drawFigureAnnotation() {\r\n      const _this = this;\r\n      let frontG = _this.rootSvgf;\r\n\r\n      let stuMaxColor = _this.stuMaxColor;\r\n      let stuMinColor = _this.stuMinColor;\r\n\r\n      let len = 6;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let Rsize_linear = d3.scaleLinear().domain([0, len]).range([1, 6]);\r\n      let Compute_color = d3.interpolate(stuMinColor, stuMaxColor);\r\n\r\n      let textsr = _this.drawTxt(frontG, 6, 15, \"BestScoreingRate:\", \"black\", 10, `FigScater_con`);\r\n      let textat = _this.drawTxt(frontG, 6, 45, \"Attempts:\", \"black\", 10, `FigScater_con`);\r\n      let textbs = _this.drawTxt(frontG, 6, 75, \"ScoreingRate:\", \"black\", 10, `FigScater_con`);\r\n      let prex = 0;\r\n      let prerx = 0;\r\n      let colorSR = _this.attrColorList[0];\r\n      let colorBestS = _this.attrColorList[1];\r\n      let colorAttempts = _this.attrColorList[2];\r\n\r\n      _this.drawRect(frontG, 10, 58, 40, 5, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigScater_conRectColorB`, 'FigScater');\r\n      _this.drawRect(frontG, 10, 58, 30, 5, 0, colorAttempts, \"1\", \"grey\", \"1\", `FigScater_conRectColor`, 'FigScater');\r\n\r\n      _this.drawRect(frontG, 10, 88, 40, 5, 0, \"rgb(230,230,230)\", \"1\", \"grey\", \"1\", `FigScater_conRectB`, 'FigScater');\r\n      _this.drawRect(frontG, 10, 88, 30, 5, 0, colorSR, \"1\", \"grey\", \"1\", `FigScater_conRect`, 'FigScater');\r\n\r\n      let path1 = d3.path();\r\n      let points = [[10, 50], [10, 54], [14, 50], [10, 54], [14, 58], [10, 54], [10, 58], [10, 54], [40, 54], [40, 54], [36, 50], [40, 54], [36, 58], [40, 54], [40, 50], [40, 58]]\r\n      let points2 = [[10, 80], [10, 84], [14, 80], [10, 84], [14, 88], [10, 84], [10, 88], [10, 84], [40, 84], [40, 84], [36, 80], [40, 84], [36, 88], [40, 84], [40, 80], [40, 88]]\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n      // .curve(d3.curveBasisClosed)\r\n      _this.drawLine(frontG, curve_generator(points), \"black\", 1, '0', '1', `line1`, 'FigScater_line1', \"rgb(230,230,230)\");\r\n      _this.drawLine(frontG, curve_generator(points2), \"black\", 1, '0', '1', `line2`, 'FigScater_line1', \"rgb(230,230,230)\");\r\n      for (let i = 0; i < len * 3; i++) {\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        let color = Compute_color(Color_linear(i));\r\n        let circle = _this.drawCircle(frontG, 15 + prex, 23, Rsize_linear(i), color, 1, \"none\", \"1\", 'FigScater', `FigScater_conColor${i}`);\r\n        prex += Rsize_linear(i) * 2 + 4;\r\n        prerx += i * 4 + 2;\r\n      }\r\n\r\n    },\r\n    drawContour(svg) {\r\n      const _this = this;\r\n      d3.selectAll(\".counter\").remove();\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      let nodesList = [\r\n        [], [], [], [], []\r\n      ]\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n        for (let j = 0; j < SelectStudentList[i].length; j++) {\r\n          let stuD = groupData.find(function (s) { return s['id'] == SelectStudentList[i][j] });\r\n          let stuTemp = {\r\n            x: stuD['cx'],\r\n            y: stuD['cy'],\r\n            r: stuD['r'] + 6 * 3 - 3\r\n          }\r\n          nodesList[i].push(stuTemp);\r\n        }\r\n      }\r\n      let colorList = _this.stuColorList;\r\n      // for(let i=0;i<groupData.length;i++){\r\n      //   let sId = groupData[i]['id']\r\n      //     nodesList[parseInt(groupData[i]['kmeansC'])].push({\r\n      //       x:groupData[i]['cx'],\r\n      //       y:groupData[i]['cy'],\r\n      //       r:groupData[i]['r']\r\n      //     })\r\n      // }\r\n      let k = 0;\r\n      nodesList.forEach(nodeList => {\r\n        let path = contour(nodeList, 80);\r\n        let contourData = _this.arcsToPaths(path)\r\n        contourData.forEach(contourD => {\r\n          svg.append(\"path\")\r\n            .attr(\"class\", \"counter\")\r\n            .attr(\"d\", function () { return contourD.d; })\r\n            .style(\"stroke\", colorList[parseInt(k)])\r\n            .style(\"stroke-width\", 3)\r\n            .style(\"opacity\", 1)\r\n            // .attr(\"stroke-dasharray\", \"3\")\r\n            // .attr(\"stroke-dashoffset\", \"30\")\r\n            .attr(\"transform\", function () { return contourD.transform; });\r\n        })\r\n        k++;\r\n      })\r\n\r\n    },\r\n    drawPolygon(svg, points, idName, strokeWidth, stroke, fill) {\r\n      let polygon = svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"id\", idName)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"stroke\", stroke)\r\n      return polygon;\r\n    },\r\n    arcsToPaths(arcs) {\r\n      let paths = [];\r\n      let arcGen = d3.arc();\r\n\r\n      arcs.forEach(function (arc) {\r\n        let startAngleTemp = arc.startAngle;\r\n\r\n        if (startAngleTemp > arc.endAngle) {\r\n          startAngleTemp -= 2 * Math.PI;\r\n        }\r\n\r\n        paths.push({\r\n          d: arcGen({\r\n            innerRadius: arc.radius,\r\n            outerRadius: arc.radius,\r\n            startAngle: startAngleTemp,\r\n            endAngle: arc.endAngle\r\n          }),\r\n          transform: \"translate(\" + arc.center.x + \",\" + arc.center.y + \")\"\r\n        });\r\n      });\r\n\r\n      return paths;\r\n    },\r\n    drawCircle(svg, x, y, r, fill, opacity, stroke, width, className = 'entCircle', idName) {\r\n      const _this = this;\r\n\r\n      d3.select(`#${idName}`).remove();\r\n      let circle = svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr('stroke', stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"fill\", fill)\r\n      return circle;\r\n    },\r\n\r\n    drawLine(svg, path, stroke, width, stroke_dasharray = \"0\", opacity, idName, className, fill = 'none') {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .attr('fill', fill)\r\n      return line;\r\n    },\r\n    getMaxMin(data, attrname) {\r\n      return [\r\n        Math.max.apply(Math, data.map(function (d) { return d[attrname]; })),\r\n        Math.min.apply(Math, data.map(function (d) { return d[attrname]; }))\r\n      ]\r\n    },\r\n    mouseDown(event) {\r\n      const _this = this;\r\n      _this.jgDrag = false;\r\n      let entG = _this.entG\r\n      let sx = event.layerX - _this.scatterGTransformX;\r\n      let sy = event.layerY - _this.scatterGTransformY;\r\n      _this.selectStartX = sx;\r\n      _this.selectStartY = sy;\r\n      // _this.drawRect(entG, sx, sy, 100, 100, 10, \"grey\", \"5\", \"none\",\"0.1\", `SelectRect`, 'SelectRect');\r\n      this.$refs.listen.addEventListener(\"mousemove\", _this.mouseMove);\r\n    },\r\n    mouseMove(event) {\r\n      const _this = this;\r\n      let entG = _this.entG\r\n      let tx = event.layerX - _this.scatterGTransformX;\r\n      let ty = event.layerY - _this.scatterGTransformY;\r\n\r\n      _this.selectEndX = tx;\r\n      _this.selectEndY = ty;\r\n      let sx = _this.selectStartX;\r\n      let sy = _this.selectStartY;\r\n\r\n\r\n      let minx = sx < tx ? sx : tx;\r\n      let miny = sy < ty ? sy : ty;\r\n      let maxx = sx > tx ? sx : tx;\r\n      let maxy = sy > ty ? sy : ty;\r\n      _this.drawRect(entG, minx, miny, maxx - minx, maxy - miny, 10, \"grey\", \"5\", \"none\", \"0.1\", `SelectRect`, 'SelectRect');\r\n      this.$refs.listen.addEventListener(\"mouseup\", _this.mouseUp);\r\n      // this.$refs.scatterC.addEventListener(\"mousedown\", _this.mouseDown);\r\n    },\r\n    mouseUp(event) {\r\n      const _this = this;\r\n      this.$refs.listen.removeEventListener(\"mousemove\", _this.mouseMove);\r\n      _this.jgDrag = true;\r\n\r\n      d3.select(\".close\").classed(\"hidden\", true);\r\n      this.getSelectStudentList();\r\n      // this.$refs.scatterCantain.removeEventL(\"mouseup\", _this.mouseUp);\r\n      // this.$refs.scatterC.addEventListener(\"mousedown\", _this.mouseDown);\r\n    },\r\n    getSelectStudentList() {\r\n      const _this = this;\r\n      let temp = tools.deepClone(_this.SelectStudentList);\r\n      let groupData = _this.groupData;\r\n      let sx = _this.selectStartX;\r\n      let sy = _this.selectStartY;\r\n      let tx = _this.selectEndX;\r\n      let ty = _this.selectEndY;\r\n      _this.selectStartX = 0;\r\n      _this.selectStartY = 0;\r\n      _this.selectEndX = 0;\r\n      _this.selectEndY = 0;\r\n      let minx = sx < tx ? sx : tx;\r\n      let miny = sy < ty ? sy : ty;\r\n      let maxx = sx > tx ? sx : tx;\r\n      let maxy = sy > ty ? sy : ty;\r\n      let SelectStudentList = [];\r\n      let BuSelectStudentList = [];\r\n      for (let i = 0; i < groupData.length; i++) {\r\n        let cx = groupData[i]['cx'];\r\n        let cy = groupData[i]['cy'];\r\n        let sId = groupData[i]['id'];\r\n        if (((cx > minx) && (cx < maxx)) && ((cy > miny) && (cy < maxy))) {\r\n          let jg = 0;\r\n          temp.forEach(t => {\r\n            t.forEach(s => {\r\n              if (s == sId)\r\n                jg = 1;\r\n            })\r\n          })\r\n          if (jg == 0)\r\n            SelectStudentList.push(sId);\r\n          \r\n        }\r\n        else{\r\n          let jg = 0;\r\n          temp.forEach(t => {\r\n            t.forEach(s => {\r\n              if (s == sId)\r\n                jg = 1;\r\n            })\r\n          })\r\n          if (jg == 0)\r\n            BuSelectStudentList.push(sId);\r\n        }\r\n      }\r\n      let selectGroupId = _this.selectGroupId;\r\n      temp[selectGroupId] = SelectStudentList;\r\n      if((selectGroupId == 1)){\r\n        temp[2] = BuSelectStudentList;\r\n      }\r\n      _this.SelectStudentList = temp;\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n      return rect;\r\n    },\r\n    updataScatter() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let groupData = _this.groupData;\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      for (let i = 0; i < groupData.length; i++) {\r\n        let cx = groupData[i]['cx'];\r\n        let cy = groupData[i]['cy'];\r\n        let r = groupData[i]['r']\r\n        let sId = groupData[i]['id']\r\n        let fill = groupData[i]['fill'];\r\n        let opacity = 1;\r\n        // if(SelectStudentList.indexOf(sId)!=-1){\r\n        //   opacity = 1;\r\n        // }\r\n        _this.drawCircle(entG, cx, cy, r, fill, opacity, \"grey\", \"0\", 'entStu', `entStu_${sId}`);\r\n        let stuAttrList = _this.stuAttrList;\r\n        let stuAttrMaxMinList = _this.stuAttrMaxMinList;\r\n        let attrLen = stuAttrList.length;\r\n        let colorList = _this.attrColorList;\r\n        let starR = 0;//-Math.PI/2;\r\n        let stepH = 7;\r\n        let perh = r;\r\n        for (let j = 0; j < attrLen; j++) {\r\n          if (stuAttrList[j] == 'bestScore') {\r\n\r\n          }\r\n          else if (stuAttrList[j] == 'acceptedNum') {\r\n\r\n          }\r\n          else {\r\n            let Angle_linear = d3.scaleLinear().domain([0, stuAttrMaxMinList[j][0]]).range([0, Math.PI * 2]);\r\n            let h = perh + stepH;\r\n            var dataset = { startAngle: starR, endAngle: starR + Angle_linear(groupData[i][stuAttrList[j]]) }; //创建一个弧生成器\r\n            var datasetB = { startAngle: starR, endAngle: starR + Math.PI * 2 }; //创建一个弧生成器\r\n            var arcPath = d3.arc()\r\n              .innerRadius(perh)\r\n              .outerRadius(h - 1);\r\n            var arcPathBack = d3.arc()\r\n              .innerRadius(1)\r\n              .outerRadius(h + 2);\r\n            perh = h;\r\n            var pathArc = arcPath(dataset);\r\n            var pathArcB = arcPath(datasetB);\r\n            let entColor = colorList[j];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n            // _this.drawArc(entG, 0, 0, arcPathBack(dataset), \"#000\", \"#000\", 'type', 0, 3);\r\n            _this.drawArc(entG, cx, cy, pathArcB, fill, \"rgb(230,230,230)\", 'typeB', `stuAttrB_${sId}_${j}`, 0, 0);\r\n            _this.drawArc(entG, cx, cy, pathArc, entColor, entColor, 'type', `stuAttr_${sId}_${j}`, 0, 0);\r\n          }\r\n        }\r\n\r\n        let circle = _this.drawCircle(entG, cx, cy, 25, fill, 0, \"grey\", \"0\", 'entStuF', `entStuF_${sId}_${i}`);\r\n        circle.on(\"mousemove\", function (d) {\r\n          let ts = d3.select(this);\r\n          let id = ts.attr(\"id\").split(\"_\")[1];\r\n          _this.overScatterStuId = id;\r\n\r\n          _this.$bus.$emit(\"SelectingStu\", _this.overScatterStuId);\r\n\r\n          let idod = ts.attr(\"id\").split(\"_\")[2];\r\n          let clasN = ts.attr(\"class\");\r\n          let nametext = '';\r\n          let ent = groupData.find(function (c) { return c['id'] == id });\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          \r\n          if(d.clientX>2100){\r\n            xPosition = d.clientX - 210;\r\n          }\r\n          let srtext = ent['scoringRate'];\r\n          let totalAttemptsTxt = ent['totalAttempts'];\r\n          let bestScore = ent['bestScore']\r\n          var scatterTooltip = d3\r\n            .select(\".scatterTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n          // 更新浮层内容\r\n          let attr = ['scoringRate', 'totalAttempts','bestScore'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'bestScoreRate', 'Rel Count'];\r\n          // 更新浮层内容\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            scatterTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${ent[attr[a]]}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              scatterTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${ent[attr[a]].toFixed(2)}`)\r\n          }\r\n          scatterTooltip.select(\".name\").text(`Student${i+1}`);\r\n          // 移除浮层hidden样式，展示浮层\r\n          scatterTooltip.classed(\"hidden\", false);\r\n        }).on(\"mouseleave\", function (d) {\r\n          _this.$bus.$emit(\"SelectingStu\", \"\");\r\n          d3.select(\".scatterTooltip\").classed(\"hidden\", true);\r\n        })\r\n      }\r\n    },\r\n\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, idN, stroke_dasharray = \"0\", width = 3) {\r\n      d3.select(`#${idN}`).remove();\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"id\", idN)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    updataAll() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.scatterDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"scatterCantain\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#scatterCantain\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#scatterCantain\").append(\"svg\")\r\n        .attr(\"width\", width - 0)\r\n        .attr(\"height\", height - 50)\r\n        .attr('transform', 'translate(0,0)')\r\n        .style(\"position\", \"absolute\");\r\n\r\n      var svgf = d3.select(\"#scatterCantain\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height)\r\n      _this.rootSvg = svg;\r\n      _this.rootSvgf = svgf;\r\n\r\n      _this.rootSvgFig = svg;\r\n      let data = _this.groupData;\r\n      let MaxMinX = _this.getMaxMin(data, 'x');\r\n      let MaxMinY = _this.getMaxMin(data, 'y');\r\n\r\n      let stuAttrList = ['scoringRate', 'bestScore', 'totalAttempts', 'acceptedNum']//,'time']\r\n      _this.stuAttrList = stuAttrList;\r\n      let stuAttrMaxMinList = [];\r\n\r\n      for (let i = 0; i < stuAttrList.length; i++) {\r\n        stuAttrMaxMinList.push(_this.getMaxMin(data, stuAttrList[i]));\r\n      }\r\n      _this.stuAttrMaxMinList = stuAttrMaxMinList;\r\n\r\n      _this.MaxMinX = MaxMinX;\r\n      _this.MaxMinY = MaxMinY;\r\n\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n\r\n    d3.select(\".scatterTooltip\").classed(\"hidden\", true);\r\n    this.$bus.$on('groupData', (val) => {\r\n      _this.groupData = val;\r\n      this.updataAll();\r\n    });\r\n\r\n    // this.$bus.$on('attrColorList', (val) => {_this.attrColorList = val;});\r\n    this.$bus.$on('stuColorList', (val) => { _this.stuColorList = val; });\r\n    // this.$refs.scatterCantain.addEventListener(\"mousedown\", _this.mouseDown); // 监听点击事件\r\n    // this.$refs.movescatterRight.addEventListener(\"mousemove\", _this.movescatterRight); // 监听点击事件\r\n    // this.$refs.movescatterLeft.addEventListener(\"mouseleave\", _this.leavescatterMove); // 监听点击事件\r\n    // this.$refs.movescatterRight.addEventListener(\"mouseleave\", _this.leavescatterMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"]}]}