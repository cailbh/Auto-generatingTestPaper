{"remainingRequest":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Graph\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\src\\components\\Graph\\index.vue","mtime":1687230895419},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\babel-loader\\lib\\index.js","mtime":1681618859957},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1681618859467},{"path":"D:\\Cailibuhong\\video2Graph\\MOOCChinaVis\\MOOC_ChinaVis\\sys\\node_modules\\vue-loader\\lib\\index.js","mtime":1681618860114}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"src/components/Graph","sourcesContent":["<!-- eslint-disable no-unused-vars -->\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n<template>\r\n  <div class=\"graph\" ref=\"graphDiv\">\r\n    <div class=\"panelHead\">Overview</div>\r\n    <div id=\"graphPanel\" class=\"panelBody\">\r\n      <div class=\"chartTooltip toolTip\">\r\n        <p>\r\n          <br /><strong class=\"name toolTipAttr\"></strong>\r\n          <br /><strong class=\"text toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr0 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr1 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr2 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr3 toolTipAttr\"></strong>\r\n          <br /><strong class=\"attr4 toolTipAttr\"></strong>\r\n        </p>\r\n      </div>\r\n    </div>\r\n    <!-- <div id=\"moveLeft\" ref=\"moveGraphLeft\"></div>\r\n                    <div id=\"moveRight\" ref=\"moveGraphRight\"></div> -->\r\n    <!-- <div id=\"assistGraphPanel\" class=\"panel\">\r\n        <div class=\"panelHead\"></div>\r\n      </div> -->\r\n    <!-- <div id=\"zoomInDiv\" @click=\"zoomInLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomInUrl\">\r\n    </div>\r\n    <div id=\"zoomOutDiv\" @click=\"zoomOutLayoutClk\">\r\n      <img class=\"icons\" :src=\"zoomOutUrl\">\r\n    </div>\r\n    <div id=\"editToolDiv\" @click=\"editToolClk\">\r\n      <img class=\"icons\" :src=\"editToolUrl\">\r\n    </div> -->\r\n  </div>\r\n</template>\r\n  \r\n<script>\r\nimport * as d3 from 'd3'\r\nimport { onMounted, ref } from 'vue';\r\nimport filenames from \"@/utils/fileName\";\r\nimport domtoimage from 'dom-to-image';\r\n// import TestJson from \"@/assets/json/case2_fin.json\";\r\n// import TestRelJson from \"@/assets/json/case2_fin_rel.json\";\r\nimport tools from \"@/utils/tools.js\";\r\n\r\nexport default {\r\n  props: [\"toolsState\"],\r\n  data() {\r\n    return {\r\n      data: '',\r\n      graphHeight: 0,\r\n      toolAddRel: false,\r\n      toolAddRelMain: false,\r\n      toolDelRel: false,\r\n      detailsEntPro: [],\r\n      SelectingStudentId:\"\",\r\n      SelectingConId:\"\",\r\n      SelectingProId:\"\",\r\n      groupData: [],\r\n      SelectStudentList: [],\r\n      problemsData: [],\r\n      proSetOriData: [],\r\n      submissionsData: [],\r\n      maxSetCon: 0,\r\n      studentsData: [],\r\n      conceptsData: [],\r\n      conceptTree: [],\r\n      proSetData: [],\r\n      interY: 10,\r\n      problemConceptData: [],\r\n      createdProblemConceptData: [],\r\n      userProblemData: [],\r\n      proMaxMinDR: [],\r\n      proMaxMinDC: [],\r\n      proAttrList: [],\r\n      proAttrMaxMinList: [],\r\n      conMaxMinDR: [],\r\n      conMaxMinDC: [],\r\n      conAttrList: [],\r\n      conAttrMaxMinList: [],\r\n      Ent_problem: [],\r\n      Ent_concept: [],\r\n      entG: \"\",\r\n      entSetG: \"\",\r\n      entbySetG: \"\",\r\n      relG: \"\",\r\n      frontG: \"\",\r\n      curProblemId: '',\r\n      curConceptId: '',\r\n      curProblemSetId: '',\r\n      selectProblemId: '',\r\n      selectConceptId: '',\r\n      proX: 450,\r\n      proY: 30,\r\n      setWidth: 300,\r\n      setX: 830,\r\n      setY: 30,\r\n      treeX: 50,\r\n      treeY: 30,\r\n      proStepY: 0,\r\n      conStepY: 0,\r\n      rootSvg: null,\r\n      groupsSvg: null,\r\n      arcG: null,\r\n      curEntId: '',\r\n      minDImportance: 0,\r\n      maxDImportance: 0,\r\n      minDRelevance: 0,\r\n      maxDRelevance: 0,\r\n      maxDDuration: 0,\r\n      maxTotalDuration: 0,\r\n      videoDuration: 672,\r\n      totalDuration: 1000,\r\n      importanceColor_linear: null,\r\n      importanceCompute_color: null,\r\n      relevanceScale_linear: null,\r\n      graphGTransformK: 1,\r\n      graphGTransformX: 10,\r\n      graphGTransformY: 10,\r\n      graphSvgScale: 1,\r\n      moveTimer: null,\r\n      moveFlag: false,\r\n\r\n      entProMinColor: \"rgb(203, 230, 209)\",\r\n      entProMaxColor: \"rgb(22, 144, 207)\",\r\n\r\n      // setMaxColor: \"rgb(180, 212, 217)\",\r\n      // setMinColor: \"rgb(190, 253, 147)\",\r\n\r\n      setMaxColor: \"rgb(180, 212, 217)\",\r\n      setMinColor: \"rgb(169, 237, 167)\",\r\n\r\n      entConMaxColor: \"rgb(255, 0, 0)\",\r\n      entConMinColor: \"rgb(255, 255, 255)\",\r\n\r\n      entConRectMaxColor: \"rgb(46, 117, 182)\",\r\n      entConRectMinColor: \"rgb(157, 195, 230)\",\r\n//background 32, 56, 100\r\n//border 208, 206, 206\r\n      setConCountColorMax: \"rgb(36, 123, 178)\",\r\n      setConCountColorMin: \"rgb(146, 189, 217)\",\r\n\r\n      setTypeCountColorMax: \"rgb(251, 104, 20)\",\r\n      setTypeCountColorMin: \"rgb(253, 209, 161)\",\r\n\r\n      stepX: 80,\r\n      stepY: 100,\r\n      typeXMap: {\r\n        \"TRUE_OR_FALSE\": 0,\r\n        \"MULTIPLE_CHOICE\": 1,\r\n        \"FILL_IN_THE_BLANK\": 2,\r\n        \"PROGRAMMING\": 3,\r\n        // \"CODE_COMPLETION\":4,\r\n        // \"MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER\":5\r\n      },\r\n      circleInterval: 55,\r\n      width: 0,\r\n      height: 0,\r\n      curToolState: 'unEdit',\r\n      margin: { top: 10, right: 20, bottom: 0, left: 20 },\r\n      attrColorList: [],\r\n      stuColorList: [],\r\n      mcolor: [\r\n        \"rgb(255,60,60)\",\r\n        \"rgb(155,20,100)\",\r\n        \"rgb(255,83,255)\",\r\n        \"rgb(200,100,50)\",\r\n        \"rgb(235,135,162)\",\r\n        \"rgb(200,200,102)\",\r\n        \"rgb(255,178,101)\",\r\n        \"rgb(63,151,134)\",\r\n        \"rgb(83,155,255)\",\r\n        \"rgb(50,200,120)\",\r\n        \"rgb(2,50,200)\",\r\n        \"rgb(0,122,244)\",\r\n        \"rgb(150,122,244)\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n      mLigntcolor: [\r\n        \"#ff9c9c\",\r\n        \"#cc88b0\",\r\n        \"#ffa8ff\",\r\n        \"#e3b097\",\r\n        \"#f4c3d0\",\r\n        \"#f4f4d0\",\r\n        \"#ffd8b1\",\r\n        \"#9ecac2\",\r\n        \"#a8ccff\",\r\n        \"#97e3ba\",\r\n        \"#6f8be0\",\r\n        \"rgb(0,122,244)\",\r\n        \"#b6a2f7\",\r\n        \"rgb(168,168,255)\",\r\n        \"rgb(200,200,200)\",\r\n      ],\r\n    };\r\n  },\r\n\r\n  watch: {\r\n    type(val) {\r\n    },\r\n    toolAddRel(val) {\r\n    },\r\n    toolsState: {\r\n      deep: true,\r\n      handler(val) {\r\n        console.log(val)\r\n        this.toolAddRel = val['addRel'];\r\n        this.toolAddRelMain = val['addRelMain'];\r\n        this.toolDelRel = val['delRel'];\r\n      }\r\n    },\r\n    SelectStudentList: {\r\n      deep: true,\r\n      handler(val) {\r\n        this.updataSelectStudentListColor();\r\n      }\r\n    },\r\n    SelectingStudentId(val){\r\n      console.log(val);\r\n      if(val == \"\"){\r\n          d3.selectAll(`.stuSetScoreLine`).attr(\"opacity\", 1);\r\n          d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.stuSetScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n          d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n          \r\n          d3.select(`#stuScoreLine_av`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuSetScoreLine_av`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuSetScoreLine_${val}`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n          d3.select(`#stuScoreLine_${val}`).attr(\"opacity\", 1).attr('stroke-width', 3);\r\n      }\r\n    },\r\n    SelectingProId(val){\r\n      if(val == \"\"){\r\n          d3.selectAll(`.proDetilB`).attr(\"opacity\", 0.3);\r\n          d3.selectAll(`.proDetil`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.proDetilB`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          d3.selectAll(`.proDetil`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          \r\n          d3.select(`#proDetil_${val}`).attr(\"opacity\", 0.3)//.attr('stroke-width', 3);\r\n          d3.select(`#proDetilB_${val}`).attr(\"opacity\", 1)//.attr('stroke-width', 3);\r\n      }\r\n    },\r\n    SelectingConId(val){\r\n      if(val == \"\"){\r\n          d3.selectAll(`.entCon`).attr(\"opacity\", 1);\r\n          // d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 1);\r\n      }\r\n      else{\r\n          d3.selectAll(`.entCon`).attr(\"opacity\", 0.1)//.attr('stroke-width', 1);\r\n          // d3.selectAll(`.stuScoreLine`).attr(\"opacity\", 0.1).attr('stroke-width', 1);\r\n\r\n          d3.select(`#entCon_${val}`).attr(\"opacity\", 1);\r\n          // d3.select(`#stuScoreLine_${val}`).attr(\"opacity\", 1);\r\n      }\r\n    },\r\n    graphGTransformY() {\r\n      const _this = this;\r\n      _this.updataPro_ProSetRel(_this.graphGTransformY);\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);\r\n    },\r\n    curConceptId(val) {\r\n      const _this = this;\r\n      // _this.$bus.$emit(\"selectEntCon\", val);\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      let curproId = _this.curProblemId;\r\n      \r\n      // _this.$bus.$emit(\"selectCon\", val);\r\n      let setEnt = [];//tools.deepClone() ;\r\n      if (_this.toolAddRel) {\r\n        let type = 0;\r\n        if (_this.toolAddRelMain) {\r\n          type = 1;\r\n        }\r\n        // createdProblemConceptData\r\n        // pro_conRelData.push({\r\n        //   \"problem\":curproId,\r\n        //   \"conceptId\":val,\r\n        // })\r\n        // _this.problemConceptData = pro_conRelData;\r\n        _this.createRel(curproId, val, type);\r\n\r\n      }\r\n      else if (_this.toolDelRel) {\r\n        _this.delRel(curproId, val);\r\n      }\r\n      else {\r\n        d3.selectAll(`.entPro`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.selectAll(`.entCon`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.select(`#entCon_${val}`)\r\n          .attr(\"opacity\", \"1\");\r\n        d3.selectAll(`.proConRel`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        d3.selectAll(`.proSetConRel`)\r\n          .attr(\"opacity\", \"0.1\");\r\n        pro_conRelData.forEach(rel => {\r\n          let proId = rel['problem'];\r\n          let conId = rel['conceptId'];\r\n          let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n          let proSetId = proData['problemSetId'];\r\n          if (conId == val) {\r\n            // d3.select(`#entCon_${conId}`)\r\n            // .attr(\"opacity\",\"1\");\r\n            if(setEnt.find(function(s){return s['id'] == proId})==undefined)\r\n              setEnt.push(proData);\r\n            d3.select(`#entPro_${proId}`)\r\n              .attr(\"opacity\", \"1\");\r\n            d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n              .attr(\"opacity\", \"1\");\r\n          }\r\n        })\r\n        \r\n      var compare = function (x, y) {//比较函数\r\n        return x[\"problemSetId\"] > y[\"problemSetId\"] \r\n      };\r\n        setEnt.sort(compare)\r\n        _this.detailsEntPro = setEnt;\r\n      }\r\n    },\r\n    curProblemId(val) {\r\n      const _this = this;\r\n      _this.$bus.$emit(\"selectEnt\", val);\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = _this.problemConceptData;\r\n      _this.$bus.$emit(\"selectEntData\", [val, Ent_problem]);\r\n      // entCon\r\n      d3.selectAll(`.entCon`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proSetConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      pro_conRelData.forEach(rel => {\r\n        let proId = rel['problem'];\r\n        let conId = rel['conceptId'];\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n        let proSetId = proData['problemSetId'];\r\n        if (proId == val) {\r\n          d3.select(`#entCon_${conId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proConRel_${conId}_${proId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n            .attr(\"opacity\", \"1\");\r\n        }\r\n      })\r\n    },\r\n    problemConceptData: {\r\n      deep: true,\r\n      handler(val) {\r\n        if (this.toolAddRel) {\r\n          // this.updataPro_ConRel();\r\n          this.updataProSet_ConRel();\r\n          this.$bus.$emit(\"Updata_Pro_Con\", val);\r\n        }\r\n      }\r\n    },\r\n    curProblemSetId(val) {\r\n      const _this = this;\r\n      let Ent_concept = _this.Ent_concept;\r\n      let Ent_problem = _this.Ent_problem;\r\n      let pro_conRelData = _this.problemConceptData;\r\n      this.updataEntProblemDetailBySet(\"none\", 0);\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);// entCon\r\n      d3.selectAll(`.entCon`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      d3.selectAll(`.proSetConRel`)\r\n        .attr(\"opacity\", \"0.1\");\r\n      pro_conRelData.forEach(rel => {\r\n        let proId = rel['problem'];\r\n        let conId = rel['conceptId'];\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n        let proSetId = proData['problemSetId'];\r\n        if (proSetId == val) {\r\n          d3.select(`#entCon_${conId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proConRel_${conId}_${proId}`)\r\n            .attr(\"opacity\", \"1\");\r\n          d3.select(`#proSetConRel_${conId}_${proSetId}`)\r\n            .attr(\"opacity\", \"1\");\r\n        }\r\n      })\r\n    },\r\n    detailsEntPro(val) {\r\n\r\n\r\n      this.$bus.$emit(\"selectedPro\", val);\r\n\r\n      this.updataEntProblemDetail();\r\n      this.updataParallelCoordinatesplotByPro();\r\n      // this.updataPro_ProSelfRel(this.graphGTransformY);\r\n    },\r\n    Ent_problem: {\r\n      deep: true,\r\n      handler() {\r\n        // this.updataEntProblem();\r\n        this.updataEntProblemSetBack();\r\n        // this.updataPro_ConRel();\r\n        this.updataProSet_ConRel();\r\n      }\r\n    },\r\n    Ent_concept: {\r\n      deep: true,\r\n      handler() {\r\n        this.updataEntConcept();\r\n        // this.updataPro_ConRel();\r\n        this.updataProSet_ConRel();\r\n      }\r\n    }\r\n    // groupsSvg: {\r\n    //   deep: true,\r\n    //   handler() {\r\n    //     this.updataAssistGraphPanel();\r\n    //   }\r\n    // }\r\n  },\r\n  methods: {\r\n\r\n    createRel(problemId, conceptId, type) {\r\n      const _this = this;\r\n      this.$http\r\n        .post(\"/api/conceptProblem/createRel\", {\r\n          params: {\r\n            problem: problemId,\r\n            conceptId: conceptId,\r\n            type: type\r\n          }\r\n        }, {})\r\n        .then((response) => {\r\n          _this.$message({\r\n            message: 'add success',\r\n            type: 'success',\r\n            duration: 1000\r\n          });\r\n        });\r\n    },\r\n    delRel(problemId, conceptId) {\r\n      const _this = this;\r\n      this.$http\r\n        .post(\"/api/conceptProblem/delRel\", {\r\n          params: {\r\n            problem: problemId,\r\n            conceptId: conceptId,\r\n          }\r\n        }, {})\r\n        .then((response) => {\r\n          _this.$message({\r\n            message: 'del success',\r\n            type: 'warning',\r\n            duration: 1000\r\n          });\r\n        });\r\n    },\r\n    drawMainO(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"relG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"frontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      let stepY = _this.stepY;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 10])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX + e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK + e.transform.k - stk;\r\n\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          groups.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n      let problemConceptData = _this.problemConceptData;\r\n      let ent_node = [];\r\n      let ent_edge = []\r\n      for (let r = 0; r < problemConceptData.length; r++) {\r\n        let curRel = problemConceptData[r];\r\n        let pId = curRel['problem'];\r\n        let cId = curRel['conceptId'];\r\n        ent_edge.push({\r\n          source: pId,\r\n          target: cId\r\n        })\r\n        if (ent_node.find(function (d) { return d['id'] == pId }) == undefined) {\r\n          ent_node.push({ \"id\": pId, \"type\": \"problem\" })\r\n        }\r\n        if (ent_node.find(function (d) { return d['id'] == cId }) == undefined) {\r\n          ent_node.push({ \"id\": cId, \"type\": \"concept\" })\r\n        }\r\n      }\r\n      var forceSimulation = d3.forceSimulation()\r\n        .force(\"link\", d3.forceLink().id((d) => { return d.id }))\r\n        .force(\"charge\", d3.forceManyBody().strength(-150))\r\n        .force(\"center\", d3.forceCenter(width / 2, height / 2));\r\n      forceSimulation.nodes(ent_node)\r\n        .on(\"tick\");\r\n\r\n      forceSimulation.force(\"link\")\r\n        .links(ent_edge)\r\n        .distance(120);\r\n\r\n      let rSize = 10;\r\n      let svgWidth = width;\r\n      let svgHeight = height;\r\n\r\n      const drags = () => {\r\n\r\n        function dragstarted(event, d) {\r\n          if (!event.active) forceSimulation.alphaTarget(0.3).restart();\r\n          d.fx = d.x;\r\n          d.fy = d.y;\r\n        }\r\n        function dragged(event, d) {\r\n          d.fx = event.x;\r\n          d.fy = event.y;\r\n        }\r\n\r\n        function dragended(event, d) {\r\n          if (!event.active) forceSimulation.alphaTarget(0);\r\n          d.fx = null;\r\n          d.fy = null;\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n\r\n      var circle = frontG.selectAll('circle')\r\n        .data(ent_node)\r\n        .enter()\r\n        .append(\"circle\")\r\n        .attr(\"id\", function (d) { return d.id })\r\n        .attr(\"class\", function (d) { return d.type })\r\n        .attr(\"cx\", function (d) {\r\n          if (d.type == \"problem\")\r\n            _this.drawEntityProblem(entG, d.x, d.y, `entPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.drawEntityConcept(entG, d.x, d.y, `entCon_${d.id}`);\r\n          return d.x\r\n        })\r\n        .attr(\"cy\", function (d) { return d.y })\r\n        .attr(\"r\", 30)\r\n        .attr(\"opacity\", \"0\")\r\n        .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          let curEnt = {};\r\n          let tipName = '';\r\n          if (curType == 'problem') {\r\n\r\n            curEnt = _this.problemsData.find(function (p) {\r\n              return (p.id).toString() == (curId.toString());\r\n            });\r\n            tipName = curEnt['problemPoolIndex']\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['problem'] == curId) {\r\n                let conID = rel['conceptId'];\r\n                idNameList.push(`#entCon_${conID}`);\r\n              }\r\n            });\r\n            idNameList.push(`#entPro_${curId}`)\r\n          }\r\n          else if (curType == \"concept\") {\r\n            curEnt = _this.conceptTree.find(function (p) {\r\n              return (p.id).toString() == (curId.toString());\r\n            });\r\n            tipName = curEnt['name']\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['conceptId'] == curId) {\r\n                let proID = rel['problem'];\r\n                idNameList.push(`#entPro_${proID}`);\r\n              }\r\n            });\r\n            idNameList.push(`#entCon_${curId}`);\r\n          }\r\n          _this.entHover(idNameList);\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n          // 更新浮层内容\r\n          chartTooltip.select(\".name\").text(curType);\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"click\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          if (curType == 'problem') {\r\n            idNameList.push(`#entPro_${curId}`);\r\n            _this.curProblemId = curId;\r\n          }\r\n          else if (curType == \"concept\") {\r\n            idNameList.push(`#entCon_${curId}`)\r\n          }\r\n          _this.entHover(idNameList);\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\");\r\n          let idNameList = [];\r\n          if (curType == 'problem') {\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['problem'] == curId) {\r\n                let conID = rel['conceptId'];\r\n                idNameList.push(`#entCon_${conID}`)\r\n              }\r\n            });\r\n            idNameList.push(`#entPro_${curId}`)\r\n          }\r\n          else if (curType == \"concept\") {\r\n            problemConceptData.forEach(rel => {\r\n              if (rel['conceptId'] == curId) {\r\n                let proID = rel['problem'];\r\n                idNameList.push(`#entPro_${proID}`)\r\n              }\r\n            });\r\n            idNameList.push(`#entCon_${curId}`)\r\n          }\r\n          _this.entRemoveHover(idNameList);\r\n\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n        .call(drags());\r\n\r\n      var path = relG.selectAll('.path')\r\n        .data(ent_edge)\r\n        .enter()\r\n        .append('path')\r\n        .attr(\"class\", function (d) { return \"s-\" + d.source.id + \"-t-\" + d.target.id })\r\n        .attr('d', function (d) {\r\n          let eSource = d.source\r\n          let eTarget = d.target\r\n          let startA = [eSource.x, eSource.y]\r\n          let endA = [eTarget.x, eTarget.y]\r\n          let path = d3.path()\r\n          path.moveTo(startA[0], startA[1])\r\n          path.quadraticCurveTo(startA[0], startA[1], endA[0], endA[1]);\r\n          return path.toString()\r\n        })\r\n        .style('stroke', \"grey\")\r\n        .style(\"stroke-opacity\", \"0.3\")\r\n        .style('stroke-width', \"2\")\r\n\r\n      forceSimulation.on(\"tick\", () => {\r\n        circle.attr(\"cx\", (d) => {\r\n          let esx = d.x;\r\n          let esy = d.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n          if (d.type == \"problem\")\r\n            _this.updateEntity(entG, esx, esy, `entPro_${d.id}`)\r\n          //   _this.drawEntityProblem(entG, esx, esy, `entPro_${d.id}`);\r\n          else if (d.type == \"concept\")\r\n            _this.updateEntity(entG, esx, esy, `entCon_${d.id}`)\r\n          //   _this.drawEntityConcept(entG, esx, esy, `entCon_${d.id}`);\r\n          if (d.x < rSize) return rSize\r\n          return d.x > svgWidth - rSize ? svgWidth - rSize : d.x\r\n        })\r\n          .attr(\"cy\", (d) => {\r\n            if (d.y < rSize) return rSize\r\n            return d.y > svgHeight - rSize ? svgHeight - rSize : d.y\r\n          });\r\n\r\n        path.attr(\"d\", (d) => {\r\n          let eSource = d.source;\r\n          let eTarget = d.target;\r\n          let esx = eSource.x;\r\n          let esy = eSource.y;\r\n          if (esx < rSize) esx = rSize;\r\n          esx = esx > svgWidth - rSize ? svgWidth - rSize : esx;\r\n          if (esy < rSize) esy = rSize;\r\n          esy = esy > svgHeight - rSize ? svgHeight - rSize : esy;\r\n          let etx = eTarget.x;\r\n          let ety = eTarget.y;\r\n          if (etx < rSize) etx = rSize;\r\n          etx = etx > svgWidth - rSize ? svgWidth - rSize : etx;\r\n          if (ety < rSize) ety = rSize;\r\n          ety = ety > svgHeight - rSize ? svgHeight - rSize : ety;\r\n          let path = d3.path();\r\n          path.moveTo(esx, esy);\r\n          path.quadraticCurveTo(esx, esy, etx, ety);\r\n          return path.toString();\r\n        })\r\n\r\n      });\r\n\r\n      svg.call(graphZoom)\r\n\r\n    },\r\n    drawMain(svg) {\r\n      let _this = this;\r\n      let data = _this.data;\r\n      let margin = _this.margin;\r\n\r\n      let width = _this.width - margin.left - margin.right;\r\n      let height = _this.height - margin.top - margin.bottom;\r\n\r\n      let graphGTransformX = _this.graphGTransformX;\r\n      let graphGTransformY = _this.graphGTransformY;\r\n      let graphGTransformK = _this.graphGTransformK;\r\n      let groups = svg.append(\"g\").attr(\"id\", \"groups\").attr(\"width\", width).attr(\"height\", height)\r\n      // .attr(\"transform\", \"translate(\" + graphGTransformX + ',' + graphGTransformY + \") scale(\" + graphGTransformK + \")\");\r\n      this.groupsSvg = groups;\r\n\r\n      let backG = groups.append(\"g\").attr(\"id\", \"backG\").attr(\"width\", width).attr(\"height\", height);\r\n      let arcG = groups.append(\"g\").attr(\"id\", \"arcG\").attr(\"width\", width).attr(\"height\", height);\r\n      let relG = groups.append(\"g\").attr(\"id\", \"relG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entSetG = groups.append(\"g\").attr(\"id\", \"entSetG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entbySetG = groups.append(\"g\").attr(\"id\", \"entbySetG\").attr(\"width\", width).attr(\"height\", height);\r\n      let entG = groups.append(\"g\").attr(\"id\", \"entG\").attr(\"width\", width).attr(\"height\", height);\r\n      let frontG = groups.append(\"g\").attr(\"id\", \"frontG\").attr(\"width\", width).attr(\"height\", height);\r\n\r\n      _this.arcG = arcG;\r\n      _this.entG = entG;\r\n      _this.entSetG = entSetG;\r\n      _this.entbySetG = entbySetG;\r\n      _this.relG = relG;\r\n      _this.frontG = frontG;\r\n      let interval = _this.circleInterval;\r\n\r\n\r\n      let scalePre = _this.graphSvgScale;\r\n      let stx = 0;\r\n      let sty = 0;\r\n      let stk = 1;\r\n      var graphZoom = d3.zoom()\r\n        .scaleExtent([0, 100])\r\n        .on(\"start\", (e) => {\r\n          sty = e.transform.y;\r\n          stx = e.transform.x;\r\n          stk = e.transform.k;\r\n        })\r\n        .on('zoom', (e) => {\r\n          graphGTransformX = _this.graphGTransformX //+ e.transform.x - stx;\r\n          graphGTransformY = _this.graphGTransformY + e.transform.y - sty;\r\n          graphGTransformK = _this.graphGTransformK //+ e.transform.k - stk;\r\n          _this.updataPro_ProSetRel(graphGTransformY);\r\n          // _this.updataPro_ProSelfRel(graphGTransformY);\r\n          entbySetG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        })\r\n        .on('end', (e) => {\r\n          _this.graphGTransformX = graphGTransformX;\r\n          _this.graphGTransformY = graphGTransformY;\r\n          _this.graphGTransformK = graphGTransformK;\r\n          entbySetG.attr('transform', 'translate(' + (graphGTransformX) + ',' + (graphGTransformY) + ') scale(' + (graphGTransformK) + ')')\r\n        });\r\n\r\n      svg.call(graphZoom);\r\n      const dragCon = () => {\r\n\r\n        function dragstarted(event, d) {\r\n        }\r\n        function dragged(event, d) {\r\n        }\r\n\r\n        function dragended(event, d) {\r\n        }\r\n        return d3.drag()\r\n          .on(\"start\", dragstarted)\r\n          .on(\"drag\", dragged)\r\n          .on(\"end\", dragended);\r\n      }\r\n      let problemConceptData = _this.problemConceptData;\r\n      let conceptTree = _this.conceptTree;\r\n\r\n      let problemData = tools.deepClone(_this.problemsData);\r\n      // let treeData = _this.getTreeData(conceptTree);\r\n      // console.log(treeData)\r\n\r\n      let conMaxMinDR = _this.conMaxMinDR;\r\n      let conMaxMinDC = _this.conMaxMinDC;\r\n      let conAttrMaxMinList = _this.conAttrMaxMinList;\r\n      let currentConMaxColor = _this.entConMaxColor;\r\n      let currentConMinColor = _this.entConMinColor;\r\n      let importanceConColor_linear = d3.scaleLinear().domain([conMaxMinDC[0], conMaxMinDC[1]]).range([0, 1]);\r\n      let importanceConCompute_color = d3.interpolate(currentConMinColor, currentConMaxColor);\r\n      let rConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([3, 6]);\r\n      let r1ConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([6, 9]);\r\n      let r2ConSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([9, 12]);\r\n      let linearList = [rConSize_linear, r1ConSize_linear, r2ConSize_linear];\r\n\r\n      let currentConRectMaxColor = _this.entConRectMaxColor;\r\n      let currentConRectMinColor = _this.entConRectMinColor;\r\n\r\n      let rectConColor_linear = d3.scaleLinear().domain([conAttrMaxMinList[2][1], conAttrMaxMinList[2][0]]).range([0, 1]);\r\n      let rectConWidth_linear = d3.scaleLinear().domain([conAttrMaxMinList[1][1], conAttrMaxMinList[1][0]]).range([30, 100]);\r\n\r\n      let rectConCompute_color = d3.interpolate(currentConRectMinColor, currentConRectMaxColor);\r\n\r\n      // concept---------\r\n      let treeX = _this.treeX;\r\n      let treeY = _this.treeY;\r\n      let stepY = (height - 90) / (conceptTree.length);\r\n\r\n      let tempConDistribution = {};\r\n\r\n      let proSetData = [];\r\n      let setOd = 0;\r\n      _this.conStepY = stepY;\r\n      let interY = _this.interY;\r\n      let Ent_concept = [];\r\n      for (let i = 0; i < conceptTree.length; i++) {\r\n        let tempCon = tools.deepClone(conceptTree[i]);\r\n        let cy = treeY + i * stepY;\r\n        let cid = tempCon['id'];\r\n\r\n        tempConDistribution[cid] = 0;\r\n\r\n        tempCon['lay'] = cid.split(\"-\").length;\r\n        let cx = treeX * tempCon['lay'];\r\n        tempCon['cx'] = cx;\r\n        tempCon['cy'] = cy;\r\n        tempCon['fill'] = importanceConCompute_color(importanceConColor_linear(tempCon['scoringRate']));\r\n        tempCon['rectFill'] = rectConCompute_color(rectConColor_linear(tempCon['acceptedRate']));\r\n        tempCon['rectW'] = rectConWidth_linear(tempCon['totalAttempts']);\r\n        tempCon['r'] = linearList[parseInt(3 - tempCon['lay'])](tempCon['proCount']);\r\n        tempCon['opacity'] = 1;\r\n        Ent_concept.push(tempCon);\r\n      }\r\n      _this.Ent_concept = Ent_concept;\r\n      //------------\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let proMaxMinDC = _this.proMaxMinDC;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let currentMaxColor = _this.entProMaxColor;\r\n      let currentMinColor = _this.entProMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([proMaxMinDC[0], proMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([15, 120]);\r\n\r\n      let setMaxColor = _this.setMaxColor;\r\n      let setMinColor = _this.setMinColor;\r\n      let setColor_linear = d3.scaleLinear().domain([0, 1]).range([0, 1]);\r\n      let setCompute_color = d3.interpolate(setMinColor, setMaxColor);\r\n\r\n      let typeXMap = _this.typeXMap;\r\n      //problem -----------\r\n      let proX = _this.proX;\r\n      let proY = _this.proY;\r\n      let Ent_problem = [];\r\n      let proStepY = (height - _this.interY * 12) / (problemData.length + 12);\r\n      _this.proStepY = proStepY;\r\n      _this.graphHeight = height;\r\n      for (let i = 0; i < problemData.length; i++) {\r\n        let tempPro = tools.deepClone(problemData[i]);\r\n        let pid = tempPro['id'];\r\n        let pSetId = tempPro['problemSetId'];\r\n        if (proSetData.find(function (ps) { return ps['id'] == pSetId; }) == undefined) {\r\n          proSetData.push({\r\n            \"id\": pSetId,\r\n            \"order\": setOd,\r\n            \"set\": [tempPro]\r\n          })\r\n          setOd++;\r\n        }\r\n        else {\r\n          proSetData.find(function (ps) { return ps['id'] == pSetId; })['set'].push(tempPro);\r\n        }\r\n        let cy = proY + i * proStepY + interY * setOd;\r\n        // let lay = cid.split(\"-\").length;\r\n        let cx = proX;\r\n        let r = proStepY;\r\n        let fill = \"grey\";\r\n        let opacity = 0.8;\r\n        let scoreValueList = _this.getMaxMinValue(tempPro['stuData'], \"scoringRate\");\r\n        let acceptedValueList = _this.getMaxMinValue(tempPro['stuData'], \"acceptedRate\");\r\n        let totalAttemptsValueList = _this.getMaxMinValue(tempPro['stuData'], \"totalAttempts\");\r\n        let groupVal = tempPro['groupVal'];\r\n\r\n        groupVal.forEach((group,g)=>{\r\n          let gscoreValueList = _this.getMaxMinValue(group['stuData'], \"scoringRate\",true);\r\n          let gacceptedValueList = _this.getMaxMinValue(group['stuData'], \"acceptedRate\",true);\r\n          let gtotalAttemptsValueList = _this.getMaxMinValue(group['stuData'], \"totalAttempts\",true);\r\n\r\n          tempPro['groupVal'][g]['scoreValueList'] = gscoreValueList;\r\n          tempPro['groupVal'][g]['acceptedValueList'] = gacceptedValueList;\r\n          tempPro['groupVal'][g]['totalAttemptsValueList'] = gtotalAttemptsValueList;\r\n        })\r\n\r\n        // let Cname  = tempPro['name'];\r\n        tempPro['scoreValueList'] = scoreValueList;\r\n        tempPro['acceptedValueList'] = acceptedValueList;\r\n        tempPro['totalAttemptsValueList'] = totalAttemptsValueList;\r\n\r\n\r\n        tempPro['cx'] = cx//+typeXMap[tempPro['type']]*100;\r\n        tempPro['cy'] = cy;\r\n        tempPro['order'] = i;\r\n        tempPro['width'] = rSize_linear(tempPro[\"conCount\"]);\r\n        tempPro['fill'] = importanceCompute_color(importanceColor_linear(tempPro['scoringRate']));\r\n        tempPro['height'] = proStepY;\r\n        Ent_problem.push(tempPro);\r\n        // let circle = _this.drawCircle(entG, cx, cy, r, fill, opacity, );t text = _this.drawTxt(entG, cx+20, cy+3.5, Cname, \"black\", 12, `entConText_${cid}`);\r\n      }\r\n      let setStepY = (height - 90) / proSetData.length;\r\n      let colorList = _this.mcolor;\r\n      let tempTypeDistribution = {};\r\n      Object.keys(typeXMap).forEach(t => {\r\n        tempTypeDistribution[t] = 0;\r\n      })\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let psid = proSetData[i]['id'];\r\n        let set = proSetData[i]['set'];\r\n        proSetData[i]['cx'] = _this.proX - 3;\r\n        proSetData[i]['width'] = _this.setWidth;\r\n        let conDistribution = tools.deepClone(tempConDistribution);\r\n        let typeDistribution = tools.deepClone(tempTypeDistribution);\r\n        let scoringRate = 0;\r\n        set.forEach(sPro => {\r\n          let conList = sPro['conList'];\r\n          scoringRate += sPro['scoringRate'];\r\n          conList.forEach(c => {\r\n            conDistribution[c]++;\r\n            if (conDistribution[c] > _this.maxSetCon)\r\n              _this.maxSetCon = conDistribution[c];\r\n          });\r\n          let type = sPro['type'];\r\n          if (type == 'MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER')\r\n            type = \"MULTIPLE_CHOICE\";\r\n          if (type == 'CODE_COMPLETION')\r\n            type = \"PROGRAMMING\";\r\n          typeDistribution[type]++;\r\n          // let groupData = sPro['groupVal'];\r\n          // console.log(groupData)\r\n        })\r\n        proSetData[i]['scoringRate'] = scoringRate / set.length;\r\n        proSetData[i]['conDistribution'] = conDistribution;\r\n        proSetData[i]['typeDistribution'] = typeDistribution;\r\n        // proSetData[i]['fill'] = colorList[proSetData[i]['order']];\r\n        // console.log\r\n        proSetData[i]['fill'] = setCompute_color(setColor_linear(proSetData[i]['scoringRate']));\r\n        // -----------------------------------\r\n        // proSetData[i]['cy'] = Ent_problem.find(function(ep){return ep['id'] == set[0];})['cy'];\r\n        // let edP = Ent_problem.find(function(ep){return ep['id'] == set[set.length-1];})\r\n        // proSetData[i]['height'] = edP['cy'] - proSetData[i]['cy']+edP['height'];\r\n        // -----------------------------------\r\n        proSetData[i]['cy'] = 30 + setStepY * i;\r\n        proSetData[i]['height'] = setStepY - 10;\r\n        // -------------------------------------\r\n      }\r\n      // let conDistributiondomainList = []\r\n      // conceptTree.forEach(con=>{\r\n      //   let domain = _this.getMaxMin(proSetData, 'conCount');\r\n      // })\r\n      _this.Ent_problem = Ent_problem;\r\n      // ---------------------\r\n      _this.proSetData = proSetData;\r\n      // this.updataPro_ConRel(); \r\n      _this.updataEntProblemSetBack();\r\n      _this.updataProSet_ConRel();\r\n      _this.updataParallelCoordinatesplotBySet();\r\n      if (_this.detailsEntPro != [])\r\n        _this.updataEntProblemDetail();\r\n      _this.drawFigureAnnotation();\r\n\r\n    },\r\n    drawFigureAnnotation() {\r\n      const _this = this;\r\n      let frontG = _this.frontG;\r\n\r\n      let currentConMaxColor = _this.entConMaxColor;\r\n      let currentConMinColor = _this.entConMinColor;\r\n      let len = 6;\r\n\r\n      let Color_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let Color_linear2 = d3.scaleLinear().domain([0, len * 3]).range([0, 1]);\r\n      let Rsize_linear = d3.scaleLinear().domain([0, len]).range([1, 6]);\r\n      let Compute_color = d3.interpolate(currentConMinColor, currentConMaxColor);\r\n      let Compute_color1 = d3.interpolate(\"white\", _this.setConCountColorMax);\r\n      let Compute_color2 = d3.interpolate(\"white\", _this.setTypeCountColorMax);\r\n      let Compute_color3 = d3.interpolate(_this.setMinColor, _this.setMaxColor);\r\n\r\n      let currentConRectMaxColor = _this.entConRectMaxColor;\r\n      let currentConRectMinColor = _this.entConRectMinColor;\r\n      let rectConColor_linear = d3.scaleLinear().domain([0, len]).range([0, 1]);\r\n      let rectConCompute_color = d3.interpolate(\"white\", currentConRectMaxColor);\r\n      // _this.drawCircle(frontG, 20, 1000, 10, currentConMaxColor, 1, currentConMaxColor, \"1\", 'FigAtt', `FigAtt_conColor`);\r\n\r\n      let textcon = _this.drawTxt(frontG, 10, 1065, \"Concepts Value:\", \"black\", 13, `FigAtt_con`);\r\n      let textset = _this.drawTxt(frontG, 350, 1065, \"Set Value:\", \"black\", 13, `FigAtt_set`);\r\n      let textsetSR = _this.drawTxt(frontG, 540, 1085, \"ScoringRate:\", \"black\", 10, `FigAtt_conColor`);\r\n\r\n      let textsetR = _this.drawTxt(frontG, 480, 15, \"Concepts\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsetcon = _this.drawTxt(frontG, 560, 15, \"Type\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsettype = _this.drawTxt(frontG, 640, 15, \"ScoringRate\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n      let textsetRscor = _this.drawTxt(frontG, 720, 15, \"Attempts\", \"black\", 13, `FigAtt_conColor`, \"middle\");\r\n\r\n      // let textpro = _this.drawTxt(frontG, 800, 1065, \"Problems Value:\", \"black\", 13, `FigAtt_pro`);\r\n      let text1 = _this.drawTxt(frontG, 10, 1085, \"Scoring Rate:\", \"black\", 10, `FigAtt_conColor`);\r\n      let text2 = _this.drawTxt(frontG, 10, 1105, \"Connection Nums:\", \"black\", 10, `FigAtt_Rsize`);\r\n\r\n      // let text3 = _this.drawTxt(frontG, 100, 1070, \"Low\", \"black\", 10, `FigAtt_Low`);\r\n      // let text4 = _this.drawTxt(frontG, 100+10*len, 1070, \"High\", \"black\", 10, `FigAtt_High`);\r\n\r\n      let text5 = _this.drawTxt(frontG, 180, 1085, \"Pass Rate:\", \"black\", 10, `FigAtt_conColor`);\r\n      let text6 = _this.drawTxt(frontG, 180, 1105, \"Attempts:\", \"black\", 10, `FigAtt_Rsize`);\r\n      let textsetnum = _this.drawTxt(frontG, 350, 1085, \"Connection Nums:\", \"black\", 10, `FigAtt_proConDis`);\r\n      let textsetTypenum = _this.drawTxt(frontG, 350, 1105, \"Type Nums:\", \"black\", 10, `FigAtt_proConDis`);\r\n\r\n      let text7 = _this.drawTxt(frontG, 602, 1095, \"Low\", \"black\", 10, `FigAtt_Low`);\r\n      let text8 = _this.drawTxt(frontG, 695, 1095, \"High\", \"black\", 10, `FigAtt_High`);\r\n      let prex = 0;\r\n      let prerx = 0;\r\n      for (let i = 0; i < len * 3; i++) {\r\n        let color3 = Compute_color3(Color_linear2(i));\r\n\r\n        _this.drawRect(frontG, 620 + 4 * i, 1077, 4, 10, 0, color3, \"1\", \"none\", \"1\", `FigAtt_setColor${i}`, 'FigAtt');\r\n      }\r\n      for (let i = 0; i < len; i++) {\r\n        let color = Compute_color(Color_linear(i));\r\n        let color1 = Compute_color1(Color_linear(i));\r\n        let color2 = Compute_color2(Color_linear(i));\r\n        // let color3 = Compute_color3(Color_linear(i));\r\n        let rcolor = rectConCompute_color(rectConColor_linear(i));\r\n\r\n        _this.drawCircle(frontG, 110 + 10 * i, 1082, 3, color, 1, \"red\", \"1\", 'FigAtt', `FigAtt_conColor${i}`);\r\n\r\n        _this.drawCircle(frontG, 110 + prex, 1102, Rsize_linear(i), Compute_color(Color_linear(7)), 1, \"red\", \"1\", 'FigAtt', `FigAtt_conRsize${i}`);\r\n\r\n        prex += Rsize_linear(i) * 2 + 4;\r\n\r\n        _this.drawRect(frontG, 250 + 12 * i, 1077, 10, 10, 0, rcolor, \"1\", \"grey\", \"1\", `FigAtt_conRectColor${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 250 + prerx, 1097, i * 4, 10, 0, rectConCompute_color(rectConColor_linear(6)), \"1\", \"grey\", \"1\", `FigAtt_conRectWidth${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 450 + prerx, 1077, i * 4, 10, 0, color1, \"1\", \"grey\", \"1\", `FigAtt_setconRectWidth${i}`, 'FigAtt');\r\n\r\n        _this.drawRect(frontG, 450 + prerx, 1097, i * 4, 10, 0, color2, \"1\", \"grey\", \"1\", `FigAtt_settypeRectWidth${i}`, 'FigAtt');\r\n\r\n        prerx += i * 4 + 2;\r\n      }\r\n    },\r\n    updataSelectStudentListColor() {\r\n      const _this = this;\r\n      let SelectStudentList = _this.SelectStudentList;\r\n      let colorList = _this.stuColorList;\r\n      for (let i = 0; i < SelectStudentList.length; i++) {\r\n        for (let j = 0; j < SelectStudentList[i].length; j++) {\r\n          let stuId = SelectStudentList[i][j];\r\n          d3.select(`#stuSetScoreLine_${stuId}`).attr(\"stroke\", colorList[i]);\r\n          d3.select(`#stuScoreLine_${stuId}`).attr(\"stroke\", colorList[i]);\r\n        }\r\n      }\r\n    },\r\n    updataParallelCoordinatesplotBySet() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      let studentsData = tools.deepClone(_this.studentsData);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proSetOriData = tools.deepClone(_this.proSetOriData);\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      let colorList = _this.mcolor;\r\n\r\n      //轴\r\n      let paraX = 1100;\r\n      let stepY = (_this.graphHeight - 90) / (proSetData.length);\r\n      let avpath = d3.path();\r\n      let prex = 0;\r\n      let prey = 0;\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let cx = paraX;\r\n        let cy = proSetData[i]['cy'] + proSetData[i]['height'] / 2//;stepY*(i+1)\r\n        let width = 200;\r\n        let height = 3;\r\n        let psId = proSetData[i]['id'];\r\n        let fill = proSetData[i]['fill'];\r\n        proSetData[i]['axisX'] = cx;\r\n        proSetData[i]['axisY'] = cy;\r\n        proSetData[i]['axisW'] = width;\r\n        proSetData[i]['axisH'] = height;\r\n        let axis = _this.drawRect(entG, cx, cy, width, height, 0, fill, \"0\", \"none\", \"1\", `proSetAxis_${psId}`, 'proSetAxis');\r\n        let av = 0;\r\n        let num = 0;\r\n        let totalScore = 0\r\n        for (let j = 0; j < studentsData.length; j++) {\r\n          let proSetScore = studentsData[i]['proSetScore'];\r\n          let psData = proSetScore.find(function (psd) { return psd['id'] == psId; });\r\n          av += psData['score'];\r\n          totalScore = psData['totalScore'];\r\n          num += 1;\r\n        }\r\n        av /= num;\r\n        let val_linear = d3.scaleLinear().domain([0, totalScore]).range([cx, cx + width]);\r\n        let pointy = cy;\r\n        let pointx = val_linear(av);\r\n        if (i == 0) {\r\n          avpath.moveTo(pointx, pointy);\r\n          prex = pointx;\r\n          prey = pointy;\r\n        }\r\n        else {\r\n          let c1x = prex;\r\n          let c1y = (pointy + prey) / 2;\r\n          let c2x = pointx;\r\n          let c2y = c1y;\r\n          avpath.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n          prey = pointy\r\n          prex = pointx\r\n        }\r\n      }\r\n      _this.drawLine(relG, avpath, \"grey\", 3, '0', \"1\", `stuSetScoreLine_av`, 'stuSetScoreLine');\r\n      prex = 0;\r\n      prey = 0;\r\n      for (let i = 0; i < studentsData.length; i++) {\r\n        let path = d3.path();\r\n        let proSetScore = studentsData[i]['proSetScore'];\r\n        let stuId = studentsData[i]['id'];\r\n        for (let s = 0; s < proSetScore.length; s++) {\r\n          let psId = proSetScore[s]['id'];\r\n          let psData = proSetData.find(function (psd) { return psd['id'] == psId; });\r\n          let cx = psData['axisX'];\r\n          let w = psData['axisW'];\r\n          let val_linear = d3.scaleLinear().domain([0, proSetScore[s]['totalScore']]).range([cx, cx + w]);\r\n          let pointy = psData['axisY'];\r\n          let pointx = val_linear(proSetScore[s]['score']);\r\n          if (s == 0) {\r\n            path.moveTo(pointx, pointy);\r\n            prex = pointx;\r\n            prey = pointy;\r\n          }\r\n          else {\r\n            let c1x = prex;\r\n            let c1y = (pointy + prey) / 2;\r\n            let c2x = pointx;\r\n            let c2y = c1y;\r\n            path.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n            prey = pointy\r\n            prex = pointx\r\n          }\r\n        }\r\n        let groupD = groupData.find(function (d) { return d['id'] == stuId; });\r\n        let fill = \"grey\";\r\n        _this.drawLine(relG, path, fill, 1, '0', \"0.3\", `stuSetScoreLine_${stuId}`, 'stuSetScoreLine');\r\n      }\r\n    },\r\n    updataParallelCoordinatesplotByPro() {\r\n      d3.selectAll(`.proSetAxis`).remove();\r\n      d3.selectAll(`.proAxis`).remove();\r\n      d3.selectAll(`.stuSetScoreLine`).remove();\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let studentsData = tools.deepClone(_this.studentsData);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proSetOriData = tools.deepClone(_this.proSetOriData);\r\n      let setEnt = tools.deepClone(_this.detailsEntPro);\r\n      let colorList = _this.mcolor;\r\n      let groupData = tools.deepClone(_this.groupData);\r\n      //轴\r\n      let paraX = 1100;\r\n      let stepY = _this.graphHeight / (setEnt.length);\r\n      let avpath = d3.path();\r\n      let prex = 0;\r\n      let prey = 0;\r\n      for (let i = 0; i < setEnt.length; i++) {\r\n        let cx = paraX;\r\n        let cy = 10 +stepY * (i+0.5);//setEnt[i]['cy']+setEnt[i]['height']/2//;stepY*(i+1)\r\n        let width = 200;\r\n        let height = 2;\r\n        let psId = setEnt[i]['id'];\r\n        let fill = setEnt[i]['fill'];\r\n        setEnt[i]['axisX'] = cx;\r\n\r\n        setEnt[i]['axisY'] = cy;\r\n        setEnt[i]['axisW'] = width;\r\n        setEnt[i]['axisH'] = height;\r\n        let axis = _this.drawRect(entG, cx, cy, width, height, 0, fill, \"0\", \"none\", \"1\", `proAxis_${psId}`, 'proAxis');\r\n        let av = 0;\r\n        let num = 0;\r\n        let maxv = 0\r\n        for (let j = 0; j < studentsData.length; j++) {\r\n          let proList = studentsData[j]['pro'];\r\n          let psData = proList.find(function (psd) { return psd['id'] == psId; });\r\n          if (psData['totalScore'] != undefined) {\r\n            // console.log(psData)\r\n            av += psData['totalScore'] / psData['totalAttempts'];\r\n          }\r\n          // av+=psData['totalScore']/psData['totalAttempts'];\r\n          // else\r\n          num += 1;\r\n        }\r\n        av /= num;\r\n        // console.log(av)\r\n        let val_linear = d3.scaleLinear().domain([0, 1]).range([cx, cx + width]);\r\n        let pointy = cy;\r\n        let pointx = val_linear(av);\r\n        if (i == 0) {\r\n          avpath.moveTo(pointx, pointy);\r\n          prex = pointx;\r\n          prey = pointy;\r\n        }\r\n        else {\r\n          let c1x = prex;\r\n          let c1y = (pointy + prey) / 2;\r\n          let c2x = pointx;\r\n          let c2y = c1y;\r\n          avpath.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n          prey = pointy\r\n          prex = pointx\r\n        }\r\n\r\n      }\r\n      _this.drawLine(relG, avpath, \"grey\", 3, '0', \"1\", `stuScoreLine_av`, 'stuScoreLine');\r\n      prex = 0;\r\n      prey = 0;\r\n      for (let i = 0; i < studentsData.length; i++) {\r\n        let path = d3.path();\r\n        let proList = studentsData[i]['pro'];\r\n        let stuId = studentsData[i]['id'];\r\n        let s = 0;\r\n        setEnt.forEach(se => {\r\n          let pId = se['id'];\r\n          let proaxisD = proList.find(function (se) { return se['id'] == pId });\r\n          let cx = se['axisX'];\r\n          let w = se['axisW'];\r\n          let pointy = se['axisY'];\r\n          // ----------------------------------\r\n          // let val_linear = d3.scaleLinear().domain([0,se['score']]).range([cx, cx+w]);\r\n          // let pointx = val_linear(proaxisD['best']['score']); \r\n          // --------------------------------------\r\n          let val_linear = d3.scaleLinear().domain([0, 1]).range([cx, cx + w]);\r\n          let pointx = val_linear(proaxisD['totalScore'] / proaxisD['totalAttempts']);\r\n          if (proaxisD['totalScore'] == undefined)\r\n            pointx = val_linear(0)\r\n          // -------------------------------------------\r\n          if (s == 0) {\r\n            path.moveTo(pointx, pointy);\r\n            prex = pointx;\r\n            prey = pointy;\r\n            s += 1;\r\n          }\r\n          else {\r\n\r\n            let c1x = prex;\r\n            let c1y = (pointy + prey) / 2;\r\n            let c2x = pointx;\r\n            let c2y = c1y;\r\n            path.bezierCurveTo(c1x, c1y, c2x, c2y, pointx, pointy);\r\n            prey = pointy;\r\n            prex = pointx;\r\n            // path.lineTo();\r\n          }\r\n        })\r\n\r\n        let groupD = groupData.find(function (d) { return d['id'] == stuId; });\r\n        let fill = 'grey'//colorList[groupD['kmeansC']*3];\r\n        let line = _this.drawLine(entG, path, fill, 1, '0', '0.3', `stuScoreLine_${stuId}`, 'stuScoreLine');\r\n        // let proSetScore = studentsData[i]['proSetScore'];\r\n        // let stuId = studentsData[i]['id'];\r\n        // for(let s=0;s<proSetScore.length;s++){\r\n        //   let psId = proSetScore[s]['id'];\r\n        //   let psData = proSetData.find(function(psd){return psd['id'] == psId;});\r\n        //   let cx = psData['axisX'];\r\n        //   let w = psData['axisW'];\r\n        //   let val_linear = d3.scaleLinear().domain([0,proSetScore[s]['totalScore']]).range([cx, cx+w]);\r\n        //   let pointy = psData['axisY'];\r\n        //   let pointx = val_linear(proSetScore[s]['score']); \r\n        //   if(s==0){\r\n        //     path.moveTo(pointx,pointy);\r\n        //   }\r\n        //   else{\r\n        //     path.lineTo(pointx,pointy);\r\n        //   }\r\n        // }\r\n        // _this.drawLine(relG, path, \"rgb(200,200,200)\", 2, '0', `stuSetScoreLine_${stuId}`, 'stuSetScoreLine');\r\n      }\r\n    },\r\n    updataPro_ConRel() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let typeXMap = _this.typeXMap;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      for (let i = 0; i < pro_conRelData.length; i++) {\r\n        let curRel = pro_conRelData[i];\r\n        let conId = curRel['conceptId'];\r\n        let proId = curRel['problem'];\r\n        let conData = Ent_concept.find(function (d) { return d['id'] == conId; });\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; });\r\n        let sx = conData['cx'] + conData['rectW'] + 30;\r\n        let sy = conData['cy'];\r\n        let tx = proData['cx'];\r\n        let ty = proData['cy'] + proData['height'] / 2;\r\n        let c1x = (sx) + 100;\r\n        let c1y = (sy)\r\n        let c2x = (sx);\r\n        let c2y = (ty)\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, \"grey\", \"0.5px\", \"1\", `proConRel_${conId}_${proId}`, \"proConRel\");\r\n      }\r\n    },\r\n    updataProSet_ConRel() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let typeXMap = _this.typeXMap;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n      for (let i = 0; i < pro_conRelData.length; i++) {\r\n        let curRel = pro_conRelData[i];\r\n        let conId = curRel['conceptId'];\r\n        let proId = curRel['problem'];\r\n        let type = curRel['type'];\r\n        let conData = Ent_concept.find(function (d) { return d['id'] == conId; });\r\n        let proData = Ent_problem.find(function (d) { return d['id'] == proId; });\r\n        let curproSetData = proSetData.find(function (pd) { return pd['id'] == proData['problemSetId'] });\r\n        let sx = conData['cx'] + 130;\r\n        let sy = conData['cy'];\r\n        let tx = curproSetData['cx'];\r\n        let ty = curproSetData['cy'] + curproSetData['height'] / 2;\r\n        let c1x = (sx) + 150;\r\n        let c1y = (sy);\r\n        let c2x = (sx);\r\n        let c2y = (ty);\r\n        let fill = \"grey\";\r\n        if (type == \"1\") { fill = 'red' }\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"1px\", \"0.2\", `proSetConRel_${conId}_${proData['problemSetId']}`, \"proSetConRel\");\r\n      }\r\n    },\r\n    updataPro_ProSelfRel(tranY) {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let pid = Ent_problem[i]['id'];\r\n        if (Ent_problem[i][\"problemSetId\"] == selectSetId) {\r\n          let proData = Ent_problem.find(function (d) { return d['id'] == pid; });\r\n          let prog = d3.select(`#entPro_${pid}`)\r\n          let proSlefg = d3.select(`#probySet_${pid}`)\r\n          let sx = parseFloat(prog.attr(\"x\")) + parseFloat(prog.attr(\"width\"));\r\n          let sy = parseFloat(prog.attr(\"y\")) + parseFloat(prog.attr(\"height\")) / 2;\r\n          let tx = parseFloat(proSlefg.attr(\"x\"));\r\n          let ty = parseFloat(proSlefg.attr(\"y\")) + tranY + parseFloat(proSlefg.attr(\"height\")) / 2;\r\n          // console.log(sx,sy,tx,ty,prog.attr(\"x\"),proSlefg.attr(\"y\"),prog.attr(\"width\"),prog.attr(\"height\"),proSlefg.attr(\"height\"))\r\n          let c1x = (sx) + 100;\r\n          let c1y = (sy)\r\n          let c2x = (tx) - 100;\r\n          let c2y = (ty)\r\n          let fill = proData['fill']\r\n          _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"2px\", \"0.4\", `proSelfRel_${pid}`, \"proSelfRel\");\r\n        }\r\n      }\r\n    },\r\n    updataPro_ProSetRel(tranY) {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.detailsEntPro);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      d3.selectAll(`.proSetRel`).remove();\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let pid = Ent_problem[i]['id'];\r\n        let proSetId = Ent_problem[i]['problemSetId'];\r\n        let proSlefg = d3.select(`#proDetil_${pid}`)\r\n        let prog = d3.select(`#proSet_${proSetId}`)\r\n        let sx = parseFloat(prog.attr(\"x\")) + parseFloat(prog.attr(\"width\"));\r\n        let sy = parseFloat(prog.attr(\"y\")) + parseFloat(prog.attr(\"height\")) / 2;\r\n        let tx = parseFloat(proSlefg.attr(\"x\"));\r\n        let ty = parseFloat(proSlefg.attr(\"y\")) + tranY + parseFloat(proSlefg.attr(\"height\")) / 2;\r\n        // console.log(sx,sy,tx,ty,prog.attr(\"x\"),proSlefg.attr(\"y\"),prog.attr(\"width\"),prog.attr(\"height\"),proSlefg.attr(\"height\"))\r\n        let c1x = (sx) + 60;\r\n        let c1y = (sy);\r\n        let c2x = (tx) - 60;\r\n        let c2y = (ty);\r\n        let fill = Ent_problem[i]['fill'];\r\n        _this.drawBsLine(relG, sx, sy, c1x, c1y, c2x, c2y, tx, ty, fill, \"1px\", \"0.4\", `proSetRel_${pid}`, \"proSetRel\");\r\n        // }\r\n      }\r\n    },\r\n    updataEntConcept() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let relG = _this.relG;\r\n      let Ent_concept = tools.deepClone(_this.Ent_concept);\r\n\r\n      let conX = _this.treeX;\r\n      let conY = _this.treeY;\r\n      let conStepY = _this.conStepY;\r\n      for (let i = 0; i < Ent_concept.length; i++) {\r\n        let curEntCon = Ent_concept[i];\r\n        let cid = curEntCon['id'];\r\n        let cx = curEntCon['cx'];\r\n        let cy = curEntCon['cy'];\r\n        let r = curEntCon['r'];\r\n        let Cname = curEntCon['name'];\r\n        let fill = curEntCon['fill'];\r\n        let opacity = curEntCon['opacity'];\r\n\r\n        let fillRect = curEntCon['rectFill'];\r\n        let widthRect = curEntCon['rectW'];\r\n\r\n        let stroke ='red';\r\n          // if(curEntCon['gpt']=='1')\r\n            // stroke = 'black'\r\n        let circle = _this.drawCircle(entG, cx, cy, r, fill, opacity, stroke, \"1\", 'entCon', `entCon_${cid}`);\r\n\r\n        circle.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        }).on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_concept.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Problems'];\r\n          // 更新浮层内容\r\n          \r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Pass Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Concept:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n\r\n        // let cG = entG.append(\"g\")\r\n        // .attr(\"transform\", `translate(${cx},${cy})`);\r\n\r\n        // _this.drawEntityConcept(entG, cx, cy, `entCon_${cid}`);\r\n\r\n        let stroker ='none';\r\n        let strokerW ='0';\r\n          if(curEntCon['gpt']=='1'){\r\n            stroker = 'black'\r\n            strokerW ='0.5px';\r\n        }\r\n\r\n        let rectB = _this.drawRect(entG, cx + 20, cy - 8, 100, 16, 1, \"rgba(200,200,200,1)\", strokerW, stroker, \"1\", `entConRectB_${cid}`, 'entConRect');\r\n        let rect = _this.drawRect(entG, cx + 20, cy - 8, widthRect, 16, 1, fillRect, \"0\", stroker, \"1\", `entConRect_${cid}`, 'entConRect');\r\n        rectB.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        })\r\n        rect.on(\"click\", function (d) {\r\n          let selectCon = d3.select(this);\r\n          let selectConId = selectCon.attr(\"id\").split(\"_\")[1];\r\n          _this.curConceptId = selectConId;\r\n        })\r\n        let text = _this.drawTxt(entG, cx + 20, cy + 3.5, Cname, \"white\", 12, `entConText_${cid}`);\r\n\r\n        let fatherId = curEntCon['father'];\r\n        if (parseInt(fatherId) != -1) {\r\n          let curCon = Ent_concept.find(function (d) { return d['id'] == cid; });\r\n          let fatherCon = Ent_concept.find(function (d) { return d['id'] == fatherId; });\r\n          let sx = fatherCon['cx'];\r\n          let sy = fatherCon['cy'] + fatherCon['r'];\r\n          let tx = curCon['cx'] - curCon['r'];\r\n          let ty = curCon['cy'];\r\n\r\n          _this.drawBsLine(relG, sx, sy, sx, ty, sx, ty, tx, ty, \"grey\", \"2px\", \"0.4\", `conRel_${fatherId}_${cid}`, \"conRel\");\r\n        }\r\n      }\r\n    },\r\n    updataEntProblem() {\r\n      const _this = this;\r\n      let entG = _this.entG;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let proX = _this.proX;\r\n      let proY = _this.proY;\r\n      let typeColorMap = {\r\n        \"TRUE_OR_FALSE\": _this.mcolor[1],\r\n        \"MULTIPLE_CHOICE\": _this.mcolor[3],\r\n        \"FILL_IN_THE_BLANK\": _this.mcolor[5],\r\n        \"PROGRAMMING\": _this.mcolor[7],\r\n        \"CODE_COMPLETION\": _this.mcolor[9],\r\n        \"MULTIPLE_CHOICE_MORE_THAN_ONE_ANSWER\": _this.mcolor[11]\r\n      }\r\n      let interY = _this.interY;\r\n      let typeXMap = _this.typeXMap;\r\n      let proStepY = _this.proStepY;\r\n      let attrList = _this.proAttrList;\r\n      let attrLen = attrList.length;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let wSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 100]);\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        let curEntPro = Ent_problem[i];\r\n        let type = curEntPro['type'];\r\n        let pid = curEntPro['id'];\r\n        let cx = curEntPro['cx']//+typeXMap[type]*30;\r\n        let cy = curEntPro['cy'];\r\n        let cH = curEntPro['height'];\r\n        let cW = curEntPro['width'];\r\n        let fill = curEntPro['fill'];\r\n        let pOrder = curEntPro['order'];\r\n        let inter = 1;\r\n        let typeColor = typeColorMap[type]\r\n        let circle = _this.drawCircle(entG, cx, cy + _this.proStepY / 2, proStepY / 2, typeColor, '1', \"none\", \"1\", 'entProCir', `entProCir_${pid}`);\r\n        // let rect = _this.drawRect(entG, cx+cH/2, cy, cW, cH, 1, fill, \"0\", \"none\",\"1\", `entPro_${pid}`, 'entPro');\r\n        let rect = _this.drawRect(entG, cx + cH / 2, cy, 180, cH, 1, fill, \"0\", \"none\", \"0.5\", `entPro_${pid}`, 'entPro');\r\n        rect.on(\"mousemove\", function (d) {\r\n          let selectPro = d3.select(this);\r\n          let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n          let proD = Ent_problem.find(function (p) { return p['id'] == selectProId });\r\n          let pSetId = proD['problemSetId'];\r\n          let pSet = proSetData.find(function (ps) { return ps['id'] == pSetId; })\r\n          let pSetOd = pSet['order'] + 1;\r\n          let od = proD['order'];\r\n          Ent_problem.forEach(entPro => {\r\n            if (entPro['id'] == selectProId) {\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + interY * pSetOd;\r\n              entPro['height'] = (proStepY - inter) * 5;\r\n              od = entPro['order'];\r\n            }\r\n            else if (entPro['order'] < od) {\r\n              let cproD = Ent_problem.find(function (p) { return p['id'] == entPro['id'] });\r\n              let cpSetId = cproD['problemSetId'];\r\n              let cpSet = proSetData.find(function (ps) { return ps['id'] == cpSetId; })\r\n              let cpSetOd = cpSet['order'] + 1;\r\n\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + interY * cpSetOd;\r\n              entPro['height'] = (proStepY - inter)\r\n            }\r\n            else if (entPro['order'] > od) {\r\n              let cproD = Ent_problem.find(function (p) { return p['id'] == entPro['id'] });\r\n              let cpSetId = cproD['problemSetId'];\r\n              let cpSet = proSetData.find(function (ps) { return ps['id'] == cpSetId; })\r\n              let cpSetOd = cpSet['order'] + 1;\r\n              entPro['cy'] = proY + entPro['order'] * proStepY + (proStepY - 1) * 4 + interY * cpSetOd;\r\n              entPro['height'] = (proStepY - inter)\r\n            }\r\n          })\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n          let attrN = ['ScoringRate', 'Attempts', 'AcceptedRate', 'Rel Count'];\r\n          // 更新浮层内容\r\n          \r\n          let tipName = curEnt['name'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'AcceptedRate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Concept:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          _this.Ent_problem = Ent_problem;\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        }).on(\"click\", function (d) {\r\n          let selectPro = d3.select(this);\r\n          let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n          _this.curProblemId = selectProId;\r\n        })\r\n        let attrW = 30\r\n        // for (let j = 0; j < attrLen; j++) {\r\n        //   let curP = _this.calcRsize(proAttrMaxMinList[j], curEntPro[attrList[j]], 30);\r\n        //   let attColor = _this.mLigntcolor[j*2]\r\n        //   let rectAttr = _this.drawRect(entG, cx+j*attrW, cy, curP, cH, 1, attColor, \"0.8\", \"grey\",\"1\", `prottr_${pid}_${attrList[j]}`, 'proAttr');\r\n        // }\r\n        // le\r\n\r\n      }\r\n    },\r\n    updataEntProblemDetailBySet(type, name) {\r\n      const _this = this;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let setEnt = [];\r\n      if (type == 'con') {\r\n        let pro_conRelData = tools.deepClone(_this.problemConceptData);\r\n        pro_conRelData.forEach(rel => {\r\n          let proId = rel['problem'];\r\n          let conId = rel['conceptId'];\r\n          if (conId == name) {\r\n            let proData = Ent_problem.find(function (d) { return d['id'] == proId; })\r\n            let proSetId = proData['problemSetId'];\r\n            if (proSetId == selectSetId) {\r\n              setEnt.push(proData);\r\n            }\r\n          }\r\n        })\r\n        _this.detailsEntPro = setEnt;\r\n        return;\r\n      }\r\n      for (let i = 0; i < Ent_problem.length; i++) {\r\n        if (Ent_problem[i][\"problemSetId\"] == selectSetId) {\r\n          let entSetPro = tools.deepClone(Ent_problem[i]);\r\n          if (type == \"none\") {\r\n            setEnt.push(entSetPro);\r\n          }\r\n          else if (type == 'type') {\r\n            if (Ent_problem[i][\"type\"] == name) {\r\n              setEnt.push(entSetPro);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      _this.detailsEntPro = setEnt;\r\n    },\r\n\r\n    updataEntProblemDetail() {\r\n      const _this = this;\r\n      let entG = _this.entbySetG;\r\n      let selectSetId = _this.curProblemSetId;\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let setX = _this.setX;\r\n      let setY = _this.setY;\r\n\r\n      let attrList = [\"scoringRate\", \"acceptedRate\", \"totalAttempts\"];\r\n      let attrLen = attrList.length;\r\n\r\n      entG.selectAll(\".proDetil\").remove();\r\n      entG.selectAll(\".proDetilB\").remove();\r\n      entG.selectAll(\".proDetilAttr\").remove();\r\n\r\n      let setEnt = _this.detailsEntPro;\r\n\r\n      let setStepY = 50;\r\n      let setProWidth = 200;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let wSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 100]);\r\n\r\n      let j = 0;\r\n      for (let i = 0; i < setEnt.length; i++) {\r\n        let curEntPro = setEnt[i];\r\n        let pid = curEntPro['id'];\r\n        let gpro = Ent_problem.find(function (p) { return p['id'] == pid; });\r\n\r\n        if (gpro != undefined) {\r\n          let groupVal = gpro['groupVal'];\r\n          let groupLen = groupVal.length;\r\n          setStepY = 50 + 10*groupLen;\r\n          let cx = setX;\r\n          let cy = setY + j * setStepY;\r\n          let cH = setStepY -20;\r\n          let cW = curEntPro['width']//wSize_linear(curEntPro['scoringRate']);\r\n          let fill = curEntPro['fill'];\r\n          let pOrder = curEntPro['order'];\r\n          let rectback = _this.drawRect(entG, cx, cy, setProWidth, cH, 5, \"grey\", \"10\", \"grey\", \"0.3\", `proDetilB_${pid}`, 'proDetilB');\r\n          let rect = _this.drawRect(entG, cx, cy, cW, cH, 5, fill, \"10\", fill, \"1\", `proDetil_${pid}`, 'proDetil');\r\n          j++;\r\n          rectback.on(\"click\", function (d) {\r\n            let selectPro = d3.select(this);\r\n            let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n            _this.curProblemId = selectProId;\r\n          })\r\n          .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_problem.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'conCount'];\r\n          let attrN = ['Scoring Rate', 'Attempts', 'Pass Rate', 'Concepts'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Pass Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n          rect.on(\"click\", function (d) {\r\n            let selectPro = d3.select(this);\r\n            let selectProId = selectPro.attr(\"id\").split(\"_\")[1];\r\n            _this.curProblemId = selectProId;\r\n          })\r\n          .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = Ent_problem.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = curEnt['name'];\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'totalAttempts', 'acceptedRate', 'conCount'];\r\n          let attrN = ['ScoringRate', 'Attempts', 'AcceptedRate', 'Rel Count'];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'AcceptedRate'||(attrN[a] == 'ScoringRate'))\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems:\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n          let scoreValueList = curEntPro['scoreValueList'];\r\n          let acceptedValueList = curEntPro['acceptedValueList'];\r\n          let totalAttemptsValueList = curEntPro['totalAttemptsValueList'];\r\n          let dmList = [scoreValueList, acceptedValueList, totalAttemptsValueList];\r\n          let interW = setProWidth / (attrLen);\r\n          let attrW = interW;\r\n          let attrWA = interW/(groupLen+2);\r\n          for (let j = 0; j < attrLen; j++) {\r\n            let attColor = _this.attrColorList[j];\r\n            let Compute_color = d3.interpolate(\"white\", attColor);\r\n            let maxMin = proAttrMaxMinList[j];\r\n            let color_linear = d3.scaleLinear().domain([0, maxMin[0]]).range([0, 1]);\r\n            let curAttrColor = Compute_color(color_linear(maxMin[0]/2))//curEntPro[attrList[j]]));\r\n            let curP = _this.calcRsize(proAttrMaxMinList[j], curEntPro[attrList[j]], cH);\r\n            let xxx = 0;\r\n            if(groupLen==0){\r\n              attrWA = interW/2;\r\n              xxx = (interW - attrWA)/2\r\n            }\r\n            _this.drawAttrreact(entG, cx + j * (interW)+xxx, cy, attrWA , cH, dmList[j], attrList[j], curAttrColor, `proDetilsAttr_${pid}_${attrList[j]}`,\"black\",attColor);\r\n          } // let rectAttr = _this.drawRect(entG, cx+j*attrW, cy+cH-curP, attrW-10, curP, 1, attColor, \"0.2\", \"grey\",\"1\", `proDetilAttr_${pid}_${attrList[j]}`, 'proDetilAttr');\r\n\r\n          let groupStepY = 10;\r\n          let gs_linear = d3.scaleLinear().domain([0, 1]).range([0, cH]);\r\n          for (let g = 0; g < groupLen; g++) {\r\n            let curP = gs_linear(groupVal[g]['scoringRate']);\r\n\r\n            // let \r\n            let gscoreValueList = groupVal[g]['scoreValueList'];\r\n            let gacceptedValueList = groupVal[g]['acceptedValueList'];\r\n            let gtotalAttemptsValueList = groupVal[g]['totalAttemptsValueList'];\r\n            let gdmList = [gscoreValueList, gacceptedValueList, gtotalAttemptsValueList];\r\n            let gColor = _this.stuColorList[g];\r\n            // let rectgroup = _this.drawRect(entG, cx + attrW * 3 + g * groupStepY, cy + cH - curP, groupStepY - 5, curP, 1, gColor, \"0.2\", \"grey\", \"1\", `proDetilGroup_${pid}_${g}`, 'proDetilGroup');\r\n            \r\n            for (let j = 0; j < attrLen; j++) {\r\n              let attColor = _this.attrColorList[j];\r\n              let Compute_color = d3.interpolate(\"white\", attColor);\r\n              let Compute_colorg = d3.interpolate(\"white\", gColor);\r\n              let maxMin = proAttrMaxMinList[j];\r\n              let color_linear = d3.scaleLinear().domain([0, maxMin[0]]).range([0, 1]);\r\n              let gcurAttrColor = Compute_color(color_linear(groupVal[g][attrList[j]]));\r\n              let gcurAttrGColor = Compute_colorg(color_linear(maxMin[0]/2))//groupVal[g][attrList[j]]));\r\n\r\n              _this.drawAttrreact(entG, cx + j * (interW)+2+(g+1)*(attrWA), cy, attrWA, cH, gdmList[j], attrList[j], gcurAttrGColor, `proDetilsGroupAttr_${pid}_${g}_${attrList[j]}`,\"black\",gColor);\r\n              // console.log(gdmList[j],attrList[j],curEntPro[attrList[j]],dmList[j])\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      _this.updataPro_ProSetRel(_this.graphGTransformY);\r\n    },\r\n    getMaxMinValue(data, valueName,isGroupData = false) {\r\n\r\n      let mind = 1000000;\r\n      let maxd = -1000000;\r\n      let av = 0;\r\n      let num = 0;\r\n      let arr = []\r\n      Object.keys(data).forEach(stuD => {\r\n        if((!isGroupData)||(data[stuD]['gvjg'] != -1))\r\n        {\r\n        maxd = (data[stuD][valueName] > maxd) ? data[stuD][valueName] : maxd;\r\n        mind = (data[stuD][valueName] < mind) ? data[stuD][valueName] : mind;\r\n        if (data[stuD][valueName] != undefined) {\r\n          av += data[stuD][valueName];\r\n          num += 1;\r\n          arr.push(data[stuD][valueName])\r\n        }\r\n      }\r\n      });\r\n      \r\n      if (num != 0)\r\n        av /= num;\r\n      else\r\n        av = 0;\r\n      let fc = 0;\r\n      \r\n      arr.forEach(stuD => {\r\n          fc+=Math.pow(stuD - av, 2);\r\n      });\r\n\r\n      if (num != 0)\r\n        fc /= num;\r\n      else\r\n        fc = 0;\r\n\r\n      var compare = function (x, y) {//比较函数\r\n        return x > y\r\n      };\r\n      var mid; //中位数\r\n      arr.sort(compare); //数组排序\r\n      if (arr.length % 2 == 0) {\r\n        mid = (arr[arr.length / 2] + arr[arr.length / 2 + 1]) / 2\r\n      }\r\n      if (arr.length % 2 != 0) {\r\n        mid = arr[(arr.length + 1) / 2]\r\n      }\r\n      return [mind, maxd, av, mid, arr[parseInt(arr.length / 4)], arr[parseInt(arr.length / 4 * 3)],fc]\r\n    },\r\n    drawAttrreactO(svg, cx, cy, w, h, data, valueName, attrColor, idN,boxColor = \"grey\" ) {\r\n      const _this = this;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let attrList = _this.proAttrList;\r\n      let maxMin = proAttrMaxMinList[attrList.indexOf(valueName)];\r\n      let mind = data[0]\r\n      let maxd = data[1]\r\n      let av = data[2]\r\n      let mid = data[3]\r\n      let q1 = data[4]\r\n      let q2 = data[5]\r\n      let len_linear = d3.scaleLinear().domain([0, 1]).range([0, h]);\r\n      if (valueName == \"totalAttempts\") {\r\n        len_linear = d3.scaleLinear().domain([0, Math.sqrt(67)]).range([0, h]);\r\n        mind = Math.sqrt(mind);\r\n        maxd = Math.sqrt(maxd);\r\n        av = Math.sqrt(av);\r\n        q1 = Math.sqrt(q1);\r\n        q2 = Math.sqrt(q2);\r\n      }\r\n      let avp = len_linear(av);\r\n      let maxp = len_linear(maxd);\r\n      let minp = len_linear(mind);\r\n      let midp = len_linear(mid);\r\n      let q1p = len_linear(q1);\r\n      let q2p = len_linear(q2);\r\n      // let boxColor = \"grey\"\r\n      // _this.drawRect(svg, cx, cy, w, h, 1, attrColor, \"0.2\", \"grey\", \"1\", `B_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + 3, cy + h - q2p, w - 6, q2p - q1p, 1, attrColor, \"1\", boxColor, \"1\", `${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w, 2, 1, \"white\", \"0.2\", \"none\", \"1\", `av_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + 3, cy + h - midp, w - 6, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `mid_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `max_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - minp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `min_${idN}`, 'proDetilAttr');\r\n\r\n      _this.drawRect(svg, cx + w / 2 - 1, cy + h - maxp, 1, maxp - q2p, 1, boxColor, \"0\", \"none\", \"1\", `maxl_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx + w / 2 - 1, cy + h - q1p, 1, q1p - minp, 1, boxColor, \"0\", \"none\", \"1\", `minl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q1p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q1_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q2p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q2_${idN}`, 'proDetilAttr');\r\n\r\n    },\r\n    drawAttrreact(svg, cx, cy, w, h, data, valueName, attrColor, idN,boxColor = \"black\",attColorO = 'none' ) {\r\n      const _this = this;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let attrList = _this.proAttrList;\r\n      let maxMin = proAttrMaxMinList[attrList.indexOf(valueName)];\r\n      let mind = data[0];\r\n      let maxd = data[1];\r\n      let av = data[2];\r\n      let mid = data[3];\r\n      let q1 = data[4];\r\n      let q2 = data[5];\r\n      let fc = data[6];\r\n      let zfc = av+fc;\r\n      let ffc = av-fc;\r\n      let len_linear = d3.scaleLinear().domain([0, 1]).range([0, h]);\r\n      if (valueName == \"totalAttempts\") {\r\n        len_linear = d3.scaleLinear().domain([0, Math.sqrt(67)]).range([0, h]);\r\n        mind = Math.sqrt(mind);\r\n        maxd = Math.sqrt(maxd);\r\n        av = Math.sqrt(av);\r\n        q1 = Math.sqrt(q1);\r\n        q2 = Math.sqrt(q2);\r\n        zfc = Math.sqrt(zfc);\r\n        ffc = Math.sqrt(ffc);\r\n      }\r\n      let avp = len_linear(av);\r\n      let maxp = len_linear(maxd);\r\n      let minp = len_linear(mind);\r\n      let midp = len_linear(mid);\r\n      let q1p = len_linear(q1);\r\n      let q2p = len_linear(q2);\r\n      let zfcp = len_linear(zfc);\r\n      let ffcp = len_linear(ffc);\r\n\r\n      let avPath = d3.path();\r\n      avPath.moveTo(cx+1, cy + h - avp) \r\n      avPath.lineTo(cx+w-1, cy + h - avp) \r\n      // let boxColor = \"grey\"\r\n      // _this.drawRect(svg, cx, cy, w, h, 1, attrColor, \"0.2\", \"grey\", \"1\", `B_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w, 2, 1, \"white\", \"0.2\", \"none\", \"1\", `av_${idN}`, 'proDetilAttr');\r\n\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, maxp+1, 0, attrColor, \"1\", boxColor, \"1\", `max_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy , w , h, 0, \"none\", \"1\", \"white\", \"1\", `proDetilAttrBack_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - avp, w , avp - minp+1, 0, attrColor, \"1\", \"white\", \"1\", `mid_${idN}`, 'proDetilAttr');\r\n\r\n      // _this.drawRect(svg, cx, cy + h - zfcp, w , zfcp - avp+1, 1, attColorO, \"1\", \"none\", \"1\", `zfc_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - avp, w , avp - ffcp+1, 1, attColorO, \"1\", \"none\", \"1\", `ffc_${idN}`, 'proDetilAttr');\r\n      _this.drawRect(svg, cx, cy + h - zfcp, w , zfcp - ffcp+1, 0, attColorO, \"1\", \"none\", \"1\", `fc_${idN}`, 'proDetilAttr');\r\n\r\n\r\n      _this.drawRect(svg, cx, cy + h - maxp, w, maxp - minp+1, 0, \"none\", \"1\", boxColor, \"1\", `${idN}`, 'proDetilAttr');\r\n      _this.drawLine(svg, avPath, \"white\", 1, '0', '1', `av_${idN}`, 'proDetilAttr', \"white\");\r\n      // _this.drawRect(svg, cx, cy + h - maxp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `max_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - minp, w, 1, 1, boxColor, \"0.2\", \"none\", \"1\", `min_${idN}`, 'proDetilAttr');\r\n\r\n      // _this.drawRect(svg, cx + w / 2 - 1, cy + h - maxp, 1, maxp - q2p, 1, boxColor, \"0\", \"none\", \"1\", `maxl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx + w / 2 - 1, cy + h - q1p, 1, q1p - minp, 1, boxColor, \"0\", \"none\", \"1\", `minl_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q1p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q1_${idN}`, 'proDetilAttr');\r\n      // _this.drawRect(svg, cx, cy + h - q2p, w, 2, 1, boxColor, \"0.2\", \"none\", \"1\", `q2_${idN}`, 'proDetilAttr');\r\n\r\n    },\r\n    updataEntProblemSetBack() {\r\n      const _this = this;\r\n      let entSetG = _this.entSetG;\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      let Ent_problem = tools.deepClone(_this.Ent_problem);\r\n      let maxSetCon = _this.maxSetCon\r\n      for (let i = 0; i < proSetData.length; i++) {\r\n        let fill = proSetData[i]['fill'];\r\n        let psid = proSetData[i]['id'];\r\n        let set = proSetData[i]['set'];\r\n        let conDistribution = proSetData[i]['conDistribution'];\r\n        let typeDistribution = proSetData[i]['typeDistribution'];\r\n        let num = 0;\r\n        // ------------------------------\r\n        // let edP = Ent_problem.find(function(ep){return ep['id'] == set[set.length-1];})\r\n        // proSetData[i]['cy'] = Ent_problem.find(function(ep){return ep['id'] == set[0];})['cy'];\r\n        // proSetData[i]['height'] = edP['cy'] - proSetData[i]['cy']+edP['height'];\r\n        // ------------------------------\r\n\r\n        // ------------------------------\r\n        let cx = proSetData[i]['cx'];\r\n        let cy = proSetData[i]['cy'];\r\n        let width = proSetData[i]['width'];\r\n        let height = proSetData[i]['height']; \r\n        // let prog = entSetG;\r\n        // if(psid != '1595937666900742144'){\r\n        //   continue\r\n\r\n        // }\r\n        // else{\r\n        //   height //*=2;\r\n\r\n        // }\r\n        let rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"5\", \"none\", \"1\", `proSet_${psid}`, 'proSet');\r\n        if(psid == '1594605247375466496')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','');\r\n        if(psid == '1573619795390476288')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','9');\r\n        if(psid == '1573619795390476288')\r\n          rect = _this.drawRect(entSetG, cx, cy, width, height, 10, fill, \"2\", \"grey\", \"1\", `proSet_${psid}`, 'proSet','9');\r\n        // let rect1 = _this.drawRect(entSetG, cx, cy+height/3, width, 1, 1, \"grey\", \"5\", \"none\",\"1\", `proSet1_${psid}`, 'proSet');\r\n        // let rect2 = _this.drawRect(entSetG, cx, cy+height/3*2, width, 1, 1, \"grey\", \"5\", \"none\",\"1\", `proSet2_${psid}`, 'proSet');\r\n        let rect1 = _this.drawRect(entSetG, cx + width / 3 - 25, cy, 1, height, 1, \"white\", \"5\", \"none\", \"1\", `proSet1_${psid}`, 'proSet');\r\n        let rect2 = _this.drawRect(entSetG, cx + width / 3 * 2 - 50, cy, 1, height, 1, \"white\", \"5\", \"none\", \"1\", `proSet2_${psid}`, 'proSet');\r\n        \r\n        rect.on(\"click\", function (d) {\r\n          let selectSet = d3.select(this);\r\n          d3.selectAll(\".proSet\").attr(\"opacity\", 0.1);\r\n          selectSet.attr(\"opacity\", 1)\r\n          let selectSetId = selectSet.attr(\"id\").split(\"_\")[1];\r\n          _this.curProblemSetId = selectSetId;\r\n        })\r\n        .on(\"mousemove\", function (d) {\r\n          let curSvgEnt = d3.select(this);\r\n          let curType = curSvgEnt.attr(\"class\");\r\n          let curId = curSvgEnt.attr(\"id\").split(\"_\")[1];\r\n          let curEnt = proSetData.find(function (p) {return (p.id).toString() == (curId.toString());});\r\n          let tipName = `Set ${curEnt['order']+1}`;\r\n\r\n          var yPosition = d.clientY + 20;\r\n          var xPosition = d.clientX + 20;\r\n          var chartTooltip = d3\r\n            .select(\".chartTooltip\")\r\n            .style(\"left\", xPosition + \"px\")\r\n            .style(\"top\", yPosition + \"px\");\r\n\r\n          let attr = ['scoringRate', 'set',];\r\n          let attrN = ['Scoring Rate', 'Problems', '', ''];\r\n          for (let a = 0; a < attr.length; a++) {\r\n\r\n            chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]]}`)\r\n            if(attrN[a] == 'Problems')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].length}`)\r\n            if(attrN[a] == 'Scoring Rate')\r\n              chartTooltip.select(`.attr${a}`).text(`${attrN[a]} : ${curEnt[attr[a]].toFixed(2)}`)\r\n          }\r\n          chartTooltip.select(\".name\").text(\"Problems\");\r\n          chartTooltip.select(\".text\").text(tipName);\r\n          // 移除浮层hidden样式，展示浮层\r\n          chartTooltip.classed(\"hidden\", false);\r\n\r\n        })\r\n        .on(\"mouseleave\", function (d) {\r\n          d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n        })\r\n\r\n        // _this.drawRiver(entSetG,cx+width/3*2+3,cy,height,width/3,`proSetRiver_${psid}`,proSetData[i]['set']);\r\n        _this.drawSetValuePoly(entSetG, cx + width / 2 + 1, cy, height - 2, width / 2, `proSetValuePoly_${psid}`, proSetData[i]['set']);\r\n        // let min1w = height/3;\r\n        // let max1w = width/9;       \r\n        // let min1h = 10;\r\n        // let max1h = height/3;\r\n\r\n        let min1w = 0;\r\n        let max1w = width / 3 - 30;\r\n        let min1h = 10;\r\n        let max1h = (height - 6) / 8;\r\n        let j = 0\r\n        let setConCount_linear = d3.scaleLinear().domain([0, Math.sqrt(maxSetCon)]).range([min1w, max1w]);\r\n        let currentMinColor = _this.setConCountColorMin;\r\n        let currentMaxColor = _this.setConCountColorMax;\r\n\r\n        let setConCountColor_linear = d3.scaleLinear().domain([0, maxSetCon]).range([0, 1]);\r\n        let setConCountCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n        let conRootDistribution = {};\r\n        let maxnum = 0;\r\n\r\n        Object.keys(conDistribution).forEach(conD => {\r\n          let conid = conD;\r\n          let idSpilt = conid.split(\"-\");\r\n          let rootId = idSpilt[0];\r\n          maxnum += conDistribution[conD];\r\n          if (conRootDistribution[rootId] != undefined)\r\n            conRootDistribution[rootId] += conDistribution[conD];\r\n          else {\r\n            conRootDistribution[rootId] = 0;\r\n          }\r\n          // --------------------------\r\n          if (idSpilt.length == 1) {\r\n            // conRootDistribution[rootId] = conDistribution[conD];\r\n            let cw = setConCount_linear(Math.sqrt(conDistribution[conD]));\r\n            let color = setConCountCompute_color(setConCountColor_linear(conDistribution[conD]))\r\n            if(cw == 0){\r\n              cw = 2\r\n              color = \"white\"\r\n            }\r\n            // let disRect = _this.drawRect(entSetG, cx+(max1w)*j, cy+max1h - ch,max1w-5, ch, 1, color, \"1\", \"white\",\"1\", `proSetConAttr_${psid}_${conid}`, 'proSetConAttr');\r\n            // let disRectB = _this.drawRect(entSetG, cx+5, cy+(max1h)*j,max1w, height/9-3, 1, \"none\", \"1\", \"white\",\"1\", `proSetConAttrB_${psid}_${conid}`, 'proSetConAttr');\r\n            let disRect = _this.drawRect(entSetG, cx + 5, cy + (max1h) * j, cw, height / 8 - 3, 1, color, \"0\", \"white\", \"1\", `proSetConAttr_${psid}_${conid}`, 'proSetConAttr');\r\n            disRect.on(\"click\", function (d) {\r\n              let selectProAtt = d3.select(this);\r\n              let Ids = selectProAtt.attr(\"id\").split(\"_\");\r\n              let setId = Ids[1];\r\n              let conId = Ids[2];\r\n              _this.curProblemSetId = setId;\r\n              _this.updataEntProblemDetailBySet(\"con\", conId)\r\n            })\r\n            j++;\r\n          }\r\n          // -------------------------------------\r\n        })\r\n        // let curx = cx+3;\r\n        // Object.keys(conRootDistribution).forEach(conrD=>{\r\n        //   let c_linear = d3.scaleLinear().domain([0, maxnum]).range([0, width-(min1w*9)]);\r\n        //   let cColor_linear = d3.scaleLinear().domain([0, maxnum]).range([0, 1]);\r\n        //   let cCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n        //   let afw = c_linear(conRootDistribution[conrD]);\r\n        //   console.log(conRootDistribution[conrD],afw,min1w+afw)\r\n        //   let color = cCompute_color(cColor_linear(conRootDistribution[conrD]))\r\n        //   let disRect = _this.drawRect(entSetG, curx, cy+3,min1w+afw, height/3-6, 1, color, \"1\", \"white\",\"1\", `proSetConAttr_${psid}_${conrD}`, 'proSetConAttr');\r\n        //   disRect.on(\"click\",function(d){\r\n        //     let selectProAtt = d3.select(this);\r\n        //     let Ids = selectProAtt.attr(\"id\").split(\"_\");\r\n        //     let setId = Ids[1];\r\n        //     let conId = Ids[2];\r\n        //     _this.curProblemSetId = setId;\r\n        //     _this.updataEntProblemDetailBySet(\"con\",conId)\r\n        //   })\r\n        //   j++\r\n        //   curx+=min1w+afw+2;\r\n        // })\r\n\r\n\r\n        // let min2w = 10;\r\n        // let max2w = width/6;       \r\n        // let min2h = 10;\r\n        // let max2h = height/3;\r\n        let min2w = 0;\r\n        let max2w = width / 3 - 30;\r\n        let min2h = 10;\r\n        let max2h = height / 4;\r\n        j = 0;\r\n        let prolen = proSetData[i]['set'].length;\r\n        let settype_linear = d3.scaleLinear().domain([0, Math.sqrt(prolen)]).range([min2w, max2w]);\r\n        let typeMinColor = _this.setTypeCountColorMin;\r\n        let typeMaxColor = _this.setTypeCountColorMax;\r\n        let typeColor_linear = d3.scaleLinear().domain([0, prolen]).range([0, 1]);\r\n        let typeCompute_color = d3.interpolate(typeMinColor, typeMaxColor);\r\n        // console.log(proSetData[i]['set'],typeDistribution)\r\n        Object.keys(typeDistribution).forEach(typeD => {\r\n          let ch = settype_linear(Math.sqrt(typeDistribution[typeD]));\r\n          let color = typeCompute_color(typeColor_linear(typeDistribution[typeD]))\r\n          if(ch == 0){\r\n              ch = 2\r\n              color = \"white\"\r\n            }\r\n          // let disRect = _this.drawRect(entSetG, cx+(max2w)*j, cy+max2h+max2h - ch,max2w-5, ch, 1, color, \"1\", \"white\",\"1\", `proSettypeAttr-${psid}-${typeD}`, 'proSettypeAttr');\r\n          // let disRectB = _this.drawRect(entSetG, cx + (width / 3)-25 , cy + (max2h) * j, max2w, max2h - 3, 1, \"none\", \"1\", \"white\", \"1\", `proSettypeAttrB-${psid}-${typeD}`, 'proSettypeAttrB');\r\n          let disRect = _this.drawRect(entSetG, cx + (width / 3) - 23, cy+3 + (max2h) * j, ch, max2h - 6, 1, color, \"0\", \"white\", \"1\", `proSettypeAttr-${psid}-${typeD}`, 'proSettypeAttr');\r\n          disRect.on(\"click\", function (d) {\r\n            let selectProAtt = d3.select(this);\r\n            let Ids = selectProAtt.attr(\"id\").split(\"-\");\r\n            let setId = Ids[1];\r\n            let typeD = Ids[2];\r\n            _this.curProblemSetId = setId;\r\n            _this.updataEntProblemDetailBySet(\"type\", typeD);\r\n          })\r\n          j++;\r\n        })\r\n\r\n\r\n      }\r\n    },\r\n    drawSetValuePoly(svg, cx, cy, height, width, idN, set) {\r\n      const _this = this;\r\n      // let groupData = \r\n      let data = [];\r\n      let keys = [];\r\n      let stepy = height / (set.length - 1);\r\n      let pathav = d3.path();\r\n      let pathavat = d3.path();\r\n      let pathavtd = d3.path();\r\n      let pathfcf = d3.path();\r\n      let pathfcz = d3.path();\r\n      let wScale = d3.scaleLinear().domain([0, 1]).range([1, width / 2 - 2]);\r\n      let maxOriAttempts = 30;\r\n      let wScaleat = d3.scaleLinear().domain([0, maxOriAttempts]).range([width / 2 + 5, width - 5]);\r\n\r\n      let minOriTimeDur = _this.proAttrMaxMinList[1][0];\r\n      let maxOriTimeDur = _this.proAttrMaxMinList[1][1];\r\n      let proSetData = tools.deepClone(_this.proSetData);\r\n      // for(let j=0;j<proSetData.length;j++){\r\n      //   let sets = proSetData[j]['set'];\r\n      for (let i = 0; i < set.length; i++) {\r\n        let proStuData = set[i]['stuData'];\r\n        let minTimeD = 10000000001;\r\n        let maxTimeD = -100000000000;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxTimeD = (proStuData[s]['timeDur'] > maxTimeD) ? proStuData[s]['totalTimeDur'] : maxTimeD;\r\n          minTimeD = (proStuData[s]['timeDur'] < minTimeD) ? proStuData[s]['totalTimeDur'] : minTimeD;\r\n        })\r\n        maxOriTimeDur = (maxOriTimeDur > maxTimeD) ? maxOriTimeDur : maxTimeD;\r\n        minOriTimeDur = (minOriTimeDur < minTimeD) ? minOriTimeDur : minTimeD;\r\n      }\r\n      // }\r\n      let wScaletd = d3.scaleLinear().domain([minOriTimeDur, maxOriTimeDur]).range([width / 3 * 2 + 3, width - 5]);\r\n\r\n      let points = [];\r\n      let pointsfc = [];\r\n      let pointsav = [];\r\n\r\n      let pointsat = [];\r\n      let pointsfcat = [];\r\n      let pointsavat = [];\r\n\r\n      let pointstd = [];\r\n      let pointsfctd = [];\r\n\r\n\r\n      for (let i = 0; i < set.length; i++) {\r\n        let proData = set[i];\r\n        let proStuData = set[i]['stuData'];\r\n        let minScoreRate = 1;\r\n        let maxScoreRate = 0;\r\n        let avScoreRate = 0;\r\n        let minAttempts = 1;\r\n        let maxAttempts = 0;\r\n        let avAttempts = 0;\r\n\r\n        let minTimeDur = 100000000;\r\n        let maxTimeDur = -1000000000000;\r\n        let avTimeDur = 0;\r\n        let num = 0;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxScoreRate = (proStuData[s]['scoringRate'] > maxScoreRate) ? proStuData[s]['scoringRate'] : maxScoreRate;\r\n          minScoreRate = (proStuData[s]['scoringRate'] < minScoreRate) ? proStuData[s]['scoringRate'] : minScoreRate;\r\n\r\n          maxAttempts = (proStuData[s]['totalAttempts'] > maxAttempts) ? proStuData[s]['totalAttempts'] : maxAttempts;\r\n          minAttempts = (proStuData[s]['totalAttempts'] < minAttempts) ? proStuData[s]['totalAttempts'] : minAttempts;\r\n\r\n          maxTimeDur = (proStuData[s]['timeDur'] > maxTimeDur) ? proStuData[s]['totalTimeDur'] : maxTimeDur;\r\n          minTimeDur = (proStuData[s]['timeDur'] < minTimeDur) ? proStuData[s]['totalTimeDur'] : minTimeDur;\r\n\r\n          avScoreRate += proStuData[s]['scoringRate'];\r\n          avAttempts += proStuData[s]['totalAttempts'];\r\n          avTimeDur += proStuData[s]['timeDur'];\r\n          num++;\r\n        });\r\n        avScoreRate /= num;\r\n        avAttempts /= num;\r\n        avTimeDur /= num;\r\n\r\n        let fcScoreRate = 0;\r\n        let fcTimeDur = 0;\r\n        let fcAttempts = 0;\r\n        Object.keys(proStuData).forEach((s) => {\r\n          fcScoreRate += Math.pow(proStuData[s]['scoringRate'] - avScoreRate, 2);\r\n          fcAttempts += Math.pow(proStuData[s]['totalAttempts'] - avAttempts, 2);\r\n          fcTimeDur += Math.pow(proStuData[s]['timeDur'] - avTimeDur, 2);\r\n        })\r\n        fcScoreRate /= num;\r\n        fcAttempts /= num;\r\n        fcTimeDur /= num;\r\n\r\n        set[i]['maxScoreRate'] = maxScoreRate;\r\n        set[i]['minScoreRate'] = minScoreRate;\r\n        set[i]['avScoreRate'] = avScoreRate;\r\n        set[i]['fcScoreRate'] = fcScoreRate;\r\n\r\n        set[i]['maxAttempts'] = maxAttempts;\r\n        set[i]['minAttempts'] = minAttempts;\r\n        set[i]['avAttempts'] = avAttempts;\r\n        set[i]['fcAttempts'] = fcAttempts;\r\n\r\n        set[i]['maxTimeDur'] = maxTimeDur;\r\n        set[i]['minTimeDur'] = minTimeDur;\r\n        set[i]['avTimeDur'] = avTimeDur;\r\n        set[i]['fcTimeDur'] = fcTimeDur;\r\n\r\n        if (i == 0) {\r\n          pathav.moveTo(cx + wScale(avScoreRate), cy + stepy * i);\r\n          pathavat.moveTo(cx + wScaleat(avAttempts), cy + stepy * i);\r\n          pathavtd.moveTo(cx + wScaletd(avTimeDur), cy + stepy * i);\r\n        }\r\n\r\n        pathav.lineTo(cx + wScale(avScoreRate), cy + stepy * i);\r\n        pathavat.lineTo(cx + wScaleat(avAttempts), cy + stepy * i);\r\n        pathavtd.lineTo(cx + wScaletd(avTimeDur), cy + stepy * i);\r\n\r\n        points.push([cx + wScale(maxScoreRate), cy + stepy * i])\r\n        pointsav.push([cx + wScale(avScoreRate), cy + stepy * i])\r\n        pointsfc.push([cx + wScale(avScoreRate + fcScoreRate), cy + stepy * i])\r\n        if (maxAttempts > maxOriAttempts)\r\n          maxAttempts = maxOriAttempts;\r\n        if (maxAttempts == 1) {\r\n          maxAttempts = 5\r\n        }\r\n        pointsat.push([cx + wScaleat(maxAttempts), cy + stepy * i]);\r\n        pointsavat.push([cx + wScaleat(avAttempts), cy + stepy * i])\r\n        pointsfcat.push([cx + wScaleat(avAttempts + Math.sqrt(fcAttempts)), cy + stepy * i])\r\n\r\n        pointstd.push([cx + wScaletd(maxTimeDur), cy + stepy * i]);\r\n        pointsfctd.push([cx + wScaletd(avTimeDur + Math.sqrt(fcTimeDur)), cy + stepy * i])\r\n      };\r\n      for (let i = set.length - 1; i >= 0; i--) {\r\n        let proData = set[i];\r\n        let proStuData = set[i]['stuData'];\r\n        let minScoreRate = 1;\r\n        let maxScoreRate = 0;\r\n        let avScoreRate = set[i]['avScoreRate'];\r\n        let fcScoreRate = set[i]['fcScoreRate'];\r\n\r\n        let avAttempts = set[i]['avAttempts'];\r\n        let fcAttempts = set[i]['fcAttempts'];\r\n\r\n        let avTimeDur = set[i]['avTimeDur'];\r\n        let fcTimeDur = set[i]['fcTimeDur'];\r\n\r\n        let minAttempts = set[i]['minAttempts'];\r\n        let minTimeDur = set[i]['minTimeDur'];\r\n        Object.keys(proStuData).forEach((s) => {\r\n          maxScoreRate = (proStuData[s]['scoringRate'] > maxScoreRate) ? proStuData[s]['scoringRate'] : maxScoreRate;\r\n          minScoreRate = (proStuData[s]['scoringRate'] < minScoreRate) ? proStuData[s]['scoringRate'] : minScoreRate;\r\n        })\r\n        points.push([cx + wScale(minScoreRate), cy + stepy * i])\r\n        pointsfc.push([cx + wScale(avScoreRate - fcScoreRate), cy + stepy * i])\r\n\r\n        pointsat.push([cx + wScaleat(minAttempts), cy + stepy * i])\r\n        pointsfcat.push([cx + wScaleat(avAttempts - Math.sqrt(fcAttempts)), cy + stepy * i])\r\n\r\n        pointstd.push([cx + wScaletd(minTimeDur), cy + stepy * i])\r\n        pointsfctd.push([cx + wScaletd(avTimeDur - Math.sqrt(fcTimeDur)), cy + stepy * i])\r\n      };\r\n\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n        .curve(d3.curveBasisClosed)\r\n      let curve_generatorb = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => d[1])\r\n        .curve(d3.curveBasis)\r\n      // .curve(d3.curveLinearClosed)\r\n\r\n      let linepoly = _this.drawLine(svg, curve_generator(points), \"none\", 1, '0', '1', `setstuScoreLine_${idN}`, 'setstuScoreLine', \"rgba(253, 195, 190,1)\");\r\n      let linepolyfc = _this.drawLine(svg, curve_generator(pointsfc), \"none\", 1, '0', '1', `setstuScoreLinefc_${idN}`, 'setstuScoreLine', \"rgba(255, 77, 109,1)\");\r\n      let lineav = _this.drawLine(svg, curve_generatorb(pointsav), \"white\", 1, '0', '1', `setstuScoreLineAv_${idN}`, 'setstuScoreLine');\r\n\r\n      let linepolyat = _this.drawLine(svg, curve_generator(pointsat), \"none\", 1, '0', '1', `setstuAttemptsLine_${idN}`, 'setstuAttemptsLine', \"rgba(250, 210, 50,1)\");\r\n      let linepolyfcat = _this.drawLine(svg, curve_generator(pointsfcat), \"none\", 1, '0', '1', `setstuAttemptsLinefc_${idN}`, 'setstuAttemptsLine', \"rgba(181, 146, 9,1)\");\r\n      let lineavat = _this.drawLine(svg, curve_generatorb(pointsavat), \"white\", 1, '0', '1', `setstuAttemptsLineAv_${idN}`, 'setstuAttemptsLine');\r\n\r\n      // let linepolytd = _this.drawLine(svg, curve_generator(pointstd), \"none\", 1, '0','1' ,`setstuTimeDurLine_${idN}`, 'setstuTimeDurLine',\"rgb(5, 13, 159)\");\r\n      // let linepolyfctd = _this.drawLine(svg, curve_generator(pointsfctd), \"none\", 1, '0','1' ,`setstuTimeDurLinefc_${idN}`, 'setstuTimeDurLine',\"rgb(5, 20, 90)\");\r\n      // let lineavtd = _this.drawLine(svg, pathavtd, \"white\", 1, '0','1' ,`setstuTimeDurLineAv_${idN}`, 'setstuTimeDurLine');\r\n      // let linefcf = _this.drawLine(svg, pathfcf, \"white\", 1, '0','1' ,`setstuScoreLineFcf_${idN}`, 'setstuScoreLine');\r\n      // let linefcz = _this.drawLine(svg, pathfcz, \"white\", 1, '0','1' ,`setstuScoreLineFcz_${idN}`, 'setstuScoreLine');\r\n    },\r\n\r\n    drawRiver(svg, cx, cy, height, width, idN, set) {\r\n      const _this = this;\r\n      // let groupData = \r\n      let data = [];\r\n      let keys = []\r\n      for (let i = 0; i < set.length; i++) {\r\n        let groupVal = set[i]['groupVal']\r\n        let temp = { \"od\": i };\r\n        for (let j = 0; j < groupVal.length; j++) {\r\n          if (keys.indexOf((\"\" + j)) == -1) {\r\n            keys.push(\"\" + j);\r\n          }\r\n          let curScoringRate = groupVal[j]['scoringRate'];\r\n          temp[(\"\" + j)] = curScoringRate;\r\n        }\r\n        data.push(temp)\r\n        // let curScoringRate = \r\n      }\r\n      console.log(data)\r\n      var stack = d3.stack()\r\n        .keys(keys)\r\n        .order(d3.stackOrderInsideOut)\r\n        .offset(d3.stackOffsetWiggle);\r\n\r\n      let yRangeWidth = width;\r\n      let xStep = (width) / (data.length);\r\n      let stackData = stack(data)\r\n      // let maxx = Math.max.apply(Math, stackData.map(function (d) { return Math.max.apply(Math, d.map(function (c) { return c[1]; }));; }));\r\n      // let minx = Math.min.apply(Math, stackData.map(function (d) { return Math.max.apply(Math, d.map(function (c) { return c[1]; })); }));\r\n\r\n      let yScale = d3.scaleLinear().domain([-1, 1]).range([0, height]);\r\n\r\n      var area = d3.area()\r\n\r\n        .curve(d3.curveBasis)\r\n        .x(function (d) {\r\n          return d.data.od * xStep;\r\n        })\r\n        .y0(function (d) {\r\n          return yScale(d[0]);\r\n        })\r\n        .y1(function (d) {\r\n          return yScale(d[1]);\r\n        });\r\n\r\n      // let areaG = svg.append(\"g\")\r\n      let typeColor = _this.stuColorList;\r\n      let colorLi = _this.mcolor;\r\n      for (let i = 0; i < stackData.length; i++) {\r\n\r\n        svg.append(\"path\")\r\n          .attr(\"id\", function (d) { return `${idN}_${stackData[i].key}` })\r\n          .attr(\"class\", \"river\")\r\n          .attr(\"d\", function (d) {\r\n            return area(stackData[i])\r\n          })\r\n          .attr(\"fill\", function (d) {\r\n            return typeColor[stackData[i].key]\r\n          })\r\n          .attr(\"transform\", `translate(${cx},${cy})`)\r\n          .on(\"mouseover\", function (d) {\r\n            d3.selectAll(\".river\")\r\n            // .style(\"filter\", \"url()\")\r\n            d3.select(this)\r\n            // .style(\"filter\", \"url(#coolShadow)\")\r\n          })\r\n      }\r\n    },\r\n    drawBsLine(svg, sx, sy, c1x, c1y, c2x, c2y, tx, ty, stroke, width, opacity, idName, className) {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr(\"class\", className)\r\n        .attr(\"id\", idName)\r\n        .attr('d', function (d) {\r\n          let path = d3.path();\r\n          path.moveTo(sx, sy);\r\n          // path.quadraticCurveTo(cx, cy, tx, ty);\r\n          path.bezierCurveTo(c1x, c1y, c2x, c2y, tx, ty);\r\n          return path.toString();\r\n        })\r\n        .style(\"fill\", \"none\")\r\n        .style('stroke', stroke)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .style('stroke-width', width);\r\n      return line;\r\n    },\r\n    drawTxt(svg, x, y, text, fill, fontsize = 12, idN, an = 'start') {\r\n      let txt = svg.append(\"text\")\r\n        .attr(\"y\", y)\r\n        .attr(\"x\", x)\r\n        .attr(\"id\", idN)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"font-size\", fontsize)\r\n        .style(\"text-anchor\", an)\r\n        .text(text)\r\n      return txt;\r\n    },\r\n    drawLine(svg, path, stroke, width, stroke_dasharray = \"0\", opacity, idName, className, fill = 'none') {\r\n      d3.select(`#${idName}`).remove();\r\n      let line = svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .style(\"stroke-opacity\", opacity)\r\n        .attr('fill', fill)\r\n      return line;\r\n    },\r\n    getTreeData(data) {\r\n      const _this = this;\r\n      let oriData = tools.deepClone(this.data);\r\n      var treeData = {\r\n        \"name\": \"root\",\r\n        \"children\": []\r\n      };\r\n      for (let i = data.length - 1; i >= 0; i--) {\r\n        if (parseInt(data[i]['father']) == -1) {\r\n          treeData['children'].push(data[i]);\r\n        }\r\n        else {\r\n          let fId = data[i]['father'];\r\n          let fatherD = data.find(function (d) { return d['id'] == fId; });\r\n          if (!fatherD['children']) {\r\n            fatherD['children'] = [data[i]]\r\n          }\r\n          else\r\n            fatherD['children'].push(data[i])\r\n        }\r\n      }\r\n      return treeData;\r\n    },\r\n    entHover(idList) {\r\n      for (let i = 0; i < idList.length; i++) {\r\n        let transformd = d3.select(idList[i]).attr(\"transform\");\r\n        d3.select(idList[i])\r\n          .transition().duration(100)\r\n          .attr(\"transform\", function (d) {\r\n            return transformd.split(\"scale\")[0] + \" scale(1.2)\"\r\n          })\r\n        // .style(\"filter\", \"url(#coolShadow)\")\r\n      }\r\n    },\r\n    entRemoveHover(idList) {\r\n      for (let i = 0; i < idList.length; i++) {\r\n        let transformd = d3.select(idList[i]).attr(\"transform\")\r\n        d3.select(idList[i])\r\n          .transition().duration(100)\r\n          .attr(\"transform\", function (d) {\r\n            return transformd.split(\"scale\")[0] + \" scale(1)\"\r\n          }).style(\"filter\", \"url()\")\r\n      }\r\n    },\r\n    drawEntityProblem(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let proData = tools.deepClone(_this.problemsData);\r\n      let idn = pId.split(\"_\")[1];\r\n      let curEnt = proData.find(function (p) {\r\n        return (p.id).toString() == (idn.toString())\r\n      });\r\n      // let attrList =[{attrName:'difficulty',attrValue:curEnt['difficulty']},];\r\n      let attrList = _this.proAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let proMaxMinDR = _this.proMaxMinDR;\r\n      let proMaxMinDC = _this.proMaxMinDC;\r\n      let proAttrMaxMinList = _this.proAttrMaxMinList;\r\n      let currentMaxColor = _this.entProMaxColor;\r\n      let currentMinColor = _this.entProMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([proMaxMinDC[0], proMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([proMaxMinDR[1], proMaxMinDR[0]]).range([20, 40]);\r\n\r\n      let rSize = rSize_linear(curEnt['conCount']);\r\n\r\n      let points = _this.calcRegularPolygonPoints(attrLen, 0, 0, rSize);\r\n      let entColor = importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n\r\n      let entPolygon = _this.drawPolygon(entG, points, `pro_${idn}`, '5px', entColor, entColor);\r\n\r\n      entPolygon.on(\"mouseover\", function (d) {\r\n      })\r\n      let pointsList = [];\r\n      const pathAxis = d3.path();\r\n      pathAxis.moveTo(0, 0);\r\n      for (let i = 0; i < points.length; i++) {\r\n        pathAxis.lineTo(points[i][0], points[i][1]);\r\n        pathAxis.moveTo(0, 0);\r\n        pathAxis.lineTo(points[i][0], points[i][1]);\r\n      }\r\n      pathAxis.lineTo(points[0][0], points[0][1]);\r\n      let rgbValue = tools.getRgbValue(entColor);\r\n      let r = parseInt(rgbValue[0]) * 0.2;\r\n      let g = parseInt(rgbValue[1]) * 0.4;\r\n      let b = parseInt(rgbValue[2]) * 0.7;\r\n      _this.drawPathLine(entG, pathAxis, `rgb(${r},${g},${b})`, 0.2, \"10,3\", `proAxis_${idn}`, \"\");\r\n      // -------------------------\r\n      const path = d3.path();\r\n      let startP = _this.calcattrPoint(attrLen, 0, proAttrMaxMinList[0], curEnt[attrList[0]], 0, 0, rSize)\r\n      path.moveTo(startP[0], startP[1]);\r\n      pointsList.push(startP)\r\n      let startP2 = _this.calcattrPoint(attrLen, 1, proAttrMaxMinList[1], curEnt[attrList[1]], 0, 0, rSize)\r\n      path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1]);\r\n      pointsList.push(startP2)\r\n      for (let i = 2; i < attrLen; i++) {\r\n        let curP = _this.calcattrPoint(attrLen, i, proAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize)\r\n        // path.lineTo(curP[0],curP[1]);\r\n        pointsList.push(curP);\r\n        path.bezierCurveTo(curP[0], curP[1], curP[0], curP[1], curP[0], curP[1])\r\n      }\r\n      path.bezierCurveTo(startP[0], startP[1], startP[0], startP[1], startP[0], startP[1])\r\n\r\n      pointsList.push(startP)\r\n      path.bezierCurveTo(startP2[0], startP2[1], startP2[0], startP2[1], startP2[0], startP2[1])\r\n      pointsList.push(startP2)\r\n      // ----------------\r\n      let curve_generator = d3.line()\r\n        .x((d) => d[0])\r\n        .y((d) => {\r\n          return d[1];\r\n        })\r\n        .curve(d3.curveCatmullRom)\r\n      // .curve(d3.curveBundle)\r\n      _this.drawPolygon(entG, pointsList, `proAttr_${idn}`, '1px', `rgb(${r},${g},${b})`, `rgba(${r},${g},${b},0.3)`);\r\n      // .attr(\"opacity\",\"0.3\")\r\n      // _this.drawPathLine(entG, curve_generator(pointsList), \"rgb(200,200,200)\", 2, \"0\", \"\", \"\");\r\n\r\n    },\r\n    drawEntityConcept(svg, x, y, pId) {\r\n      const _this = this;\r\n      d3.select(\"#\" + pId).remove();\r\n      let entG = svg.append(\"g\").attr(\"id\", pId);\r\n      entG.attr(\"transform\", `translate(${x},${y})`);\r\n      let conData = tools.deepClone(_this.conceptTree);\r\n      let idn = pId.split(\"_\")[1];\r\n      let curEnt = conData.find(function (p) {\r\n        return (p.id).toString() == (idn.toString())\r\n      });\r\n      // let attrList =[{attrName:'difficulty',attrValue:curEnt['difficulty']},];\r\n      let attrList = _this.conAttrList;\r\n\r\n      let attrLen = attrList.length;\r\n\r\n      let conMaxMinDR = _this.conMaxMinDR;\r\n      let conMaxMinDC = _this.conMaxMinDC;\r\n      let conAttrMaxMinList = _this.conAttrMaxMinList;\r\n      let currentMaxColor = _this.entConMaxColor;\r\n      let currentMinColor = _this.entConMinColor;\r\n      let importanceColor_linear = d3.scaleLinear().domain([conMaxMinDC[0], conMaxMinDC[1]]).range([0, 1]);\r\n      let importanceCompute_color = d3.interpolate(currentMinColor, currentMaxColor);\r\n      let rSize_linear = d3.scaleLinear().domain([conMaxMinDR[1], conMaxMinDR[0]]).range([20, 50]);\r\n\r\n      let rSize = rSize_linear(curEnt['proCount']);\r\n\r\n      let points = _this.calcRegularPolygonPoints(attrLen, 0, 0, rSize);\r\n\r\n\r\n      let StartR = 0//Math.PI/4;\r\n      let StepInterR = Math.PI * 2 / 15;\r\n\r\n      let StepR = (Math.PI * 2 - StepInterR * attrLen) / attrLen;\r\n\r\n\r\n      for (let i = 0; i < attrLen; i++) {\r\n        let curP = _this.calcattrPoint(attrLen, i, conAttrMaxMinList[i], curEnt[attrList[i]], 0, 0, rSize);\r\n        let h = _this.calcRsize(conAttrMaxMinList[i], curEnt[attrList[i]], rSize)\r\n        var dataset = { startAngle: StartR + i * (StepR + StepInterR) + StepInterR, endAngle: StartR + (i + 1) * (StepR + StepInterR) }; //创建一个弧生成器\r\n        var arcPath = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h);\r\n        var arcPathBack = d3.arc()\r\n          .innerRadius(1)\r\n          .outerRadius(h + 2);\r\n        var pathArc = arcPath(dataset);\r\n        let entColor = _this.attrColorList[i];//importanceCompute_color(importanceColor_linear(curEnt['scoringRate']));\r\n        // _this.drawArc(entG, 0, 0, arcPathBack(dataset), \"#000\", \"#000\", 'type', 0, 3);\r\n        _this.drawArc(entG, 0, 0, pathArc, entColor, entColor, 'type', 0, 3);\r\n      }\r\n\r\n\r\n\r\n    },\r\n    updateEntity(svg, x, y, pId) {\r\n      const _this = this;\r\n      let entG = svg.select(`#${pId}`);\r\n      let transformd = entG.attr(\"transform\")\r\n      let s = 'scale(1)';\r\n      if (transformd.split(\"scale\").length > 1) {\r\n        s = `scale${transformd.split(\"scale\")[1]}`;\r\n      }\r\n      entG.attr(\"transform\", `translate(${x},${y}) ${s}`);\r\n    },\r\n    drawPolygon(svg, points, idName, strokeWidth, stroke, fill) {\r\n      let polygon = svg.append(\"polygon\")\r\n        .attr(\"points\", points)\r\n        .attr(\"id\", idName)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"stroke\", stroke)\r\n      return polygon;\r\n    },\r\n    drawRect(svg, x, y, w, h, rx, fill, strokeWidth, stroke, opacity, idName, className,strokeDasharray = '0') {\r\n      d3.select(`#${idName}`).remove();\r\n      let rect = svg.append(\"rect\")\r\n        .attr(\"x\", x)\r\n        .attr(\"y\", y)\r\n        .attr(\"width\", w)\r\n        .attr(\"height\", h)\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"fill\", fill)\r\n        .attr(\"rx\", rx)\r\n        .attr(\"stroke\", stroke)\r\n        .attr(\"stroke-width\", strokeWidth)\r\n        .attr(\"stroke-dasharray\", strokeDasharray)\r\n      return rect;\r\n    },\r\n    calcRsize(domin, value, r) {\r\n      let point_linear = d3.scaleLinear().domain([domin[1], domin[0]]).range([r / 3, r]);\r\n      let rarc = point_linear(value);\r\n      return rarc;\r\n    },\r\n    calcattrPoint(totalNum, index, domin, value, x, y, r) {\r\n      const _this = this;\r\n      let arcStep = Math.PI * 2 / totalNum;\r\n      let rarc = _this.calcRsize(domin, value, r);\r\n      let point = [x - Math.sin(arcStep * index) * rarc, y + Math.cos(arcStep * index) * rarc];\r\n      return point\r\n    },\r\n\r\n    calcRegularPolygonPoints(num, x, y, r) {\r\n      let arcStep = Math.PI * 2 / num;\r\n      let points = [];\r\n      for (let i = 0; i < num; i++) {\r\n        points.push([x - Math.sin(arcStep * i) * r, y + Math.cos(arcStep * i) * r])\r\n      }\r\n      return points\r\n    },\r\n    drawPathLine(svg, path, stroke, width, stroke_dasharray = \"0\", idName, className) {\r\n      svg.append('path')\r\n        .attr('d', path.toString())\r\n        .attr('stroke', stroke)\r\n        .attr('class', className)\r\n        .attr('id', idName)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr('stroke-width', width)\r\n        .attr('fill', 'none')\r\n    },\r\n    drawCircle(svg, x, y, r, fill, opacity, stroke, width, className = 'entCircle', idName) {\r\n      const _this = this;\r\n      const oData = _this.data\r\n      let circle = svg.append(\"circle\")\r\n        .attr(\"id\", idName)\r\n        .attr(\"class\", className)\r\n        .attr(\"opacity\", opacity)\r\n        .attr(\"cx\", x)\r\n        .attr(\"cy\", y)\r\n        .attr(\"r\", r)\r\n        .attr('stroke', stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"fill\", fill)\r\n      return circle;\r\n    },\r\n\r\n    drawArc(svg, x, y, arcPath, stroke, fill, className, stroke_dasharray = \"0\", width = 3) {\r\n      svg.append(\"path\")\r\n        .attr(\"d\", arcPath)\r\n        .attr(\"class\", className)\r\n        .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\")\r\n        .attr(\"stroke\", stroke)\r\n        .attr('stroke-width', width)\r\n        .attr(\"stroke-dasharray\", stroke_dasharray)\r\n        .attr(\"stroke-linejoin\", \"round\")\r\n        .attr(\"fill\", fill)\r\n    },\r\n    getMaxMin(data, attrname) {\r\n      return [\r\n        Math.max.apply(Math, data.map(function (d) { return d[attrname]; })),\r\n        Math.min.apply(Math, data.map(function (d) { return d[attrname]; }))\r\n      ]\r\n    },\r\n    updataGraph() {\r\n      var _this = this;\r\n      let margin = _this.margin\r\n      let width = _this.$refs.graphDiv.offsetWidth - margin.left - margin.right;\r\n      let height = document.getElementById(\"graphPanel\").clientHeight - margin.top - margin.bottom;\r\n      _this.width = width;\r\n      _this.height = height;\r\n      d3.select(\"#graphPanel\").select(\"svg\").remove()\r\n      var svg = d3.select(\"#graphPanel\").append(\"svg\")\r\n        .attr(\"width\", width)\r\n        .attr(\"height\", height);\r\n      _this.rootSvg = svg;\r\n      let proData = _this.problemsData;\r\n      let proMaxMinDR = _this.getMaxMin(proData, 'conCount');\r\n      let proMaxMinDC = _this.getMaxMin(proData, 'scoringRate');\r\n\r\n      // let proAttrList = ['scoringRate', 'timeDur', 'totalAttempts',\"totalAttemptsPeople\", 'acceptedRate', 'conCount'];\r\n      let proAttrList = ['scoringRate', 'acceptedRate', 'totalAttempts', 'conCount'];\r\n      _this.proAttrList = proAttrList;\r\n      let proAttrMaxMinList = [];\r\n      for (let i = 0; i < proAttrList.length; i++) {\r\n        proAttrMaxMinList.push(_this.getMaxMin(proData, proAttrList[i]));\r\n      }\r\n      _this.proAttrMaxMinList = proAttrMaxMinList;\r\n      _this.proMaxMinDR = proMaxMinDR;\r\n      _this.proMaxMinDC = proMaxMinDC;\r\n\r\n      let conData = _this.conceptTree;\r\n      let conMaxMinDR = _this.getMaxMin(conData, 'proCount');\r\n      let conMaxMinDC = _this.getMaxMin(conData, 'scoringRate');\r\n\r\n      let conAttrList = ['scoringRate', 'totalAttempts', 'acceptedRate', 'proCount'];\r\n      _this.conAttrList = conAttrList;\r\n      let conAttrMaxMinList = [];\r\n      for (let i = 0; i < conAttrList.length; i++) {\r\n        conAttrMaxMinList.push(_this.getMaxMin(conData, conAttrList[i]));\r\n      }\r\n      _this.conAttrMaxMinList = conAttrMaxMinList;\r\n\r\n      _this.conMaxMinDR = conMaxMinDR;\r\n      _this.conMaxMinDC = conMaxMinDC;\r\n\r\n      this.$bus.$emit(\"Domin\", [proAttrList, proAttrMaxMinList, conAttrList, conAttrMaxMinList]);\r\n      _this.drawMain(svg);\r\n      // });\r\n    },\r\n    click_Ent(time) {\r\n      this.$emit(\"timeDur\", time);\r\n    },\r\n  },\r\n  created() {\r\n    var _this = this;\r\n    let margin = _this.margin\r\n    this.$nextTick(() => {\r\n      // _this.createRel('1234','4321',0);\r\n      // _this.createRel('123','321',0);\r\n      // _this.delRel('1234','4321',0);\r\n\r\n      // _this.getProblems();\r\n      // _this.getConcept();\r\n      // _this.getConceptProblem();\r\n      // _this.getUserProblem();\r\n      // _this.updataGraph();\r\n    });\r\n  },\r\n  mounted() {\r\n    const _this = this;\r\n\r\n    d3.select(\".chartTooltip\").classed(\"hidden\", true);\r\n    // this.updataGraph();\r\n\r\n    this.$bus.$on('stuColorList', (val) => { _this.stuColorList = val; });\r\n    this.$bus.$on('attrColorList', (val) => {\r\n      _this.attrColorList = val;\r\n    });\r\n    this.$bus.$on('groupData', (val) => {\r\n      _this.groupData = val;\r\n    });\r\n    this.$bus.$on('allProblem', (val) => {\r\n      _this.problemsData = val;\r\n      _this.updataGraph();\r\n      _this.updataSelectStudentListColor();\r\n      // _this.updataParallelCoordinatesplotByPro();\r\n    });\r\n    this.$bus.$on('Submission', (val) => {\r\n      _this.submissionsData = val;\r\n    });\r\n    this.$bus.$on('Student', (val) => {\r\n      _this.studentsData = val;\r\n    });\r\n    this.$bus.$on('proSet', (val) => {\r\n      _this.proSetOriData = val;\r\n    });\r\n    this.$bus.$on('Pro_Con', (val) => {\r\n      _this.problemConceptData = val;\r\n    });\r\n    this.$bus.$on('SelectedStu', (val) => {\r\n      _this.SelectStudentList = val;\r\n      // _this.calStudent();\r\n    });\r\n    this.$bus.$on('SelectingStu', (val) => {\r\n      _this.SelectingStudentId = val;\r\n    });\r\n    this.$bus.$on('SelectingCon', (val) => {\r\n      _this.SelectingConId = val;\r\n    });\r\n    this.$bus.$on('SelectingPro', (val) => {\r\n      _this.SelectingProId = val;\r\n    });\r\n    // this.$bus.$on('Concept', (val) => {\r\n    //   _this.conceptsData = val;\r\n    // });\r\n    this.$bus.$on('ConceptTree', (val) => {\r\n      _this.conceptTree = val;\r\n    });\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseover\", _this.moveGraphLeft); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mousemove\", _this.moveGraphRight); // 监听点击事件\r\n    // this.$refs.moveGraphLeft.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n    // this.$refs.moveGraphRight.addEventListener(\"mouseleave\", _this.leaveGraphMove); // 监听点击事件\r\n\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.moveTimer);\r\n  },\r\n} \r\n</script>\r\n\r\n<style>@import './index.css';</style>\r\n"]}]}